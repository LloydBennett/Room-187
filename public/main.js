/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/classes/Components.js":
/*!***********************************!*\
  !*** ./app/classes/Components.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Components)
/* harmony export */ });
/* harmony import */ var _utils_create__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/create */ "./app/utils/create.js");

class Components {
  constructor({
    elements
  }) {
    this.selectors = {
      ...elements
    };
    Components.prototype.create = _utils_create__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.create();
  }
}

/***/ }),

/***/ "./app/classes/Page.js":
/*!*****************************!*\
  !*** ./app/classes/Page.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Page)
/* harmony export */ });
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");
/* harmony import */ var gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/SplitText */ "./node_modules/gsap/SplitText.js");
/* harmony import */ var _utils_create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/create */ "./app/utils/create.js");





class Page {
  constructor({
    id = 'default',
    elements = {}
  } = {}) {
    this.id = id;
    this.selectors = {
      ...elements,
      overlay: '[data-page-transition]',
      slideOne: '[data-page-transition-slide-one]',
      slideTwo: '[data-page-transition-slide-two]',
      loader: '[data-loader]',
      images: '[data-loader-image]',
      imageHero: '[data-loader-hero]',
      mainTitles: '[data-hero] [data-split-text]',
      misc: '[data-misc]',
      page: '[data-page]',
      body: 'body',
      bg: '[data-bg]',
      navBar: '[data-nav-bar]',
      altImg: '[data-alt-hero-img]'
    };
    Page.prototype.create = _utils_create__WEBPACK_IMPORTED_MODULE_1__["default"];
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase, gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__.SplitText);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase.create("zoom", "0.71, 0, 0.06, 1");
    this.lScroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_0__.scroll;
    this.create();
  }
  show(isFirstVisit) {
    return new Promise(resolve => {
      let tl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
      const hasHeroImg = this.hasHeroImage;
      if (!this.elements.body.classList.contains('no--scrolling')) {
        this.preventScrolling();
      }
      if (isFirstVisit) {
        this.zoomAnimation(tl, isFirstVisit);
      } else if (hasHeroImg) {
        this.zoomAnimation(tl, isFirstVisit);
      }
      this.animateAssets(tl, resolve);
    });
  }
  hide() {
    return new Promise(resolve => {
      let animOut = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
      animOut.to(this.elements.overlay, {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
        duration: 0.6,
        ease: "zoom"
      });
      animOut.to(this.elements.slideTwo, {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
        duration: 0.6,
        ease: "zoom"
      }).add(resolve);
    });
  }
  zoomAnimation(tl, showFullAnim) {
    if (!this.elements.images) return;
    const pageName = this.elements.page?.dataset?.page || '';
    const isErrorPage = pageName === 'error';
    const hasHeroImg = this.hasHeroImage;
    let smallHeroImg = document.querySelector('[data-image-hero="small"]');
    if (isErrorPage) {
      tl.to(this.elements.loader, {
        display: "flex",
        duration: 0.01
      });
      this.showImages(tl, false);
      tl.to({}, {
        onComplete: () => {
          this.elements.loader.classList.add('bg--error');
        }
      }, "-=0.8");
      tl.to(this.elements.loader, {
        display: "none",
        duration: 0.01,
        onComplete: () => {
          this.elements.loader.classList.remove('bg--error');
        }
      }, "+=0.6");
    } else {
      tl.to(this.elements.loader, {
        display: "flex",
        duration: 0.01
      });
      this.showImages(tl, showFullAnim);
      if (hasHeroImg) {
        if (smallHeroImg) {
          this.elements.imageHero.style.top = 0;
        }
        tl.to(this.elements.imageHero, {
          opacity: 1,
          duration: 0.04,
          ease: "linear"
        }, "+=0.15");
        tl.to(this.elements.imageHero, {
          scale: 1,
          clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
          duration: 0.6,
          ease: "zoom"
        }, "+=0.4");
        if (smallHeroImg) {
          let imgHeight = smallHeroImg.offsetHeight;
          let loaderImgs = document.querySelectorAll('[data-loader-image]:not([data-loader-hero])');
          tl.to(loaderImgs, {
            opacity: 0,
            duration: 0.01,
            ease: "linear"
          }).to(this.elements.imageHero, {
            height: imgHeight,
            duration: 0.6,
            ease: "zoom"
          });
        }
        tl.to(this.elements.loader, {
          display: "none",
          duration: 0.01,
          onComplete: () => {
            tl.to(this.elements.imageHero, {
              scale: 0.5,
              clipPath: "polygon(20% 10%, 80% 10%, 80% 90%, 20% 90%)",
              duration: 0.01
            });
            if (smallHeroImg) {
              this.elements.imageHero.style.height = '';
              this.elements.imageHero.style.top = '';
            }
          }
        });
      } else {
        tl.to(this.elements.loader, {
          display: "none",
          duration: 0.01
        }, "+=0.6");
      }
    }
    tl.to(this.elements.images, {
      opacity: 0,
      duration: 0.01,
      ease: "linear"
    });
  }
  showImages(tl, showFullAnim) {
    if (showFullAnim) {
      this.elements.images.forEach((img, i) => {
        tl.to(img, {
          opacity: 1,
          duration: 0.04,
          ease: "linear"
        }, "+=0.15");
      });
    } else {
      for (let i = 0; i < Math.min(4, this.elements.images.length); i++) {
        tl.to(this.elements.images[i], {
          opacity: 1,
          duration: 0.04,
          ease: "linear"
        }, "+=0.15");
      }
    }
  }
  animateAssets(tl, resolve) {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.overlay, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)"
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.slideTwo, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)"
    });
    if (!this.elements.mainTitles || this.elements.mainTitles.length === 0) {
      console.warn('mainTitles not found or empty:', this.elements.mainTitles);
    }
    document.fonts.ready.then(() => {
      const heroTitles = this.elements.mainTitles instanceof NodeList || Array.isArray(this.elements.mainTitles) ? Array.from(this.elements.mainTitles) : this.elements.mainTitles ? [this.elements.mainTitles] : [];
      const allLines = [];
      heroTitles.forEach(el => {
        const split = gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__.SplitText.create(el, {
          type: "lines",
          lineClass: "line",
          mask: "lines",
          autoSplit: true
        });
        allLines.push(split.lines);
      });
      allLines.forEach((text, i) => {
        tl.fromTo(text, {
          y: "100%"
        }, {
          y: "0",
          duration: 0.8,
          ease: "zoom",
          stagger: 0.05
        }, "titles -=0.2");
      });
      if (this.elements.altImg) {
        tl.fromTo(this.elements.altImg, {
          y: "20%",
          opacity: 0
        }, {
          y: 0,
          opacity: 1,
          duration: 0.4,
          ease: "power2.out"
        }, '-=0.6');
      }
      tl.fromTo(this.elements.misc, {
        opacity: 0
      }, {
        opacity: 1,
        duration: 0.8,
        ease: 'power2.out'
      });
      tl.call(() => {
        this.enableScrolling();
        resolve();
      });
    });
  }
  preventScrolling() {
    this.lScroll.stop();
    document.documentElement.style.overflow = 'hidden';
    this.elements.body.classList.add('no--scrolling');
  }
  enableScrolling() {
    this.elements.body.classList.remove("no--scrolling");
    document.documentElement.style.overflow = '';
    this.lScroll.start();
  }
  get hasHeroImage() {
    return this.elements.imageHero && !this.elements.imageHero.classList.contains('hidden');
  }
}

/***/ }),

/***/ "./app/components/Hero.js":
/*!********************************!*\
  !*** ./app/components/Hero.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Preloader)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");


class Preloader extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        heroImg: '[data-image-hero]',
        heroContent: '[data-hero-content]',
        heroBg: '[data-image-hero] [data-bg]'
      }
    });
    this.mm = gsap__WEBPACK_IMPORTED_MODULE_1__["default"].matchMedia();
    this.scrollAnim();
  }
  create() {
    super.create();
  }
  scrollAnim() {
    if (!this.elements.heroContent) return;
    let size = this.getHeroImageSize();
    let startPos = size === "large" ? '50% center' : '50% 40%';
    if (size === "small") {
      this.mm.add("(max-width: 549px)", () => {
        this.heroContentAnim('50% center');
        this.heroImgAnim(startPos);
      });
      this.mm.add("(min-width: 550px) and (max-width: 1199px)", () => {
        this.heroContentAnim('80% center');
        this.heroImgAnim('80% center');
      });
      this.mm.add("(min-width: 1200px)", () => {
        this.heroContentAnim(startPos);
        this.heroImgAnim(startPos);
      });
    } else {
      this.heroContentAnim(startPos);
      this.heroImgAnim(startPos);
    }
  }
  getHeroImageSize() {
    return this.elements.heroImg.getAttribute('data-image-hero');
  }
  heroContentAnim(pos) {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(this.elements.heroContent, {
      opacity: 1
    }, {
      opacity: 0.1,
      scrollTrigger: {
        trigger: this.elements.heroContent,
        start: pos,
        scrub: true,
        markers: false
      },
      ease: "power2.out"
    });
  }
  heroImgAnim(pos) {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(this.elements.heroBg, {
      scale: 1
    }, {
      scale: 1.5,
      duration: 0.6,
      scrollTrigger: {
        trigger: this.elements.heroContent,
        start: pos,
        scrub: true,
        markers: false
      },
      ease: "power2.out"
    });
  }
}

/***/ }),

/***/ "./app/components/Navigation.js":
/*!**************************************!*\
  !*** ./app/components/Navigation.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Navigation)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");




class Navigation extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        menu: '[data-nav-menu]',
        trigger: '[data-nav-trigger]',
        body: 'body',
        navBar: '[data-nav-bar]',
        navLinks: '[data-menu-links]',
        navLinkText: '.nav-menu .nav-menu-list__item [data-nav-link-text]',
        navLinkHover: '[data-nav-hover]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__["default"]);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__["default"].create("zoom", "0.71, 0, 0.06, 1");
    this.tl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
    this.isAnimating = false;
    this.isOpen = false;
    this.scroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__.scroll;
    this.filterId = '#filter-4';
    this.feTurbulence = document.querySelector(`${this.filterId} > feTurbulence`);
    this.primitiveValues = {
      turbulence: 0
    };
    this.createLinkTimeLine();
    this.addEventListeners();
  }
  create() {
    super.create();
  }
  addEventListeners() {
    if (!this.elements.trigger || !this.elements.navLinks) return;
    this.elements.trigger.addEventListener('click', () => {
      if (!this.isAnimating) {
        this.isAnimating = true;
        this.isOpen ? this.closeMenu() : this.openMenu();
      }
    });
    this.elements.navLinks.forEach(link => {
      let linkHover = link.nextElementSibling;
      if (!linkHover) return;
      let linkTl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
        paused: true,
        onStart: () => {
          linkHover.style.filter = `url(${this.filterId})`;
        },
        onComplete: () => {
          linkHover.style.filter = 'none';
        },
        onUpdate: () => {
          this.feTurbulence.setAttribute('baseFrequency', this.primitiveValues.turbulence);
        }
      });
      let onMouseEnterFn = () => linkTl.restart();
      let onMouseLeaveFn = () => linkTl.progress(1).kill();
      link.addEventListener('mouseenter', onMouseEnterFn);
      link.addEventListener('mouseleave', onMouseLeaveFn);
      linkTl.to(this.primitiveValues, {
        duration: 0.6,
        ease: "steps(12)",
        startAt: {
          turbulence: 0.02
        },
        turbulence: 0
      });
    });
  }
  openMenu() {
    this.isOpen = true;
    this.scroll.stop();
    this.elements.trigger.classList.add('open');
    this.elements.menu.classList.add('show');
    console.log(this.elements.navLinkText);
    this.tl.to(this.elements.menu, {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom"
    });
    this.tl.fromTo(this.elements.navLinkText, {
      y: "100%"
    }, {
      y: 0,
      duration: 0.8,
      ease: "zoom",
      onComplete: () => {
        this.isAnimating = false;
      }
    }, '-=0.1');
  }
  closeMenu() {
    this.elements.trigger.classList.remove('open');
    this.tl.to(this.elements.menu, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom"
    });
    console.log(this.elements.navLinkText);
    this.tl.fromTo(this.elements.navLinkText, {
      y: 0
    }, {
      y: "100%",
      duration: 0.01,
      onComplete: () => {
        this.isAnimating = false;
        this.isOpen = false;
        this.elements.menu.classList.remove('show');
        this.scroll.start();
      }
    });
  }
  createLinkTimeLine() {
    this.linkTl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
      paused: true,
      onStart: () => {
        this.elements.navLinks.forEach(link => {
          let linkHover = link.querySelector('[data-nav-hover]');
          if (linkHover) linkHover.style.filter = `url(${this.filterId})`;
        });
      },
      onComplete: () => {
        this.elements.navLinks.forEach(link => {
          let linkHover = link.querySelector('[data-nav-hover]');
          if (linkHover) linkHover.style.filter = 'none';
        });
      }
    });
  }
}

/***/ }),

/***/ "./app/components/Stats.js":
/*!*********************************!*\
  !*** ./app/components/Stats.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Stats)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollTrigger */ "./node_modules/gsap/ScrollTrigger.js");



class Stats extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        stats: '[data-stats]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger);
    this.setUpScrollTrigger();
  }
  setUpScrollTrigger() {
    if (this.elements.stats !== null) {
      if (Array.isArray(this.elements.stats) || typeof this.elements.stats === 'object') {
        this.elements.stats.forEach(stats => {
          gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
            trigger: stats,
            start: "top bottom",
            onEnter: () => this.count(stats),
            markers: false
          });
        });
      } else {
        gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
          trigger: this.elements.stats,
          start: "top bottom",
          onEnter: () => this.count(this.elements.stats),
          markers: false
        });
      }
    } else {
      return;
    }
  }
  count(stats) {
    let interval = 2000;
    let n = 1;
    let statsNum = parseInt(stats.getAttribute('data-stats'));
    let startVal = statsNum > 1000 ? statsNum - 500 : 0;
    let endVal = statsNum;
    let duration = Math.floor(interval / endVal);
    let counter = setInterval(() => {
      startVal += n;
      stats.textContent = new Intl.NumberFormat().format(startVal);
      if (startVal === endVal) {
        clearInterval(counter);
      }
    }, duration);
  }
}

/***/ }),

/***/ "./app/components/SubscriptionForm.js":
/*!********************************************!*\
  !*** ./app/components/SubscriptionForm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SubscriptionForm)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");



class SubscriptionForm extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        form: '[data-subscription-form]',
        submitBtn: '[data-subscription-submit-btn]',
        input: 'input[name="email"]',
        toast: '[data-toast]',
        toastText: '[data-toast-message]',
        inputLine: '[data-input-line]',
        inputMessage: '[data-input-message]',
        closeToastIcon: '[data-toast-close]',
        toastIcon: '[data-toast-icon]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_2__["default"]);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_2__["default"].create("zoom", "0.71, 0, 0.06, 1");
    this.isToastOpen = false;
    this.toastTimeoutId = null;
    this.init();
  }
  create() {
    super.create();
  }
  updateToast(message, type = 'info') {
    this.elements.toastText.textContent = message;
    this.elements.toast.classList.add(`${type}`);
    this.elements.toastIcon.classList.add(`toast-icon--${type}`);
    if (type === 'error') {
      this.elements.toast.classList.remove('success', 'loading');
      this.elements.toastIcon.classList.remove('toast-icon--success', 'toast-icon--loading');
    } else if (type === 'success') {
      this.elements.toast.classList.remove('error', 'loading');
      this.elements.toastIcon.classList.remove('toast-icon--error', 'toast-icon--loading');
    } else {
      this.elements.toast.classList.remove('error', 'success');
      this.elements.toastIcon.classList.remove('toast-icon--error', 'toast-icon--success');
    }
    this.animateToast();
  }
  updateInputField(message, type) {
    if (type === 'error') {
      this.elements.inputLine.classList.add('error');
      this.elements.inputMessage.classList.add('error__text');
      this.elements.inputMessage.textContent = message;
    } else {
      this.elements.inputLine.classList.remove('error');
      this.elements.inputMessage.classList.remove('error__text');
      this.elements.inputMessage.textContent = "";
    }
  }
  animateToast() {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.toast, {
      y: 0,
      opacity: 1,
      duration: 0.6,
      ease: 'zoom',
      onComplete: () => {
        this.isToastOpen = true;

        // Clear any existing timeout before setting a new one
        if (this.toastTimeoutId) {
          clearTimeout(this.toastTimeoutId);
        }
        this.toastTimeoutId = setTimeout(() => {
          this.closeToast();
          this.toastTimeoutId = null;
        }, 8000);
      }
    });
  }
  closeToast() {
    // If timeout exists, clear it so it doesn't trigger after manual close
    if (this.toastTimeoutId) {
      clearTimeout(this.toastTimeoutId);
      this.toastTimeoutId = null;
    }
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.toast, {
      y: '200%',
      opacity: 0,
      duration: 0.6,
      ease: 'zoom',
      onComplete: () => {
        this.isToastOpen = false;
      }
    });
  }
  addEventListener() {
    this.elements.closeToastIcon.addEventListener("click", () => {
      this.closeToast();
    });
    this.elements.submitBtn.addEventListener("click", async e => {
      const email = this.elements.input.value.trim();

      // Client-side email regex validation
      const validEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      if (!validEmail) {
        this.updateInputField("Please enter a valid email address.", "error");
        this.updateToast("Email address not valid", "error");
        return;
      }

      // Honeypot trap (invisible input field, added below)
      const botTrap = document.getElementById("bot-field");
      if (botTrap && botTrap.value) {
        return; // silently ignore
      }
      this.updateToast("Subscribing", "loading");
      try {
        const res = await fetch("/subscribe", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            email
          })
        });
        const result = await res.json();
        if (res.ok) {
          this.updateInputField("", "success");
          this.updateToast(result.message, "success");
        } else {
          this.updateInputField("", "");
          this.updateToast(result.error || "Something went wrong. Try again.", "error");
        }
      } catch (err) {
        this.updateToast("Server error. Please try again later.", "error");
        this.updateInputField("", "");
      }
    });
  }
  init() {
    this.addEventListener();
  }
}

/***/ }),

/***/ "./app/components/TextSplit.js":
/*!*************************************!*\
  !*** ./app/components/TextSplit.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextSplit)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollTrigger */ "./node_modules/gsap/ScrollTrigger.js");
/* harmony import */ var gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/SplitText */ "./node_modules/gsap/SplitText.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");





class TextSplit extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        textOnScroll: '[data-split-text="scroll"]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger, gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase, gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__.SplitText);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase.create("zoom", "0.71, 0, 0.06, 1");
    this.init();
  }
  init() {
    if (!this.elements.textOnScroll) {
      console.warn('No text elements found in the DOM.');
      return;
    }
    this.splitText(this.elements.textOnScroll);
  }
  splitText(text) {
    if (!text || text.length === 0) {
      console.warn('mainTitles not found or empty:', this.elements.textOnScroll);
      return;
    }
    document.fonts.ready.then(() => {
      const elements = Array.isArray(text) || text instanceof NodeList ? Array.from(text) : [text];
      elements.forEach(el => {
        const split = gsap_SplitText__WEBPACK_IMPORTED_MODULE_4__.SplitText.create(el, {
          type: "lines",
          lineClass: "line",
          mask: "lines",
          autoSplit: true,
          onSplit: self => {
            return TextSplit.scrollAnimateText(el, self.lines);
          }
        });
      });
    });
  }
  static scrollAnimateText(text, lines) {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(lines, {
      y: "100%"
    }, {
      y: 0,
      duration: 0.8,
      ease: "zoom",
      stagger: 0.05,
      scrollTrigger: {
        trigger: text,
        start: '50% bottom',
        markers: false,
        scrub: false
      }
    });
  }
}

/***/ }),

/***/ "./app/components/VideoPlayer.js":
/*!***************************************!*\
  !*** ./app/components/VideoPlayer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");




class VideoPlayer extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        trigger: '[data-play]',
        videoBg: '[data-play-bg]',
        closeBtn: '[data-close]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase.create("zoom", "0.71, 0, 0.06, 1");
    this.tl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
    this.video = null;
    this.videoOverlay = null;
    this.videoBg = null;
    this.scroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__.scroll;
    this.isOverlayOpen = false;
    this.addEventListeners();
  }
  create() {
    super.create();
  }
  addEventListeners() {
    if (this.elements.trigger !== null) {
      if (Array.isArray(this.elements.trigger) || typeof this.elements.trigger === 'object') {
        this.elements.trigger.forEach(btn => {
          btn.addEventListener('click', () => {
            this.playVideo(btn);
          });
        });
      } else {
        this.elements.trigger.addEventListener('click', e => {
          this.playVideo(this.elements.trigger);
        });
      }
    } else {
      return;
    }
    this.elements.closeBtn.addEventListener('click', () => {
      this.closePlayer();
    });
  }
  playVideo(trigger) {
    let videoID = trigger.getAttribute('data-play');
    let video = document.querySelector(`[data-video=${videoID}]`);
    this.video = video;
    if (trigger.hasAttribute('data-open-video-overlay')) {
      let videoOverlay = document.querySelector(`[data-video-overlay=${videoID}]`);
      this.isOverlayOpen = true;
      this.videoOverlay = videoOverlay;
      videoOverlay.classList.add('open');
      this.scroll.stop();
      this.tl.to(videoOverlay, {
        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
        duration: 0.6,
        ease: "zoom"
      });
      this.tl.to(this.elements.closeBtn, {
        opacity: 1,
        duration: 0.3,
        ease: "power2.out"
      });
      this.tl.to(video, {
        opacity: 1,
        duration: 0.4,
        ease: "power2.out",
        onComplete: () => {
          video.play();
        }
      }, "+=0.4");
    } else {
      this.tl.to(trigger, {
        opacity: 0,
        duration: 0.4,
        ease: "power2.out"
      });
      video.play();
      video.addEventListener('ended', () => {
        this.closePlayer();
        video.load();
        this.tl.to(trigger, {
          opacity: 1,
          duration: 0.4,
          ease: "power2.out"
        });
      });
    }
  }
  closePlayer() {
    this.video.pause();
    if (this.isOverlayOpen) {
      this.tl.to(this.videoOverlay, {
        clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
        duration: 0.4,
        ease: "power2.out",
        onComplete: () => {
          this.videoOverlay.classList.remove('open');
          this.video.currentTime = 0;
          this.tl.to(this.elements.closeBtn, {
            opacity: 0,
            duration: 0.001
          });
          this.tl.to(this.video, {
            opacity: 0,
            duration: 0.001,
            ease: "power2.out"
          });
          this.scroll.start();
          this.isOverlayOpen = false;
        }
      });
    } else {
      this.video.currentTime = 0;
    }
  }
}

/***/ }),

/***/ "./app/components/tooltip.js":
/*!***********************************!*\
  !*** ./app/components/tooltip.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tooltip)
/* harmony export */ });
/* harmony import */ var classes_Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Components */ "./app/classes/Components.js");


class Tooltip extends classes_Components__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      elements: {
        tooltip: '[data-tooltip]',
        tooltipItem: '[data-tooltip-item]'
      }
    });
    this.init();
  }
  addEventListener() {
    const tooltipItems = this.elements.tooltipItem;
    if (!tooltipItems) return;
    const isList = tooltipItems instanceof NodeList || Array.isArray(tooltipItems);
    const items = isList ? tooltipItems : [tooltipItems];
    items.forEach(item => {
      const tooltip = item.querySelector("[data-tooltip]");
      if (!tooltip) return;
      item.addEventListener("mousemove", e => {
        const rect = item.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        tooltip.style.left = `${x}px`;
        tooltip.style.top = `${y}px`;
      });
      item.addEventListener("mouseenter", () => {
        tooltip.style.opacity = 1;
      });
      item.addEventListener("mouseleave", () => {
        tooltip.style.opacity = 0;
      });
    });
  }
  init() {
    this.addEventListener();
  }
}

/***/ }),

/***/ "./app/index.js":
/*!**********************!*\
  !*** ./app/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! gsap/ScrollTrigger */ "./node_modules/gsap/ScrollTrigger.js");
/* harmony import */ var classes_Page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classes/Page */ "./app/classes/Page.js");
/* harmony import */ var pages_About__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pages/About */ "./app/pages/About/index.js");
/* harmony import */ var pages_Home__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pages/Home */ "./app/pages/Home/index.js");
/* harmony import */ var pages_Gallery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pages/Gallery */ "./app/pages/Gallery/index.js");
/* harmony import */ var _pages_Contact__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/Contact */ "./app/pages/Contact/index.js");
/* harmony import */ var components_Navigation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! components/Navigation */ "./app/components/Navigation.js");
/* harmony import */ var components_TextSplit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! components/TextSplit */ "./app/components/TextSplit.js");
/* harmony import */ var _components_VideoPlayer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/VideoPlayer */ "./app/components/VideoPlayer.js");
/* harmony import */ var _components_Stats__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/Stats */ "./app/components/Stats.js");
/* harmony import */ var _components_Hero__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/Hero */ "./app/components/Hero.js");
/* harmony import */ var _components_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/tooltip */ "./app/components/tooltip.js");
/* harmony import */ var _components_SubscriptionForm__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/SubscriptionForm */ "./app/components/SubscriptionForm.js");















class App {
  constructor() {
    this.lenisScroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_0__.scroll;
    this.isFirstVisit;
    this.bootstrap();
    this.createNavigation();
  }
  setUpScrollTrigger() {
    gsap__WEBPACK_IMPORTED_MODULE_13__["default"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_14__.ScrollTrigger);
    this.lenisScroll.on('scroll', gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_14__.ScrollTrigger.update);
    gsap__WEBPACK_IMPORTED_MODULE_13__["default"].ticker.add(time => {
      this.lenisScroll.raf(time * 1000);
    });
    gsap__WEBPACK_IMPORTED_MODULE_13__["default"].ticker.lagSmoothing(0);
  }
  createVideoPlayer() {
    this.videoPlayer = new _components_VideoPlayer__WEBPACK_IMPORTED_MODULE_8__["default"]();
  }
  createStats() {
    this.stats = new _components_Stats__WEBPACK_IMPORTED_MODULE_9__["default"]();
  }
  createHero() {
    this.hero = new _components_Hero__WEBPACK_IMPORTED_MODULE_10__["default"]();
  }
  addSplitText() {
    this.textSplit = new components_TextSplit__WEBPACK_IMPORTED_MODULE_7__["default"]();
  }
  createPreloader() {
    this.preloader = new Preloader();
  }
  createTooltip() {
    this.tooltip = new _components_tooltip__WEBPACK_IMPORTED_MODULE_11__["default"]();
  }
  createNavigation() {
    this.navigation = new components_Navigation__WEBPACK_IMPORTED_MODULE_6__["default"]();
  }
  createContent() {
    this.content = document.querySelector('.main');
    this.template = this.content.getAttribute('data-page');
  }
  createSubscriptionForm() {
    this.subscriptionForm = new _components_SubscriptionForm__WEBPACK_IMPORTED_MODULE_12__["default"]();
  }
  async initPages() {
    const pageClasses = {
      home: pages_Home__WEBPACK_IMPORTED_MODULE_3__["default"],
      about: pages_About__WEBPACK_IMPORTED_MODULE_2__["default"],
      gallery: pages_Gallery__WEBPACK_IMPORTED_MODULE_4__["default"],
      contact: _pages_Contact__WEBPACK_IMPORTED_MODULE_5__["default"]
    };
    const id = this.template;
    const PageClass = pageClasses[id] || classes_Page__WEBPACK_IMPORTED_MODULE_1__["default"];
    this.isFirstVisit = this.isFirstVisit === undefined;
    this.page = new PageClass();
    await this.page.show(this.isFirstVisit);
    this.isFirstVisit = false;
  }
  onPopState() {
    this.onChange({
      url: window.location.pathname,
      push: false
    });
  }
  async onChange({
    url,
    push = true
  }) {
    const animations = this.page && this.page.hide ? [this.page.hide()] : [];
    const req = await window.fetch(url);
    if (this.navigation.isOpen) {
      new Promise(resolve => {
        setTimeout(() => {
          this.navigation.closeMenu();
          resolve();
        }, 300);
      });
    }
    await Promise.all(animations);
    if (req.status === 200) {
      const html = await req.text();
      const div = document.createElement('div');
      if (push) {
        window.history.pushState({}, "", url);
      }
      div.innerHTML = html;
      const title = document.querySelector('title');
      const newTitleText = div.querySelector('title').innerText;
      title.innerHTML = newTitleText;
      this.createNewPage(div);
      await this.init();
    } else {
      console.log('Error loading page!');
    }
  }
  createNewPage(div) {
    const body = document.querySelector('body');
    const divContent = div.querySelector('.main');
    const loaderHero = document.querySelector('[data-loader-hero]');
    const loaderImg = document.querySelector('[data-loader-image] [data-bg]');
    const newList = divContent.classList;
    this.content.classList.remove(this.template);
    this.content.classList.add(...newList);
    this.template = divContent.getAttribute('data-page');
    this.content.setAttribute('data-page', this.template);
    if (this.template !== "error") {
      if (body.classList.contains('error')) {
        body.classList.remove('error');
      }
    } else {
      body.classList.add('error');
    }
    this.content.innerHTML = divContent.innerHTML;
    let newImg = this.content.querySelector('[data-image-hero] [data-bg]');
    if (newImg) {
      let style = window.getComputedStyle(newImg);
      let backgroundImage = style.backgroundImage;
      let url = backgroundImage.replace(/^url\(["']?/, '').replace(/["']?\)$/, '');
      loaderImg.style.backgroundImage = `url("${url}")`;
      if (loaderHero.classList.contains('hidden')) {
        loaderHero.classList.remove('hidden');
      }
    } else {
      if (!loaderImg.classList.contains('hidden')) {
        loaderHero.classList.add('hidden');
      }
    }
  }
  addEventListeners() {
    window.addEventListener('popstate', this.onPopState.bind(this));
  }
  async bootstrap() {
    await this.init();
  }
  addLinkListeners() {
    const links = document.querySelectorAll('[data-page-trigger]');
    links.forEach(l => {
      l.onclick = event => {
        event.preventDefault();
        const href = l.href;
        this.transitionType = l.dataset.pageTrigger;
        if (href === window.location.href) return;
        this.onChange({
          url: href
        });
      };
    });
  }
  async init() {
    this.addSplitText();
    this.createContent();
    await this.initPages();
    this.addLinkListeners();
    this.createVideoPlayer();
    this.createStats();
    this.createHero();
    this.createTooltip();
    this.createSubscriptionForm();
  }
}
new App();

/***/ }),

/***/ "./app/pages/About/index.js":
/*!**********************************!*\
  !*** ./app/pages/About/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ About)
/* harmony export */ });
/* harmony import */ var classes_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Page */ "./app/classes/Page.js");
/* harmony import */ var lenis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lenis */ "./node_modules/lenis/dist/lenis.mjs");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");
/* harmony import */ var gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap/SplitText */ "./node_modules/gsap/SplitText.js");
/* harmony import */ var components_TextSplit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! components/TextSplit */ "./app/components/TextSplit.js");
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");







class About extends classes_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      id: 'about',
      elements: {
        bioTrigger: '[data-bio-trigger]',
        close: '[data-bio-overlay-modal] [data-close]',
        bioOverlay: '[data-bio-overlay-modal]',
        bioContainer: '[data-bio-overlay-content]',
        body: 'body'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_3__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_4__.CustomEase, gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_4__.CustomEase.create("zoom", "0.71, 0, 0.06, 1");
    this.pageScroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_2__.scroll;
    this.isOpen = false;
    this.tl = new gsap__WEBPACK_IMPORTED_MODULE_3__["default"].timeline();
    this.mm = gsap__WEBPACK_IMPORTED_MODULE_3__["default"].matchMedia();
    this.addEventListeners();
  }
  onPopState() {
    this.onChange({
      url: window.location.pathname,
      push: false
    });
  }
  async onChange({
    url,
    push = true
  }) {
    if (push) {
      this.previousUrl = window.location.pathname;
      window.history.pushState({}, "", url);
    }
    const req = await window.fetch(url);
    if (req.status === 200) {
      const html = await req.text();
      const div = document.createElement('div');
      div.innerHTML = html;
      if (push) {
        window.history.pushState({}, "", url);
      }
      const divContent = div.querySelector('[data-inner-content]');
      this.elements.bioContainer.innerHTML = divContent.innerHTML;
      this.elements.bioImage = this.elements.bioContainer.querySelector('[data-bio-image]');
      this.elements.mainTitles = this.elements.bioContainer.querySelectorAll('[data-bio-overlay-modal] [data-hero] [data-text-reveal]');
      this.elements.bioText = this.elements.bioContainer.querySelector('.bio__content [data-split-text]');
      this.elements.bioRole = this.elements.bioContainer.querySelector('[data-bio-overlay-modal] .bio__role [data-split-text]');
      if (!this.modalScroll) {
        this.init();
      } else {
        this.modalScroll.resize();
      }
      this.setAnimationPositions();
      this.animateContent();
    }
  }
  removeContent() {
    this.elements.bioContainer.innerHTML = "";
  }
  openModal() {
    if (this.isOpen) return;
    this.pageScroll.stop();
    this.elements.body.classList.add('no-scrolling');
    this.tl.to(this.elements.bioOverlay, {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom"
    });
  }
  closeModal() {
    this.tl.to(this.elements.bioOverlay, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom",
      onComplete: () => {
        this.isOpen = false;
        this.setAnimationPositions();
        this.removeContent();
        this.pageScroll.start();
      }
    });
  }
  animateContent() {
    const tl = gsap__WEBPACK_IMPORTED_MODULE_3__["default"].timeline();
    this.tl.to(this.elements.mainTitles, {
      y: 0,
      duration: 0.8,
      ease: "zoom",
      stagger: (i, target) => target.dataset.textReveal ? 0.05 * Number(target.dataset.textReveal) : 0.05
    }, '-=0.3');
    this.tl.to(this.elements.bioRole, {
      y: 0,
      duration: 0.8,
      ease: "zoom"
    }, '-=0.6');
    document.fonts.ready.then(() => {
      const split = gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText.create(this.elements.bioText, {
        type: "lines",
        lineClass: "line",
        mask: "lines",
        autoSplit: true,
        onSplit: self => {
          return this.animateBodyText(this.elements.bioText, self.lines);
        }
      });
    });
    this.tl.to(this.elements.bioImage, {
      y: 0,
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    }, '-=0.6');
    this.tl.to(this.elements.close, {
      opacity: 1,
      duration: 0.3,
      ease: "power2.out",
      onComplete: () => {
        this.isOpen = true;
        this.elements.body.classList.remove('no--scrolling');
        this.modalScroll.start();
      }
    }, '-=0.2');
  }
  animateBodyText(text, lines) {
    this.mm.add("(max-width: 1199px)", () => {
      components_TextSplit__WEBPACK_IMPORTED_MODULE_1__["default"].scrollAnimateText(text, lines);
    });
    this.mm.add("(min-width: 1200px)", () => {
      this.tl.fromTo(lines, {
        y: "100%"
      }, {
        y: 0,
        duration: 0.8,
        ease: "zoom",
        stagger: 0.05
      }, '-=0.8');
    });
  }
  addEventListeners() {
    if (!this.elements.bioTrigger || !this.elements.close) return;
    this.elements.bioTrigger.forEach(l => {
      l.onclick = event => {
        event.preventDefault();
        const href = l.href;
        this.openModal();
        this.onChange({
          url: href
        });
      };
    });
    this.elements.close.addEventListener('click', () => {
      if (this.previousUrl) {
        window.history.replaceState({}, "", this.previousUrl);
      }
      this.closeModal();
    });
    window.addEventListener('popstate', this.onPopState.bind(this));
  }
  setAnimationPositions() {
    gsap__WEBPACK_IMPORTED_MODULE_3__["default"].set(this.elements.close, {
      opacity: 0
    });
    gsap__WEBPACK_IMPORTED_MODULE_3__["default"].set(this.elements.mainTitles, {
      y: "100%"
    });
    gsap__WEBPACK_IMPORTED_MODULE_3__["default"].set(this.elements.bioRole, {
      y: "100%"
    });
    gsap__WEBPACK_IMPORTED_MODULE_3__["default"].set(this.elements.bioImage, {
      y: "20%",
      opacity: 0
    });
  }
  init() {
    if (!this.elements.bioOverlay || !this.elements.bioContainer) {
      console.error("❌ Lenis Initialization Failed: Missing Elements", this.elements);
      return;
    }
    this.modalScroll = new lenis__WEBPACK_IMPORTED_MODULE_6__["default"]({
      wrapper: this.elements.bioOverlay,
      content: this.elements.bioContainer,
      autoRaf: true,
      duration: 1
    });
    const raf = time => {
      this.modalScroll.raf(time);
      requestAnimationFrame(raf);
    };
    requestAnimationFrame(raf);
    this.modalScroll.stop();
  }
}

/***/ }),

/***/ "./app/pages/Contact/index.js":
/*!************************************!*\
  !*** ./app/pages/Contact/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Contact)
/* harmony export */ });
/* harmony import */ var classes_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Page */ "./app/classes/Page.js");

class Contact extends classes_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      id: 'contact',
      element: '.contact'
    });
  }
}

/***/ }),

/***/ "./app/pages/Gallery/index.js":
/*!************************************!*\
  !*** ./app/pages/Gallery/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Gallery)
/* harmony export */ });
/* harmony import */ var classes_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Page */ "./app/classes/Page.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/LenisScroll */ "./app/utils/LenisScroll.js");
/* harmony import */ var gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/CustomEase */ "./node_modules/gsap/CustomEase.js");




class Gallery extends classes_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      id: 'gallery',
      elements: {
        gallery: '[data-gallery]',
        galleryItems: '[data-gallery-item]',
        slideShow: '[data-slideshow]',
        prev: '[data-slideshow-prev]',
        next: '[data-slideshow-next]',
        close: '[data-slideshow] [data-close]',
        slideShowContainer: '[data-slideshow-container]',
        slideShowCounter: '[data-slideshow-index]',
        miniMap: '[data-mini-map]',
        miniMapItems: '[data-mini-map-item]',
        miniMapIndicator: '[data-mini-map-indicator]',
        playBtns: '[data-gallery-item-play-btn]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].registerPlugin(gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase);
    gsap_CustomEase__WEBPACK_IMPORTED_MODULE_3__.CustomEase.create("zoom", "0.71, 0, 0.06, 1");
    this.tl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
    this.currentIndex = 0;
    this.media = [];
    this.scroll = utils_LenisScroll__WEBPACK_IMPORTED_MODULE_1__.scroll;
    this.hasMediaBeenSet = false;
    this.allowSlideNavigation = false;
    this.init();
  }
  openSlideShow(e) {
    const mediaElement = e.target;
    const mediaId = mediaElement.dataset.galleryId;
    this.currentIndex = this.media.findIndex(media => media.dataset.galleryId === mediaId);
    this.displayIndex();
    this.scroll.stop();
    this.tl.clear();
    this.updateMinimapIndicator(mediaId, true);
    this.tl.to(this.elements.galleryItems, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
      duration: 0.4,
      ease: "zoom"
    });
    this.tl.to(this.elements.playBtns, {
      opacity: 0,
      duration: 0.4,
      ease: "power2.out"
    }, '-=0.4');
    this.tl.to(this.elements.slideShow, {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom",
      onComplete: () => {
        this.elements.slideShow.classList.remove('cannot-interact');
        this.showMedia();
        this.enableSlideNavigation();
      }
    }, '-=0.2');
    this.tl.to(this.elements.close, {
      opacity: 1,
      duration: 0.3,
      ease: "power2.out"
    });
    this.tl.to(this.elements.prev, {
      opacity: 1,
      duration: 0.3,
      ease: "power2.out"
    }, 'controls');
    this.tl.to(this.elements.next, {
      opacity: 1,
      duration: 0.3,
      ease: "power2.out"
    }, 'controls');
  }
  closeSlideShow() {
    this.disableSlideNavigation();
    let slideShowMedia = document.querySelector('.slideshow-media__item');
    this.elements.slideShow.classList.add('cannot-interact');
    this.tl.to(this.elements.slideShow, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "zoom",
      onComplete: () => {
        slideShowMedia.remove();
        this.hasMediaBeenSet = false;
        this.scroll.start();
        this.animateImages(false, true);
      }
    });
    this.tl.to(this.elements.playBtns, {
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    }, "+=0.2");
    this.tl.to(this.elements.close, {
      opacity: 0,
      duration: 0.001
    }, 'hide');
    this.tl.to(this.elements.prev, {
      opacity: 0,
      duration: 0.001
    }, 'hide');
    this.tl.to(this.elements.next, {
      opacity: 0,
      duration: 0.001
    }, 'hide');

    // Remove image parameter from URL
    const newUrl = new URL(window.location);
    newUrl.searchParams.delete("media");
    window.history.pushState({}, "", newUrl);
  }
  goToMedia(index) {
    if (index < 0 || index >= this.media.length || index === this.currentIndex) return;
    this.currentIndex = index;
    this.displayIndex();
    if (this.tl.isActive()) {
      this.tl.add(() => {
        this.showMedia();
      });
    } else {
      this.showMedia();
    }
  }
  changeMedia(direction) {
    const oldIndex = this.currentIndex;
    this.currentIndex = (this.currentIndex + direction + this.media.length) % this.media.length;
    this.displayIndex();
    if (oldIndex === this.currentIndex) return;
    if (this.tl.isActive()) {
      this.tl.add(() => {
        this.showMedia();
      });
    } else {
      this.showMedia();
    }
  }
  showMedia() {
    const mediaCurrentElem = this.media[this.currentIndex];
    const mediaType = mediaCurrentElem.dataset.galleryItem;
    const mediaId = mediaCurrentElem.dataset.galleryId;
    this.updateMinimapIndicator(mediaId);

    // If the same media, don't do anything
    if (this.elements.slideShowContainer.querySelector(`[data-slideshow-id="${mediaId}"]`)) {
      return;
    }
    if (!this.hasMediaBeenSet) {
      this.createAndSetMediaElement(mediaCurrentElem, mediaType);
      this.hasMediaBeenSet = true;
    } else {
      this.swapMediaElement(mediaCurrentElem, mediaType);
    }

    // Update the URL with the new image ID
    const newUrl = new URL(window.location);
    newUrl.searchParams.set("media", mediaId);
    window.history.pushState({}, "", newUrl);
  }
  createAndSetMediaElement(mediaElem, mediaType) {
    const newElem = this.createNewMediaItem(mediaType);
    this.setMediaAttributes(newElem, mediaElem, mediaType);
    this.elements.slideShowContainer.innerHTML = ''; // Clear previous elements
    this.elements.slideShowContainer.appendChild(newElem);
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].fromTo(newElem, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)"
    }, {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      duration: 0.6,
      ease: "power2.out"
    });
  }
  displayIndex() {
    this.elements.slideShowCounter.innerHTML = String(this.currentIndex + 1).padStart(2, '0');
  }
  swapMediaElement(mediaElem, mediaType) {
    const oldElem = this.elements.slideShowContainer.firstChild;
    const newElem = this.createNewMediaItem(mediaType);
    this.setMediaAttributes(newElem, mediaElem, mediaType);
    this.elements.slideShowContainer.appendChild(newElem);
    this.tl.fromTo(newElem, {
      opacity: 0
    }, {
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    });
    this.tl.to(oldElem, {
      opacity: 0,
      duration: 0.4,
      ease: "power2.out",
      onComplete: () => {
        oldElem.remove();
      }
    }, "-=0.2");
  }
  setupScrollNavigation() {
    let ticking = false;
    window.addEventListener('wheel', e => {
      if (!this.allowSlideNavigation || ticking) return;
      ticking = true;
      const direction = e.deltaY > 0 ? 1 : -1;
      this.changeMedia(direction);
      setTimeout(() => {
        ticking = false;
      }, 600); // delay to prevent overscroll
    });
  }
  setupSwipeNavigation() {
    if (!this.elements.slideShowContainer) return;
    let touchStartX = 0;
    let touchEndX = 0;
    const threshold = 50; // Minimum swipe distance

    const container = this.elements.slideShowContainer;
    container.addEventListener('touchstart', e => {
      touchStartX = e.changedTouches[0].screenX;
    });
    container.addEventListener('touchend', e => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    const handleSwipe = () => {
      if (!this.allowSlideNavigation) return;
      const delta = touchStartX - touchEndX;
      if (Math.abs(delta) > threshold) {
        const direction = delta > 0 ? 1 : -1;
        this.changeMedia(direction);
      }
    };
  }
  disableSlideNavigation() {
    this.allowSlideNavigation = false;
  }
  enableSlideNavigation() {
    this.allowSlideNavigation = true;
  }
  createNewMediaItem(type) {
    const elem = type === "video" ? document.createElement('video') : document.createElement('img');
    elem.classList.add('slideshow-media__item');
    return elem;
  }
  setMediaAttributes(elem, mediaElem, mediaType) {
    const mediaId = mediaElem.dataset.galleryId;
    const posterImg = mediaElem.src;
    elem.setAttribute('data-slideshow-id', mediaId);
    if (mediaType === "video") {
      elem.setAttribute('autoplay', '');
      elem.setAttribute('loop', '');
      elem.setAttribute('playsinline', '');
      elem.setAttribute('controls', '');
      elem.setAttribute('poster', posterImg);
      const source = document.createElement('source');
      source.src = mediaElem.dataset.gallerySrc;
      source.type = "video/mp4";
      elem.appendChild(source);
    } else {
      elem.src = mediaElem.dataset.gallerySrc;
      elem.alt = mediaElem.alt || "Gallery Image";
    }
  }
  updateMinimapIndicator(mediaId = this.media[this.currentIndex]?.dataset.galleryId, instant = false) {
    if (!mediaId) return;
    let miniMapRect = this.elements.miniMap.getBoundingClientRect();
    this.elements.miniMapItems.forEach((item, i) => {
      if (item.dataset.galleryId === mediaId) {
        let itemRect = item.getBoundingClientRect();
        const targetX = -item.offsetLeft;
        const indicatorXpos = itemRect.left - miniMapRect.left;
        if (instant) {
          gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.miniMapIndicator, {
            x: indicatorXpos
          });
          gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.miniMap, {
            x: targetX
          });
        } else {
          gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.elements.miniMapIndicator, {
            x: indicatorXpos,
            duration: 0.4,
            ease: "zoom"
          });
          gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.elements.miniMap, {
            x: targetX,
            duration: 0.4,
            ease: "power3.out"
          });
        }
      }
    });
  }

  // Check URL on Page Load & Open Slideshow if Needed
  checkURLForSlideShow() {
    window.addEventListener("DOMContentLoaded", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const mediaId = urlParams.get("media");
      if (mediaId) {
        const mediaElement = document.querySelector(`[data-gallery-id="${mediaId}"]`);
        if (mediaElement) this.openSlideShow({
          target: mediaElement
        });
      }
    });
  }
  animateImages(useStrollTrigger, show = true) {
    let clipPathPoly = show ? "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)" : "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)";
    if (useStrollTrigger) {
      gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.elements.galleryItems, {
        clipPath: clipPathPoly,
        duration: 0.6,
        scrollTrigger: {
          trigger: this.elements.galleryItems,
          start: 'top bottom',
          scrub: false,
          markers: false
        },
        ease: "zoom"
      });
    } else {
      gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(this.elements.galleryItems, {
        clipPath: clipPathPoly,
        duration: 0.6,
        ease: "zoom"
      });
    }
    this.tl.to(this.elements.playBtns, {
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    }, "+=0.2");
  }
  animateAssets(tl, resolve) {
    super.animateAssets(tl, () => {
      this.animateImages(true);
      resolve();
    });
  }
  handleResize = () => {
    this.updateMinimapIndicator();
  };
  handleKeyDown = e => {
    // Only proceed if slideshow is open
    if (!this.elements.slideShow || this.elements.slideShow.classList.contains('cannot-interact')) return;
    if (e.key === 'ArrowRight') {
      this.changeMedia(1);
    } else if (e.key === 'ArrowLeft') {
      this.changeMedia(-1);
    }
  };

  // Debounce helper (avoids spamming during resize)
  debounce(fn, delay = 100) {
    let timeout;
    return () => {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay);
    };
  }
  addEventListeners() {
    if (!this.elements.galleryItems || !this.elements.close) return;
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.galleryItems, {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)"
    });
    if (this.elements.playBtns) {
      gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.elements.playBtns, {
        opacity: 0
      });
    }
    if (Array.isArray(this.elements.galleryItems) || typeof this.elements.galleryItems === 'object') {
      this.media = Array.from(this.elements.galleryItems);
      this.elements.galleryItems.forEach(element => {
        element.addEventListener('click', e => {
          this.openSlideShow(e);
        });
      });
    } else {
      this.elements.galleryItems.addEventListener('click', e => {
        this.openSlideShow(e);
      });
    }
    if (this.elements.prev) {
      this.elements.prev.addEventListener('click', () => {
        this.changeMedia(-1);
      });
    }
    if (this.elements.next) {
      this.elements.next.addEventListener('click', () => {
        this.changeMedia(1);
      });
    }
    this.elements.close.addEventListener('click', () => {
      this.closeSlideShow();
    });
    document.addEventListener('keydown', this.handleKeyDown);
    if (this.elements.miniMapItems) {
      this.elements.miniMapItems.forEach((elem, i) => {
        elem.addEventListener('click', () => {
          if (!this.allowSlideNavigation) return;
          this.goToMedia(i);
        });
      });
    }
    window.addEventListener('resize', this.debounce(this.handleResize));
  }
  init() {
    this.addEventListeners();
    this.checkURLForSlideShow();
    this.setupSwipeNavigation();
    this.setupScrollNavigation();
  }
}

/***/ }),

/***/ "./app/pages/Home/index.js":
/*!*********************************!*\
  !*** ./app/pages/Home/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Home)
/* harmony export */ });
/* harmony import */ var classes_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classes/Page */ "./app/classes/Page.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollTrigger */ "./node_modules/gsap/ScrollTrigger.js");



class Home extends classes_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      id: 'home',
      elements: {
        heroContent: '[data-hero-content]',
        homeBody: '[data-home-body]',
        videoBlock: '[data-video-scroll]',
        video: '[data-video-scroll] [data-video]',
        polaroid: '[data-polaroid]',
        roomKeySection: '[data-room-key-section]',
        roomKeyHeader: '[data-room-key-header]',
        roomKeyTitle: '[data-room-key-titles]',
        roomKey: '[data-room-key]',
        progressBar: '[data-progress-bar]',
        progressHighlight: '[data-progress-highlight]',
        progressIndices: '[data-progress-index]',
        steps: '[data-progress-steps]',
        artistNames: '[data-artist-name-animation]',
        stepContainer: '[data-step-container]'
      }
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger);
    this.mm = gsap__WEBPACK_IMPORTED_MODULE_1__["default"].matchMedia();
    this.pinnedHeight = this.elements.roomKeySection ? this.elements.roomKeySection.offsetHeight : 100;
    this.isProgressBarVisible = false;
    this.currentActiveIndex = -1;
    this.init();
  }
  init() {
    this.setUpScrollAnimations();
  }
  animateIndexHighlighter(newIndex) {
    if (newIndex !== this.currentActiveIndex) {
      let yPosCalc = newIndex * 100;
      let yPos = `${yPosCalc}%`;
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.progressHighlight, {
        y: yPos,
        duration: 0.4,
        ease: "power2.out"
      });
      this.currentActiveIndex = newIndex;
    }
  }
  hideProgressBar() {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.progressBar, {
      opacity: 0,
      duration: 0.4,
      ease: "power2.out"
    });
    this.isProgressBarVisible = false;
  }
  showProgressBar() {
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.progressBar, {
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    });
    this.isProgressBarVisible = true;
  }
  setUpScrollAnimations() {
    this.polaroidParallax();
    this.roomKeyAnimations();
    this.artistSectionAnimations();
  }
  polaroidParallax() {
    if (!this.elements.polaroid) return;
    this.elements.polaroid.forEach((element, i) => {
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(element, {
        opacity: 0
      }, {
        opacity: 1,
        scrollTrigger: {
          trigger: element,
          start: '50% bottom',
          // Start the animation when the top of the heroContent hits 90% of the viewport
          scrub: false,
          markers: false
        },
        ease: "power2.out",
        duration: 0.6
      });
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(element, {
        y: "10%"
      }, {
        y: "-20%",
        scrollTrigger: {
          trigger: element,
          start: '5% bottom',
          scrub: true,
          markers: false
        },
        ease: "power2.out"
      });
    });
  }
  roomKeyAnimations() {
    if (!this.elements.roomKey || !this.elements.steps || !this.elements.roomKeyHeader || !this.elements.stepContainer || !this.elements.progressBar) return;
    let totalStepsHeight = this.elements.steps ? Array.from(this.elements.steps).reduce((total, step) => total + step.offsetHeight, 0) : null;
    let adjustedPinDuration = totalStepsHeight - (this.elements.roomKey.offsetHeight + this.elements.roomKey.offsetHeight / 4);
    let scrollOptions = {
      trigger: this.elements.roomKey,
      start: "center center",
      end: `+=${this.elements.steps[0].offsetHeight}`,
      scrub: true,
      onEnter: () => gsap__WEBPACK_IMPORTED_MODULE_1__["default"].set(this.elements.steps, {
        opacity: 0
      })
    };
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].set(this.elements.steps, {
      opacity: 0,
      y: 50
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].set(this.elements.progressBar, {
      opacity: 0
    });
    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
      id: "roomKeyPin",
      trigger: this.elements.roomKeyHeader,
      start: "top top",
      end: () => `+=${this.elements.roomKey.offsetHeight * 1.5}`,
      // Keep it pinned while roomKey moves over
      pin: true,
      pinSpacing: false,
      scrub: true
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.roomKeyHeader, {
      opacity: 0,
      scrollTrigger: {
        trigger: this.elements.roomKey,
        start: "top 55%",
        // Begin fade when roomKey starts overlapping
        end: "top 30%",
        // Fully faded when roomKey is in the middle
        scrub: true
      }
    });
    this.mm.add("(max-width: 767px)", () => {
      gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
        trigger: this.elements.roomKey,
        start: "center 30%",
        end: `+=${adjustedPinDuration}`,
        pin: true,
        scrub: true
      });

      // 2️⃣ Pin Step Container AFTER RoomKey is done
      gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
        trigger: this.elements.stepContainer,
        start: "bottom bottom",
        end: `+=${this.elements.steps.length * window.innerHeight}`,
        pin: true,
        markers: true,
        pinSpacing: false
      });

      // 3️⃣ Hide All Steps Initially
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].set(this.elements.steps, {
        opacity: 0,
        position: "absolute",
        width: "100%"
      });

      // 4️⃣ Step Transitions - Show One Step at a Time
      let stepTl = gsap__WEBPACK_IMPORTED_MODULE_1__["default"].timeline({
        scrollTrigger: {
          trigger: this.elements.stepContainer,
          start: "top center",
          end: `+=${this.elements.steps.length * window.innerHeight}`,
          scrub: true,
          pin: true
        }
      });
      this.elements.steps.forEach((step, index) => {
        stepTl.to(step, {
          opacity: 1,
          duration: 0.8
        }) // Step fades in
        .to(step, {
          opacity: 0,
          duration: 0.8
        }, `+=1.5`); // Delay before hiding

        // ✅ Step Controls Update in Sync with Steps
        gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
          trigger: step,
          start: "top 60%",
          // Ensure step is fully visible before updating
          end: "top 40%",
          onEnter: () => {
            if (index === 0) {
              this.animateIndexHighlighter(index); // Highlight the corresponding dot for the current step
            } else {
              this.animateIndexHighlighter(index - 1); // Highlight the corresponding dot for the current step
            }
          },
          onLeaveBack: () => {
            if (index === 1) {
              this.animateIndexHighlighter(index - 1);
            } else {
              this.animateIndexHighlighter(index - 2);
            }
          }
        });
      });

      // 5️⃣ RoomKey Flip - KEPT SAME AS YOUR CODE
      gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
        trigger: this.elements.steps[1],
        // Step 2
        start: "top center",
        onEnter: () => this.elements.roomKey.classList.add("flip"),
        onLeaveBack: () => this.elements.roomKey.classList.remove("flip")
      });

      // // 6️⃣ Unpin Step Container at the End
      // ScrollTrigger.create({
      //   trigger: this.elements.steps[this.elements.steps.length - 1],
      //   start: "bottom center",
      //   onEnter: () => gsap.set(this.elements.stepContainer, { position: "relative" }),
      //   onLeaveBack: () => gsap.set(this.elements.stepContainer, { position: "fixed" })
      // });

      // 7️⃣ Ensure Progress Bar Shows Like min-width: 768px
      gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
        trigger: this.elements.steps[1],
        start: "top center",
        onEnter: () => this.showProgressBar(),
        onLeaveBack: () => this.hideProgressBar()
      });
    });
    this.mm.add("(min-width: 768px)", () => {
      gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
        trigger: this.elements.roomKey,
        start: "center center",
        end: `+=${adjustedPinDuration}`,
        pin: true,
        scrub: true
      });
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(this.elements.roomKey, {
        x: "85%",
        rotate: "5deg",
        ease: "power2.out",
        scrollTrigger: scrollOptions
      });

      // Step opacity should be scroll-based (fade in/out based on scroll)
      this.elements.steps.forEach((step, index) => {
        gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
          trigger: step,
          start: "top 70%",
          end: "top 50%",
          scrub: true,
          toggleActions: "play none none reverse",
          onEnter: () => gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(step, {
            opacity: 1,
            y: 0,
            duration: 0.3
          }),
          onLeaveBack: () => gsap__WEBPACK_IMPORTED_MODULE_1__["default"].to(step, {
            opacity: 0,
            y: 50,
            duration: 0.3
          })
        });

        // **Flip room-key when the second step appears**
        if (index === 2) {
          gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
            trigger: step,
            start: "top center",
            onEnter: () => this.elements.roomKey.classList.add("flip"),
            onLeaveBack: () => this.elements.roomKey.classList.remove("flip")
          });
        }
        gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
          trigger: step,
          start: "top 50%",
          // When the step reaches 50% of the viewport
          end: "top 30%",
          // When the step is almost fully in view
          onEnter: () => {
            if (index === 0) {
              this.animateIndexHighlighter(index); // Highlight the corresponding dot for the current step
            } else {
              this.animateIndexHighlighter(index - 1); // Highlight the corresponding dot for the current step
            }
          },
          onLeaveBack: () => {
            if (index === 1) {
              this.animateIndexHighlighter(index - 1);
            } else {
              this.animateIndexHighlighter(index - 2);
            }
          }
        });
      });
    });

    // Pin progress bar at all times (only show/hide)
    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
      trigger: this.elements.roomKeySection,
      start: "top top",
      end: "bottom bottom",
      pin: this.elements.progressBar
    });

    // Show progress bar when roomKey is fully in view

    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_2__.ScrollTrigger.create({
      trigger: this.elements.steps[1],
      start: "top center",
      // When the first step reaches the center of the viewport
      onEnter: () => this.showProgressBar(),
      onLeaveBack: () => this.hideProgressBar(),
      markers: false
    });
  }
  artistSectionAnimations() {
    if (!this.elements.videoBlock || !this.elements.video || !this.elements.artistNames) return;
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(this.elements.videoBlock, {
      clipPath: "polygon(5% 5%, 95% 5%, 95% 95%, 5% 95%)"
    }, {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      scrollTrigger: {
        trigger: this.elements.videoBlock,
        start: '5% bottom',
        scrub: true,
        markers: false
      },
      ease: "power2.out"
    });
    gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(this.elements.video, {
      scale: 1.5
    }, {
      scale: 1,
      scrollTrigger: {
        trigger: this.elements.videoBlock,
        start: '5% bottom',
        // Start the animation when the top of the heroContent hits 90% of the viewport
        scrub: true,
        markers: false
      },
      ease: "power2.out"
    });
    this.elements.artistNames.forEach((name, i) => {
      let getVal = name.getAttribute('data-artist-name-animation');
      let startXpos = getVal === "left" ? "10%" : "-10%";
      gsap__WEBPACK_IMPORTED_MODULE_1__["default"].fromTo(name, {
        x: startXpos,
        opacity: 0
      }, {
        x: 0,
        opacity: 1,
        ease: "power2.out",
        duration: 0.4,
        scrollTrigger: {
          trigger: name,
          start: "top bottom",
          markers: false,
          scrub: true
        }
      });
    });
  }
}

/***/ }),

/***/ "./app/utils/LenisScroll.js":
/*!**********************************!*\
  !*** ./app/utils/LenisScroll.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   scroll: () => (/* binding */ scroll)
/* harmony export */ });
/* harmony import */ var lenis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lenis */ "./node_modules/lenis/dist/lenis.mjs");

const scroll = new lenis__WEBPACK_IMPORTED_MODULE_0__["default"]({
  autoRaf: true,
  duration: 1
});

/***/ }),

/***/ "./app/utils/create.js":
/*!*****************************!*\
  !*** ./app/utils/create.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Create)
/* harmony export */ });
function Create() {
  this.elements = {};
  for (const obj in this.selectors) {
    let el = this.selectors[obj];
    if (el instanceof window.HTMLElement || el instanceof window.NodeList || Array.isArray(el)) {
      this.elements[obj] = el;
    } else {
      this.elements[obj] = document.querySelectorAll(el);
      if (this.elements[obj].length == 0) {
        this.elements[obj] = null;
      } else if (this.elements[obj].length == 1) {
        this.elements[obj] = document.querySelector(el);
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML;

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var _defColors = {
  reset: ['fff', '000'],
  // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
};
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
};
var _openTags = {
  '1': 'font-weight:bold',
  // bold
  '2': 'opacity:0.5',
  // dim
  '3': '<i>',
  // italic
  '4': '<u>',
  // underscore
  '8': 'display:none',
  // hidden
  '9': '<del>' // delete
};
var _closeTags = {
  '23': '</i>',
  // reset italic
  '24': '</u>',
  // reset underscore
  '29': '</del>' // reset delete
};
[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>';
});

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML(text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text;
  }

  // Cache opened sequence.
  var ansiCodes = [];
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq];
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) {
        // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop();
        return '</span>';
      }
      // Open tag.
      ansiCodes.push(seq);
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
    }
    var ct = _closeTags[seq];
    if (ct) {
      // Pop sequence
      ansiCodes.pop();
      return ct;
    }
    return '';
  });

  // Make sure tags are closed.
  var l = ansiCodes.length;
  l > 0 && (ret += Array(l + 1).join('</span>'));
  return ret;
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.');
  }
  var _finalColors = {};
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null;
    if (!hex) {
      _finalColors[key] = _defColors[key];
      continue;
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex];
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string';
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
      }
      var defHexColor = _defColors[key];
      if (!hex[0]) {
        hex[0] = defHexColor[0];
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]];
        hex.push(defHexColor[1]);
      }
      hex = hex.slice(0, 2);
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
    }
    _finalColors[key] = hex;
  }
  _setTags(_finalColors);
};

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors);
};

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {};
if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () {
      return _openTags;
    }
  });
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () {
      return _closeTags;
    }
  });
} else {
  ansiHTML.tags.open = _openTags;
  ansiHTML.tags.close = _closeTags;
}
function _setTags(colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1];
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0];
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey;
  for (var code in _styles) {
    var color = _styles[code];
    var oriColor = colors[color] || '000';
    _openTags[code] = 'color:#' + oriColor;
    code = parseInt(code);
    _openTags[(code + 10).toString()] = 'background:#' + oriColor;
  }
}
ansiHTML.reset();

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/***/ }),

/***/ "./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSPlugin: () => (/* binding */ CSSPlugin),
/* harmony export */   _createElement: () => (/* binding */ _createElement),
/* harmony export */   _getBBox: () => (/* binding */ _getBBox),
/* harmony export */   checkPrefix: () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/*!
 * CSSPlugin 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var _win,
  _doc,
  _docElement,
  _pluginInitted,
  _tempDiv,
  _tempDivStyler,
  _recentSetterPlugin,
  _reverting,
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG = 180 / Math.PI,
  _DEG2RAD = Math.PI / 180,
  _atan2 = Math.atan2,
  _bigNum = 1e8,
  _capsExp = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
  _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
  _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp = "transform",
  _transformOriginProp = _transformProp + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
    var target = this.target,
      style = target.style,
      cache = target._gsap;
    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

        property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }
      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
      if (cache.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
      property = _transformProp;
    }
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      if (!props[i + 1]) {
        props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
      } else if (props[i + 1] === 2) {
        // non-CSS value (function-based)
        target[props[i]](props[i + 2]);
      } else {
        // non-CSS value (not function-based)
        target[props[i]] = props[i + 2];
      }
    }
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
      i = _reverting();
      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);
        if (cache.zOrigin && style[_transformOriginProp]) {
          style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

          cache.zOrigin = 0;
          cache.renderTransform();
        }
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

    properties && target.style && target.nodeType && properties.split(",").forEach(function (p) {
      return saver.save(p);
    }); // make sure it's a DOM node too.

    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;
    if (property in s && !preferPrefix) {
      return property;
    }
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while (i-- && !(_prefixes[i] + property in s)) {}
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore = function _initCore() {
    if (_windowExists() && window.document) {
      _win = window;
      _doc = _win.document;
      _docElement = _doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getReparentedCloneBBox = function _getReparentedCloneBBox(target) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var owner = target.ownerSVGElement,
      svg = _createElement("svg", owner && owner.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      clone = target.cloneNode(true),
      bbox;
    clone.style.display = "block";
    svg.appendChild(clone);
    _docElement.appendChild(svg);
    try {
      bbox = clone.getBBox();
    } catch (e) {}
    svg.removeChild(clone);
    _docElement.removeChild(svg);
    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds, cloned;
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getReparentedCloneBBox(target);
      cloned = 1;
    }
    bounds && (bounds.width || bounds.height) || cloned || (bounds = _getReparentedCloneBBox(target)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style,
        first2Chars;
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
      if (style.removeProperty) {
        first2Chars = property.substr(0, 2);
        if (first2Chars === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
        style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = unit !== "rem" && ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
    if (!parent || parent === _doc || !parent.appendChild) {
      parent = _doc.body;
    }
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
    } else {
      if (toPercent && (property === "height" || property === "width")) {
        // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
        var v = target.style[property];
        target.style[property] = amount + unit;
        px = target[measureProperty];
        v ? target.style[property] = v : _removeProperty(target, property);
      } else {
        (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
        parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

        parent.appendChild(_tempDiv);
        px = _tempDiv[measureProperty];
        parent.removeChild(_tempDiv);
        style.position = "absolute";
      }
      if (horizontal && toPercent) {
        cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
        cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
        cache.width = parent[measureProperty];
      }
    }
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
  _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }
    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";
    if (end.substring(0, 6) === "var(--") {
      end = _getComputedProperty(target, end.substring(4, end.indexOf(")")));
    }
    if (end === "auto") {
      startValue = target.style[prop];
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      startValue ? target.style[prop] = startValue : _removeProperty(target, prop);
    }
    a = [start, end];
    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    if (endValues.length) {
      while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
        while (--i > -1) {
          prop = props[i];
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
          _removeProperty(target, prop);
        }
      }
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
        if (cache) {
          cache.svg && target.removeAttribute("transform");
          style.scale = style.rotate = style.translate = "none";
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;
          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
        plugin._props.push(property);
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);
  },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
      if (!parent || !target.offsetParent && !target.getBoundingClientRect().width) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375. Note: position: fixed elements report a null offsetParent but they could also be invisible because they're in an ancestor with display: none, so we check getBoundingClientRect(). We only want to alter the DOM if we absolutely have to because it can cause iframe content to reload, like a Vimeo video.
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
      }
      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
      // 	xOrigin -= bounds.x;
      // 	yOrigin -= bounds.y;
      // }
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
    }
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
      style.scale = style.rotate = style.translate = "none";
    }
    matrix = _getMatrix(target, cache.svg);
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }
      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
        scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
        scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || !uncache && cache.zOrigin || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
      a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
      a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
      a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
      a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
      isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;
    if (isString) {
      direction = endValue.split("_")[1];
      if (direction === "short") {
        change %= cap;
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
      }
    }
    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      _removeProperty(target, _transformProp);
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
        endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
        plugin._props.push(p);
      }
    }
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;
    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }
    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});
var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;
    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }
      endValue = vars[p];
      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }
      type = typeof endValue;
      specialProp = _specialProps[p];
      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }
      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }
      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;
        if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }
        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || startValue === "auto" || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);
        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }
            inlineProps.push("visibility", 0, style.visibility);
            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }
          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }
        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);
          if (type === "string" && endValue.substring(0, 6) === "var(--") {
            endValue = _getComputedProperty(target, endValue.substring(4, endValue.indexOf(")")));
            endNum = parseFloat(endValue);
          }
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }
          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }
            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);
            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);
            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);
            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }
        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;
          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else if (p !== "parseTransform") {
            (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);
            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }
        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : typeof target[p] === "function" ? inlineProps.push(p, 2, target[p]()) : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }
    hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;
(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });
  _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/gsap/CustomEase.js":
/*!*****************************************!*\
  !*** ./node_modules/gsap/CustomEase.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomEase: () => (/* binding */ CustomEase),
/* harmony export */   "default": () => (/* binding */ CustomEase)
/* harmony export */ });
/* harmony import */ var _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/paths.js */ "./node_modules/gsap/utils/paths.js");
/*!
 * CustomEase 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var gsap,
  _coreInitted,
  _getGSAP = function _getGSAP() {
    return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
  },
  _initCore = function _initCore() {
    gsap = _getGSAP();
    if (gsap) {
      gsap.registerEase("_CE", CustomEase.create);
      _coreInitted = 1;
    } else {
      console.warn("Please gsap.registerPlugin(CustomEase)");
    }
  },
  _bigNum = 1e20,
  _round = function _round(value) {
    return ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000;
  },
  _bonusValidated = 1,
  //<name>CustomEase</name>
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
  _findMinimum = function _findMinimum(values) {
    var l = values.length,
      min = _bigNum,
      i;
    for (i = 1; i < l; i += 6) {
      +values[i] < min && (min = +values[i]);
    }
    return min;
  },
  //takes all the points and translates/scales them so that the x starts at 0 and ends at 1.
  _normalize = function _normalize(values, height, originY) {
    if (!originY && originY !== 0) {
      originY = Math.max(+values[values.length - 1], +values[1]);
    }
    var tx = +values[0] * -1,
      ty = -originY,
      l = values.length,
      sx = 1 / (+values[l - 2] + tx),
      sy = -height || (Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0]) ? _findMinimum(values) + ty : +values[l - 1] + ty),
      i;
    if (sy) {
      //typically y ends at 1 (so that the end values are reached)
      sy = 1 / sy;
    } else {
      //in case the ease returns to its beginning value, scale everything proportionally
      sy = -sx;
    }
    for (i = 0; i < l; i += 2) {
      values[i] = (+values[i] + tx) * sx;
      values[i + 1] = (+values[i + 1] + ty) * sy;
    }
  },
  //note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js
  _bezierToPoints = function _bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
    var x12 = (x1 + x2) / 2,
      y12 = (y1 + y2) / 2,
      x23 = (x2 + x3) / 2,
      y23 = (y2 + y3) / 2,
      x34 = (x3 + x4) / 2,
      y34 = (y3 + y4) / 2,
      x123 = (x12 + x23) / 2,
      y123 = (y12 + y23) / 2,
      x234 = (x23 + x34) / 2,
      y234 = (y23 + y34) / 2,
      x1234 = (x123 + x234) / 2,
      y1234 = (y123 + y234) / 2,
      dx = x4 - x1,
      dy = y4 - y1,
      d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
      d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
      length;
    if (!points) {
      points = [{
        x: x1,
        y: y1
      }, {
        x: x4,
        y: y4
      }];
      index = 1;
    }
    points.splice(index || points.length - 1, 0, {
      x: x1234,
      y: y1234
    });
    if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
      length = points.length;
      _bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
      _bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
    }
    return points;
  };
var CustomEase = /*#__PURE__*/function () {
  function CustomEase(id, data, config) {
    _coreInitted || _initCore();
    this.id = id;
    _bonusValidated && this.setData(data, config);
  }
  var _proto = CustomEase.prototype;
  _proto.setData = function setData(data, config) {
    config = config || {};
    data = data || "0,0,1,1";
    var values = data.match(_numExp),
      closest = 1,
      points = [],
      lookup = [],
      precision = config.precision || 1,
      fast = precision <= 1,
      l,
      a1,
      a2,
      i,
      inc,
      j,
      point,
      prevPoint,
      p;
    this.data = data;
    if (_needsParsingExp.test(data) || ~data.indexOf("M") && data.indexOf("C") < 0) {
      values = (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.stringToRawPath)(data)[0];
    }
    l = values.length;
    if (l === 4) {
      values.unshift(0, 0);
      values.push(1, 1);
      l = 8;
    } else if ((l - 2) % 6) {
      throw "Invalid CustomEase";
    }
    if (+values[0] !== 0 || +values[l - 2] !== 1) {
      _normalize(values, config.height, config.originY);
    }
    this.segment = values;
    for (i = 2; i < l; i += 6) {
      a1 = {
        x: +values[i - 2],
        y: +values[i - 1]
      };
      a2 = {
        x: +values[i + 4],
        y: +values[i + 5]
      };
      points.push(a1, a2);
      _bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
    }
    l = points.length;
    for (i = 0; i < l; i++) {
      point = points[i];
      prevPoint = points[i - 1] || point;
      if ((point.x > prevPoint.x || prevPoint.y !== point.y && prevPoint.x === point.x || point === prevPoint) && point.x <= 1) {
        //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like "M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0".
        prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)

        prevPoint.cy = point.y - prevPoint.y;
        prevPoint.n = point;
        prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)

        if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) {
          //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.
          fast = 0;
        }
        if (prevPoint.cx < closest) {
          if (!prevPoint.cx) {
            prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)

            if (i === l - 1) {
              //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.
              prevPoint.x -= 0.001;
              closest = Math.min(closest, 0.001);
              fast = 0;
            }
          } else {
            closest = prevPoint.cx;
          }
        }
      } else {
        points.splice(i--, 1);
        l--;
      }
    }
    l = 1 / closest + 1 | 0;
    inc = 1 / l;
    j = 0;
    point = points[0];
    if (fast) {
      for (i = 0; i < l; i++) {
        //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).
        p = i * inc;
        if (point.nx < p) {
          point = points[++j];
        }
        a1 = point.y + (p - point.x) / point.cx * point.cy;
        lookup[i] = {
          x: p,
          cx: inc,
          y: a1,
          cy: 0,
          nx: 9
        };
        if (i) {
          lookup[i - 1].cy = a1 - lookup[i - 1].y;
        }
      }
      j = points[points.length - 1];
      lookup[l - 1].cy = j.y - a1;
      lookup[l - 1].cx = j.x - lookup[lookup.length - 1].x; //make sure it lands EXACTLY where it should. Otherwise, it might be something like 0.9999999999 instead of 1.
    } else {
      //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.
      for (i = 0; i < l; i++) {
        //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]
        if (point.nx < i * inc) {
          point = points[++j];
        }
        lookup[i] = point;
      }
      if (j < points.length - 1) {
        lookup[i - 1] = points[points.length - 2];
      }
    } //this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.

    this.ease = function (p) {
      var point = lookup[p * l | 0] || lookup[l - 1];
      if (point.nx < p) {
        point = point.n;
      }
      return point.y + (p - point.x) / point.cx * point.cy;
    };
    this.ease.custom = this;
    this.id && gsap && gsap.registerEase(this.id, this.ease);
    return this;
  };
  _proto.getSVGData = function getSVGData(config) {
    return CustomEase.getSVGData(this, config);
  };
  CustomEase.create = function create(id, data, config) {
    return new CustomEase(id, data, config).ease;
  };
  CustomEase.register = function register(core) {
    gsap = core;
    _initCore();
  };
  CustomEase.get = function get(id) {
    return gsap.parseEase(id);
  };
  CustomEase.getSVGData = function getSVGData(ease, config) {
    config = config || {};
    var width = config.width || 100,
      height = config.height || 100,
      x = config.x || 0,
      y = (config.y || 0) + height,
      e = gsap.utils.toArray(config.path)[0],
      a,
      slope,
      i,
      inc,
      tx,
      ty,
      precision,
      threshold,
      prevX,
      prevY;
    if (config.invert) {
      height = -height;
      y = 0;
    }
    if (typeof ease === "string") {
      ease = gsap.parseEase(ease);
    }
    if (ease.custom) {
      ease = ease.custom;
    }
    if (ease instanceof CustomEase) {
      a = (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.rawPathToString)((0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)([ease.segment], width, 0, 0, -height, x, y));
    } else {
      a = [x, y];
      precision = Math.max(5, (config.precision || 1) * 200);
      inc = 1 / precision;
      precision += 2;
      threshold = 5 / precision;
      prevX = _round(x + inc * width);
      prevY = _round(y + ease(inc) * -height);
      slope = (prevY - y) / (prevX - x);
      for (i = 2; i < precision; i++) {
        tx = _round(x + i * inc * width);
        ty = _round(y + ease(i * inc) * -height);
        if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) {
          //only add points when the slope changes beyond the threshold
          a.push(prevX, prevY);
          slope = (ty - prevY) / (tx - prevX);
        }
        prevX = tx;
        prevY = ty;
      }
      a = "M" + a.join(",");
    }
    e && e.setAttribute("d", a);
    return a;
  };
  return CustomEase;
}();
CustomEase.version = "3.13.0";
CustomEase.headless = true;
_getGSAP() && gsap.registerPlugin(CustomEase);


/***/ }),

/***/ "./node_modules/gsap/Observer.js":
/*!***************************************!*\
  !*** ./node_modules/gsap/Observer.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Observer: () => (/* binding */ Observer),
/* harmony export */   _getProxyProp: () => (/* binding */ _getProxyProp),
/* harmony export */   _getScrollFunc: () => (/* binding */ _getScrollFunc),
/* harmony export */   _getTarget: () => (/* binding */ _getTarget),
/* harmony export */   _getVelocityProp: () => (/* binding */ _getVelocityProp),
/* harmony export */   _horizontal: () => (/* binding */ _horizontal),
/* harmony export */   _isViewport: () => (/* binding */ _isViewport),
/* harmony export */   _proxies: () => (/* binding */ _proxies),
/* harmony export */   _scrollers: () => (/* binding */ _scrollers),
/* harmony export */   _vertical: () => (/* binding */ _vertical),
/* harmony export */   "default": () => (/* binding */ Observer)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/*!
 * Observer 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var gsap,
  _coreInitted,
  _clamp,
  _win,
  _doc,
  _docEl,
  _body,
  _isTouch,
  _pointerType,
  ScrollTrigger,
  _root,
  _normalizer,
  _eventTypes,
  _context,
  _getGSAP = function _getGSAP() {
    return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
  },
  _startup = 1,
  _observers = [],
  _scrollers = [],
  _proxies = [],
  _getTime = Date.now,
  _bridge = function _bridge(name, value) {
    return value;
  },
  _integrate = function _integrate() {
    var core = ScrollTrigger.core,
      data = core.bridge || {},
      scrollers = core._scrollers,
      proxies = core._proxies;
    scrollers.push.apply(scrollers, _scrollers);
    proxies.push.apply(proxies, _proxies);
    _scrollers = scrollers;
    _proxies = proxies;
    _bridge = function _bridge(name, value) {
      return data[name](value);
    };
  },
  _getProxyProp = function _getProxyProp(element, property) {
    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
  },
  _isViewport = function _isViewport(el) {
    return !!~_root.indexOf(el);
  },
  _addListener = function _addListener(element, type, func, passive, capture) {
    return element.addEventListener(type, func, {
      passive: passive !== false,
      capture: !!capture
    });
  },
  _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
  _scrollLeft = "scrollLeft",
  _scrollTop = "scrollTop",
  _onScroll = function _onScroll() {
    return _normalizer && _normalizer.isPressed || _scrollers.cache++;
  },
  _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
    var cachingFunc = function cachingFunc(value) {
      // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
      if (value || value === 0) {
        _startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.

        var isNormalizing = _normalizer && _normalizer.isPressed;
        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!

        f(value);
        cachingFunc.cacheID = _scrollers.cache;
        isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
        cachingFunc.cacheID = _scrollers.cache;
        cachingFunc.v = f();
      }
      return cachingFunc.v + cachingFunc.offset;
    };
    cachingFunc.offset = 0;
    return f && cachingFunc;
  },
  _horizontal = {
    s: _scrollLeft,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;
    })
  },
  _vertical = {
    s: _scrollTop,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: _horizontal,
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;
    })
  },
  _getTarget = function _getTarget(t, self) {
    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
  },
  _isWithin = function _isWithin(element, list) {
    // check if the element is in the list or is a descendant of an element in the list.
    var i = list.length;
    while (i--) {
      if (list[i] === element || list[i].contains(element)) {
        return true;
      }
    }
    return false;
  },
  _getScrollFunc = function _getScrollFunc(element, _ref) {
    var s = _ref.s,
      sc = _ref.sc;
    // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
    _isViewport(element) && (element = _doc.scrollingElement || _docEl);
    var i = _scrollers.indexOf(element),
      offset = sc === _vertical.sc ? 1 : 2;
    !~i && (i = _scrollers.push(element) - 1);
    _scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs

    var prev = _scrollers[i + offset],
      func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {
        return arguments.length ? element[s] = value : element[s];
      })));
    func.target = element;
    prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.

    return func;
  },
  _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
    var v1 = value,
      v2 = value,
      t1 = _getTime(),
      t2 = t1,
      min = minTimeRefresh || 50,
      dropToZeroTime = Math.max(500, min * 3),
      update = function update(value, force) {
        var t = _getTime();
        if (force || t - t1 > min) {
          v2 = v1;
          v1 = value;
          t2 = t1;
          t1 = t;
        } else if (useDelta) {
          v1 += value;
        } else {
          // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
          v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
        }
      },
      reset = function reset() {
        v2 = v1 = useDelta ? 0 : v1;
        t2 = t1 = 0;
      },
      getVelocity = function getVelocity(latestValue) {
        var tOld = t2,
          vOld = v2,
          t = _getTime();
        (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
        return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
      };
    return {
      update: update,
      reset: reset,
      getVelocity: getVelocity
    };
  },
  _getEvent = function _getEvent(e, preventDefault) {
    preventDefault && !e._gsapAllow && e.preventDefault();
    return e.changedTouches ? e.changedTouches[0] : e;
  },
  _getAbsoluteMax = function _getAbsoluteMax(a) {
    var max = Math.max.apply(Math, a),
      min = Math.min.apply(Math, a);
    return Math.abs(max) >= Math.abs(min) ? max : min;
  },
  _setScrollTrigger = function _setScrollTrigger() {
    ScrollTrigger = gsap.core.globals().ScrollTrigger;
    ScrollTrigger && ScrollTrigger.core && _integrate();
  },
  _initCore = function _initCore(core) {
    gsap = core || _getGSAP();
    if (!_coreInitted && gsap && typeof document !== "undefined" && document.body) {
      _win = window;
      _doc = document;
      _docEl = _doc.documentElement;
      _body = _doc.body;
      _root = [_win, _doc, _docEl, _body];
      _clamp = gsap.utils.clamp;
      _context = gsap.core.context || function () {};
      _pointerType = "onpointerenter" in _body ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
      _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
      setTimeout(function () {
        return _startup = 0;
      }, 500);
      _setScrollTrigger();
      _coreInitted = 1;
    }
    return _coreInitted;
  };
_horizontal.op = _vertical;
_scrollers.cache = 0;
var Observer = /*#__PURE__*/function () {
  function Observer(vars) {
    this.init(vars);
  }
  var _proto = Observer.prototype;
  _proto.init = function init(vars) {
    _coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
    ScrollTrigger || _setScrollTrigger();
    var tolerance = vars.tolerance,
      dragMinimum = vars.dragMinimum,
      type = vars.type,
      target = vars.target,
      lineHeight = vars.lineHeight,
      debounce = vars.debounce,
      preventDefault = vars.preventDefault,
      onStop = vars.onStop,
      onStopDelay = vars.onStopDelay,
      ignore = vars.ignore,
      wheelSpeed = vars.wheelSpeed,
      event = vars.event,
      onDragStart = vars.onDragStart,
      onDragEnd = vars.onDragEnd,
      onDrag = vars.onDrag,
      onPress = vars.onPress,
      onRelease = vars.onRelease,
      onRight = vars.onRight,
      onLeft = vars.onLeft,
      onUp = vars.onUp,
      onDown = vars.onDown,
      onChangeX = vars.onChangeX,
      onChangeY = vars.onChangeY,
      onChange = vars.onChange,
      onToggleX = vars.onToggleX,
      onToggleY = vars.onToggleY,
      onHover = vars.onHover,
      onHoverEnd = vars.onHoverEnd,
      onMove = vars.onMove,
      ignoreCheck = vars.ignoreCheck,
      isNormalizer = vars.isNormalizer,
      onGestureStart = vars.onGestureStart,
      onGestureEnd = vars.onGestureEnd,
      onWheel = vars.onWheel,
      onEnable = vars.onEnable,
      onDisable = vars.onDisable,
      onClick = vars.onClick,
      scrollSpeed = vars.scrollSpeed,
      capture = vars.capture,
      allowClicks = vars.allowClicks,
      lockAxis = vars.lockAxis,
      onLockAxis = vars.onLockAxis;
    this.target = target = _getTarget(target) || _docEl;
    this.vars = vars;
    ignore && (ignore = gsap.utils.toArray(ignore));
    tolerance = tolerance || 1e-9;
    dragMinimum = dragMinimum || 0;
    wheelSpeed = wheelSpeed || 1;
    scrollSpeed = scrollSpeed || 1;
    type = type || "wheel,touch,pointer";
    debounce = debounce !== false;
    lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.

    var id,
      onStopDelayedCall,
      dragged,
      moved,
      wheeled,
      locked,
      axis,
      self = this,
      prevDeltaX = 0,
      prevDeltaY = 0,
      passive = vars.passive || !preventDefault && vars.passive !== false,
      scrollFuncX = _getScrollFunc(target, _horizontal),
      scrollFuncY = _getScrollFunc(target, _vertical),
      scrollX = scrollFuncX(),
      scrollY = scrollFuncY(),
      limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
      // for devices that accommodate mouse events and touch events, we need to distinguish.
      isViewport = _isViewport(target),
      ownerDoc = target.ownerDocument || _doc,
      deltaX = [0, 0, 0],
      // wheel, scroll, pointer/touch
      deltaY = [0, 0, 0],
      onClickTime = 0,
      clickCapture = function clickCapture() {
        return onClickTime = _getTime();
      },
      _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (self.event = e) && ignore && _isWithin(e.target, ignore) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
      },
      onStopFunc = function onStopFunc() {
        self._vx.reset();
        self._vy.reset();
        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
      update = function update() {
        var dx = self.deltaX = _getAbsoluteMax(deltaX),
          dy = self.deltaY = _getAbsoluteMax(deltaY),
          changedX = Math.abs(dx) >= tolerance,
          changedY = Math.abs(dy) >= tolerance;
        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.

        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }
        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }
        if (moved || dragged) {
          onMove && onMove(self);
          if (dragged) {
            onDragStart && dragged === 1 && onDragStart(self);
            onDrag && onDrag(self);
            dragged = 0;
          }
          moved = false;
        }
        locked && !(locked = false) && onLockAxis && onLockAxis(self);
        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }
        id = 0;
      },
      onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;
        self._vx.update(x);
        self._vy.update(y);
        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
      onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }
        if (axis !== "y") {
          deltaX[2] += x;
          self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
        }
        if (axis !== "x") {
          deltaY[2] += y;
          self._vy.update(y, true);
        }
        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
      _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }
        e = _getEvent(e, preventDefault);
        var x = e.clientX,
          y = e.clientY,
          dx = x - self.x,
          dy = y - self.y,
          isDragging = self.isDragging;
        self.x = x;
        self.y = y;
        if (isDragging || (dx || dy) && (Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum)) {
          dragged = isDragging ? 2 : 1; // dragged: 0 = not dragging, 1 = first drag, 2 = normal drag

          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
        }
      },
      _onPress = self.onPress = function (e) {
        if (_ignoreCheck(e, 1) || e && e.button) {
          return;
        }
        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.

        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;
        self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.

        self._vy.reset();
        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);
        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      },
      _onRelease = self.onRelease = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }
        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
        var isTrackingDrag = !isNaN(self.y - self.startY),
          wasDragging = self.isDragging,
          isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
          // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
          eventData = _getEvent(e);
        if (!isDragNotClick && isTrackingDrag) {
          self._vx.reset();
          self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.

          if (preventDefault && allowClicks) {
            gsap.delayedCall(0.08, function () {
              // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  //some browsers (like mobile Safari) don't properly trigger the click event
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }
        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
        dragged && update(); // in case debouncing, we don't want onDrag to fire AFTER onDragEnd().

        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, isDragNotClick);
      },
      _onGestureStart = function _onGestureStart(e) {
        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
      },
      _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
      onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }
        var x = scrollFuncX(),
          y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
      _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }
        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
      _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }
        var x = e.clientX,
          y = e.clientY,
          dx = x - self.x,
          dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        onStop && onStopDelayedCall.restart(true);
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
      _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
      _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
      _onClick = function _onClick(e) {
        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
      };
    onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
    self.deltaX = self.deltaY = 0;
    self._vx = _getVelocityProp(0, 50, true);
    self._vy = _getVelocityProp(0, 50, true);
    self.scrollX = scrollFuncX;
    self.scrollY = scrollFuncY;
    self.isDragging = self.isGesturing = self.isPressed = false;
    _context(this);
    self.enable = function (e) {
      if (!self.isEnabled) {
        _addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
        type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
        type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, passive, capture);
        if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
          _addListener(target, _eventTypes[0], _onPress, passive, capture);
          _addListener(ownerDoc, _eventTypes[2], _onRelease);
          _addListener(ownerDoc, _eventTypes[3], _onRelease);
          allowClicks && _addListener(target, "click", clickCapture, true, true);
          onClick && _addListener(target, "click", _onClick);
          onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
          onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
          onHover && _addListener(target, _pointerType + "enter", _onHover);
          onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
          onMove && _addListener(target, _pointerType + "move", _onMove);
        }
        self.isEnabled = true;
        self.isDragging = self.isGesturing = self.isPressed = moved = dragged = false;
        self._vx.reset();
        self._vy.reset();
        scrollX = scrollFuncX();
        scrollY = scrollFuncY();
        e && e.type && _onPress(e);
        onEnable && onEnable(self);
      }
      return self;
    };
    self.disable = function () {
      if (self.isEnabled) {
        // only remove the _onScroll listener if there aren't any others that rely on the functionality.
        _observers.filter(function (o) {
          return o !== self && _isViewport(o.target);
        }).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
        if (self.isPressed) {
          self._vx.reset();
          self._vy.reset();
          _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
        }
        _removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
        _removeListener(target, "wheel", _onWheel, capture);
        _removeListener(target, _eventTypes[0], _onPress, capture);
        _removeListener(ownerDoc, _eventTypes[2], _onRelease);
        _removeListener(ownerDoc, _eventTypes[3], _onRelease);
        _removeListener(target, "click", clickCapture, true);
        _removeListener(target, "click", _onClick);
        _removeListener(ownerDoc, "gesturestart", _onGestureStart);
        _removeListener(ownerDoc, "gestureend", _onGestureEnd);
        _removeListener(target, _pointerType + "enter", _onHover);
        _removeListener(target, _pointerType + "leave", _onHoverEnd);
        _removeListener(target, _pointerType + "move", _onMove);
        self.isEnabled = self.isPressed = self.isDragging = false;
        onDisable && onDisable(self);
      }
    };
    self.kill = self.revert = function () {
      self.disable();
      var i = _observers.indexOf(self);
      i >= 0 && _observers.splice(i, 1);
      _normalizer === self && (_normalizer = 0);
    };
    _observers.push(self);
    isNormalizer && _isViewport(target) && (_normalizer = self);
    self.enable(event);
  };
  _createClass(Observer, [{
    key: "velocityX",
    get: function get() {
      return this._vx.getVelocity();
    }
  }, {
    key: "velocityY",
    get: function get() {
      return this._vy.getVelocity();
    }
  }]);
  return Observer;
}();
Observer.version = "3.13.0";
Observer.create = function (vars) {
  return new Observer(vars);
};
Observer.register = _initCore;
Observer.getAll = function () {
  return _observers.slice();
};
Observer.getById = function (id) {
  return _observers.filter(function (o) {
    return o.vars.id === id;
  })[0];
};
_getGSAP() && gsap.registerPlugin(Observer);


/***/ }),

/***/ "./node_modules/gsap/ScrollTrigger.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/ScrollTrigger.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollTrigger: () => (/* binding */ ScrollTrigger),
/* harmony export */   "default": () => (/* binding */ ScrollTrigger)
/* harmony export */ });
/* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observer.js */ "./node_modules/gsap/Observer.js");
/*!
 * ScrollTrigger 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var gsap,
  _coreInitted,
  _win,
  _doc,
  _docEl,
  _body,
  _root,
  _resizeDelay,
  _toArray,
  _clamp,
  _time2,
  _syncInterval,
  _refreshing,
  _pointerIsDown,
  _transformProp,
  _i,
  _prevWidth,
  _prevHeight,
  _autoRefresh,
  _sort,
  _suppressOverwrites,
  _ignoreResize,
  _normalizer,
  _ignoreMobileResize,
  _baseScreenHeight,
  _baseScreenWidth,
  _fixIOSBug,
  _context,
  _scrollRestoration,
  _div100vh,
  _100vh,
  _isReverted,
  _clampingMax,
  _limitCallbacks,
  // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
  _startup = 1,
  _getTime = Date.now,
  _time1 = _getTime(),
  _lastScrollTime = 0,
  _enabled = 0,
  _parseClamp = function _parseClamp(value, type, self) {
    var clamp = _isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
    self["_" + type + "Clamp"] = clamp;
    return clamp ? value.substr(6, value.length - 7) : value;
  },
  _keepClamp = function _keepClamp(value, clamp) {
    return clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value;
  },
  _rafBugFix = function _rafBugFix() {
    return _enabled && requestAnimationFrame(_rafBugFix);
  },
  // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
  _pointerDownHandler = function _pointerDownHandler() {
    return _pointerIsDown = 1;
  },
  _pointerUpHandler = function _pointerUpHandler() {
    return _pointerIsDown = 0;
  },
  _passThrough = function _passThrough(v) {
    return v;
  },
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _getGSAP = function _getGSAP() {
    return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;
  },
  _isViewport = function _isViewport(e) {
    return !!~_root.indexOf(e);
  },
  _getViewportDimension = function _getViewportDimension(dimensionProperty) {
    return (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty];
  },
  _getBoundsFunc = function _getBoundsFunc(element) {
    return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, "getBoundingClientRect") || (_isViewport(element) ? function () {
      _winOffsets.width = _win.innerWidth;
      _winOffsets.height = _100vh;
      return _winOffsets;
    } : function () {
      return _getBounds(element);
    });
  },
  _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
    var d = _ref.d,
      d2 = _ref.d2,
      a = _ref.a;
    return (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "getBoundingClientRect")) ? function () {
      return a()[d];
    } : function () {
      return (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0;
    };
  },
  _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
    return !isViewport || ~_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
      return _winOffsets;
    };
  },
  _maxScroll = function _maxScroll(element, _ref2) {
    var s = _ref2.s,
      d2 = _ref2.d2,
      d = _ref2.d,
      a = _ref2.a;
    return Math.max(0, (s = "scroll" + d2) && (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]);
  },
  _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
    for (var i = 0; i < _autoRefresh.length; i += 3) {
      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
    }
  },
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _endAnimation = function _endAnimation(animation, reversed, pause) {
    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
  },
  _callback = function _callback(self, func) {
    if (self.enabled) {
      var result = self._ctx ? self._ctx.add(function () {
        return func(self);
      }) : func(self);
      result && result.totalTime && (self.callbackAnimation = result);
    }
  },
  _abs = Math.abs,
  _left = "left",
  _top = "top",
  _right = "right",
  _bottom = "bottom",
  _width = "width",
  _height = "height",
  _Right = "Right",
  _Left = "Left",
  _Top = "Top",
  _Bottom = "Bottom",
  _padding = "padding",
  _margin = "margin",
  _Width = "Width",
  _Height = "Height",
  _px = "px",
  _getComputedStyle = function _getComputedStyle(element) {
    return _win.getComputedStyle(element);
  },
  _makePositionable = function _makePositionable(element) {
    // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
    var position = _getComputedStyle(element).position;
    element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _getBounds = function _getBounds(element, withoutTransforms) {
    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {
        x: 0,
        y: 0,
        xPercent: 0,
        yPercent: 0,
        rotation: 0,
        rotationX: 0,
        rotationY: 0,
        scale: 1,
        skewX: 0,
        skewY: 0
      }).progress(1),
      bounds = element.getBoundingClientRect();
    tween && tween.progress(0).kill();
    return bounds;
  },
  _getSize = function _getSize(element, _ref3) {
    var d2 = _ref3.d2;
    return element["offset" + d2] || element["client" + d2] || 0;
  },
  _getLabelRatioArray = function _getLabelRatioArray(timeline) {
    var a = [],
      labels = timeline.labels,
      duration = timeline.duration(),
      p;
    for (p in labels) {
      a.push(labels[p] / duration);
    }
    return a;
  },
  _getClosestLabel = function _getClosestLabel(animation) {
    return function (value) {
      return gsap.utils.snap(_getLabelRatioArray(animation), value);
    };
  },
  _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
    var snap = gsap.utils.snap(snapIncrementOrArray),
      a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
        return a - b;
      });
    return a ? function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }
      var i;
      if (!direction) {
        return snap(value);
      }
      if (direction > 0) {
        value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.

        for (i = 0; i < a.length; i++) {
          if (a[i] >= value) {
            return a[i];
          }
        }
        return a[i - 1];
      } else {
        i = a.length;
        value += threshold;
        while (i--) {
          if (a[i] <= value) {
            return a[i];
          }
        }
      }
      return a[0];
    } : function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }
      var snapped = snap(value);
      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
    };
  },
  _getLabelAtDirection = function _getLabelAtDirection(timeline) {
    return function (value, st) {
      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
    };
  },
  _multiListener = function _multiListener(func, element, types, callback) {
    return types.split(",").forEach(function (type) {
      return func(element, type, callback);
    });
  },
  _addListener = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
  _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
  _wheelListener = function _wheelListener(func, el, scrollFunc) {
    scrollFunc = scrollFunc && scrollFunc.wheelHandler;
    if (scrollFunc) {
      func(el, "wheel", scrollFunc);
      func(el, "touchmove", scrollFunc);
    }
  },
  _markerDefaults = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal"
  },
  _defaults = {
    toggleActions: "play",
    anticipatePin: 0
  },
  _keywords = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1
  },
  _offsetToPx = function _offsetToPx(value, size) {
    if (_isString(value)) {
      var eqIndex = value.indexOf("="),
        relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
      if (~eqIndex) {
        value.indexOf("%") > eqIndex && (relative *= size / 100);
        value = value.substr(0, eqIndex - 1);
      }
      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
    }
    return value;
  },
  _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
    var startColor = _ref4.startColor,
      endColor = _ref4.endColor,
      fontSize = _ref4.fontSize,
      indent = _ref4.indent,
      fontWeight = _ref4.fontWeight;
    var e = _doc.createElement("div"),
      useFixedPosition = _isViewport(container) || (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(container, "pinType") === "fixed",
      isScroller = type.indexOf("scroller") !== -1,
      parent = useFixedPosition ? _body : container,
      isStart = type.indexOf("start") !== -1,
      color = isStart ? startColor : endColor,
      css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
    css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
    matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
    e._isStart = isStart;
    e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
    e.style.cssText = css;
    e.innerText = name || name === 0 ? type + "-" + name : type;
    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
    e._offset = e["offset" + direction.op.d2];
    _positionMarker(e, 0, direction, isStart);
    return e;
  },
  _positionMarker = function _positionMarker(marker, start, direction, flipped) {
    var vars = {
        display: "block"
      },
      side = direction[flipped ? "os2" : "p2"],
      oppositeSide = direction[flipped ? "p2" : "os2"];
    marker._isFlipped = flipped;
    vars[direction.a + "Percent"] = flipped ? -100 : 0;
    vars[direction.a] = flipped ? "1px" : 0;
    vars["border" + side + _Width] = 1;
    vars["border" + oppositeSide + _Width] = 0;
    vars[direction.p] = start + "px";
    gsap.set(marker, vars);
  },
  _triggers = [],
  _ids = {},
  _rafID,
  _sync = function _sync() {
    return _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));
  },
  _onScroll = function _onScroll() {
    // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
    if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {
      // if the user is dragging the scrollbar, allow it.
      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
      if (_normalizer) {
        _rafID || (_rafID = requestAnimationFrame(_updateAll));
      } else {
        _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
      }
      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime();
    }
  },
  _setBaseDimensions = function _setBaseDimensions() {
    _baseScreenWidth = _win.innerWidth;
    _baseScreenHeight = _win.innerHeight;
  },
  _onResize = function _onResize(force) {
    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
    (force === true || !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25)) && _resizeDelay.restart(true);
  },
  // ignore resizes triggered by refresh()
  _listeners = {},
  _emptyArray = [],
  _softRefresh = function _softRefresh() {
    return _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true);
  },
  _dispatch = function _dispatch(type) {
    return _listeners[type] && _listeners[type].map(function (f) {
      return f();
    }) || _emptyArray;
  },
  _savedStyles = [],
  // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
  _revertRecorded = function _revertRecorded(media) {
    for (var i = 0; i < _savedStyles.length; i += 5) {
      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {
        _savedStyles[i].style.cssText = _savedStyles[i + 1];
        _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
        _savedStyles[i + 3].uncache = 1;
      }
    }
  },
  _revertAll = function _revertAll(kill, media) {
    var trigger;
    for (_i = 0; _i < _triggers.length; _i++) {
      trigger = _triggers[_i];
      if (trigger && (!media || trigger._ctx === media)) {
        if (kill) {
          trigger.kill(1);
        } else {
          trigger.revert(true, true);
        }
      }
    }
    _isReverted = true;
    media && _revertRecorded(media);
    media || _dispatch("revert");
  },
  _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
    (force || !_refreshingAll) && _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {
      return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
    });
    _isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
  },
  _refreshingAll,
  _refreshID = 0,
  _queueRefreshID,
  _queueRefreshAll = function _queueRefreshAll() {
    // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
    if (_queueRefreshID !== _refreshID) {
      var id = _queueRefreshID = _refreshID;
      requestAnimationFrame(function () {
        return id === _refreshID && _refreshAll(true);
      });
    }
  },
  _refresh100vh = function _refresh100vh() {
    _body.appendChild(_div100vh);
    _100vh = !_normalizer && _div100vh.offsetHeight || _win.innerHeight;
    _body.removeChild(_div100vh);
  },
  _hideAllMarkers = function _hideAllMarkers(hide) {
    return _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(function (el) {
      return el.style.display = hide ? "none" : "block";
    });
  },
  _refreshAll = function _refreshAll(force, skipRevert) {
    _docEl = _doc.documentElement; // some frameworks like Astro may cache the <body> and replace it during routing, so we'll just re-record the _docEl and _body for safety (otherwise, the markers may not get added properly).

    _body = _doc.body;
    _root = [_win, _doc, _docEl, _body];
    if (_lastScrollTime && !force && !_isReverted) {
      _addListener(ScrollTrigger, "scrollEnd", _softRefresh);
      return;
    }
    _refresh100vh();
    _refreshingAll = ScrollTrigger.isRefreshing = true;
    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {
      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
    }); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away

    var refreshInits = _dispatch("refreshInit");
    _sort && ScrollTrigger.sort();
    skipRevert || _revertAll();
    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes

        obj(0);
      }
    });
    _triggers.slice(0).forEach(function (t) {
      return t.refresh();
    }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.

    _isReverted = false;
    _triggers.forEach(function (t) {
      // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
      if (t._subPinOffset && t.pin) {
        var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
          original = t.pin[prop];
        t.revert(true, 1);
        t.adjustPinSpacing(t.pin[prop] - original);
        t.refresh();
      }
    });
    _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.

    _hideAllMarkers(true);
    _triggers.forEach(function (t) {
      // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
      var max = _maxScroll(t.scroller, t._dir),
        endClamp = t.vars.end === "max" || t._endClamp && t.end > max,
        startClamp = t._startClamp && t.start >= max;
      (endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
    });
    _hideAllMarkers(false);
    _clampingMax = 0;
    refreshInits.forEach(function (result) {
      return result && result.render && result.render(-1);
    }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.

    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && requestAnimationFrame(function () {
          return obj.target.style.scrollBehavior = "smooth";
        });
        obj.rec && obj(obj.rec);
      }
    });
    _clearScrollMemory(_scrollRestoration, 1);
    _resizeDelay.pause();
    _refreshID++;
    _refreshingAll = 2;
    _updateAll(2);
    _triggers.forEach(function (t) {
      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
    });
    _refreshingAll = ScrollTrigger.isRefreshing = false;
    _dispatch("refresh");
  },
  _lastScroll = 0,
  _direction = 1,
  _primary,
  _updateAll = function _updateAll(force) {
    if (force === 2 || !_refreshingAll && !_isReverted) {
      // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
      ScrollTrigger.isUpdating = true;
      _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.

      var l = _triggers.length,
        time = _getTime(),
        recordVelocity = time - _time1 >= 50,
        scroll = l && _triggers[0].scroll();
      _direction = _lastScroll > scroll ? -1 : 1;
      _refreshingAll || (_lastScroll = scroll);
      if (recordVelocity) {
        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
          _lastScrollTime = 0;
          _dispatch("scrollEnd");
        }
        _time2 = _time1;
        _time1 = time;
      }
      if (_direction < 0) {
        _i = l;
        while (_i-- > 0) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
        _direction = 1;
      } else {
        for (_i = 0; _i < l; _i++) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
      }
      ScrollTrigger.isUpdating = false;
    }
    _rafID = 0;
  },
  _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
  _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
  _swapPinOut = function _swapPinOut(pin, spacer, state) {
    _setState(state);
    var cache = pin._gsap;
    if (cache.spacerIsNative) {
      _setState(cache.spacerState);
    } else if (pin._gsap.swappedIn) {
      var parent = spacer.parentNode;
      if (parent) {
        parent.insertBefore(pin, spacer);
        parent.removeChild(spacer);
      }
    }
    pin._gsap.swappedIn = false;
  },
  _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
    if (!pin._gsap.swappedIn) {
      var i = _propNamesToCopy.length,
        spacerStyle = spacer.style,
        pinStyle = pin.style,
        p;
      while (i--) {
        p = _propNamesToCopy[i];
        spacerStyle[p] = cs[p];
      }
      spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
      cs.display === "inline" && (spacerStyle.display = "inline-block");
      pinStyle[_bottom] = pinStyle[_right] = "auto";
      spacerStyle.flexBasis = cs.flexBasis || "auto";
      spacerStyle.overflow = "visible";
      spacerStyle.boxSizing = "border-box";
      spacerStyle[_width] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal) + _px;
      spacerStyle[_height] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical) + _px;
      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
      _setState(spacerState);
      pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
      pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
      pinStyle[_padding] = cs[_padding];
      if (pin.parentNode !== spacer) {
        pin.parentNode.insertBefore(spacer, pin);
        spacer.appendChild(pin);
      }
      pin._gsap.swappedIn = true;
    }
  },
  _capsExp = /([A-Z])/g,
  _setState = function _setState(state) {
    if (state) {
      var style = state.t.style,
        l = state.length,
        i = 0,
        p,
        value;
      (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off

      for (; i < l; i += 2) {
        value = state[i + 1];
        p = state[i];
        if (value) {
          style[p] = value;
        } else if (style[p]) {
          style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
        }
      }
    }
  },
  _getState = function _getState(element) {
    // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
    var l = _stateProps.length,
      style = element.style,
      state = [],
      i = 0;
    for (; i < l; i++) {
      state.push(_stateProps[i], style[_stateProps[i]]);
    }
    state.t = element;
    return state;
  },
  _copyState = function _copyState(state, override, omitOffsets) {
    var result = [],
      l = state.length,
      i = omitOffsets ? 8 : 0,
      // skip top, left, right, bottom if omitOffsets is true
      p;
    for (; i < l; i += 2) {
      p = state[i];
      result.push(p, p in override ? override[p] : state[i + 1]);
    }
    result.t = state.t;
    return result;
  },
  _winOffsets = {
    left: 0,
    top: 0
  },
  // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
  // _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
  // 	scroller = _getTarget(scroller || _win);
  // 	let direction = horizontal ? _horizontal : _vertical,
  // 		isViewport = _isViewport(scroller);
  // 	_getSizeFunc(scroller, isViewport, direction);
  // 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
  // },
  _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {
    _isFunction(value) && (value = value(self));
    if (_isString(value) && value.substr(0, 3) === "max") {
      value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
    }
    var time = containerAnimation ? containerAnimation.time() : 0,
      p1,
      p2,
      element;
    containerAnimation && containerAnimation.seek(0);
    isNaN(value) || (value = +value); // convert a string number like "45" to an actual number

    if (!_isNumber(value)) {
      _isFunction(trigger) && (trigger = trigger(self));
      var offsets = (value || "0").split(" "),
        bounds,
        localOffset,
        globalOffset,
        display;
      element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger, self) || _body;
      bounds = _getBounds(element) || {};
      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
        // if display is "none", it won't report getBoundingClientRect() properly
        display = element.style.display;
        element.style.display = "block";
        bounds = _getBounds(element);
        display ? element.style.display = display : element.style.removeProperty("display");
      }
      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
      globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
      scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
    } else {
      containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
    }
    if (clampZeroProp) {
      self[clampZeroProp] = value || -0.001;
      value < 0 && (value = 0);
    }
    if (marker) {
      var position = value + scrollerSize,
        isStart = marker._isStart;
      p1 = "scroll" + direction.d2;
      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);
      if (useFixedPosition) {
        scrollerBounds = _getBounds(markerScroller);
        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
      }
    }
    if (containerAnimation && element) {
      p1 = _getBounds(element);
      containerAnimation.seek(scrollerMax);
      p2 = _getBounds(element);
      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
      value = value / containerAnimation._caScrollDist * scrollerMax;
    }
    containerAnimation && containerAnimation.seek(time);
    return containerAnimation ? value : Math.round(value);
  },
  _prefixExp = /(webkit|moz|length|cssText|inset)/i,
  _reparent = function _reparent(element, parent, top, left) {
    if (element.parentNode !== parent) {
      var style = element.style,
        p,
        cs;
      if (parent === _body) {
        element._stOrig = style.cssText; // record original inline styles so we can revert them later

        cs = _getComputedStyle(element);
        for (p in cs) {
          // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
            style[p] = cs[p];
          }
        }
        style.top = top;
        style.left = left;
      } else {
        style.cssText = element._stOrig;
      }
      gsap.core.getCache(element).uncache = 1;
      parent.appendChild(element);
    }
  },
  _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {
    var last1 = initialValue,
      last2 = last1;
    return function (value) {
      var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.

      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {
        // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
        value = current;
        onInterrupt && onInterrupt();
      }
      last2 = last1;
      last1 = Math.round(value);
      return last1;
    };
  },
  _shiftMarker = function _shiftMarker(marker, direction, value) {
    var vars = {};
    vars[direction.p] = "+=" + value;
    gsap.set(marker, vars);
  },
  // _mergeAnimations = animations => {
  // 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
  // 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
  // 	tl.smoothChildTiming = false;
  // 	return tl;
  // },
  // returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
  _getTweenCreator = function _getTweenCreator(scroller, direction) {
    var getScroll = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),
      prop = "_scroll" + direction.p2,
      // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
      getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
        var tween = getTween.tween,
          onComplete = vars.onComplete,
          modifiers = {};
        initialValue = initialValue || getScroll();
        var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {
          tween.kill();
          getTween.tween = 0;
        });
        change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.

        change1 = change1 || scrollTo - initialValue;
        tween && tween.kill();
        vars[prop] = scrollTo;
        vars.inherit = false;
        vars.modifiers = modifiers;
        modifiers[prop] = function () {
          return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
        };
        vars.onUpdate = function () {
          _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
          getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
        };
        vars.onComplete = function () {
          getTween.tween = 0;
          onComplete && onComplete.call(tween);
        };
        tween = getTween.tween = gsap.to(scroller, vars);
        return tween;
      };
    scroller[prop] = getScroll;
    getScroll.wheelHandler = function () {
      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
    };
    _addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.

    ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
    return getTween;
  };
var ScrollTrigger = /*#__PURE__*/function () {
  function ScrollTrigger(vars, animation) {
    _coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
    _context(this);
    this.init(vars, animation);
  }
  var _proto = ScrollTrigger.prototype;
  _proto.init = function init(vars, animation) {
    this.progress = this.start = 0;
    this.vars && this.kill(true, true); // in case it's being initted again

    if (!_enabled) {
      this.update = this.refresh = this.kill = _passThrough;
      return;
    }
    vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {
      trigger: vars
    } : vars, _defaults);
    var _vars = vars,
      onUpdate = _vars.onUpdate,
      toggleClass = _vars.toggleClass,
      id = _vars.id,
      onToggle = _vars.onToggle,
      onRefresh = _vars.onRefresh,
      scrub = _vars.scrub,
      trigger = _vars.trigger,
      pin = _vars.pin,
      pinSpacing = _vars.pinSpacing,
      invalidateOnRefresh = _vars.invalidateOnRefresh,
      anticipatePin = _vars.anticipatePin,
      onScrubComplete = _vars.onScrubComplete,
      onSnapComplete = _vars.onSnapComplete,
      once = _vars.once,
      snap = _vars.snap,
      pinReparent = _vars.pinReparent,
      pinSpacer = _vars.pinSpacer,
      containerAnimation = _vars.containerAnimation,
      fastScrollEnd = _vars.fastScrollEnd,
      preventOverlaps = _vars.preventOverlaps,
      direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical,
      isToggle = !scrub && scrub !== 0,
      scroller = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.scroller || _win),
      scrollerCache = gsap.core.getCache(scroller),
      isViewport = _isViewport(scroller),
      useFixedPosition = ("pinType" in vars ? vars.pinType : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "pinType") || isViewport && "fixed") === "fixed",
      callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
      toggleActions = isToggle && vars.toggleActions.split(" "),
      markers = "markers" in vars ? vars.markers : _defaults.markers,
      borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
      self = this,
      onRefreshInit = vars.onRefreshInit && function () {
        return vars.onRefreshInit(self);
      },
      getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
      getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
      lastSnap = 0,
      lastRefresh = 0,
      prevProgress = 0,
      scrollFunc = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),
      tweenTo,
      pinCache,
      snapFunc,
      scroll1,
      scroll2,
      start,
      end,
      markerStart,
      markerEnd,
      markerStartTrigger,
      markerEndTrigger,
      markerVars,
      executingOnRefresh,
      change,
      pinOriginalState,
      pinActiveState,
      pinState,
      spacer,
      offset,
      pinGetter,
      pinSetter,
      pinStart,
      pinChange,
      spacingStart,
      spacerState,
      markerStartSetter,
      pinMoves,
      markerEndSetter,
      cs,
      snap1,
      snap2,
      scrubTween,
      scrubSmooth,
      snapDurClamp,
      snapDelayedCall,
      prevScroll,
      prevAnimProgress,
      caMarkerSetter,
      customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.

    self._startClamp = self._endClamp = false;
    self._dir = direction;
    anticipatePin *= 45;
    self.scroller = scroller;
    self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
    scroll1 = scrollFunc();
    self.vars = vars;
    animation = animation || vars.animation;
    if ("refreshPriority" in vars) {
      _sort = 1;
      vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
    }
    scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
      top: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),
      left: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)
    };
    self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
    self.scrubDuration = function (value) {
      scrubSmooth = _isNumber(value) && value;
      if (!scrubSmooth) {
        scrubTween && scrubTween.progress(1).kill();
        scrubTween = 0;
      } else {
        scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {
          ease: "expo",
          totalProgress: "+=0",
          inherit: false,
          duration: scrubSmooth,
          paused: true,
          onComplete: function onComplete() {
            return onScrubComplete && onScrubComplete(self);
          }
        });
      }
    };
    if (animation) {
      animation.vars.lazy = false;
      animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010

      self.animation = animation.pause();
      animation.scrollTrigger = self;
      self.scrubDuration(scrub);
      snap1 = 0;
      id || (id = animation.vars.id);
    }
    if (snap) {
      // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
      if (!_isObject(snap) || snap.push) {
        snap = {
          snapTo: snap
        };
      }
      "scrollBehavior" in _body.style && gsap.set(isViewport ? [_body, _docEl] : scroller, {
        scrollBehavior: "auto"
      }); // smooth scrolling doesn't work with snap.

      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (o) {
        return _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false);
      }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters

      snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
        return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);
      } : gsap.utils.snap(snap.snapTo);
      snapDurClamp = snap.duration || {
        min: 0.1,
        max: 2
      };
      snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
      snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
        var scroll = scrollFunc(),
          refreshedRecently = _getTime() - lastRefresh < 500,
          tween = tweenTo.tween;
        if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
          var progress = (scroll - start) / change,
            totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
            velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0,
            change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
            naturalEnd = progress + (snap.inertia === false ? 0 : change1),
            endValue,
            endScroll,
            _snap = snap,
            onStart = _snap.onStart,
            _onInterrupt = _snap.onInterrupt,
            _onComplete = _snap.onComplete;
          endValue = snapFunc(naturalEnd, self);
          _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd

          endScroll = Math.max(0, Math.round(start + endValue * change));
          if (scroll <= end && scroll >= start && endScroll !== scroll) {
            if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
              // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
              return;
            }
            if (snap.inertia === false) {
              change1 = endValue - progress;
            }
            tweenTo(endScroll, {
              duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
              ease: snap.ease || "power3",
              data: _abs(endScroll - scroll),
              // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
              onInterrupt: function onInterrupt() {
                return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
              },
              onComplete: function onComplete() {
                self.update();
                lastSnap = scrollFunc();
                if (animation && !isToggle) {
                  // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
                  scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
                }
                snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                onSnapComplete && onSnapComplete(self);
                _onComplete && _onComplete(self);
              }
            }, scroll, change1 * change, endScroll - scroll - change1 * change);
            onStart && onStart(self, tweenTo.tween);
          }
        } else if (self.isActive && lastSnap !== scroll) {
          snapDelayedCall.restart(true);
        }
      }).pause();
    }
    id && (_ids[id] = self);
    trigger = self.trigger = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger || pin !== true && pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.

    customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
    customRevertReturn && (customRevertReturn = customRevertReturn(self));
    pin = pin === true ? trigger : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pin);
    _isString(toggleClass) && (toggleClass = {
      targets: trigger,
      className: toggleClass
    });
    if (pin) {
      pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)

      self.pin = pin;
      pinCache = gsap.core.getCache(pin);
      if (!pinCache.spacer) {
        // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
        if (pinSpacer) {
          pinSpacer = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pinSpacer);
          pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular

          pinCache.spacerIsNative = !!pinSpacer;
          pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
        }
        pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
        spacer.classList.add("pin-spacer");
        id && spacer.classList.add("pin-spacer-" + id);
        pinCache.pinState = pinOriginalState = _getState(pin);
      } else {
        pinOriginalState = pinCache.pinState;
      }
      vars.force3D !== false && gsap.set(pin, {
        force3D: true
      });
      self.spacer = spacer = pinCache.spacer;
      cs = _getComputedStyle(pin);
      spacingStart = cs[pinSpacing + direction.os2];
      pinGetter = gsap.getProperty(pin);
      pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).

      _swapPinIn(pin, spacer, cs);
      pinState = _getState(pin);
    }
    if (markers) {
      markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
      markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
      markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
      offset = markerStartTrigger["offset" + direction.op.d2];
      var content = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "content") || scroller);
      markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
      markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
      containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
      if (!useFixedPosition && !(_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.length && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "fixedMarkers") === true)) {
        _makePositionable(isViewport ? _body : scroller);
        gsap.set([markerStartTrigger, markerEndTrigger], {
          force3D: true
        });
        markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
        markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
      }
    }
    if (containerAnimation) {
      var oldOnUpdate = containerAnimation.vars.onUpdate,
        oldParams = containerAnimation.vars.onUpdateParams;
      containerAnimation.eventCallback("onUpdate", function () {
        self.update(0, 0, 1);
        oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
      });
    }
    self.previous = function () {
      return _triggers[_triggers.indexOf(self) - 1];
    };
    self.next = function () {
      return _triggers[_triggers.indexOf(self) + 1];
    };
    self.revert = function (revert, temp) {
      if (!temp) {
        return self.kill(true);
      } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()

      var r = revert !== false || !self.enabled,
        prevRefreshing = _refreshing;
      if (r !== self.isReverted) {
        if (r) {
          prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.

          prevProgress = self.progress;
          prevAnimProgress = animation && animation.progress();
        }
        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
          return m.style.display = r ? "none" : "block";
        });
        if (r) {
          _refreshing = self;
          self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
        }
        if (pin && (!pinReparent || !self.isActive)) {
          if (r) {
            _swapPinOut(pin, spacer, pinOriginalState);
          } else {
            _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
          }
        }
        r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.

        _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.

        self.isReverted = r;
      }
    };
    self.refresh = function (soft, force, position, pinOffset) {
      // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
      if ((_refreshing || !self.enabled) && !force) {
        return;
      }
      if (pin && soft && _lastScrollTime) {
        _addListener(ScrollTrigger, "scrollEnd", _softRefresh);
        return;
      }
      !_refreshingAll && onRefreshInit && onRefreshInit(self);
      _refreshing = self;
      if (tweenTo.tween && !position) {
        // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
        tweenTo.tween.kill();
        tweenTo.tween = 0;
      }
      scrubTween && scrubTween.pause();
      if (invalidateOnRefresh && animation) {
        animation.revert({
          kill: false
        }).invalidate();
        animation.getChildren && animation.getChildren(true, true, false).forEach(function (t) {
          return t.vars.immediateRender && t.render(0, true, true);
        }); // any from() or fromTo() tweens inside a timeline should render immediately (well, unless they have immediateRender: false)
      }
      self.isReverted || self.revert(true, true);
      self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any

      var size = getScrollerSize(),
        scrollerBounds = getScrollerOffsets(),
        max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
        isFirstRefresh = change <= 0.01 || !change,
        offset = 0,
        otherPinOffset = pinOffset || 0,
        parsedEnd = _isObject(position) ? position.end : vars.end,
        parsedEndTrigger = vars.endTrigger || trigger,
        parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
        pinnedContainer = self.pinnedContainer = vars.pinnedContainer && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.pinnedContainer, self),
        triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
        i = triggerIndex,
        cs,
        bounds,
        scroll,
        isVertical,
        override,
        curTrigger,
        curPin,
        oppositeScroll,
        initted,
        revertedPins,
        forcedOverflow,
        markerStartOffset,
        markerEndOffset;
      if (markers && _isObject(position)) {
        // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
        markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
        markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
      }
      while (i-- > 0) {
        // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
        curTrigger = _triggers[i];
        curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.

        curPin = curTrigger.pin;
        if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
          revertedPins || (revertedPins = []);
          revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly

          curTrigger.revert(true, true);
        }
        if (curTrigger !== _triggers[i]) {
          // in case it got removed.
          triggerIndex--;
          i--;
        }
      }
      _isFunction(parsedStart) && (parsedStart = parsedStart(self));
      parsedStart = _parseClamp(parsedStart, "start", self);
      start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
      _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
      if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
        if (~parsedEnd.indexOf(" ")) {
          parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
        } else {
          offset = _offsetToPx(parsedEnd.substr(2), size);
          parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.

          parsedEndTrigger = trigger;
        }
      }
      parsedEnd = _parseClamp(parsedEnd, "end", self);
      end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
      offset = 0;
      i = triggerIndex;
      while (i--) {
        curTrigger = _triggers[i];
        curPin = curTrigger.pin;
        if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
          cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
          if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {
            // numeric start values shouldn't be offset at all - treat them as absolute
            offset += cs * (1 - curTrigger.progress);
          }
          curPin === pin && (otherPinOffset += cs);
        }
      }
      start += offset;
      end += offset;
      self._startClamp && (self._startClamp += offset);
      if (self._endClamp && !_refreshingAll) {
        self._endClamp = end || -0.001;
        end = Math.min(end, _maxScroll(scroller, direction));
      }
      change = end - start || (start -= 0.01) && 0.001;
      if (isFirstRefresh) {
        // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
        prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
      }
      self._pinPush = otherPinOffset;
      if (markerStart && offset) {
        // offset the markers if necessary
        cs = {};
        cs[direction.a] = "+=" + offset;
        pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
        gsap.set([markerStart, markerEnd], cs);
      }
      if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
        cs = _getComputedStyle(pin);
        isVertical = direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical;
        scroll = scrollFunc(); // recalculate because the triggers can affect the scroll

        pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
        if (!max && end > 1) {
          // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
          forcedOverflow = (isViewport ? _doc.scrollingElement || _docEl : scroller).style;
          forcedOverflow = {
            style: forcedOverflow,
            value: forcedOverflow["overflow" + direction.a.toUpperCase()]
          };
          if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") {
            // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
            forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
          }
        }
        _swapPinIn(pin, spacer, cs);
        pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.

        bounds = _getBounds(pin, true);
        oppositeScroll = useFixedPosition && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, isVertical ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical)();
        if (pinSpacing) {
          spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
          spacerState.t = spacer;
          i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;
          if (i) {
            spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).

            spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
          }
          _setState(spacerState);
          if (pinnedContainer) {
            // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
            _triggers.forEach(function (t) {
              if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                t._subPinOffset = true;
              }
            });
          }
          useFixedPosition && scrollFunc(prevScroll);
        } else {
          i = _getSize(pin, direction);
          i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
        }
        if (useFixedPosition) {
          override = {
            top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
            left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
            boxSizing: "border-box",
            position: "fixed"
          };
          override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
          override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
          override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
          override[_padding] = cs[_padding];
          override[_padding + _Top] = cs[_padding + _Top];
          override[_padding + _Right] = cs[_padding + _Right];
          override[_padding + _Bottom] = cs[_padding + _Bottom];
          override[_padding + _Left] = cs[_padding + _Left];
          pinActiveState = _copyState(pinOriginalState, override, pinReparent);
          _refreshingAll && scrollFunc(0);
        }
        if (animation) {
          // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
          initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.

          _suppressOverwrites(1);
          animation.render(animation.duration(), true, true);
          pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
          pinMoves = Math.abs(change - pinChange) > 1;
          useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.

          animation.render(0, true, true);
          initted || animation.invalidate(true);
          animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.

          _suppressOverwrites(0);
        } else {
          pinChange = change;
        }
        forcedOverflow && (forcedOverflow.value ? forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty("overflow-" + direction.a));
      } else if (trigger && scrollFunc() && !containerAnimation) {
        // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
        bounds = trigger.parentNode;
        while (bounds && bounds !== _body) {
          if (bounds._pinOffset) {
            start -= bounds._pinOffset;
            end -= bounds._pinOffset;
          }
          bounds = bounds.parentNode;
        }
      }
      revertedPins && revertedPins.forEach(function (t) {
        return t.revert(false, true);
      });
      self.start = start;
      self.end = end;
      scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity

      if (!containerAnimation && !_refreshingAll) {
        scroll1 < prevScroll && scrollFunc(prevScroll);
        self.scroll.rec = 0;
      }
      self.revert(false, true);
      lastRefresh = _getTime();
      if (snapDelayedCall) {
        lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
        // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.

        snapDelayedCall.restart(true);
      }
      _refreshing = 0;
      animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().

      if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh || animation && !animation._initted) {
        // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
        animation && !isToggle && (animation._initted || prevProgress || animation.vars.immediateRender !== false) && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.

        self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;
      }
      pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
      scrubTween && scrubTween.invalidate();
      if (!isNaN(markerStartOffset)) {
        // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
        markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
        markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);
        _shiftMarker(markerStartTrigger, direction, markerStartOffset);
        _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
        _shiftMarker(markerEndTrigger, direction, markerEndOffset);
        _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
      }
      isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.

      if (onRefresh && !_refreshingAll && !executingOnRefresh) {
        // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
        executingOnRefresh = true;
        onRefresh(self);
        executingOnRefresh = false;
      }
    };
    self.getVelocity = function () {
      return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;
    };
    self.endAnimation = function () {
      _endAnimation(self.callbackAnimation);
      if (animation) {
        scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
      }
    };
    self.labelToScroll = function (label) {
      return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
    };
    self.getTrailing = function (name) {
      var i = _triggers.indexOf(self),
        a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);
      return (_isString(name) ? a.filter(function (t) {
        return t.vars.preventOverlaps === name;
      }) : a).filter(function (t) {
        return self.direction > 0 ? t.end <= start : t.start >= end;
      });
    };
    self.update = function (reset, recordVelocity, forceFake) {
      if (containerAnimation && !forceFake && !reset) {
        return;
      }
      var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
        p = reset ? 0 : (scroll - start) / change,
        clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
        prevProgress = self.progress,
        isActive,
        wasActive,
        toggleState,
        action,
        stateChanged,
        toggled,
        isAtMax,
        isTakingAction;
      if (recordVelocity) {
        scroll2 = scroll1;
        scroll1 = containerAnimation ? scrollFunc() : scroll;
        if (snap) {
          snap2 = snap1;
          snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
        }
      } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).

      if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
        if (!clipped && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {
          clipped = 0.0001;
        } else if (clipped === 1 && end > scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {
          clipped = 0.9999;
        }
      }
      if (clipped !== prevProgress && self.enabled) {
        isActive = self.isActive = !!clipped && clipped < 1;
        wasActive = !!prevProgress && prevProgress < 1;
        toggled = isActive !== wasActive;
        stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)

        self.direction = clipped > prevProgress ? 1 : -1;
        self.progress = clipped;
        if (stateChanged && !_refreshing) {
          toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.

          if (isToggle) {
            action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)

            isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
          }
        }
        preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
          return t.endAnimation();
        }));
        if (!isToggle) {
          if (scrubTween && !_refreshing && !_startup) {
            scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.

            if (scrubTween.resetTo) {
              scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
            } else {
              // legacy support (courtesy), before 3.10.0
              scrubTween.vars.totalProgress = clipped;
              scrubTween.invalidate().restart();
            }
          } else if (animation) {
            animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
          }
        }
        if (pin) {
          reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
          if (!useFixedPosition) {
            pinSetter(_round(pinStart + pinChange * clipped));
          } else if (stateChanged) {
            isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)

            if (pinReparent) {
              if (!reset && (isActive || isAtMax)) {
                var bounds = _getBounds(pin, true),
                  _offset = scroll - start;
                _reparent(pin, _body, bounds.top + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _offset : 0) + _px, bounds.left + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? 0 : _offset) + _px);
              } else {
                _reparent(pin, spacer);
              }
            }
            _setState(isActive || isAtMax ? pinActiveState : pinState);
            pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
          }
        }
        snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
        toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
          return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
        }); // classes could affect positioning, so do it even if reset or refreshing is true.

        onUpdate && !isToggle && !reset && onUpdate(self);
        if (stateChanged && !_refreshing) {
          if (isToggle) {
            if (isTakingAction) {
              if (action === "complete") {
                animation.pause().totalProgress(1);
              } else if (action === "reset") {
                animation.restart(true).pause();
              } else if (action === "restart") {
                animation.restart(true);
              } else {
                animation[action]();
              }
            }
            onUpdate && onUpdate(self);
          }
          if (toggled || !_limitCallbacks) {
            // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
            onToggle && toggled && _callback(self, onToggle);
            callbacks[toggleState] && _callback(self, callbacks[toggleState]);
            once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.

            if (!toggled) {
              // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
              toggleState = clipped === 1 ? 1 : 3;
              callbacks[toggleState] && _callback(self, callbacks[toggleState]);
            }
          }
          if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
            _endAnimation(self.callbackAnimation);
            scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
          }
        } else if (isToggle && onUpdate && !_refreshing) {
          onUpdate(self);
        }
      } // update absolutely-positioned markers (only if the scroller isn't the viewport)

      if (markerEndSetter) {
        var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
        markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
        markerEndSetter(n);
      }
      caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
    };
    self.enable = function (reset, refresh) {
      if (!self.enabled) {
        self.enabled = true;
        _addListener(scroller, "resize", _onResize);
        isViewport || _addListener(scroller, "scroll", _onScroll);
        onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);
        if (reset !== false) {
          self.progress = prevProgress = 0;
          scroll1 = scroll2 = lastSnap = scrollFunc();
        }
        refresh !== false && self.refresh();
      }
    };
    self.getTween = function (snap) {
      return snap && tweenTo ? tweenTo.tween : scrubTween;
    };
    self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
      // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
      if (containerAnimation) {
        // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
        var st = containerAnimation.scrollTrigger,
          duration = containerAnimation.duration(),
          _change = st.end - st.start;
        newStart = st.start + _change * newStart / duration;
        newEnd = st.start + _change * newEnd / duration;
      }
      self.refresh(false, false, {
        start: _keepClamp(newStart, keepClamp && !!self._startClamp),
        end: _keepClamp(newEnd, keepClamp && !!self._endClamp)
      }, pinOffset);
      self.update();
    };
    self.adjustPinSpacing = function (amount) {
      if (spacerState && amount) {
        var i = spacerState.indexOf(direction.d) + 1;
        spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
        spacerState[1] = parseFloat(spacerState[1]) + amount + _px;
        _setState(spacerState);
      }
    };
    self.disable = function (reset, allowAnimation) {
      if (self.enabled) {
        reset !== false && self.revert(true, true);
        self.enabled = self.isActive = false;
        allowAnimation || scrubTween && scrubTween.pause();
        prevScroll = 0;
        pinCache && (pinCache.uncache = 1);
        onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
        if (snapDelayedCall) {
          snapDelayedCall.pause();
          tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
        }
        if (!isViewport) {
          var i = _triggers.length;
          while (i--) {
            if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
              return; //don't remove the listeners if there are still other triggers referencing it.
            }
          }
          _removeListener(scroller, "resize", _onResize);
          isViewport || _removeListener(scroller, "scroll", _onScroll);
        }
      }
    };
    self.kill = function (revert, allowAnimation) {
      self.disable(revert, allowAnimation);
      scrubTween && !allowAnimation && scrubTween.kill();
      id && delete _ids[id];
      var i = _triggers.indexOf(self);
      i >= 0 && _triggers.splice(i, 1);
      i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
      // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.

      i = 0;
      _triggers.forEach(function (t) {
        return t.scroller === self.scroller && (i = 1);
      });
      i || _refreshingAll || (self.scroll.rec = 0);
      if (animation) {
        animation.scrollTrigger = null;
        revert && animation.revert({
          kill: false
        });
        allowAnimation || animation.kill();
      }
      markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
        return m.parentNode && m.parentNode.removeChild(m);
      });
      _primary === self && (_primary = 0);
      if (pin) {
        pinCache && (pinCache.uncache = 1);
        i = 0;
        _triggers.forEach(function (t) {
          return t.pin === pin && i++;
        });
        i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
      }
      vars.onKill && vars.onKill(self);
    };
    _triggers.push(self);
    self.enable(false, false);
    customRevertReturn && customRevertReturn(self);
    if (animation && animation.add && !change) {
      // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
      var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().

      self.update = function () {
        self.update = updateFunc;
        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // otherwise a cached scroll position may get used in the refresh() in a very rare scenario, like if ScrollTriggers are created inside a DOMContentLoaded event and the queued requestAnimationFrame() fires beforehand. See https://gsap.com/community/forums/topic/41267-scrolltrigger-breaks-on-refresh-when-using-domcontentloaded/

        start || end || self.refresh();
      };
      gsap.delayedCall(0.01, self.update);
      change = 0.01;
      start = end = 0;
    } else {
      self.refresh();
    }
    pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
  };
  ScrollTrigger.register = function register(core) {
    if (!_coreInitted) {
      gsap = core || _getGSAP();
      _windowExists() && window.document && ScrollTrigger.enable();
      _coreInitted = _enabled;
    }
    return _coreInitted;
  };
  ScrollTrigger.defaults = function defaults(config) {
    if (config) {
      for (var p in config) {
        _defaults[p] = config[p];
      }
    }
    return _defaults;
  };
  ScrollTrigger.disable = function disable(reset, kill) {
    _enabled = 0;
    _triggers.forEach(function (trigger) {
      return trigger[kill ? "kill" : "disable"](reset);
    });
    _removeListener(_win, "wheel", _onScroll);
    _removeListener(_doc, "scroll", _onScroll);
    clearInterval(_syncInterval);
    _removeListener(_doc, "touchcancel", _passThrough);
    _removeListener(_body, "touchstart", _passThrough);
    _multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
    _multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
    _resizeDelay.kill();
    _iterateAutoRefresh(_removeListener);
    for (var i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {
      _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);
      _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);
    }
  };
  ScrollTrigger.enable = function enable() {
    _win = window;
    _doc = document;
    _docEl = _doc.documentElement;
    _body = _doc.body;
    if (gsap) {
      _toArray = gsap.utils.toArray;
      _clamp = gsap.utils.clamp;
      _context = gsap.core.context || _passThrough;
      _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
      _scrollRestoration = _win.history.scrollRestoration || "auto";
      _lastScroll = _win.pageYOffset || 0;
      gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.

      if (_body) {
        _enabled = 1;
        _div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.

        _div100vh.style.height = "100vh";
        _div100vh.style.position = "absolute";
        _refresh100vh();
        _rafBugFix();
        _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

        ScrollTrigger.isTouch = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch;
        _fixIOSBug = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503

        _ignoreMobileResize = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch === 1;
        _addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.

        _root = [_win, _doc, _docEl, _body];
        if (gsap.matchMedia) {
          ScrollTrigger.matchMedia = function (vars) {
            var mm = gsap.matchMedia(),
              p;
            for (p in vars) {
              mm.add(p, vars[p]);
            }
            return mm;
          };
          gsap.addEventListener("matchMediaInit", function () {
            return _revertAll();
          });
          gsap.addEventListener("matchMediaRevert", function () {
            return _revertRecorded();
          });
          gsap.addEventListener("matchMedia", function () {
            _refreshAll(0, 1);
            _dispatch("matchMedia");
          });
          gsap.matchMedia().add("(orientation: portrait)", function () {
            // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
            _setBaseDimensions();
            return _setBaseDimensions;
          });
        } else {
          console.warn("Requires GSAP 3.11.0 or later");
        }
        _setBaseDimensions();
        _addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!

        var bodyHasStyle = _body.hasAttribute("style"),
          bodyStyle = _body.style,
          border = bodyStyle.borderTopStyle,
          AnimationProto = gsap.core.Animation.prototype,
          bounds,
          i;
        AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", {
          value: function value() {
            return this.time(-0.01, true);
          }
        }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)

        bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.

        bounds = _getBounds(_body);
        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.m = Math.round(bounds.top + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding

        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.m = Math.round(bounds.left + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.sc()) || 0;
        border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style");
        if (!bodyHasStyle) {
          // SSR frameworks like Next.js complain if this attribute gets added.
          _body.setAttribute("style", ""); // it's not enough to just removeAttribute() - we must first set it to empty, otherwise Next.js complains.

          _body.removeAttribute("style");
        } // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.

        _syncInterval = setInterval(_sync, 250);
        gsap.delayedCall(0.5, function () {
          return _startup = 0;
        });
        _addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.

        _addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/

        _multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
        _multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
        _transformProp = gsap.utils.checkPrefix("transform");
        _stateProps.push(_transformProp);
        _coreInitted = _getTime();
        _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
        _autoRefresh = [_doc, "visibilitychange", function () {
          var w = _win.innerWidth,
            h = _win.innerHeight;
          if (_doc.hidden) {
            _prevWidth = w;
            _prevHeight = h;
          } else if (_prevWidth !== w || _prevHeight !== h) {
            _onResize();
          }
        }, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];
        _iterateAutoRefresh(_addListener);
        _triggers.forEach(function (trigger) {
          return trigger.enable(0, 1);
        });
        for (i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {
          _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);
          _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);
        }
      }
    }
  };
  ScrollTrigger.config = function config(vars) {
    "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
    var ms = vars.syncInterval;
    ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
    "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
    if ("autoRefreshEvents" in vars) {
      _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
      _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
    }
  };
  ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
    var t = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(target),
      i = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.indexOf(t),
      isViewport = _isViewport(t);
    if (~i) {
      _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.splice(i, isViewport ? 6 : 2);
    }
    if (vars) {
      isViewport ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(t, vars);
    }
  };
  ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
    _triggers.forEach(function (t) {
      return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
    });
  };
  ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {
    var bounds = (_isString(element) ? (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element) : element).getBoundingClientRect(),
      offset = bounds[horizontal ? _width : _height] * ratio || 0;
    return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
  };
  ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {
    _isString(element) && (element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element));
    var bounds = element.getBoundingClientRect(),
      size = bounds[horizontal ? _width : _height],
      offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
    return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
  };
  ScrollTrigger.killAll = function killAll(allowListeners) {
    _triggers.slice(0).forEach(function (t) {
      return t.vars.id !== "ScrollSmoother" && t.kill();
    });
    if (allowListeners !== true) {
      var listeners = _listeners.killAll || [];
      _listeners = {};
      listeners.forEach(function (f) {
        return f();
      });
    }
  };
  return ScrollTrigger;
}();
ScrollTrigger.version = "3.13.0";
ScrollTrigger.saveStyles = function (targets) {
  return targets ? _toArray(targets).forEach(function (target) {
    // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
    if (target && target.style) {
      var i = _savedStyles.indexOf(target);
      i >= 0 && _savedStyles.splice(i, 5);
      _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
    }
  }) : _savedStyles;
};
ScrollTrigger.revert = function (soft, media) {
  return _revertAll(!soft, media);
};
ScrollTrigger.create = function (vars, animation) {
  return new ScrollTrigger(vars, animation);
};
ScrollTrigger.refresh = function (safe) {
  return safe ? _onResize(true) : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
};
ScrollTrigger.update = function (force) {
  return ++_Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache && _updateAll(force === true ? 2 : 0);
};
ScrollTrigger.clearScrollMemory = _clearScrollMemory;
ScrollTrigger.maxScroll = function (element, horizontal) {
  return _maxScroll(element, horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);
};
ScrollTrigger.getScrollFunc = function (element, horizontal) {
  return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element), horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);
};
ScrollTrigger.getById = function (id) {
  return _ids[id];
};
ScrollTrigger.getAll = function () {
  return _triggers.filter(function (t) {
    return t.vars.id !== "ScrollSmoother";
  });
}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.

ScrollTrigger.isScrolling = function () {
  return !!_lastScrollTime;
};
ScrollTrigger.snapDirectional = _snapDirectional;
ScrollTrigger.addEventListener = function (type, callback) {
  var a = _listeners[type] || (_listeners[type] = []);
  ~a.indexOf(callback) || a.push(callback);
};
ScrollTrigger.removeEventListener = function (type, callback) {
  var a = _listeners[type],
    i = a && a.indexOf(callback);
  i >= 0 && a.splice(i, 1);
};
ScrollTrigger.batch = function (targets, vars) {
  var result = [],
    varsCopy = {},
    interval = vars.interval || 0.016,
    batchMax = vars.batchMax || 1e9,
    proxyCallback = function proxyCallback(type, callback) {
      var elements = [],
        triggers = [],
        delay = gsap.delayedCall(interval, function () {
          callback(elements, triggers);
          elements = [];
          triggers = [];
        }).pause();
      return function (self) {
        elements.length || delay.restart(true);
        elements.push(self.trigger);
        triggers.push(self);
        batchMax <= elements.length && delay.progress(1);
      };
    },
    p;
  for (p in vars) {
    varsCopy[p] = p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
  }
  if (_isFunction(batchMax)) {
    batchMax = batchMax();
    _addListener(ScrollTrigger, "refresh", function () {
      return batchMax = vars.batchMax();
    });
  }
  _toArray(targets).forEach(function (target) {
    var config = {};
    for (p in varsCopy) {
      config[p] = varsCopy[p];
    }
    config.trigger = target;
    result.push(ScrollTrigger.create(config));
  });
  return result;
}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).

var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
  },
  _allowNativePanning = function _allowNativePanning(target, direction) {
    if (direction === true) {
      target.style.removeProperty("touch-action");
    } else {
      target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
    }
    target === _docEl && _allowNativePanning(_body, direction);
  },
  _overflow = {
    auto: 1,
    scroll: 1
  },
  _nestedScroll = function _nestedScroll(_ref5) {
    var event = _ref5.event,
      target = _ref5.target,
      axis = _ref5.axis;
    var node = (event.changedTouches ? event.changedTouches[0] : event).target,
      cache = node._gsap || gsap.core.getCache(node),
      time = _getTime(),
      cs;
    if (!cache._isScrollT || time - cache._isScrollT > 2000) {
      // cache for 2 seconds to improve performance.
      while (node && node !== _body && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {
        node = node.parentNode;
      }
      cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
      cache._isScrollT = time;
    }
    if (cache._isScroll || axis === "x") {
      event.stopPropagation();
      event._gsapAllow = true;
    }
  },
  // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
  _inputObserver = function _inputObserver(target, type, inputs, nested) {
    return _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.create({
      target: target,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: type,
      onWheel: nested = nested && _nestedScroll,
      onPress: nested,
      onDrag: nested,
      onScroll: nested,
      onEnable: function onEnable() {
        return inputs && _addListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, false, true);
      },
      onDisable: function onDisable() {
        return _removeListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, true);
      }
    });
  },
  _inputExp = /(input|label|select|textarea)/i,
  _inputIsFocused,
  _captureInputs = function _captureInputs(e) {
    var isInput = _inputExp.test(e.target.tagName);
    if (isInput || _inputIsFocused) {
      e._gsapAllow = true;
      _inputIsFocused = isInput;
    }
  },
  _getScrollNormalizer = function _getScrollNormalizer(vars) {
    _isObject(vars) || (vars = {});
    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
    vars.type || (vars.type = "wheel,touch");
    vars.debounce = !!vars.debounce;
    vars.id = vars.id || "normalizer";
    var _vars2 = vars,
      normalizeScrollX = _vars2.normalizeScrollX,
      momentum = _vars2.momentum,
      allowNestedScroll = _vars2.allowNestedScroll,
      onRelease = _vars2.onRelease,
      self,
      maxY,
      target = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.target) || _docEl,
      smoother = gsap.core.globals().ScrollSmoother,
      smootherInstance = smoother && smoother.get(),
      content = _fixIOSBug && (vars.content && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),
      scrollFuncY = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),
      scrollFuncX = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal),
      scale = 1,
      initialScale = (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
      wheelRefresh = 0,
      resolveMomentumDuration = _isFunction(momentum) ? function () {
        return momentum(self);
      } : function () {
        return momentum || 2.8;
      },
      lastRefreshID,
      skipTouchMove,
      inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
      resumeTouchMove = function resumeTouchMove() {
        return skipTouchMove = false;
      },
      scrollClampX = _passThrough,
      scrollClampY = _passThrough,
      updateClamps = function updateClamps() {
        maxY = _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);
        scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
        normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)));
        lastRefreshID = _refreshID;
      },
      removeContentOffset = function removeContentOffset() {
        content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
        content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
        scrollFuncY.offset = scrollFuncY.cacheID = 0;
      },
      ignoreDrag = function ignoreDrag() {
        if (skipTouchMove) {
          requestAnimationFrame(resumeTouchMove);
          var offset = _round(self.deltaY / 2),
            scroll = scrollClampY(scrollFuncY.v - offset);
          if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
            scrollFuncY.offset = scroll - scrollFuncY.v;
            var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
            content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
            content._gsap.y = y + "px";
            scrollFuncY.cacheID = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache;
            _updateAll();
          }
          return true;
        }
        scrollFuncY.offset && removeContentOffset();
        skipTouchMove = true;
      },
      tween,
      startScrollX,
      startScrollY,
      onStopDelayedCall,
      onResize = function onResize() {
        // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
        updateClamps();
        if (tween.isActive() && tween.vars.scrollY > maxY) {
          scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
        }
      };
    content && gsap.set(content, {
      y: "+=0"
    }); // to ensure there's a cache (element._gsap)

    vars.ignoreCheck = function (e) {
      return _fixIOSBug && e.type === "touchmove" && ignoreDrag(e) || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
    };
    vars.onPress = function () {
      skipTouchMove = false;
      var prevScale = scale;
      scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);
      tween.pause();
      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
      startScrollX = scrollFuncX();
      startScrollY = scrollFuncY();
      updateClamps();
      lastRefreshID = _refreshID;
    };
    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
      scrollFuncY.offset && removeContentOffset();
      if (!wasDragging) {
        onStopDelayedCall.restart(true);
      } else {
        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // make sure we're pulling the non-cached value
        // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)

        var dur = resolveMomentumDuration(),
          currentScroll,
          endScroll;
        if (normalizeScrollX) {
          currentScroll = scrollFuncX();
          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.

          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal));
          tween.vars.scrollX = scrollClampX(endScroll);
        }
        currentScroll = scrollFuncY();
        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)

        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical));
        tween.vars.scrollY = scrollClampY(endScroll);
        tween.invalidate().duration(dur).play(0.01);
        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
          // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
          gsap.to({}, {
            onUpdate: onResize,
            duration: dur
          });
        }
      }
      onRelease && onRelease(self);
    };
    vars.onWheel = function () {
      tween._ts && tween.pause();
      if (_getTime() - wheelRefresh > 1000) {
        // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
        lastRefreshID = 0;
        wheelRefresh = _getTime();
      }
    };
    vars.onChange = function (self, dx, dy, xArray, yArray) {
      _refreshID !== lastRefreshID && updateClamps();
      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.

      if (dy) {
        scrollFuncY.offset && removeContentOffset();
        var isTouch = yArray[2] === dy,
          y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
          yClamped = scrollClampY(y);
        isTouch && y !== yClamped && (startScrollY += yClamped - y);
        scrollFuncY(yClamped);
      }
      (dy || dx) && _updateAll();
    };
    vars.onEnable = function () {
      _allowNativePanning(target, normalizeScrollX ? false : "x");
      ScrollTrigger.addEventListener("refresh", onResize);
      _addListener(_win, "resize", onResize);
      if (scrollFuncY.smooth) {
        scrollFuncY.target.style.scrollBehavior = "auto";
        scrollFuncY.smooth = scrollFuncX.smooth = false;
      }
      inputObserver.enable();
    };
    vars.onDisable = function () {
      _allowNativePanning(target, true);
      _removeListener(_win, "resize", onResize);
      ScrollTrigger.removeEventListener("refresh", onResize);
      inputObserver.kill();
    };
    vars.lockAxis = vars.lockAxis !== false;
    self = new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);
    self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.

    _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.

    _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping

    onStopDelayedCall = self._dc;
    tween = gsap.to(self, {
      ease: "power4",
      paused: true,
      inherit: false,
      scrollX: normalizeScrollX ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
          return tween.pause();
        })
      },
      onUpdate: _updateAll,
      onComplete: onStopDelayedCall.vars.onComplete
    }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.

    return self;
  };
ScrollTrigger.sort = function (func) {
  if (_isFunction(func)) {
    return _triggers.sort(func);
  }
  var scroll = _win.pageYOffset || 0;
  ScrollTrigger.getAll().forEach(function (t) {
    return t._sortY = t.trigger ? scroll + t.trigger.getBoundingClientRect().top : t.start + _win.innerHeight;
  });
  return _triggers.sort(func || function (a, b) {
    return (a.vars.refreshPriority || 0) * -1e6 + (a.vars.containerAnimation ? 1e6 : a._sortY) - ((b.vars.containerAnimation ? 1e6 : b._sortY) + (b.vars.refreshPriority || 0) * -1e6);
  }); // anything with a containerAnimation should refresh last.
};
ScrollTrigger.observe = function (vars) {
  return new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);
};
ScrollTrigger.normalizeScroll = function (vars) {
  if (typeof vars === "undefined") {
    return _normalizer;
  }
  if (vars === true && _normalizer) {
    return _normalizer.enable();
  }
  if (vars === false) {
    _normalizer && _normalizer.kill();
    _normalizer = vars;
    return;
  }
  var normalizer = vars instanceof _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer ? vars : _getScrollNormalizer(vars);
  _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
  _isViewport(normalizer.target) && (_normalizer = normalizer);
  return normalizer;
};
ScrollTrigger.core = {
  // smaller file size way to leverage in ScrollSmoother and Observer
  _getVelocityProp: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._getVelocityProp,
  _inputObserver: _inputObserver,
  _scrollers: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers,
  _proxies: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies,
  bridge: {
    // when normalizeScroll sets the scroll position (ss = setScroll)
    ss: function ss() {
      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime();
    },
    // a way to get the _refreshing value in Observer
    ref: function ref() {
      return _refreshing;
    }
  }
};
_getGSAP() && gsap.registerPlugin(ScrollTrigger);


/***/ }),

/***/ "./node_modules/gsap/SplitText.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/SplitText.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitText: () => (/* binding */ SplitText),
/* harmony export */   "default": () => (/* binding */ SplitText)
/* harmony export */ });
/*!
 * SplitText 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2025, GreenSock. All rights reserved. Subject to the terms at https://gsap.com/standard-license.
 * @author: Jack Doyle
 */

let gsap,
  _fonts,
  _coreInitted,
  _initIfNecessary = () => _coreInitted || SplitText.register(window.gsap),
  _charSegmenter = typeof Intl !== "undefined" ? new Intl.Segmenter() : 0,
  _toArray = r => typeof r === "string" ? _toArray(document.querySelectorAll(r)) : "length" in r ? Array.from(r) : [r],
  _elements = targets => _toArray(targets).filter(e => e instanceof HTMLElement),
  _emptyArray = [],
  _context = function () {},
  _spacesRegEx = /\s+/g,
  _emojiSafeRegEx = new RegExp("\\p{RI}\\p{RI}|\\p{Emoji}(\\p{EMod}|\\u{FE0F}\\u{20E3}?|[\\u{E0020}-\\u{E007E}]+\\u{E007F})?(\\u{200D}\\p{Emoji}(\\p{EMod}|\\u{FE0F}\\u{20E3}?|[\\u{E0020}-\\u{E007E}]+\\u{E007F})?)*|.", "gu"),
  _emptyBounds = {
    left: 0,
    top: 0,
    width: 0,
    height: 0
  },
  _stretchToFitSpecialChars = (collection, specialCharsRegEx) => {
    if (specialCharsRegEx) {
      let charsFound = new Set(collection.join("").match(specialCharsRegEx) || _emptyArray),
        i = collection.length,
        slots,
        word,
        char,
        combined;
      if (charsFound.size) {
        while (--i > -1) {
          word = collection[i];
          for (char of charsFound) {
            if (char.startsWith(word) && char.length > word.length) {
              slots = 0;
              combined = word;
              while (char.startsWith(combined += collection[i + ++slots]) && combined.length < char.length) {}
              if (slots && combined.length === char.length) {
                collection[i] = char;
                collection.splice(i + 1, slots);
                break;
              }
            }
          }
        }
      }
    }
    return collection;
  },
  _disallowInline = element => window.getComputedStyle(element).display === "inline" && (element.style.display = "inline-block"),
  _insertNodeBefore = (newChild, parent, existingChild) => parent.insertBefore(typeof newChild === "string" ? document.createTextNode(newChild) : newChild, existingChild),
  _getWrapper = (type, config, collection) => {
    let className = config[type + "sClass"] || "",
      {
        tag = "div",
        aria = "auto",
        propIndex = false
      } = config,
      display = type === "line" ? "block" : "inline-block",
      incrementClass = className.indexOf("++") > -1,
      wrapper = text => {
        let el = document.createElement(tag),
          i = collection.length + 1;
        className && (el.className = className + (incrementClass ? " " + className + i : ""));
        propIndex && el.style.setProperty("--" + type, i + "");
        aria !== "none" && el.setAttribute("aria-hidden", "true");
        if (tag !== "span") {
          el.style.position = "relative";
          el.style.display = display;
        }
        el.textContent = text;
        collection.push(el);
        return el;
      };
    incrementClass && (className = className.replace("++", ""));
    wrapper.collection = collection;
    return wrapper;
  },
  _getLineWrapper = (element, nodes, config, collection) => {
    let lineWrapper = _getWrapper("line", config, collection),
      textAlign = window.getComputedStyle(element).textAlign || "left";
    return (startIndex, endIndex) => {
      let newLine = lineWrapper("");
      newLine.style.textAlign = textAlign;
      element.insertBefore(newLine, nodes[startIndex]);
      for (; startIndex < endIndex; startIndex++) {
        newLine.appendChild(nodes[startIndex]);
      }
      newLine.normalize();
    };
  },
  _splitWordsAndCharsRecursively = (element, config, wordWrapper, charWrapper, prepForCharsOnly, deepSlice, ignore, charSplitRegEx, specialCharsRegEx, isNested) => {
    var _a;
    let nodes = Array.from(element.childNodes),
      i = 0,
      {
        wordDelimiter,
        reduceWhiteSpace = true,
        prepareText
      } = config,
      elementBounds = element.getBoundingClientRect(),
      lastBounds = elementBounds,
      isPreformatted = !reduceWhiteSpace && window.getComputedStyle(element).whiteSpace.substring(0, 3) === "pre",
      ignoredPreviousSibling = 0,
      wordsCollection = wordWrapper.collection,
      wordDelimIsNotSpace,
      wordDelimString,
      wordDelimSplitter,
      curNode,
      words,
      curWordEl,
      startsWithSpace,
      endsWithSpace,
      j,
      bounds,
      curWordChars,
      clonedNode,
      curSubNode,
      tempSubNode,
      curTextContent,
      wordText,
      lastWordText,
      k;
    if (typeof wordDelimiter === "object") {
      wordDelimSplitter = wordDelimiter.delimiter || wordDelimiter;
      wordDelimString = wordDelimiter.replaceWith || "";
    } else {
      wordDelimString = wordDelimiter === "" ? "" : wordDelimiter || " ";
    }
    wordDelimIsNotSpace = wordDelimString !== " ";
    for (; i < nodes.length; i++) {
      curNode = nodes[i];
      if (curNode.nodeType === 3) {
        curTextContent = curNode.textContent || "";
        if (reduceWhiteSpace) {
          curTextContent = curTextContent.replace(_spacesRegEx, " ");
        } else if (isPreformatted) {
          curTextContent = curTextContent.replace(/\n/g, wordDelimString + "\n");
        }
        prepareText && (curTextContent = prepareText(curTextContent, element));
        curNode.textContent = curTextContent;
        words = wordDelimString || wordDelimSplitter ? curTextContent.split(wordDelimSplitter || wordDelimString) : curTextContent.match(charSplitRegEx) || _emptyArray;
        lastWordText = words[words.length - 1];
        endsWithSpace = wordDelimIsNotSpace ? lastWordText.slice(-1) === " " : !lastWordText;
        lastWordText || words.pop();
        lastBounds = elementBounds;
        startsWithSpace = wordDelimIsNotSpace ? words[0].charAt(0) === " " : !words[0];
        startsWithSpace && _insertNodeBefore(" ", element, curNode);
        words[0] || words.shift();
        _stretchToFitSpecialChars(words, specialCharsRegEx);
        deepSlice && isNested || (curNode.textContent = "");
        for (j = 1; j <= words.length; j++) {
          wordText = words[j - 1];
          if (!reduceWhiteSpace && isPreformatted && wordText.charAt(0) === "\n") {
            (_a = curNode.previousSibling) == null ? void 0 : _a.remove();
            _insertNodeBefore(document.createElement("br"), element, curNode);
            wordText = wordText.slice(1);
          }
          if (!reduceWhiteSpace && wordText === "") {
            _insertNodeBefore(wordDelimString, element, curNode);
          } else if (wordText === " ") {
            element.insertBefore(document.createTextNode(" "), curNode);
          } else {
            wordDelimIsNotSpace && wordText.charAt(0) === " " && _insertNodeBefore(" ", element, curNode);
            if (ignoredPreviousSibling && j === 1 && !startsWithSpace && wordsCollection.indexOf(ignoredPreviousSibling.parentNode) > -1) {
              curWordEl = wordsCollection[wordsCollection.length - 1];
              curWordEl.appendChild(document.createTextNode(charWrapper ? "" : wordText));
            } else {
              curWordEl = wordWrapper(charWrapper ? "" : wordText);
              _insertNodeBefore(curWordEl, element, curNode);
              ignoredPreviousSibling && j === 1 && !startsWithSpace && curWordEl.insertBefore(ignoredPreviousSibling, curWordEl.firstChild);
            }
            if (charWrapper) {
              curWordChars = _charSegmenter ? _stretchToFitSpecialChars([..._charSegmenter.segment(wordText)].map(s => s.segment), specialCharsRegEx) : wordText.match(charSplitRegEx) || _emptyArray;
              for (k = 0; k < curWordChars.length; k++) {
                curWordEl.appendChild(curWordChars[k] === " " ? document.createTextNode(" ") : charWrapper(curWordChars[k]));
              }
            }
            if (deepSlice && isNested) {
              curTextContent = curNode.textContent = curTextContent.substring(wordText.length + 1, curTextContent.length);
              bounds = curWordEl.getBoundingClientRect();
              if (bounds.top > lastBounds.top && bounds.left <= lastBounds.left) {
                clonedNode = element.cloneNode();
                curSubNode = element.childNodes[0];
                while (curSubNode && curSubNode !== curWordEl) {
                  tempSubNode = curSubNode;
                  curSubNode = curSubNode.nextSibling;
                  clonedNode.appendChild(tempSubNode);
                }
                element.parentNode.insertBefore(clonedNode, element);
                prepForCharsOnly && _disallowInline(clonedNode);
              }
              lastBounds = bounds;
            }
            if (j < words.length || endsWithSpace) {
              _insertNodeBefore(j >= words.length ? " " : wordDelimIsNotSpace && wordText.slice(-1) === " " ? " " + wordDelimString : wordDelimString, element, curNode);
            }
          }
        }
        element.removeChild(curNode);
        ignoredPreviousSibling = 0;
      } else if (curNode.nodeType === 1) {
        if (ignore && ignore.indexOf(curNode) > -1) {
          wordsCollection.indexOf(curNode.previousSibling) > -1 && wordsCollection[wordsCollection.length - 1].appendChild(curNode);
          ignoredPreviousSibling = curNode;
        } else {
          _splitWordsAndCharsRecursively(curNode, config, wordWrapper, charWrapper, prepForCharsOnly, deepSlice, ignore, charSplitRegEx, specialCharsRegEx, true);
          ignoredPreviousSibling = 0;
        }
        prepForCharsOnly && _disallowInline(curNode);
      }
    }
  };
const _SplitText = class _SplitText {
  constructor(elements, config) {
    this.isSplit = false;
    _initIfNecessary();
    this.elements = _elements(elements);
    this.chars = [];
    this.words = [];
    this.lines = [];
    this.masks = [];
    this.vars = config;
    this._split = () => this.isSplit && this.split(this.vars);
    let orig = [],
      timerId,
      checkWidths = () => {
        let i = orig.length,
          o;
        while (i--) {
          o = orig[i];
          let w = o.element.offsetWidth;
          if (w !== o.width) {
            o.width = w;
            this._split();
            return;
          }
        }
      };
    this._data = {
      orig,
      obs: typeof ResizeObserver !== "undefined" && new ResizeObserver(() => {
        clearTimeout(timerId);
        timerId = setTimeout(checkWidths, 200);
      })
    };
    _context(this);
    this.split(config);
  }
  split(config) {
    this.isSplit && this.revert();
    this.vars = config = config || this.vars || {};
    let {
        type = "chars,words,lines",
        aria = "auto",
        deepSlice = true,
        smartWrap,
        onSplit,
        autoSplit = false,
        specialChars,
        mask
      } = this.vars,
      splitLines = type.indexOf("lines") > -1,
      splitCharacters = type.indexOf("chars") > -1,
      splitWords = type.indexOf("words") > -1,
      onlySplitCharacters = splitCharacters && !splitWords && !splitLines,
      specialCharsRegEx = specialChars && ("push" in specialChars ? new RegExp("(?:" + specialChars.join("|") + ")", "gu") : specialChars),
      finalCharSplitRegEx = specialCharsRegEx ? new RegExp(specialCharsRegEx.source + "|" + _emojiSafeRegEx.source, "gu") : _emojiSafeRegEx,
      ignore = !!config.ignore && _elements(config.ignore),
      {
        orig,
        animTime,
        obs
      } = this._data,
      onSplitResult;
    if (splitCharacters || splitWords || splitLines) {
      this.elements.forEach((element, index) => {
        orig[index] = {
          element,
          html: element.innerHTML,
          ariaL: element.getAttribute("aria-label"),
          ariaH: element.getAttribute("aria-hidden")
        };
        aria === "auto" ? element.setAttribute("aria-label", (element.textContent || "").trim()) : aria === "hidden" && element.setAttribute("aria-hidden", "true");
        let chars = [],
          words = [],
          lines = [],
          charWrapper = splitCharacters ? _getWrapper("char", config, chars) : null,
          wordWrapper = _getWrapper("word", config, words),
          i,
          curWord,
          smartWrapSpan,
          nextSibling;
        _splitWordsAndCharsRecursively(element, config, wordWrapper, charWrapper, onlySplitCharacters, deepSlice && (splitLines || onlySplitCharacters), ignore, finalCharSplitRegEx, specialCharsRegEx, false);
        if (splitLines) {
          let nodes = _toArray(element.childNodes),
            wrapLine = _getLineWrapper(element, nodes, config, lines),
            curNode,
            toRemove = [],
            lineStartIndex = 0,
            allBounds = nodes.map(n => n.nodeType === 1 ? n.getBoundingClientRect() : _emptyBounds),
            lastBounds = _emptyBounds;
          for (i = 0; i < nodes.length; i++) {
            curNode = nodes[i];
            if (curNode.nodeType === 1) {
              if (curNode.nodeName === "BR") {
                toRemove.push(curNode);
                wrapLine(lineStartIndex, i + 1);
                lineStartIndex = i + 1;
                lastBounds = allBounds[lineStartIndex];
              } else {
                if (i && allBounds[i].top > lastBounds.top && allBounds[i].left <= lastBounds.left) {
                  wrapLine(lineStartIndex, i);
                  lineStartIndex = i;
                }
                lastBounds = allBounds[i];
              }
            }
          }
          lineStartIndex < i && wrapLine(lineStartIndex, i);
          toRemove.forEach(el => {
            var _a;
            return (_a = el.parentNode) == null ? void 0 : _a.removeChild(el);
          });
        }
        if (!splitWords) {
          for (i = 0; i < words.length; i++) {
            curWord = words[i];
            if (splitCharacters || !curWord.nextSibling || curWord.nextSibling.nodeType !== 3) {
              if (smartWrap && !splitLines) {
                smartWrapSpan = document.createElement("span");
                smartWrapSpan.style.whiteSpace = "nowrap";
                while (curWord.firstChild) {
                  smartWrapSpan.appendChild(curWord.firstChild);
                }
                curWord.replaceWith(smartWrapSpan);
              } else {
                curWord.replaceWith(...curWord.childNodes);
              }
            } else {
              nextSibling = curWord.nextSibling;
              if (nextSibling && nextSibling.nodeType === 3) {
                nextSibling.textContent = (curWord.textContent || "") + (nextSibling.textContent || "");
                curWord.remove();
              }
            }
          }
          words.length = 0;
          element.normalize();
        }
        this.lines.push(...lines);
        this.words.push(...words);
        this.chars.push(...chars);
      });
      mask && this[mask] && this.masks.push(...this[mask].map(el => {
        let maskEl = el.cloneNode();
        el.replaceWith(maskEl);
        maskEl.appendChild(el);
        el.className && (maskEl.className = el.className.replace(/(\b\w+\b)/g, "$1-mask"));
        maskEl.style.overflow = "clip";
        return maskEl;
      }));
    }
    this.isSplit = true;
    _fonts && (autoSplit ? _fonts.addEventListener("loadingdone", this._split) : _fonts.status === "loading" && console.warn("SplitText called before fonts loaded"));
    if ((onSplitResult = onSplit && onSplit(this)) && onSplitResult.totalTime) {
      this._data.anim = animTime ? onSplitResult.totalTime(animTime) : onSplitResult;
    }
    splitLines && autoSplit && this.elements.forEach((element, index) => {
      orig[index].width = element.offsetWidth;
      obs && obs.observe(element);
    });
    return this;
  }
  revert() {
    var _a, _b;
    let {
      orig,
      anim,
      obs
    } = this._data;
    obs && obs.disconnect();
    orig.forEach(({
      element,
      html,
      ariaL,
      ariaH
    }) => {
      element.innerHTML = html;
      ariaL ? element.setAttribute("aria-label", ariaL) : element.removeAttribute("aria-label");
      ariaH ? element.setAttribute("aria-hidden", ariaH) : element.removeAttribute("aria-hidden");
    });
    this.chars.length = this.words.length = this.lines.length = orig.length = this.masks.length = 0;
    this.isSplit = false;
    _fonts == null ? void 0 : _fonts.removeEventListener("loadingdone", this._split);
    if (anim) {
      this._data.animTime = anim.totalTime();
      anim.revert();
    }
    (_b = (_a = this.vars).onRevert) == null ? void 0 : _b.call(_a, this);
    return this;
  }
  static create(elements, config) {
    return new _SplitText(elements, config);
  }
  static register(core) {
    gsap = gsap || core || window.gsap;
    if (gsap) {
      _toArray = gsap.utils.toArray;
      _context = gsap.core.context || _context;
    }
    if (!_coreInitted && window.innerWidth > 0) {
      _fonts = document.fonts;
      _coreInitted = true;
    }
  }
};
_SplitText.version = "3.13.0";
let SplitText = _SplitText;


/***/ }),

/***/ "./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Animation: () => (/* binding */ Animation),
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   Bounce: () => (/* binding */ Bounce),
/* harmony export */   Circ: () => (/* binding */ Circ),
/* harmony export */   Cubic: () => (/* binding */ Cubic),
/* harmony export */   Elastic: () => (/* binding */ Elastic),
/* harmony export */   Expo: () => (/* binding */ Expo),
/* harmony export */   GSCache: () => (/* binding */ GSCache),
/* harmony export */   Linear: () => (/* binding */ Linear),
/* harmony export */   Power0: () => (/* binding */ Power0),
/* harmony export */   Power1: () => (/* binding */ Power1),
/* harmony export */   Power2: () => (/* binding */ Power2),
/* harmony export */   Power3: () => (/* binding */ Power3),
/* harmony export */   Power4: () => (/* binding */ Power4),
/* harmony export */   PropTween: () => (/* binding */ PropTween),
/* harmony export */   Quad: () => (/* binding */ Quad),
/* harmony export */   Quart: () => (/* binding */ Quart),
/* harmony export */   Quint: () => (/* binding */ Quint),
/* harmony export */   Sine: () => (/* binding */ Sine),
/* harmony export */   SteppedEase: () => (/* binding */ SteppedEase),
/* harmony export */   Strong: () => (/* binding */ Strong),
/* harmony export */   Timeline: () => (/* binding */ Timeline),
/* harmony export */   TimelineLite: () => (/* binding */ Timeline),
/* harmony export */   TimelineMax: () => (/* binding */ Timeline),
/* harmony export */   Tween: () => (/* binding */ Tween),
/* harmony export */   TweenLite: () => (/* binding */ Tween),
/* harmony export */   TweenMax: () => (/* binding */ Tween),
/* harmony export */   _checkPlugin: () => (/* binding */ _checkPlugin),
/* harmony export */   _colorExp: () => (/* binding */ _colorExp),
/* harmony export */   _colorStringFilter: () => (/* binding */ _colorStringFilter),
/* harmony export */   _config: () => (/* binding */ _config),
/* harmony export */   _forEachName: () => (/* binding */ _forEachName),
/* harmony export */   _getCache: () => (/* binding */ _getCache),
/* harmony export */   _getProperty: () => (/* binding */ _getProperty),
/* harmony export */   _getSetter: () => (/* binding */ _getSetter),
/* harmony export */   _isString: () => (/* binding */ _isString),
/* harmony export */   _isUndefined: () => (/* binding */ _isUndefined),
/* harmony export */   _missingPlugin: () => (/* binding */ _missingPlugin),
/* harmony export */   _numExp: () => (/* binding */ _numExp),
/* harmony export */   _numWithUnitExp: () => (/* binding */ _numWithUnitExp),
/* harmony export */   _parseRelative: () => (/* binding */ _parseRelative),
/* harmony export */   _plugins: () => (/* binding */ _plugins),
/* harmony export */   _relExp: () => (/* binding */ _relExp),
/* harmony export */   _removeLinkedListItem: () => (/* binding */ _removeLinkedListItem),
/* harmony export */   _renderComplexString: () => (/* binding */ _renderComplexString),
/* harmony export */   _replaceRandom: () => (/* binding */ _replaceRandom),
/* harmony export */   _round: () => (/* binding */ _round),
/* harmony export */   _roundModifier: () => (/* binding */ _roundModifier),
/* harmony export */   _setDefaults: () => (/* binding */ _setDefaults),
/* harmony export */   _sortPropTweensByPriority: () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   _ticker: () => (/* binding */ _ticker),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   distribute: () => (/* binding */ distribute),
/* harmony export */   getUnit: () => (/* binding */ getUnit),
/* harmony export */   gsap: () => (/* binding */ gsap),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   mapRange: () => (/* binding */ mapRange),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pipe: () => (/* binding */ pipe),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   selector: () => (/* binding */ selector),
/* harmony export */   shuffle: () => (/* binding */ shuffle),
/* harmony export */   snap: () => (/* binding */ snap),
/* harmony export */   splitColor: () => (/* binding */ splitColor),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   unitize: () => (/* binding */ unitize),
/* harmony export */   wrap: () => (/* binding */ wrap),
/* harmony export */   wrapYoyo: () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
  _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
  _suppressOverwrites,
  _reverting,
  _context,
  _bigNum = 1e8,
  _tinyNum = 1 / _bigNum,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt = Math.sqrt,
  _cos = Math.cos,
  _sin = Math.sin,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
  _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win,
  _coreInitted,
  _doc,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
  _emptyFunc = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
  _revertConfig = {
    suppressEvents: true
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
      harnessPlugin = _harnessPlugins[i];
    }
    i = targets.length;
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;
    _lazyLookup = {};
    _lazyTweens.length = 0;
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _isRevertWorthy = function _isRevertWorthy(animation) {
    return !!(animation._initted || animation._startAt || animation.add);
  },
  _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting && _lazyRender();
    animation.render(time, suppressEvents, force || !!(_reverting && time < 0 && _isRevertWorthy(animation)));
    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
  _passThrough = function _passThrough(p) {
    return p;
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;
    while (match && i-- && a1[i] === a2[i]) {}
    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = parent[lastProp],
      t;
    if (sortBy) {
      t = child[sortBy];
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = child._prev,
      next = child._next;
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
    return animation;
  },
  _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime = _roundPrecise(tTime / cycleDuration));
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
  _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
      _setEnd(animation);
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }
    return animation;
  },
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
      // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
      t = _parentToChildTotalTime(timeline.rawTime(), child);
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
  _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
    if (!tween._initted) {
      return 1;
    }
    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
      child = animation._first;
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
        child = child._next;
      }
    } else {
      child = animation._last;
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
  _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
      irVars = vars;
      parent = timeline;
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }
    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
    return ar.forEach(function (value) {
      var _accumulator;
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = (Math.random() * i) | 0, v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
    var vars = _isObject(v) ? v : {
        each: v
      },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];
        if (!wrapAt) {
          max = -_bigNum;
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
          wrapAt < l && wrapAt--;
        }
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;
      if (snapTo.values) {
        snapTo = toArray(snapTo.values);
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
  pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
    if (!func) {
      var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;
      progress === true && (mutate = 1) && (progress = null);
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }
        l--;
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;
    for (p in labels) {
      distance = labels[p] - fromTime;
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
    return label;
  },
  _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;
    if (!callback) {
      return;
    }
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _registerPluginQueue = [],
  _createPlugin = function _createPlugin(config) {
    if (!config) return;
    config = !config.name && config["default"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    if (_windowExists() || config.headless) {
      // edge case: some build tools may pass in a null/undefined value
      var name = config.name,
        isFunc = _isFunction(config),
        Plugin = name && !isFunc && config.init ? function () {
          this._props = [];
        } : config,
        //in case someone passes in an object that's not a plugin, like CustomEase
        instanceDefaults = {
          init: _emptyFunc,
          render: _renderPropTweens,
          add: _addPropTween,
          kill: _killPropTweensOf,
          modifier: _addPluginModifier,
          rawVars: 0
        },
        statics = {
          targetTest: 0,
          get: 0,
          getSetter: _getSetter,
          aliases: {},
          register: 0
        };
      _wake();
      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }
        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods

        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods

        _plugins[Plugin.prop = name] = Plugin;
        if (config.targetTest) {
          _harnessPlugins.push(Plugin);
          _reservedProps[name] = 1;
        }
        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
      }
      _addGlobal(name, Plugin);
      config.register && config.register(gsap, Plugin, PropTween);
    } else {
      _registerPluginQueue.push(config);
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
      a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;
    if (!colors) {
      return s;
    }
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
    return result + shell[l];
  },
  _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
    return new RegExp(s + ")", "gi");
  }(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
        (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});
            _registerPluginQueue.forEach(_createPlugin);
          }
          _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame;
          _id && _self.sleep();
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
          _tickerActive = 1;
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
          _self.remove(func);
        } : callback;
        _self.remove(callback);
        _listeners[prioritize ? "unshift" : "push"](func);
        _wake();
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
      lowercaseName;
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;
  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});
_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);
_insertEase("Expo", function (p) {
  return Math.pow(2, 10 * (p - 1)) * p + p * p * p * p * p * p * (1 - p);
}); // previously 2 ** (10 * (p - 1)) but that doesn't end up with the value quite at the right spot so we do a blended ease to ensure it lands where it should perfectly.

_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});
_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});
_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }
    var p1 = 1 / steps,
      p2 = steps + (immediateStart ? 0 : 1),
      p3 = immediateStart ? 1 : 0,
      max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];
_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;
    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }
    this._ts = 1;
    _setDuration(this, +vars.duration, 1, 1);
    this.data = vars.data;
    if (_context) {
      this._ctx = _context;
      _context.data.push(this);
    }
    _tickerActive || _ticker.wake();
  }
  var _proto = Animation.prototype;
  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }
    return this._delay;
  };
  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };
  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }
    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };
  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();
    if (!arguments.length) {
      return this._tTime;
    }
    var parent = this._dp;
    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);
      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }
        parent = parent.parent;
      }
      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }
    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }
    return this;
  };
  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };
  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() >= 0 && this._initted ? 1 : 0;
  };
  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
  };
  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;
  _proto.timeScale = function timeScale(value, suppressEvents) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }
    if (this._rts === value) {
      return this;
    }
    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-Math.abs(this._delay), this.totalDuration(), tTime), suppressEvents !== false);
    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };
  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    } // possible future addition - if an animation is removed from its parent and then .restart() or .play() or .resume() is called, perhaps we should force it back into the globalTimeline but be careful because what if it's already at its end? We don't want it to just persist forever and not get released for GC.
    // !this.parent && !value && this._tTime < this._tDur && this !== _globalTimeline && _globalTimeline.add(this);

    if (this._ps !== value) {
      this._ps = value;
      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();
        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }
    return this;
  };
  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }
    return this._start;
  };
  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };
  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };
  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }
    var prevIsReverting = _reverting;
    _reverting = config;
    if (_isRevertWorthy(this)) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }
    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting = prevIsReverting;
    return this;
  };
  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();
    while (animation) {
      time = animation._start + time / (Math.abs(animation._ts) || 1);
      animation = animation._dp;
    }
    return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
  };
  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }
    return this._repeat === -2 ? Infinity : this._repeat;
  };
  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;
      _onUpdateTotalDuration(this);
      return time ? this.time(time) : this;
    }
    return this._rDelay;
  };
  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }
    return this._yoyo;
  };
  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };
  _proto.restart = function restart(includeDelay, suppressEvents) {
    this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    this._dur || (this._zTime = -_tinyNum); // ensures onComplete fires on a zero-duration animation that gets restarted.

    return this;
  };
  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };
  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };
  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };
  _proto.resume = function resume() {
    return this.paused(false);
  };
  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }
    return this._rts < 0;
  };
  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };
  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };
  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;
    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }
      return this;
    }
    return vars[type];
  };
  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };
  _proto.kill = function kill() {
    _interrupt(this);
  };
  return Animation;
}();
_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);
  function Timeline(vars, position) {
    var _this;
    if (vars === void 0) {
      vars = {};
    }
    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }
  var _proto2 = Timeline.prototype;
  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);
    return this;
  };
  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);
    return this;
  };
  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);
    return this;
  };
  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };
  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;
  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };
  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }
      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;
      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

          iteration = ~~prevIteration;
          if (iteration && iteration === prevIteration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }
          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;
          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }
          this._lock = 0;
          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }
      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }
      if (!prevTime && tTime && !suppressEvents && !prevIteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      if (time >= prevTime && totalTime >= 0) {
        child = this._first;
        while (child) {
          next = child._next;
          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;
          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && _isRevertWorthy(child)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      }
      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto2.add = function add(child, position) {
    var _this2 = this;
    _isNumber(position) || (position = _parsePosition(this, position, child));
    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }
      if (_isString(child)) {
        return this.addLabel(child, position);
      }
      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }
    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };
  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }
    if (tweens === void 0) {
      tweens = true;
    }
    if (timelines === void 0) {
      timelines = true;
    }
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }
    var a = [],
      child = this._first;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }
      child = child._next;
    }
    return a;
  };
  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;
    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };
  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }
    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }
    child.parent === this && _removeLinkedListItem(this, child);
    if (child === this._recent) {
      this._recent = this._last;
    }
    return _uncache(this);
  };
  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }
    this._forcing = 1;
    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }
    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
    this._forcing = 0;
    return this;
  };
  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };
  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };
  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };
  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);
    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }
      child = child._next;
    }
  };
  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;
    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }
    return this;
  };
  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;
    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }
      child = child._next;
    }
    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;
  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};
    var tl = this,
      endTime = _parsePosition(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
    return immediateRender ? tween.render(0) : tween;
  };
  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };
  _proto2.recent = function recent() {
    return this._recent;
  };
  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };
  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };
  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };
  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }
    var child = this._first,
      labels = this.labels,
      p;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }
      child = child._next;
    }
    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }
    return _uncache(this);
  };
  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;
    while (child) {
      child.invalidate(soft);
      child = child._next;
    }
    return _Animation.prototype.invalidate.call(this, soft);
  };
  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }
    var child = this._first,
      next;
    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }
    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };
  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum,
      prev,
      start,
      parent;
    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }
    if (self._dirty) {
      parent = self.parent;
      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;
        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }
        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;
          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }
          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }
        child._end > max && child._ts && (max = child._end);
        child = prev;
      }
      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
      self._dirty = 0;
    }
    return self._tDur;
  };
  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
      _lastRenderedFrame = _ticker.frame;
    }
    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }
        child || _ticker.sleep();
      }
    }
  };
  return Timeline;
}(Animation);
_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }
    startNums = start.match(_complexStringNumExp) || [];
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
    var copy = {},
      p;
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
    return copy;
  },
  _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate && function () {
            return _callback(tween, "onUpdate");
          },
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          tween._startAt._sat = tween; // used in globalTime()

          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
          plugin.priority && (hasPriority = 1);
        }
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }
    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
      while (i--) {
        pt = lookup[i][property];
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";
          _initTween(tween, time);
          _forceAllPropTweens = 0;
          return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
        }
        ptCache.push(pt);
      }
    }
    i = ptCache.length;
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;
    if (!propertyAliases) {
      return vars;
    }
    copy = _merge({}, vars);
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
  _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};
_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);
  function Tween(targets, vars, position, skipInherit) {
    var _this3;
    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }
    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;
    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;
      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);
        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }
        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }
          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }
        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));
        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;
        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};
          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }
          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;
            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }
          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }
      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }
    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);
      _globalTimeline.killTweensOf(parsedTargets);
      _overwritingTween = 0;
    }
    _addToTimeline(parent, _assertThisInitialized(_this3), position);
    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);
    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }
    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }
  var _proto3 = Tween.prototype;
  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;
    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative || this._lazy) {
      // this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

          iteration = ~~prevIteration;
          if (iteration && iteration === prevIteration) {
            time = dur;
            iteration--;
          } else if (time > dur) {
            time = dur;
          }
        }
        isYoyo = this._yoyo && iteration & 1;
        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        if (time === prevTime && !force && this._initted && iteration === prevIteration) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }
        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock && time !== cycleDuration && this._initted) {
            // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }
      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }
        if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
          return this;
        }
        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._tTime = tTime;
      this._time = time;
      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }
      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }
      if (!prevTime && tTime && !suppressEvents && !prevIteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      pt = this._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }
      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto3.targets = function targets() {
    return this._targets;
  };
  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };
  _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
      return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);
    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };
  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }
    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      this.parent ? _interrupt(this) : this.scrollTrigger && this.scrollTrigger.kill(!!_reverting);
      return this;
    }
    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }
    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;
    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }
    overwrittenProps = this._op = this._op || [];
    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};
        _forEachName(vars, function (name) {
          return p[name] = 1;
        });
        vars = p;
      }
      vars = _addAliasesToVars(parsedTargets, vars);
    }
    i = parsedTargets.length;
    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];
        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }
        for (p in props) {
          pt = curLookup && curLookup[p];
          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }
            delete curLookup[p];
          }
          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }
    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };
  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };
  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };
  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };
  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };
  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };
  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };
  return Tween;
}(Animation);
_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);
    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }
    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
      next;
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;
    while (pt) {
      next = pt._next;
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
      pt = next;
    }
    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
      pt = next;
    }
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;
    if (next) {
      next._prev = this;
    }
  }
  var _proto4 = PropTween.prototype;
  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };
  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});
_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
var _media = [],
  _listeners = {},
  _emptyArray = [],
  _lastMediaTime = 0,
  _contextID = 0,
  _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;
        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
      _dispatch("matchMediaRevert");
      matches.forEach(function (c) {
        return c.onMatch(c, function (func) {
          return c.add(null, func);
        });
      });
      _lastMediaTime = time;
      _dispatch("matchMedia");
    }
  };
var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

    func && this.add(func);
  }
  var _proto5 = Context.prototype;
  _proto5.add = function add(name, func, scope) {
    // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
    // if (name && _isFunction(name.revert)) {
    // 	this.data.push(name);
    // 	return (name._ctx = this);
    // }
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }
    var self = this,
      f = function f() {
        var prev = _context,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
    self.last = f;
    return name === _isFunction ? f(self, function (func) {
      return self.add(null, func);
    }) : name ? self[name] = f : f;
  };
  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };
  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
    });
    return a;
  };
  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };
  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;
    if (revert) {
      (function () {
        var tweens = _this4.getTweens(),
          i = _this4.data.length,
          t;
        while (i--) {
          // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
          t = _this4.data[i];
          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

        tweens.map(function (t) {
          return {
            g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,
            t: t
          };
        }).sort(function (a, b) {
          return b.g - a.g || -Infinity;
        }).forEach(function (o) {
          return o.t.revert(revert);
        }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

        i = _this4.data.length;
        while (i--) {
          // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
          t = _this4.data[i];
          if (t instanceof Timeline) {
            if (t.data !== "nested") {
              t.scrollTrigger && t.scrollTrigger.revert();
              t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
            }
          } else {
            !(t instanceof Tween) && t.revert && t.revert(revert);
          }
        }
        _this4._r.forEach(function (f) {
          return f(revert, _this4);
        });
        _this4.isReverted = true;
      })();
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }
    this.clear();
    if (matchMedia) {
      var i = _media.length;
      while (i--) {
        // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
        _media[i].id === this.id && _media.splice(i, 1);
      }
    }
  } // killWithCleanup() {
  // 	this.kill();
  // 	this._r.forEach(f => f(false, this));
  // }
  ;
  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };
  return Context;
}();
var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
    _context && _context.data.push(this);
  }
  var _proto6 = MatchMedia.prototype;
  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
      cond = context.conditions = {},
      mq,
      p,
      active;
    _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;
    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win.matchMedia(conditions[p]);
        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }
    active && func(context, function (f) {
      return context.add(null, f);
    });
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;
  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };
  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };
  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough : _numericIfPossible;
    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);
    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;
        while (i--) {
          setters[i](value);
        }
      };
    }
    target = target[0] || {};
    var Plugin = _plugins[property],
      cache = _getCache(target),
      p = cache.harness && (cache.harness.aliases || {})[property] || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _setDefaults2;
    var tween = gsap.to(target, _setDefaults((_setDefaults2 = {}, _setDefaults2[property] = "+=0.1", _setDefaults2.paused = true, _setDefaults2.stagger = 0, _setDefaults2), vars || {})),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });
    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };
    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }
    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
    _globalTimeline.remove(tl);
    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;
    while (child) {
      next = child._next;
      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }
      child = next;
    }
    _addToTimeline(_globalTimeline, tl, 0);
    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
        found,
        p;
      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }
      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);
        toAdd._ctx = _context;
      }
      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};
_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});
_ticker.add(Timeline.updateRoot);
_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;
    for (p in modifiers) {
      i = targets.length;
      while (i--) {
        pt = tween._ptLookup[i][p];
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      headless: 1,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
          if (_isString(vars)) {
            temp = {};
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }
          if (modifier) {
            temp = {};
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
            vars = temp;
          }
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins

var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;
    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;
    while (pt) {
      _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  headless: 1,
  init: function init(target, value) {
    var i = value.length;
    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.13.0";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
  Power1 = _easeMap.Power1,
  Power2 = _easeMap.Power2,
  Power3 = _easeMap.Power3,
  Power4 = _easeMap.Power4,
  Linear = _easeMap.Linear,
  Quad = _easeMap.Quad,
  Cubic = _easeMap.Cubic,
  Quart = _easeMap.Quart,
  Quint = _easeMap.Quint,
  Strong = _easeMap.Strong,
  Elastic = _easeMap.Elastic,
  Back = _easeMap.Back,
  SteppedEase = _easeMap.SteppedEase,
  Bounce = _easeMap.Bounce,
  Sine = _easeMap.Sine,
  Expo = _easeMap.Expo,
  Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),
/* harmony export */   Bounce: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),
/* harmony export */   CSSPlugin: () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),
/* harmony export */   Circ: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),
/* harmony export */   Cubic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),
/* harmony export */   Elastic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),
/* harmony export */   Expo: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),
/* harmony export */   Linear: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),
/* harmony export */   Power0: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),
/* harmony export */   Power1: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),
/* harmony export */   Power2: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),
/* harmony export */   Power3: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),
/* harmony export */   Power4: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),
/* harmony export */   Quad: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),
/* harmony export */   Quart: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),
/* harmony export */   Quint: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),
/* harmony export */   Sine: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),
/* harmony export */   SteppedEase: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),
/* harmony export */   Strong: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),
/* harmony export */   TimelineLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),
/* harmony export */   TimelineMax: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),
/* harmony export */   TweenLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),
/* harmony export */   TweenMax: () => (/* binding */ TweenMaxWithCSS),
/* harmony export */   "default": () => (/* binding */ gsapWithCSS),
/* harmony export */   gsap: () => (/* binding */ gsapWithCSS)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js");


var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap,
  // to protect from tree shaking
  TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/gsap/utils/paths.js":
/*!******************************************!*\
  !*** ./node_modules/gsap/utils/paths.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bezierToPoints: () => (/* binding */ bezierToPoints),
/* harmony export */   cacheRawPathMeasurements: () => (/* binding */ cacheRawPathMeasurements),
/* harmony export */   convertToPath: () => (/* binding */ convertToPath),
/* harmony export */   copyRawPath: () => (/* binding */ copyRawPath),
/* harmony export */   flatPointsToSegment: () => (/* binding */ flatPointsToSegment),
/* harmony export */   getClosestData: () => (/* binding */ getClosestData),
/* harmony export */   getPositionOnPath: () => (/* binding */ getPositionOnPath),
/* harmony export */   getRawPath: () => (/* binding */ getRawPath),
/* harmony export */   getRotationAtProgress: () => (/* binding */ getRotationAtProgress),
/* harmony export */   pointsToSegment: () => (/* binding */ pointsToSegment),
/* harmony export */   rawPathToString: () => (/* binding */ rawPathToString),
/* harmony export */   reverseSegment: () => (/* binding */ reverseSegment),
/* harmony export */   simplifyPoints: () => (/* binding */ simplifyPoints),
/* harmony export */   sliceRawPath: () => (/* binding */ sliceRawPath),
/* harmony export */   stringToRawPath: () => (/* binding */ stringToRawPath),
/* harmony export */   subdivideSegment: () => (/* binding */ subdivideSegment),
/* harmony export */   subdivideSegmentNear: () => (/* binding */ subdivideSegmentNear),
/* harmony export */   transformRawPath: () => (/* binding */ transformRawPath)
/* harmony export */ });
/*!
 * paths 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
  _numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
  _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
  _selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
  _DEG2RAD = Math.PI / 180,
  _RAD2DEG = 180 / Math.PI,
  _sin = Math.sin,
  _cos = Math.cos,
  _abs = Math.abs,
  _sqrt = Math.sqrt,
  _atan2 = Math.atan2,
  _largeNum = 1e8,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _temp = {},
  _temp2 = {},
  _roundingNum = 1e5,
  _wrapProgress = function _wrapProgress(progress) {
    return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);
  },
  //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
  _round = function _round(value) {
    return Math.round(value * _roundingNum) / _roundingNum || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 1e10) / 1e10 || 0;
  },
  _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {
    var segment = rawPath[segIndex],
      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);
    if ((shift || !t) && shift + i + 2 < segment.length) {
      rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
      segment.splice(0, i + shift);
      return 1;
    }
  },
  _getSampleIndex = function _getSampleIndex(samples, length, progress) {
    // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
    var l = samples.length,
      i = ~~(progress * l);
    if (samples[i] > length) {
      while (--i && samples[i] > length) {}
      i < 0 && (i = 0);
    } else {
      while (samples[++i] < length && i < l) {}
    }
    return i < l ? i : l - 1;
  },
  _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {
    var i = rawPath.length;
    skipOuter || rawPath.reverse();
    while (i--) {
      rawPath[i].reversed || reverseSegment(rawPath[i]);
    }
  },
  _copyMetaData = function _copyMetaData(source, copy) {
    copy.totalLength = source.totalLength;
    if (source.samples) {
      //segment
      copy.samples = source.samples.slice(0);
      copy.lookup = source.lookup.slice(0);
      copy.minLength = source.minLength;
      copy.resolution = source.resolution;
    } else if (source.totalPoints) {
      //rawPath
      copy.totalPoints = source.totalPoints;
    }
    return copy;
  },
  //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
  _appendOrMerge = function _appendOrMerge(rawPath, segment) {
    var index = rawPath.length,
      prevSeg = rawPath[index - 1] || [],
      l = prevSeg.length;
    if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {
      segment = prevSeg.concat(segment.slice(2));
      index--;
    }
    rawPath[index] = segment;
  },
  _bestDistance;
/* TERMINOLOGY
 - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
 - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
 - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
 - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
 */
//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).

function getRawPath(value) {
  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;
  var e = value.getAttribute ? value : 0,
    rawPath;
  if (e && (value = value.getAttribute("d"))) {
    //implements caching
    if (!e._gsPath) {
      e._gsPath = {};
    }
    rawPath = e._gsPath[value];
    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);
  }
  return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;
} //copies a RawPath WITHOUT the length meta data (for speed)

function copyRawPath(rawPath) {
  var a = [],
    i = 0;
  for (; i < rawPath.length; i++) {
    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
  }
  return _copyMetaData(rawPath, a);
}
function reverseSegment(segment) {
  var i = 0,
    y;
  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.

  for (; i < segment.length; i += 2) {
    y = segment[i];
    segment[i] = segment[i + 1];
    segment[i + 1] = y;
  }
  segment.reversed = !segment.reversed;
}
var _createPath = function _createPath(e, ignore) {
    var path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
      attr = [].slice.call(e.attributes),
      i = attr.length,
      name;
    ignore = "," + ignore + ",";
    while (--i > -1) {
      name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.

      if (ignore.indexOf("," + name + ",") < 0) {
        path.setAttributeNS(null, name, attr[i].nodeValue);
      }
    }
    return path;
  },
  _typeAttrs = {
    rect: "rx,ry,x,y,width,height",
    circle: "r,cx,cy",
    ellipse: "rx,ry,cx,cy",
    line: "x1,x2,y1,y2"
  },
  _attrToObj = function _attrToObj(e, attrs) {
    var props = attrs ? attrs.split(",") : [],
      obj = {},
      i = props.length;
    while (--i > -1) {
      obj[props[i]] = +e.getAttribute(props[i]) || 0;
    }
    return obj;
  }; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.

function convertToPath(element, swap) {
  var type = element.tagName.toLowerCase(),
    circ = 0.552284749831,
    data,
    x,
    y,
    r,
    ry,
    path,
    rcirc,
    rycirc,
    points,
    w,
    h,
    x2,
    x3,
    x4,
    x5,
    x6,
    y2,
    y3,
    y4,
    y5,
    y6,
    attr;
  if (type === "path" || !element.getBBox) {
    return element;
  }
  path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
  attr = _attrToObj(element, _typeAttrs[type]);
  if (type === "rect") {
    r = attr.rx;
    ry = attr.ry || r;
    x = attr.x;
    y = attr.y;
    w = attr.width - r * 2;
    h = attr.height - ry * 2;
    if (r || ry) {
      //if there are rounded corners, render cubic beziers
      x2 = x + r * (1 - circ);
      x3 = x + r;
      x4 = x3 + w;
      x5 = x4 + r * circ;
      x6 = x4 + r;
      y2 = y + ry * (1 - circ);
      y3 = y + ry;
      y4 = y3 + h;
      y5 = y4 + ry * circ;
      y6 = y4 + ry;
      data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
    } else {
      data = "M" + (x + w) + "," + y + " v" + h + " h" + -w + " v" + -h + " h" + w + "z";
    }
  } else if (type === "circle" || type === "ellipse") {
    if (type === "circle") {
      r = ry = attr.r;
      rycirc = r * circ;
    } else {
      r = attr.rx;
      ry = attr.ry;
      rycirc = ry * circ;
    }
    x = attr.cx;
    y = attr.cy;
    rcirc = r * circ;
    data = "M" + (x + r) + "," + y + " C" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
  } else if (type === "line") {
    data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
  } else if (type === "polyline" || type === "polygon") {
    points = (element.getAttribute("points") + "").match(_numbersExp) || [];
    x = points.shift();
    y = points.shift();
    data = "M" + x + "," + y + " L" + points.join(",");
    if (type === "polygon") {
      data += "," + x + "," + y + "z";
    }
  }
  path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
  if (swap && element.parentNode) {
    element.parentNode.insertBefore(path, element);
    element.parentNode.removeChild(element);
  }
  return path;
} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)

function getRotationAtProgress(rawPath, progress) {
  var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);
  return getRotationAtBezierT(d.segment, d.i, d.t);
}
function getRotationAtBezierT(segment, i, t) {
  var a = segment[i],
    b = segment[i + 2],
    c = segment[i + 4],
    x;
  a += (b - a) * t;
  b += (c - b) * t;
  a += (b - a) * t;
  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;
  a = segment[i + 1];
  b = segment[i + 3];
  c = segment[i + 5];
  a += (b - a) * t;
  b += (c - b) * t;
  a += (b - a) * t;
  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);
}
function sliceRawPath(rawPath, start, end) {
  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.

  start = _roundPrecise(start) || 0;
  var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
    path = copyRawPath(rawPath);
  if (start > end) {
    start = 1 - start;
    end = 1 - end;
    _reverseRawPath(path);
    path.totalLength = 0;
  }
  if (start < 0 || end < 0) {
    var offset = Math.abs(~~Math.min(start, end)) + 1;
    start += offset;
    end += offset;
  }
  path.totalLength || cacheRawPathMeasurements(path);
  var wrap = end > 1,
    s = getProgressData(path, start, _temp, true),
    e = getProgressData(path, end, _temp2),
    eSeg = e.segment,
    sSeg = s.segment,
    eSegIndex = e.segIndex,
    sSegIndex = s.segIndex,
    ei = e.i,
    si = s.i,
    sameSegment = sSegIndex === eSegIndex,
    sameBezier = ei === si && sameSegment,
    wrapsBehind,
    sShift,
    eShift,
    i,
    copy,
    totalSegments,
    l,
    j;
  if (wrap || loops) {
    wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;
    if (_splitSegment(path, sSegIndex, si, s.t)) {
      sSegIndex++;
      if (!wrapsBehind) {
        eSegIndex++;
        if (sameBezier) {
          e.t = (e.t - s.t) / (1 - s.t);
          ei = 0;
        } else if (sameSegment) {
          ei -= si;
        }
      }
    }
    if (Math.abs(1 - (end - start)) < 1e-5) {
      eSegIndex = sSegIndex - 1;
    } else if (!e.t && eSegIndex) {
      eSegIndex--;
    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
      sSegIndex++;
    }
    if (s.t === 1) {
      sSegIndex = (sSegIndex + 1) % path.length;
    }
    copy = [];
    totalSegments = path.length;
    l = 1 + totalSegments * loops;
    j = sSegIndex;
    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;
    for (i = 0; i < l; i++) {
      _appendOrMerge(copy, path[j++ % totalSegments]);
    }
    path = copy;
  } else {
    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);
    if (start !== end) {
      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
      sameSegment && (eShift += sShift);
      eSeg.splice(ei + eShift + 2);
      (sShift || si) && sSeg.splice(0, si + sShift);
      i = path.length;
      while (i--) {
        //chop off any extra segments
        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);
      }
    } else {
      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!

      ei += eShift;
      s = eSeg[ei];
      e = eSeg[ei + 1];
      eSeg.length = eSeg.totalLength = 0;
      eSeg.totalPoints = path.totalPoints = 8;
      eSeg.push(s, e, s, e, s, e, s, e);
    }
  }
  path.totalLength = 0;
  return path;
} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.

function measureSegment(segment, startIndex, bezierQty) {
  startIndex = startIndex || 0;
  if (!segment.samples) {
    segment.samples = [];
    segment.lookup = [];
  }
  var resolution = ~~segment.resolution || 12,
    inc = 1 / resolution,
    endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
    x1 = segment[startIndex],
    y1 = segment[startIndex + 1],
    samplesIndex = startIndex ? startIndex / 6 * resolution : 0,
    samples = segment.samples,
    lookup = segment.lookup,
    min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
    prevLength = samples[samplesIndex + bezierQty * resolution - 1],
    length = startIndex ? samples[samplesIndex - 1] : 0,
    i,
    j,
    x4,
    x3,
    x2,
    xd,
    xd1,
    y4,
    y3,
    y2,
    yd,
    yd1,
    inv,
    t,
    lengthIndex,
    l,
    segLength;
  samples.length = lookup.length = 0;
  for (j = startIndex + 2; j < endIndex; j += 6) {
    x4 = segment[j + 4] - x1;
    x3 = segment[j + 2] - x1;
    x2 = segment[j] - x1;
    y4 = segment[j + 5] - y1;
    y3 = segment[j + 3] - y1;
    y2 = segment[j + 1] - y1;
    xd = xd1 = yd = yd1 = 0;
    if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {
      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
      if (segment.length > 8) {
        segment.splice(j, 6);
        j -= 6;
        endIndex -= 6;
      }
    } else {
      for (i = 1; i <= resolution; i++) {
        t = inc * i;
        inv = 1 - t;
        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
        l = _sqrt(yd * yd + xd * xd);
        if (l < min) {
          min = l;
        }
        length += l;
        samples[samplesIndex++] = length;
      }
    }
    x1 += x4;
    y1 += y4;
  }
  if (prevLength) {
    prevLength -= length;
    for (; samplesIndex < samples.length; samplesIndex++) {
      samples[samplesIndex] += prevLength;
    }
  }
  if (samples.length && min) {
    segment.totalLength = segLength = samples[samples.length - 1] || 0;
    segment.minLength = min;
    if (segLength / min < 9999) {
      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
      l = lengthIndex = 0;
      for (i = 0; i < segLength; i += min) {
        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;
      }
    }
  } else {
    segment.totalLength = samples[0] = 0;
  }
  return startIndex ? length - samples[startIndex / 2 - 1] : length;
}
function cacheRawPathMeasurements(rawPath, resolution) {
  var pathLength, points, i;
  for (i = pathLength = points = 0; i < rawPath.length; i++) {
    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)

    points += rawPath[i].length;
    pathLength += measureSegment(rawPath[i]);
  }
  rawPath.totalPoints = points;
  rawPath.totalLength = pathLength;
  return rawPath;
} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)

function subdivideSegment(segment, i, t) {
  if (t <= 0 || t >= 1) {
    return 0;
  }
  var ax = segment[i],
    ay = segment[i + 1],
    cp1x = segment[i + 2],
    cp1y = segment[i + 3],
    cp2x = segment[i + 4],
    cp2y = segment[i + 5],
    bx = segment[i + 6],
    by = segment[i + 7],
    x1a = ax + (cp1x - ax) * t,
    x2 = cp1x + (cp2x - cp1x) * t,
    y1a = ay + (cp1y - ay) * t,
    y2 = cp1y + (cp2y - cp1y) * t,
    x1 = x1a + (x2 - x1a) * t,
    y1 = y1a + (y2 - y1a) * t,
    x2a = cp2x + (bx - cp2x) * t,
    y2a = cp2y + (by - cp2y) * t;
  x2 += (x2a - x2) * t;
  y2 += (y2a - y2) * t;
  segment.splice(i + 2, 4, _round(x1a),
  //first control point
  _round(y1a), _round(x1),
  //second control point
  _round(y1), _round(x1 + (x2 - x1) * t),
  //new fabricated anchor on line
  _round(y1 + (y2 - y1) * t), _round(x2),
  //third control point
  _round(y2), _round(x2a),
  //fourth control point
  _round(y2a));
  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);
  return 6;
} // returns an object {path, segment, segIndex, i, t}

function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
  decoratee = decoratee || {};
  rawPath.totalLength || cacheRawPathMeasurements(rawPath);
  if (progress < 0 || progress > 1) {
    progress = _wrapProgress(progress);
  }
  var segIndex = 0,
    segment = rawPath[0],
    samples,
    resolution,
    length,
    min,
    max,
    i,
    t;
  if (!progress) {
    t = i = segIndex = 0;
    segment = rawPath[0];
  } else if (progress === 1) {
    t = 1;
    segIndex = rawPath.length - 1;
    segment = rawPath[segIndex];
    i = segment.length - 8;
  } else {
    if (rawPath.length > 1) {
      //speed optimization: most of the time, there's only one segment so skip the recursion.
      length = rawPath.totalLength * progress;
      max = i = 0;
      while ((max += rawPath[i++].totalLength) < length) {
        segIndex = i;
      }
      segment = rawPath[segIndex];
      min = max - segment.totalLength;
      progress = (length - min) / (max - min) || 0;
    }
    samples = segment.samples;
    resolution = segment.resolution; //how many samples per cubic bezier chunk

    length = segment.totalLength * progress;
    i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);
    min = i ? samples[i - 1] : 0;
    max = samples[i];
    if (max < length) {
      min = max;
      max = samples[++i];
    }
    t = 1 / resolution * ((length - min) / (max - min) + i % resolution);
    i = ~~(i / resolution) * 6;
    if (pushToNextIfAtEnd && t === 1) {
      if (i + 6 < segment.length) {
        i += 6;
        t = 0;
      } else if (segIndex + 1 < rawPath.length) {
        i = t = 0;
        segment = rawPath[++segIndex];
      }
    }
  }
  decoratee.t = t;
  decoratee.i = i;
  decoratee.path = rawPath;
  decoratee.segment = segment;
  decoratee.segIndex = segIndex;
  return decoratee;
}
function getPositionOnPath(rawPath, progress, includeAngle, point) {
  var segment = rawPath[0],
    result = point || {},
    samples,
    resolution,
    length,
    min,
    max,
    i,
    t,
    a,
    inv;
  if (progress < 0 || progress > 1) {
    progress = _wrapProgress(progress);
  }
  segment.lookup || cacheRawPathMeasurements(rawPath);
  if (rawPath.length > 1) {
    //speed optimization: most of the time, there's only one segment so skip the recursion.
    length = rawPath.totalLength * progress;
    max = i = 0;
    while ((max += rawPath[i++].totalLength) < length) {
      segment = rawPath[i];
    }
    min = max - segment.totalLength;
    progress = (length - min) / (max - min) || 0;
  }
  samples = segment.samples;
  resolution = segment.resolution;
  length = segment.totalLength * progress;
  i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);
  min = i ? samples[i - 1] : 0;
  max = samples[i];
  if (max < length) {
    min = max;
    max = samples[++i];
  }
  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;
  inv = 1 - t;
  i = ~~(i / resolution) * 6;
  a = segment[i];
  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);
  if (includeAngle) {
    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
  }
  return result;
} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).

function transformRawPath(rawPath, a, b, c, d, tx, ty) {
  var j = rawPath.length,
    segment,
    l,
    i,
    x,
    y;
  while (--j > -1) {
    segment = rawPath[j];
    l = segment.length;
    for (i = 0; i < l; i += 2) {
      x = segment[i];
      y = segment[i + 1];
      segment[i] = x * a + y * c + tx;
      segment[i + 1] = x * b + y * d + ty;
    }
  }
  rawPath._dirty = 1;
  return rawPath;
} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.

function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
  if (lastX === x && lastY === y) {
    return;
  }
  rx = _abs(rx);
  ry = _abs(ry);
  var angleRad = angle % 360 * _DEG2RAD,
    cosAngle = _cos(angleRad),
    sinAngle = _sin(angleRad),
    PI = Math.PI,
    TWOPI = PI * 2,
    dx2 = (lastX - x) / 2,
    dy2 = (lastY - y) / 2,
    x1 = cosAngle * dx2 + sinAngle * dy2,
    y1 = -sinAngle * dx2 + cosAngle * dy2,
    x1_sq = x1 * x1,
    y1_sq = y1 * y1,
    radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
  if (radiiCheck > 1) {
    rx = _sqrt(radiiCheck) * rx;
    ry = _sqrt(radiiCheck) * ry;
  }
  var rx_sq = rx * rx,
    ry_sq = ry * ry,
    sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);
  if (sq < 0) {
    sq = 0;
  }
  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),
    cx1 = coef * (rx * y1 / ry),
    cy1 = coef * -(ry * x1 / rx),
    sx2 = (lastX + x) / 2,
    sy2 = (lastY + y) / 2,
    cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
    cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
    ux = (x1 - cx1) / rx,
    uy = (y1 - cy1) / ry,
    vx = (-x1 - cx1) / rx,
    vy = (-y1 - cy1) / ry,
    temp = ux * ux + uy * uy,
    angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
    angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));
  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.

  if (!sweepFlag && angleExtent > 0) {
    angleExtent -= TWOPI;
  } else if (sweepFlag && angleExtent < 0) {
    angleExtent += TWOPI;
  }
  angleStart %= TWOPI;
  angleExtent %= TWOPI;
  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
    rawPath = [],
    angleIncrement = angleExtent / segments,
    controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
    ma = cosAngle * rx,
    mb = sinAngle * rx,
    mc = sinAngle * -ry,
    md = cosAngle * ry,
    i;
  for (i = 0; i < segments; i++) {
    angle = angleStart + i * angleIncrement;
    x1 = _cos(angle);
    y1 = _sin(angle);
    ux = _cos(angle += angleIncrement);
    uy = _sin(angle);
    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).

  for (i = 0; i < rawPath.length; i += 2) {
    x1 = rawPath[i];
    y1 = rawPath[i + 1];
    rawPath[i] = x1 * ma + y1 * mc + cx;
    rawPath[i + 1] = x1 * mb + y1 * md + cy;
  }
  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be

  rawPath[i - 1] = y;
  return rawPath;
} //Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.

function stringToRawPath(d) {
  var a = (d + "").replace(_scientific, function (m) {
      var n = +m;
      return n < 0.0001 && n > -0.0001 ? 0 : n;
    }).match(_svgPathExp) || [],
    //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
    path = [],
    relativeX = 0,
    relativeY = 0,
    twoThirds = 2 / 3,
    elements = a.length,
    points = 0,
    errorMessage = "ERROR: malformed path: " + d,
    i,
    j,
    x,
    y,
    command,
    isRelative,
    segment,
    startX,
    startY,
    difX,
    difY,
    beziers,
    prevCommand,
    flag1,
    flag2,
    line = function line(sx, sy, ex, ey) {
      difX = (ex - sx) / 3;
      difY = (ey - sy) / 3;
      segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
    };
  if (!d || !isNaN(a[0]) || isNaN(a[1])) {
    console.log(errorMessage);
    return path;
  }
  for (i = 0; i < elements; i++) {
    prevCommand = command;
    if (isNaN(a[i])) {
      command = a[i].toUpperCase();
      isRelative = command !== a[i]; //lower case means relative
    } else {
      //commands like "C" can be strung together without any new command characters between.
      i--;
    }
    x = +a[i + 1];
    y = +a[i + 2];
    if (isRelative) {
      x += relativeX;
      y += relativeY;
    }
    if (!i) {
      startX = x;
      startY = y;
    } // "M" (move)

    if (command === "M") {
      if (segment) {
        if (segment.length < 8) {
          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
          path.length -= 1;
        } else {
          points += segment.length;
        }
      }
      relativeX = startX = x;
      relativeY = startY = y;
      segment = [x, y];
      path.push(segment);
      i += 2;
      command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
      // "C" (cubic bezier)
    } else if (command === "C") {
      if (!segment) {
        segment = [0, 0];
      }
      if (!isRelative) {
        relativeX = relativeY = 0;
      } //note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.

      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);
      i += 6; // "S" (continuation of cubic bezier)
    } else if (command === "S") {
      difX = relativeX;
      difY = relativeY;
      if (prevCommand === "C" || prevCommand === "S") {
        difX += relativeX - segment[segment.length - 4];
        difY += relativeY - segment[segment.length - 3];
      }
      if (!isRelative) {
        relativeX = relativeY = 0;
      }
      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);
      i += 4; // "Q" (quadratic bezier)
    } else if (command === "Q") {
      difX = relativeX + (x - relativeX) * twoThirds;
      difY = relativeY + (y - relativeY) * twoThirds;
      if (!isRelative) {
        relativeX = relativeY = 0;
      }
      relativeX += a[i + 3] * 1;
      relativeY += a[i + 4] * 1;
      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
      i += 4; // "T" (continuation of quadratic bezier)
    } else if (command === "T") {
      difX = relativeX - segment[segment.length - 4];
      difY = relativeY - segment[segment.length - 3];
      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);
      i += 2; // "H" (horizontal line)
    } else if (command === "H") {
      line(relativeX, relativeY, relativeX = x, relativeY);
      i += 1; // "V" (vertical line)
    } else if (command === "V") {
      //adjust values because the first (and only one) isn't x in this case, it's y.
      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));
      i += 1; // "L" (line) or "Z" (close)
    } else if (command === "L" || command === "Z") {
      if (command === "Z") {
        x = startX;
        y = startY;
        segment.closed = true;
      }
      if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
        line(relativeX, relativeY, x, y);
        if (command === "L") {
          i += 2;
        }
      }
      relativeX = x;
      relativeY = y; // "A" (arc)
    } else if (command === "A") {
      flag1 = a[i + 4];
      flag2 = a[i + 5];
      difX = a[i + 6];
      difY = a[i + 7];
      j = 7;
      if (flag1.length > 1) {
        // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
        if (flag1.length < 3) {
          difY = difX;
          difX = flag2;
          j--;
        } else {
          difY = flag2;
          difX = flag1.substr(2);
          j -= 2;
        }
        flag2 = flag1.charAt(1);
        flag1 = flag1.charAt(0);
      }
      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);
      i += j;
      if (beziers) {
        for (j = 0; j < beziers.length; j++) {
          segment.push(beziers[j]);
        }
      }
      relativeX = segment[segment.length - 2];
      relativeY = segment[segment.length - 1];
    } else {
      console.log(errorMessage);
    }
  }
  i = segment.length;
  if (i < 6) {
    //in case there's odd SVG like a M0,0 command at the very end.
    path.pop();
    i = 0;
  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {
    segment.closed = true;
  }
  path.totalPoints = points + i;
  return path;
} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays

function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
  var x12 = (x1 + x2) / 2,
    y12 = (y1 + y2) / 2,
    x23 = (x2 + x3) / 2,
    y23 = (y2 + y3) / 2,
    x34 = (x3 + x4) / 2,
    y34 = (y3 + y4) / 2,
    x123 = (x12 + x23) / 2,
    y123 = (y12 + y23) / 2,
    x234 = (x23 + x34) / 2,
    y234 = (y23 + y34) / 2,
    x1234 = (x123 + x234) / 2,
    y1234 = (y123 + y234) / 2,
    dx = x4 - x1,
    dy = y4 - y1,
    d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),
    d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),
    length;
  if (!points) {
    points = [x1, y1, x4, y4];
    index = 2;
  }
  points.splice(index || points.length - 2, 0, x1234, y1234);
  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
    length = points.length;
    bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
    bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));
  }
  return points;
}
/*
function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
	var dx1 = x1 - x0,
		dy1 = y1 - y0,
		dx2 = x2 - x1,
		dy2 = y2 - y1,
		dx3 = x2 - x0,
		dy3 = y2 - y0,
		a = dx1 * dx1 + dy1 * dy1,
		b = dx2 * dx2 + dy2 * dy2,
		c = dx3 * dx3 + dy3 * dy3;
	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
},
*/
//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)

function flatPointsToSegment(points, curviness) {
  if (curviness === void 0) {
    curviness = 1;
  }
  var x = points[0],
    y = 0,
    segment = [x, y],
    i = 2;
  for (; i < points.length; i += 2) {
    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);
  }
  return segment;
} //points is an array of x/y points, like [x, y, x, y, x, y]

function pointsToSegment(points, curviness) {
  //points = simplifyPoints(points, tolerance);
  _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.

  var l = points.length - 2,
    x = +points[0],
    y = +points[1],
    nextX = +points[2],
    nextY = +points[3],
    segment = [x, y, x, y],
    dx2 = nextX - x,
    dy2 = nextY - y,
    closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,
    prevX,
    prevY,
    i,
    dx1,
    dy1,
    r1,
    r2,
    r3,
    tl,
    mx1,
    mx2,
    mxm,
    my1,
    my2,
    mym;
  if (closed) {
    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
    points.push(nextX, nextY);
    nextX = x;
    nextY = y;
    x = points[l - 2];
    y = points[l - 1];
    points.unshift(x, y);
    l += 4;
  }
  curviness = curviness || curviness === 0 ? +curviness : 1;
  for (i = 2; i < l; i += 2) {
    prevX = x;
    prevY = y;
    x = nextX;
    y = nextY;
    nextX = +points[i + 2];
    nextY = +points[i + 3];
    if (x === nextX && y === nextY) {
      continue;
    }
    dx1 = dx2;
    dy1 = dy2;
    dx2 = nextX - x;
    dy2 = nextY - y;
    r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse

    r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
    r3 = _sqrt(Math.pow(dx2 / r2 + dx1 / r1, 2) + Math.pow(dy2 / r2 + dy1 / r1, 2));
    tl = (r1 + r2) * curviness * 0.25 / r3;
    mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
    mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
    mxm = x - (mx1 + ((mx2 - mx1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));
    my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
    my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
    mym = y - (my1 + ((my2 - my1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));
    if (x !== prevX || y !== prevY) {
      segment.push(_round(mx1 + mxm),
      // first control point
      _round(my1 + mym), _round(x),
      // anchor
      _round(y), _round(mx2 + mxm),
      // second control point
      _round(my2 + mym));
    }
  }
  x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;
  if (segment.length === 2) {
    // only one point!
    segment.push(x, y, x, y, x, y);
  } else if (closed) {
    segment.splice(0, 6);
    segment.length = segment.length - 6;
  }
  return segment;
} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2

function pointToSegDist(x, y, x1, y1, x2, y2) {
  var dx = x2 - x1,
    dy = y2 - y1,
    t;
  if (dx || dy) {
    t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x1 = x2;
      y1 = y2;
    } else if (t > 0) {
      x1 += dx * t;
      y1 += dy * t;
    }
  }
  return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);
}
function simplifyStep(points, first, last, tolerance, simplified) {
  var maxSqDist = tolerance,
    firstX = points[first],
    firstY = points[first + 1],
    lastX = points[last],
    lastY = points[last + 1],
    index,
    i,
    d;
  for (i = first + 2; i < last; i += 2) {
    d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);
    if (d > maxSqDist) {
      index = i;
      maxSqDist = d;
    }
  }
  if (maxSqDist > tolerance) {
    index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);
    simplified.push(points[index], points[index + 1]);
    last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);
  }
} //points is an array of x/y values like [x, y, x, y, x, y]

function simplifyPoints(points, tolerance) {
  var prevX = parseFloat(points[0]),
    prevY = parseFloat(points[1]),
    temp = [prevX, prevY],
    l = points.length - 2,
    i,
    x,
    y,
    dx,
    dy,
    result,
    last;
  tolerance = Math.pow(tolerance || 1, 2);
  for (i = 2; i < l; i += 2) {
    x = parseFloat(points[i]);
    y = parseFloat(points[i + 1]);
    dx = prevX - x;
    dy = prevY - y;
    if (dx * dx + dy * dy > tolerance) {
      temp.push(x, y);
      prevX = x;
      prevY = y;
    }
  }
  temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));
  last = temp.length - 2;
  result = [temp[0], temp[1]];
  simplifyStep(temp, 0, last, tolerance, result);
  result.push(temp[last], temp[last + 1]);
  return result;
}
function getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {
  var inc = (end - start) / slices,
    best = 0,
    t = start,
    x,
    y,
    d,
    dx,
    dy,
    inv;
  _bestDistance = _largeNum;
  while (t <= end) {
    inv = 1 - t;
    x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;
    y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;
    dx = x - px;
    dy = y - py;
    d = dx * dx + dy * dy;
    if (d < _bestDistance) {
      _bestDistance = d;
      best = t;
    }
    t += inc;
  }
  return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;
}
function getClosestData(rawPath, x, y, slices) {
  //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)
  var closest = {
      j: 0,
      i: 0,
      t: 0
    },
    bestDistance = _largeNum,
    i,
    j,
    t,
    segment;
  for (j = 0; j < rawPath.length; j++) {
    segment = rawPath[j];
    for (i = 0; i < segment.length; i += 6) {
      t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);
      if (bestDistance > _bestDistance) {
        bestDistance = _bestDistance;
        closest.j = j;
        closest.i = i;
        closest.t = t;
      }
    }
  }
  return closest;
} //subdivide a Segment closest to a specific x,y coordinate

function subdivideSegmentNear(x, y, segment, slices, iterations) {
  var l = segment.length,
    bestDistance = _largeNum,
    bestT = 0,
    bestSegmentIndex = 0,
    t,
    i;
  slices = slices || 20;
  iterations = iterations || 3;
  for (i = 0; i < l; i += 6) {
    t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);
    if (bestDistance > _bestDistance) {
      bestDistance = _bestDistance;
      bestT = t;
      bestSegmentIndex = i;
    }
  }
  t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);
  subdivideSegment(segment, bestSegmentIndex, t);
  return bestSegmentIndex + 6;
}
/*
Takes any of the following and converts it to an all Cubic Bezier SVG data string:
- A <path> data string like "M0,0 L2,4 v20,15 H100"
- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
- A Segment, like [x, y, x, y, x, y, x, y]

Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
*/

function rawPathToString(rawPath) {
  if (_isNumber(rawPath[0])) {
    //in case a segment is passed in instead
    rawPath = [rawPath];
  }
  var result = "",
    l = rawPath.length,
    sl,
    s,
    i,
    segment;
  for (s = 0; s < l; s++) {
    segment = rawPath[s];
    result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
    sl = segment.length;
    for (i = 2; i < sl; i++) {
      result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
    }
    if (segment.closed) {
      result += "z";
    }
  }
  return result;
}
/*
// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
export function cpCoordsToAngles(segment, copy) {
	var result = copy ? segment.slice(0) : segment,
		x, y, i;
	for (i = 0; i < segment.length; i+=6) {
		x = segment[i+2] - segment[i];
		y = segment[i+3] - segment[i+1];
		result[i+2] = Math.atan2(y, x);
		result[i+3] = Math.sqrt(x * x + y * y);
		x = segment[i+6] - segment[i+4];
		y = segment[i+7] - segment[i+5];
		result[i+4] = Math.atan2(y, x);
		result[i+5] = Math.sqrt(x * x + y * y);
	}
	return result;
}

// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
export function cpAnglesToCoords(segment, copy) {
	var result = copy ? segment.slice(0) : segment,
		length = segment.length,
		rnd = 1000,
		angle, l, i, j;
	for (i = 0; i < length; i+=6) {
		angle = segment[i+2];
		l = segment[i+3]; //length
		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
		angle = segment[i+4];
		l = segment[i+5]; //length
		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
	}
	return result;
}

//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
export function populateSmoothData(rawPath) {
	let j = rawPath.length,
		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
	while (--j > -1) {
		segment = rawPath[j];
		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
		isSmooth.length = 4;
		l = segment.length - 2;
		for (i = 6; i < l; i += 6) {
			x = segment[i] - segment[i - 2];
			y = segment[i + 1] - segment[i - 1];
			x2 = segment[i + 2] - segment[i];
			y2 = segment[i + 3] - segment[i + 1];
			a = _atan2(y, x);
			a2 = _atan2(y2, x2);
			smooth = (Math.abs(a - a2) < 0.09);
			if (smooth) {
				smoothData[i - 2] = a;
				smoothData[i + 2] = a2;
				smoothData[i - 1] = _sqrt(x * x + y * y);
				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
			}
			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
		}
		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
			x = segment[0] - segment[l-2];
			y = segment[1] - segment[l-1];
			x2 = segment[2] - segment[0];
			y2 = segment[3] - segment[1];
			a = _atan2(y, x);
			a2 = _atan2(y2, x2);
			if (Math.abs(a - a2) < 0.09) {
				smoothData[l-2] = a;
				smoothData[2] = a2;
				smoothData[l-1] = _sqrt(x * x + y * y);
				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
			}
		}
	}
	return rawPath;
}
export function pointToScreen(svgElement, point) {
	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
		let rawPath = getRawPath(svgElement);
		point = svgElement.ownerSVGElement.createSVGPoint();
		point.x = rawPath[0][0];
		point.y = rawPath[0][1];
	}
	return point.matrixTransform(svgElement.getScreenCTM());
}
// takes a <path> and normalizes all of its coordinates to values between 0 and 1
export function normalizePath(path) {
  path = gsap.utils.toArray(path);
  if (!path[0].hasAttribute("d")) {
    path = gsap.utils.toArray(path[0].children);
  }
  if (path.length > 1) {
    path.forEach(normalizePath);
    return path;
  }
  let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
      _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
      d = path[0].getAttribute("d"),
      a = d.replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp),
      nums = a.filter(n => !isNaN(n)).map(n => +n),
      normalize = gsap.utils.normalize(Math.min(...nums), Math.max(...nums)),
      finals = a.map(val => isNaN(val) ? val : normalize(+val)),
      s = "",
      prevWasCommand;
  finals.forEach((value, i) => {
    let isCommand = isNaN(value)
    s += (isCommand && i ? " " : prevWasCommand || !i ? "" : ",") + value;
    prevWasCommand = isCommand;
  });
  path[0].setAttribute("d", s);
}
*/

/***/ }),

/***/ "./node_modules/lenis/dist/lenis.mjs":
/*!*******************************************!*\
  !*** ./node_modules/lenis/dist/lenis.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Lenis)
/* harmony export */ });
// package.json
var version = "1.3.4";

// packages/core/src/maths.ts
function clamp(min, input, max) {
  return Math.max(min, Math.min(input, max));
}
function lerp(x, y, t) {
  return (1 - t) * x + t * y;
}
function damp(x, y, lambda, deltaTime) {
  return lerp(x, y, 1 - Math.exp(-lambda * deltaTime));
}
function modulo(n, d) {
  return (n % d + d) % d;
}

// packages/core/src/animate.ts
var Animate = class {
  isRunning = false;
  value = 0;
  from = 0;
  to = 0;
  currentTime = 0;
  // These are instanciated in the fromTo method
  lerp;
  duration;
  easing;
  onUpdate;
  /**
   * Advance the animation by the given delta time
   *
   * @param deltaTime - The time in seconds to advance the animation
   */
  advance(deltaTime) {
    if (!this.isRunning) return;
    let completed = false;
    if (this.duration && this.easing) {
      this.currentTime += deltaTime;
      const linearProgress = clamp(0, this.currentTime / this.duration, 1);
      completed = linearProgress >= 1;
      const easedProgress = completed ? 1 : this.easing(linearProgress);
      this.value = this.from + (this.to - this.from) * easedProgress;
    } else if (this.lerp) {
      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime);
      if (Math.round(this.value) === this.to) {
        this.value = this.to;
        completed = true;
      }
    } else {
      this.value = this.to;
      completed = true;
    }
    if (completed) {
      this.stop();
    }
    this.onUpdate?.(this.value, completed);
  }
  /** Stop the animation */
  stop() {
    this.isRunning = false;
  }
  /**
   * Set up the animation from a starting value to an ending value
   * with optional parameters for lerping, duration, easing, and onUpdate callback
   *
   * @param from - The starting value
   * @param to - The ending value
   * @param options - Options for the animation
   */
  fromTo(from, to, { lerp: lerp2, duration, easing, onStart, onUpdate }) {
    this.from = this.value = from;
    this.to = to;
    this.lerp = lerp2;
    this.duration = duration;
    this.easing = easing;
    this.currentTime = 0;
    this.isRunning = true;
    onStart?.();
    this.onUpdate = onUpdate;
  }
};

// packages/core/src/debounce.ts
function debounce(callback, delay) {
  let timer;
  return function(...args) {
    let context = this;
    clearTimeout(timer);
    timer = setTimeout(() => {
      timer = void 0;
      callback.apply(context, args);
    }, delay);
  };
}

// packages/core/src/dimensions.ts
var Dimensions = class {
  constructor(wrapper, content, { autoResize = true, debounce: debounceValue = 250 } = {}) {
    this.wrapper = wrapper;
    this.content = content;
    if (autoResize) {
      this.debouncedResize = debounce(this.resize, debounceValue);
      if (this.wrapper instanceof Window) {
        window.addEventListener("resize", this.debouncedResize, false);
      } else {
        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize);
        this.wrapperResizeObserver.observe(this.wrapper);
      }
      this.contentResizeObserver = new ResizeObserver(this.debouncedResize);
      this.contentResizeObserver.observe(this.content);
    }
    this.resize();
  }
  width = 0;
  height = 0;
  scrollHeight = 0;
  scrollWidth = 0;
  // These are instanciated in the constructor as they need information from the options
  debouncedResize;
  wrapperResizeObserver;
  contentResizeObserver;
  destroy() {
    this.wrapperResizeObserver?.disconnect();
    this.contentResizeObserver?.disconnect();
    if (this.wrapper === window && this.debouncedResize) {
      window.removeEventListener("resize", this.debouncedResize, false);
    }
  }
  resize = () => {
    this.onWrapperResize();
    this.onContentResize();
  };
  onWrapperResize = () => {
    if (this.wrapper instanceof Window) {
      this.width = window.innerWidth;
      this.height = window.innerHeight;
    } else {
      this.width = this.wrapper.clientWidth;
      this.height = this.wrapper.clientHeight;
    }
  };
  onContentResize = () => {
    if (this.wrapper instanceof Window) {
      this.scrollHeight = this.content.scrollHeight;
      this.scrollWidth = this.content.scrollWidth;
    } else {
      this.scrollHeight = this.wrapper.scrollHeight;
      this.scrollWidth = this.wrapper.scrollWidth;
    }
  };
  get limit() {
    return {
      x: this.scrollWidth - this.width,
      y: this.scrollHeight - this.height
    };
  }
};

// packages/core/src/emitter.ts
var Emitter = class {
  events = {};
  /**
   * Emit an event with the given data
   * @param event Event name
   * @param args Data to pass to the event handlers
   */
  emit(event, ...args) {
    let callbacks = this.events[event] || [];
    for (let i = 0, length = callbacks.length; i < length; i++) {
      callbacks[i]?.(...args);
    }
  }
  /**
   * Add a callback to the event
   * @param event Event name
   * @param cb Callback function
   * @returns Unsubscribe function
   */
  on(event, cb) {
    this.events[event]?.push(cb) || (this.events[event] = [cb]);
    return () => {
      this.events[event] = this.events[event]?.filter((i) => cb !== i);
    };
  }
  /**
   * Remove a callback from the event
   * @param event Event name
   * @param callback Callback function
   */
  off(event, callback) {
    this.events[event] = this.events[event]?.filter((i) => callback !== i);
  }
  /**
   * Remove all event listeners and clean up
   */
  destroy() {
    this.events = {};
  }
};

// packages/core/src/virtual-scroll.ts
var LINE_HEIGHT = 100 / 6;
var listenerOptions = { passive: false };
var VirtualScroll = class {
  constructor(element, options = { wheelMultiplier: 1, touchMultiplier: 1 }) {
    this.element = element;
    this.options = options;
    window.addEventListener("resize", this.onWindowResize, false);
    this.onWindowResize();
    this.element.addEventListener("wheel", this.onWheel, listenerOptions);
    this.element.addEventListener(
      "touchstart",
      this.onTouchStart,
      listenerOptions
    );
    this.element.addEventListener(
      "touchmove",
      this.onTouchMove,
      listenerOptions
    );
    this.element.addEventListener("touchend", this.onTouchEnd, listenerOptions);
  }
  touchStart = {
    x: 0,
    y: 0
  };
  lastDelta = {
    x: 0,
    y: 0
  };
  window = {
    width: 0,
    height: 0
  };
  emitter = new Emitter();
  /**
   * Add an event listener for the given event and callback
   *
   * @param event Event name
   * @param callback Callback function
   */
  on(event, callback) {
    return this.emitter.on(event, callback);
  }
  /** Remove all event listeners and clean up */
  destroy() {
    this.emitter.destroy();
    window.removeEventListener("resize", this.onWindowResize, false);
    this.element.removeEventListener("wheel", this.onWheel, listenerOptions);
    this.element.removeEventListener(
      "touchstart",
      this.onTouchStart,
      listenerOptions
    );
    this.element.removeEventListener(
      "touchmove",
      this.onTouchMove,
      listenerOptions
    );
    this.element.removeEventListener(
      "touchend",
      this.onTouchEnd,
      listenerOptions
    );
  }
  /**
   * Event handler for 'touchstart' event
   *
   * @param event Touch event
   */
  onTouchStart = (event) => {
    const { clientX, clientY } = event.targetTouches ? event.targetTouches[0] : event;
    this.touchStart.x = clientX;
    this.touchStart.y = clientY;
    this.lastDelta = {
      x: 0,
      y: 0
    };
    this.emitter.emit("scroll", {
      deltaX: 0,
      deltaY: 0,
      event
    });
  };
  /** Event handler for 'touchmove' event */
  onTouchMove = (event) => {
    const { clientX, clientY } = event.targetTouches ? event.targetTouches[0] : event;
    const deltaX = -(clientX - this.touchStart.x) * this.options.touchMultiplier;
    const deltaY = -(clientY - this.touchStart.y) * this.options.touchMultiplier;
    this.touchStart.x = clientX;
    this.touchStart.y = clientY;
    this.lastDelta = {
      x: deltaX,
      y: deltaY
    };
    this.emitter.emit("scroll", {
      deltaX,
      deltaY,
      event
    });
  };
  onTouchEnd = (event) => {
    this.emitter.emit("scroll", {
      deltaX: this.lastDelta.x,
      deltaY: this.lastDelta.y,
      event
    });
  };
  /** Event handler for 'wheel' event */
  onWheel = (event) => {
    let { deltaX, deltaY, deltaMode } = event;
    const multiplierX = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.width : 1;
    const multiplierY = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.height : 1;
    deltaX *= multiplierX;
    deltaY *= multiplierY;
    deltaX *= this.options.wheelMultiplier;
    deltaY *= this.options.wheelMultiplier;
    this.emitter.emit("scroll", { deltaX, deltaY, event });
  };
  onWindowResize = () => {
    this.window = {
      width: window.innerWidth,
      height: window.innerHeight
    };
  };
};

// packages/core/src/lenis.ts
var defaultEasing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t));
var Lenis = class {
  _isScrolling = false;
  // true when scroll is animating
  _isStopped = false;
  // true if user should not be able to scroll - enable/disable programmatically
  _isLocked = false;
  // same as isStopped but enabled/disabled when scroll reaches target
  _preventNextNativeScrollEvent = false;
  _resetVelocityTimeout = null;
  __rafID = null;
  /**
   * Whether or not the user is touching the screen
   */
  isTouching;
  /**
   * The time in ms since the lenis instance was created
   */
  time = 0;
  /**
   * User data that will be forwarded through the scroll event
   *
   * @example
   * lenis.scrollTo(100, {
   *   userData: {
   *     foo: 'bar'
   *   }
   * })
   */
  userData = {};
  /**
   * The last velocity of the scroll
   */
  lastVelocity = 0;
  /**
   * The current velocity of the scroll
   */
  velocity = 0;
  /**
   * The direction of the scroll
   */
  direction = 0;
  /**
   * The options passed to the lenis instance
   */
  options;
  /**
   * The target scroll value
   */
  targetScroll;
  /**
   * The animated scroll value
   */
  animatedScroll;
  // These are instanciated here as they don't need information from the options
  animate = new Animate();
  emitter = new Emitter();
  // These are instanciated in the constructor as they need information from the options
  dimensions;
  // This is not private because it's used in the Snap class
  virtualScroll;
  constructor({
    wrapper = window,
    content = document.documentElement,
    eventsTarget = wrapper,
    smoothWheel = true,
    syncTouch = false,
    syncTouchLerp = 0.075,
    touchInertiaMultiplier = 35,
    duration,
    // in seconds
    easing,
    lerp: lerp2 = 0.1,
    infinite = false,
    orientation = "vertical",
    // vertical, horizontal
    gestureOrientation = "vertical",
    // vertical, horizontal, both
    touchMultiplier = 1,
    wheelMultiplier = 1,
    autoResize = true,
    prevent,
    virtualScroll,
    overscroll = true,
    autoRaf = false,
    anchors = false,
    autoToggle = false,
    // https://caniuse.com/?search=transition-behavior
    allowNestedScroll = false,
    __experimental__naiveDimensions = false
  } = {}) {
    window.lenisVersion = version;
    if (!wrapper || wrapper === document.documentElement) {
      wrapper = window;
    }
    if (typeof duration === "number" && typeof easing !== "function") {
      easing = defaultEasing;
    } else if (typeof easing === "function" && typeof duration !== "number") {
      duration = 1;
    }
    this.options = {
      wrapper,
      content,
      eventsTarget,
      smoothWheel,
      syncTouch,
      syncTouchLerp,
      touchInertiaMultiplier,
      duration,
      easing,
      lerp: lerp2,
      infinite,
      gestureOrientation,
      orientation,
      touchMultiplier,
      wheelMultiplier,
      autoResize,
      prevent,
      virtualScroll,
      overscroll,
      autoRaf,
      anchors,
      autoToggle,
      allowNestedScroll,
      __experimental__naiveDimensions
    };
    this.dimensions = new Dimensions(wrapper, content, { autoResize });
    this.updateClassName();
    this.targetScroll = this.animatedScroll = this.actualScroll;
    this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false);
    this.options.wrapper.addEventListener("scrollend", this.onScrollEnd, {
      capture: true
    });
    if (this.options.anchors && this.options.wrapper === window) {
      this.options.wrapper.addEventListener(
        "click",
        this.onClick,
        false
      );
    }
    this.options.wrapper.addEventListener(
      "pointerdown",
      this.onPointerDown,
      false
    );
    this.virtualScroll = new VirtualScroll(eventsTarget, {
      touchMultiplier,
      wheelMultiplier
    });
    this.virtualScroll.on("scroll", this.onVirtualScroll);
    if (this.options.autoToggle) {
      this.rootElement.addEventListener("transitionend", this.onTransitionEnd, {
        passive: true
      });
    }
    if (this.options.autoRaf) {
      this.__rafID = requestAnimationFrame(this.raf);
    }
  }
  /**
   * Destroy the lenis instance, remove all event listeners and clean up the class name
   */
  destroy() {
    this.emitter.destroy();
    this.options.wrapper.removeEventListener(
      "scroll",
      this.onNativeScroll,
      false
    );
    this.options.wrapper.removeEventListener("scrollend", this.onScrollEnd, {
      capture: true
    });
    this.options.wrapper.removeEventListener(
      "pointerdown",
      this.onPointerDown,
      false
    );
    if (this.options.anchors && this.options.wrapper === window) {
      this.options.wrapper.removeEventListener(
        "click",
        this.onClick,
        false
      );
    }
    this.virtualScroll.destroy();
    this.dimensions.destroy();
    this.cleanUpClassName();
    if (this.__rafID) {
      cancelAnimationFrame(this.__rafID);
    }
  }
  on(event, callback) {
    return this.emitter.on(event, callback);
  }
  off(event, callback) {
    return this.emitter.off(event, callback);
  }
  onScrollEnd = (e) => {
    if (!(e instanceof CustomEvent)) {
      if (this.isScrolling === "smooth" || this.isScrolling === false) {
        e.stopPropagation();
      }
    }
  };
  dispatchScrollendEvent = () => {
    this.options.wrapper.dispatchEvent(
      new CustomEvent("scrollend", {
        bubbles: this.options.wrapper === window,
        // cancelable: false,
        detail: {
          lenisScrollEnd: true
        }
      })
    );
  };
  onTransitionEnd = (event) => {
    if (event.propertyName.includes("overflow")) {
      const property = this.isHorizontal ? "overflow-x" : "overflow-y";
      const overflow = getComputedStyle(this.rootElement)[property];
      if (["hidden", "clip"].includes(overflow)) {
        this.stop();
      } else {
        this.start();
      }
    }
  };
  setScroll(scroll) {
    if (this.isHorizontal) {
      this.options.wrapper.scrollTo({ left: scroll, behavior: "instant" });
    } else {
      this.options.wrapper.scrollTo({ top: scroll, behavior: "instant" });
    }
  }
  onClick = (event) => {
    const path = event.composedPath();
    const anchor = path.find(
      (node) => node instanceof HTMLAnchorElement && (node.getAttribute("href")?.startsWith("#") || node.getAttribute("href")?.startsWith("/#") || node.getAttribute("href")?.startsWith("./#"))
    );
    if (anchor) {
      const id = anchor.getAttribute("href");
      if (id) {
        const options = typeof this.options.anchors === "object" && this.options.anchors ? this.options.anchors : void 0;
        let target = `#${id.split("#")[1]}`;
        if (["#", "/#", "./#", "#top", "/#top", "./#top"].includes(id)) {
          target = 0;
        }
        this.scrollTo(target, options);
      }
    }
  };
  onPointerDown = (event) => {
    if (event.button === 1) {
      this.reset();
    }
  };
  onVirtualScroll = (data) => {
    if (typeof this.options.virtualScroll === "function" && this.options.virtualScroll(data) === false)
      return;
    const { deltaX, deltaY, event } = data;
    this.emitter.emit("virtual-scroll", { deltaX, deltaY, event });
    if (event.ctrlKey) return;
    if (event.lenisStopPropagation) return;
    const isTouch = event.type.includes("touch");
    const isWheel = event.type.includes("wheel");
    this.isTouching = event.type === "touchstart" || event.type === "touchmove";
    const isClickOrTap = deltaX === 0 && deltaY === 0;
    const isTapToStop = this.options.syncTouch && isTouch && event.type === "touchstart" && isClickOrTap && !this.isStopped && !this.isLocked;
    if (isTapToStop) {
      this.reset();
      return;
    }
    const isUnknownGesture = this.options.gestureOrientation === "vertical" && deltaY === 0 || this.options.gestureOrientation === "horizontal" && deltaX === 0;
    if (isClickOrTap || isUnknownGesture) {
      return;
    }
    let composedPath = event.composedPath();
    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement));
    const prevent = this.options.prevent;
    if (!!composedPath.find(
      (node) => node instanceof HTMLElement && (typeof prevent === "function" && prevent?.(node) || node.hasAttribute?.("data-lenis-prevent") || isTouch && node.hasAttribute?.("data-lenis-prevent-touch") || isWheel && node.hasAttribute?.("data-lenis-prevent-wheel") || this.options.allowNestedScroll && this.checkNestedScroll(node, { deltaX, deltaY }))
    ))
      return;
    if (this.isStopped || this.isLocked) {
      event.preventDefault();
      return;
    }
    const isSmooth = this.options.syncTouch && isTouch || this.options.smoothWheel && isWheel;
    if (!isSmooth) {
      this.isScrolling = "native";
      this.animate.stop();
      event.lenisStopPropagation = true;
      return;
    }
    let delta = deltaY;
    if (this.options.gestureOrientation === "both") {
      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX;
    } else if (this.options.gestureOrientation === "horizontal") {
      delta = deltaX;
    }
    if (!this.options.overscroll || this.options.infinite || this.options.wrapper !== window && (this.animatedScroll > 0 && this.animatedScroll < this.limit || this.animatedScroll === 0 && deltaY > 0 || this.animatedScroll === this.limit && deltaY < 0)) {
      event.lenisStopPropagation = true;
    }
    event.preventDefault();
    const isSyncTouch = isTouch && this.options.syncTouch;
    const isTouchEnd = isTouch && event.type === "touchend";
    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5;
    if (hasTouchInertia) {
      delta = this.velocity * this.options.touchInertiaMultiplier;
    }
    this.scrollTo(this.targetScroll + delta, {
      programmatic: false,
      ...isSyncTouch ? {
        lerp: hasTouchInertia ? this.options.syncTouchLerp : 1
        // immediate: !hasTouchInertia,
      } : {
        lerp: this.options.lerp,
        duration: this.options.duration,
        easing: this.options.easing
      }
    });
  };
  /**
   * Force lenis to recalculate the dimensions
   */
  resize() {
    this.dimensions.resize();
    this.animatedScroll = this.targetScroll = this.actualScroll;
    this.emit();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  onNativeScroll = () => {
    if (this._resetVelocityTimeout !== null) {
      clearTimeout(this._resetVelocityTimeout);
      this._resetVelocityTimeout = null;
    }
    if (this._preventNextNativeScrollEvent) {
      this._preventNextNativeScrollEvent = false;
      return;
    }
    if (this.isScrolling === false || this.isScrolling === "native") {
      const lastScroll = this.animatedScroll;
      this.animatedScroll = this.targetScroll = this.actualScroll;
      this.lastVelocity = this.velocity;
      this.velocity = this.animatedScroll - lastScroll;
      this.direction = Math.sign(
        this.animatedScroll - lastScroll
      );
      if (!this.isStopped) {
        this.isScrolling = "native";
      }
      this.emit();
      if (this.velocity !== 0) {
        this._resetVelocityTimeout = setTimeout(() => {
          this.lastVelocity = this.velocity;
          this.velocity = 0;
          this.isScrolling = false;
          this.emit();
        }, 400);
      }
    }
  };
  reset() {
    this.isLocked = false;
    this.isScrolling = false;
    this.animatedScroll = this.targetScroll = this.actualScroll;
    this.lastVelocity = this.velocity = 0;
    this.animate.stop();
  }
  /**
   * Start lenis scroll after it has been stopped
   */
  start() {
    if (!this.isStopped) return;
    this.reset();
    this.isStopped = false;
    this.emit();
  }
  /**
   * Stop lenis scroll
   */
  stop() {
    if (this.isStopped) return;
    this.reset();
    this.isStopped = true;
    this.emit();
  }
  /**
   * RequestAnimationFrame for lenis
   *
   * @param time The time in ms from an external clock like `requestAnimationFrame` or Tempus
   */
  raf = (time) => {
    const deltaTime = time - (this.time || time);
    this.time = time;
    this.animate.advance(deltaTime * 1e-3);
    if (this.options.autoRaf) {
      this.__rafID = requestAnimationFrame(this.raf);
    }
  };
  /**
   * Scroll to a target value
   *
   * @param target The target value to scroll to
   * @param options The options for the scroll
   *
   * @example
   * lenis.scrollTo(100, {
   *   offset: 100,
   *   duration: 1,
   *   easing: (t) => 1 - Math.cos((t * Math.PI) / 2),
   *   lerp: 0.1,
   *   onStart: () => {
   *     console.log('onStart')
   *   },
   *   onComplete: () => {
   *     console.log('onComplete')
   *   },
   * })
   */
  scrollTo(target, {
    offset = 0,
    immediate = false,
    lock = false,
    duration = this.options.duration,
    easing = this.options.easing,
    lerp: lerp2 = this.options.lerp,
    onStart,
    onComplete,
    force = false,
    // scroll even if stopped
    programmatic = true,
    // called from outside of the class
    userData
  } = {}) {
    if ((this.isStopped || this.isLocked) && !force) return;
    if (typeof target === "string" && ["top", "left", "start"].includes(target)) {
      target = 0;
    } else if (typeof target === "string" && ["bottom", "right", "end"].includes(target)) {
      target = this.limit;
    } else {
      let node;
      if (typeof target === "string") {
        node = document.querySelector(target);
      } else if (target instanceof HTMLElement && target?.nodeType) {
        node = target;
      }
      if (node) {
        if (this.options.wrapper !== window) {
          const wrapperRect = this.rootElement.getBoundingClientRect();
          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top;
        }
        const rect = node.getBoundingClientRect();
        target = (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll;
      }
    }
    if (typeof target !== "number") return;
    target += offset;
    target = Math.round(target);
    if (this.options.infinite) {
      if (programmatic) {
        this.targetScroll = this.animatedScroll = this.scroll;
        const distance = target - this.animatedScroll;
        if (distance > this.limit / 2) {
          target = target - this.limit;
        } else if (distance < -this.limit / 2) {
          target = target + this.limit;
        }
      }
    } else {
      target = clamp(0, target, this.limit);
    }
    if (target === this.targetScroll) {
      onStart?.(this);
      onComplete?.(this);
      return;
    }
    this.userData = userData ?? {};
    if (immediate) {
      this.animatedScroll = this.targetScroll = target;
      this.setScroll(this.scroll);
      this.reset();
      this.preventNextNativeScrollEvent();
      this.emit();
      onComplete?.(this);
      this.userData = {};
      requestAnimationFrame(() => {
        this.dispatchScrollendEvent();
      });
      return;
    }
    if (!programmatic) {
      this.targetScroll = target;
    }
    if (typeof duration === "number" && typeof easing !== "function") {
      easing = defaultEasing;
    } else if (typeof easing === "function" && typeof duration !== "number") {
      duration = 1;
    }
    this.animate.fromTo(this.animatedScroll, target, {
      duration,
      easing,
      lerp: lerp2,
      onStart: () => {
        if (lock) this.isLocked = true;
        this.isScrolling = "smooth";
        onStart?.(this);
      },
      onUpdate: (value, completed) => {
        this.isScrolling = "smooth";
        this.lastVelocity = this.velocity;
        this.velocity = value - this.animatedScroll;
        this.direction = Math.sign(this.velocity);
        this.animatedScroll = value;
        this.setScroll(this.scroll);
        if (programmatic) {
          this.targetScroll = value;
        }
        if (!completed) this.emit();
        if (completed) {
          this.reset();
          this.emit();
          onComplete?.(this);
          this.userData = {};
          requestAnimationFrame(() => {
            this.dispatchScrollendEvent();
          });
          this.preventNextNativeScrollEvent();
        }
      }
    });
  }
  preventNextNativeScrollEvent() {
    this._preventNextNativeScrollEvent = true;
    requestAnimationFrame(() => {
      this._preventNextNativeScrollEvent = false;
    });
  }
  checkNestedScroll(node, { deltaX, deltaY }) {
    const time = Date.now();
    const cache = node._lenis ??= {};
    let hasOverflowX, hasOverflowY, isScrollableX, isScrollableY, scrollWidth, scrollHeight, clientWidth, clientHeight;
    const gestureOrientation = this.options.gestureOrientation;
    if (time - (cache.time ?? 0) > 2e3) {
      cache.time = Date.now();
      const computedStyle = window.getComputedStyle(node);
      cache.computedStyle = computedStyle;
      const overflowXString = computedStyle.overflowX;
      const overflowYString = computedStyle.overflowY;
      hasOverflowX = ["auto", "overlay", "scroll"].includes(overflowXString);
      hasOverflowY = ["auto", "overlay", "scroll"].includes(overflowYString);
      cache.hasOverflowX = hasOverflowX;
      cache.hasOverflowY = hasOverflowY;
      if (!hasOverflowX && !hasOverflowY) return false;
      if (gestureOrientation === "vertical" && !hasOverflowY) return false;
      if (gestureOrientation === "horizontal" && !hasOverflowX) return false;
      scrollWidth = node.scrollWidth;
      scrollHeight = node.scrollHeight;
      clientWidth = node.clientWidth;
      clientHeight = node.clientHeight;
      isScrollableX = scrollWidth > clientWidth;
      isScrollableY = scrollHeight > clientHeight;
      cache.isScrollableX = isScrollableX;
      cache.isScrollableY = isScrollableY;
      cache.scrollWidth = scrollWidth;
      cache.scrollHeight = scrollHeight;
      cache.clientWidth = clientWidth;
      cache.clientHeight = clientHeight;
    } else {
      isScrollableX = cache.isScrollableX;
      isScrollableY = cache.isScrollableY;
      hasOverflowX = cache.hasOverflowX;
      hasOverflowY = cache.hasOverflowY;
      scrollWidth = cache.scrollWidth;
      scrollHeight = cache.scrollHeight;
      clientWidth = cache.clientWidth;
      clientHeight = cache.clientHeight;
    }
    if (!hasOverflowX && !hasOverflowY || !isScrollableX && !isScrollableY) {
      return false;
    }
    if (gestureOrientation === "vertical" && (!hasOverflowY || !isScrollableY))
      return false;
    if (gestureOrientation === "horizontal" && (!hasOverflowX || !isScrollableX))
      return false;
    let orientation;
    if (gestureOrientation === "horizontal") {
      orientation = "x";
    } else if (gestureOrientation === "vertical") {
      orientation = "y";
    } else {
      const isScrollingX = deltaX !== 0;
      const isScrollingY = deltaY !== 0;
      if (isScrollingX && hasOverflowX && isScrollableX) {
        orientation = "x";
      }
      if (isScrollingY && hasOverflowY && isScrollableY) {
        orientation = "y";
      }
    }
    if (!orientation) return false;
    let scroll, maxScroll, delta, hasOverflow, isScrollable;
    if (orientation === "x") {
      scroll = node.scrollLeft;
      maxScroll = scrollWidth - clientWidth;
      delta = deltaX;
      hasOverflow = hasOverflowX;
      isScrollable = isScrollableX;
    } else if (orientation === "y") {
      scroll = node.scrollTop;
      maxScroll = scrollHeight - clientHeight;
      delta = deltaY;
      hasOverflow = hasOverflowY;
      isScrollable = isScrollableY;
    } else {
      return false;
    }
    const willScroll = delta > 0 ? scroll < maxScroll : scroll > 0;
    return willScroll && hasOverflow && isScrollable;
  }
  /**
   * The root element on which lenis is instanced
   */
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  /**
   * The limit which is the maximum scroll value
   */
  get limit() {
    if (this.options.__experimental__naiveDimensions) {
      if (this.isHorizontal) {
        return this.rootElement.scrollWidth - this.rootElement.clientWidth;
      } else {
        return this.rootElement.scrollHeight - this.rootElement.clientHeight;
      }
    } else {
      return this.dimensions.limit[this.isHorizontal ? "x" : "y"];
    }
  }
  /**
   * Whether or not the scroll is horizontal
   */
  get isHorizontal() {
    return this.options.orientation === "horizontal";
  }
  /**
   * The actual scroll value
   */
  get actualScroll() {
    const wrapper = this.options.wrapper;
    return this.isHorizontal ? wrapper.scrollX ?? wrapper.scrollLeft : wrapper.scrollY ?? wrapper.scrollTop;
  }
  /**
   * The current scroll value
   */
  get scroll() {
    return this.options.infinite ? modulo(this.animatedScroll, this.limit) : this.animatedScroll;
  }
  /**
   * The progress of the scroll relative to the limit
   */
  get progress() {
    return this.limit === 0 ? 1 : this.scroll / this.limit;
  }
  /**
   * Current scroll state
   */
  get isScrolling() {
    return this._isScrolling;
  }
  set isScrolling(value) {
    if (this._isScrolling !== value) {
      this._isScrolling = value;
      this.updateClassName();
    }
  }
  /**
   * Check if lenis is stopped
   */
  get isStopped() {
    return this._isStopped;
  }
  set isStopped(value) {
    if (this._isStopped !== value) {
      this._isStopped = value;
      this.updateClassName();
    }
  }
  /**
   * Check if lenis is locked
   */
  get isLocked() {
    return this._isLocked;
  }
  set isLocked(value) {
    if (this._isLocked !== value) {
      this._isLocked = value;
      this.updateClassName();
    }
  }
  /**
   * Check if lenis is smooth scrolling
   */
  get isSmooth() {
    return this.isScrolling === "smooth";
  }
  /**
   * The class name applied to the wrapper element
   */
  get className() {
    let className = "lenis";
    if (this.options.autoToggle) className += " lenis-autoToggle";
    if (this.isStopped) className += " lenis-stopped";
    if (this.isLocked) className += " lenis-locked";
    if (this.isScrolling) className += " lenis-scrolling";
    if (this.isScrolling === "smooth") className += " lenis-smooth";
    return className;
  }
  updateClassName() {
    this.cleanUpClassName();
    this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
  }
  cleanUpClassName() {
    this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
  }
};

//# sourceMappingURL=lenis.mjs.map

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-env browser */
/*
  eslint-disable
  no-console,
  func-names
*/

/** @typedef {any} TODO */
var normalizeUrl = __webpack_require__(/*! ./normalize-url */ "./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js");
var srcByModuleId = Object.create(null);
var noDocument = typeof document === "undefined";
var forEach = Array.prototype.forEach;

/**
 * @param {function} fn
 * @param {number} time
 * @returns {(function(): void)|*}
 */
function debounce(fn, time) {
  var timeout = 0;
  return function () {
    // @ts-ignore
    var self = this;
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    var functionCall = function functionCall() {
      return fn.apply(self, args);
    };
    clearTimeout(timeout);

    // @ts-ignore
    timeout = setTimeout(functionCall, time);
  };
}
function noop() {}

/**
 * @param {TODO} moduleId
 * @returns {TODO}
 */
function getCurrentScriptUrl(moduleId) {
  var src = srcByModuleId[moduleId];
  if (!src) {
    if (document.currentScript) {
      src = (/** @type {HTMLScriptElement} */document.currentScript).src;
    } else {
      var scripts = document.getElementsByTagName("script");
      var lastScriptTag = scripts[scripts.length - 1];
      if (lastScriptTag) {
        src = lastScriptTag.src;
      }
    }
    srcByModuleId[moduleId] = src;
  }

  /**
   * @param {string} fileMap
   * @returns {null | string[]}
   */
  return function (fileMap) {
    if (!src) {
      return null;
    }
    var splitResult = src.split(/([^\\/]+)\.js$/);
    var filename = splitResult && splitResult[1];
    if (!filename) {
      return [src.replace(".js", ".css")];
    }
    if (!fileMap) {
      return [src.replace(".js", ".css")];
    }
    return fileMap.split(",").map(function (mapRule) {
      var reg = new RegExp("".concat(filename, "\\.js$"), "g");
      return normalizeUrl(src.replace(reg, "".concat(mapRule.replace(/{fileName}/g, filename), ".css")));
    });
  };
}

/**
 * @param {TODO} el
 * @param {string} [url]
 */
function updateCss(el, url) {
  if (!url) {
    if (!el.href) {
      return;
    }

    // eslint-disable-next-line
    url = el.href.split("?")[0];
  }
  if (!isUrlRequest(/** @type {string} */url)) {
    return;
  }
  if (el.isLoaded === false) {
    // We seem to be about to replace a css link that hasn't loaded yet.
    // We're probably changing the same file more than once.
    return;
  }
  if (!url || !(url.indexOf(".css") > -1)) {
    return;
  }

  // eslint-disable-next-line no-param-reassign
  el.visited = true;
  var newEl = el.cloneNode();
  newEl.isLoaded = false;
  newEl.addEventListener("load", function () {
    if (newEl.isLoaded) {
      return;
    }
    newEl.isLoaded = true;
    el.parentNode.removeChild(el);
  });
  newEl.addEventListener("error", function () {
    if (newEl.isLoaded) {
      return;
    }
    newEl.isLoaded = true;
    el.parentNode.removeChild(el);
  });
  newEl.href = "".concat(url, "?").concat(Date.now());
  if (el.nextSibling) {
    el.parentNode.insertBefore(newEl, el.nextSibling);
  } else {
    el.parentNode.appendChild(newEl);
  }
}

/**
 * @param {string} href
 * @param {TODO} src
 * @returns {TODO}
 */
function getReloadUrl(href, src) {
  var ret;

  // eslint-disable-next-line no-param-reassign
  href = normalizeUrl(href);
  src.some(
  /**
   * @param {string} url
   */
  // eslint-disable-next-line array-callback-return
  function (url) {
    if (href.indexOf(src) > -1) {
      ret = url;
    }
  });
  return ret;
}

/**
 * @param {string} [src]
 * @returns {boolean}
 */
function reloadStyle(src) {
  if (!src) {
    return false;
  }
  var elements = document.querySelectorAll("link");
  var loaded = false;
  forEach.call(elements, function (el) {
    if (!el.href) {
      return;
    }
    var url = getReloadUrl(el.href, src);
    if (!isUrlRequest(url)) {
      return;
    }
    if (el.visited === true) {
      return;
    }
    if (url) {
      updateCss(el, url);
      loaded = true;
    }
  });
  return loaded;
}
function reloadAll() {
  var elements = document.querySelectorAll("link");
  forEach.call(elements, function (el) {
    if (el.visited === true) {
      return;
    }
    updateCss(el);
  });
}

/**
 * @param {string} url
 * @returns {boolean}
 */
function isUrlRequest(url) {
  // An URL is not an request if

  // It is not http or https
  if (!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(url)) {
    return false;
  }
  return true;
}

/**
 * @param {TODO} moduleId
 * @param {TODO} options
 * @returns {TODO}
 */
module.exports = function (moduleId, options) {
  if (noDocument) {
    console.log("no window.document found, will not HMR CSS");
    return noop;
  }
  var getScriptSrc = getCurrentScriptUrl(moduleId);
  function update() {
    var src = getScriptSrc(options.filename);
    var reloaded = reloadStyle(src);
    if (options.locals) {
      console.log("[HMR] Detected local css modules. Reload all css");
      reloadAll();
      return;
    }
    if (reloaded) {
      console.log("[HMR] css reload %s", src.join(" "));
    } else {
      console.log("[HMR] Reload all css");
      reloadAll();
    }
  }
  return debounce(update, 50);
};

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":
/*!************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";


/* eslint-disable */

/**
 * @param {string[]} pathComponents
 * @returns {string}
 */
function normalizeUrl(pathComponents) {
  return pathComponents.reduce(function (accumulator, item) {
    switch (item) {
      case "..":
        accumulator.pop();
        break;
      case ".":
        break;
      default:
        accumulator.push(item);
    }
    return accumulator;
  }, /** @type {string[]} */[]).join("/");
}

/**
 * @param {string} urlString
 * @returns {string}
 */
module.exports = function (urlString) {
  urlString = urlString.trim();
  if (/^data:/i.test(urlString)) {
    return urlString;
  }
  var protocol = urlString.indexOf("//") !== -1 ? urlString.split("//")[0] + "//" : "";
  var components = urlString.replace(new RegExp(protocol, "i"), "").split("/");
  var host = components[0].toLowerCase().replace(/\.$/, "");
  components[0] = "";
  var path = normalizeUrl(components);
  return protocol + host + path;
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebSocketClient)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

var WebSocketClient = /*#__PURE__*/function () {
  /**
   * @param {string} url
   */
  function WebSocketClient(url) {
    _classCallCheck(this, WebSocketClient);
    this.client = new WebSocket(url);
    this.client.onerror = function (error) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
    };
  }

  /**
   * @param {(...args: any[]) => void} f
   */
  return _createClass(WebSocketClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.client.onopen = f;
    }

    /**
     * @param {(...args: any[]) => void} f
     */
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.client.onclose = f;
    }

    // call f with the message string as the first argument
    /**
     * @param {(...args: any[]) => void} f
     */
  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.client.onmessage = function (e) {
        f(e.data);
      };
    }
  }]);
}();


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSocketURL: () => (/* binding */ createSocketURL),
/* harmony export */   getCurrentScriptSource: () => (/* binding */ getCurrentScriptSource),
/* harmony export */   parseURL: () => (/* binding */ parseURL)
/* harmony export */ });
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
/* harmony import */ var _progress_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./progress.js */ "./node_modules/webpack-dev-server/client/progress.js");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
/* global __resourceQuery, __webpack_hash__ */
/// <reference types="webpack/module" />








/**
 * @typedef {Object} OverlayOptions
 * @property {boolean | (error: Error) => boolean} [warnings]
 * @property {boolean | (error: Error) => boolean} [errors]
 * @property {boolean | (error: Error) => boolean} [runtimeErrors]
 * @property {string} [trustedTypesPolicyName]
 */

/**
 * @typedef {Object} Options
 * @property {boolean} hot
 * @property {boolean} liveReload
 * @property {boolean} progress
 * @property {boolean | OverlayOptions} overlay
 * @property {string} [logging]
 * @property {number} [reconnect]
 */

/**
 * @typedef {Object} Status
 * @property {boolean} isUnloading
 * @property {string} currentHash
 * @property {string} [previousHash]
 */

/**
 * @param {boolean | { warnings?: boolean | string; errors?: boolean | string; runtimeErrors?: boolean | string; }} overlayOptions
 */
var decodeOverlayOptions = function decodeOverlayOptions(overlayOptions) {
  if (_typeof(overlayOptions) === "object") {
    ["warnings", "errors", "runtimeErrors"].forEach(function (property) {
      if (typeof overlayOptions[property] === "string") {
        var overlayFilterFunctionString = decodeURIComponent(overlayOptions[property]);

        // eslint-disable-next-line no-new-func
        overlayOptions[property] = new Function("message", "var callback = ".concat(overlayFilterFunctionString, "\n        return callback(message)"));
      }
    });
  }
};

/**
 * @type {Status}
 */
var status = {
  isUnloading: false,
  // eslint-disable-next-line camelcase
  currentHash: __webpack_require__.h()
};

/**
 * @returns {string}
 */
var getCurrentScriptSource = function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute("src");
  }

  // Fallback to getting all scripts running in the document.
  var scriptElements = document.scripts || [];
  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
    return element.getAttribute("src");
  });
  if (scriptElementsWithSrc.length > 0) {
    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
    return currentScript.getAttribute("src");
  }

  // Fail as there was no script to use.
  throw new Error("[webpack-dev-server] Failed to get current script source.");
};

/**
 * @param {string} resourceQuery
 * @returns {{ [key: string]: string | boolean }}
 */
var parseURL = function parseURL(resourceQuery) {
  /** @type {{ [key: string]: string }} */
  var result = {};
  if (typeof resourceQuery === "string" && resourceQuery !== "") {
    var searchParams = resourceQuery.slice(1).split("&");
    for (var i = 0; i < searchParams.length; i++) {
      var pair = searchParams[i].split("=");
      result[pair[0]] = decodeURIComponent(pair[1]);
    }
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptSource = getCurrentScriptSource();
    var scriptSourceURL;
    try {
      // The placeholder `baseURL` with `window.location.href`,
      // is to allow parsing of path-relative or protocol-relative URLs,
      // and will have no effect if `scriptSource` is a fully valid URL.
      scriptSourceURL = new URL(scriptSource, self.location.href);
    } catch (error) {
      // URL parsing failed, do nothing.
      // We will still proceed to see if we can recover using `resourceQuery`
    }
    if (scriptSourceURL) {
      result = scriptSourceURL;
      result.fromCurrentScript = true;
    }
  }
  return result;
};
var parsedResourceQuery = parseURL(__resourceQuery);
var enabledFeatures = {
  "Hot Module Replacement": false,
  "Live Reloading": false,
  Progress: false,
  Overlay: false
};

/** @type {Options} */
var options = {
  hot: false,
  liveReload: false,
  progress: false,
  overlay: false
};
if (parsedResourceQuery.hot === "true") {
  options.hot = true;
  enabledFeatures["Hot Module Replacement"] = true;
}
if (parsedResourceQuery["live-reload"] === "true") {
  options.liveReload = true;
  enabledFeatures["Live Reloading"] = true;
}
if (parsedResourceQuery.progress === "true") {
  options.progress = true;
  enabledFeatures.Progress = true;
}
if (parsedResourceQuery.overlay) {
  try {
    options.overlay = JSON.parse(parsedResourceQuery.overlay);
  } catch (e) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error("Error parsing overlay options from resource query:", e);
  }

  // Fill in default "true" params for partially-specified objects.
  if (_typeof(options.overlay) === "object") {
    options.overlay = _objectSpread({
      errors: true,
      warnings: true,
      runtimeErrors: true
    }, options.overlay);
    decodeOverlayOptions(options.overlay);
  }
  enabledFeatures.Overlay = options.overlay !== false;
}
if (parsedResourceQuery.logging) {
  options.logging = parsedResourceQuery.logging;
}
if (typeof parsedResourceQuery.reconnect !== "undefined") {
  options.reconnect = Number(parsedResourceQuery.reconnect);
}

/**
 * @param {string} level
 */
var setAllLogLevel = function setAllLogLevel(level) {
  // This is needed because the HMR logger operate separately from dev server logger
  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_4__.setLogLevel)(level);
};
if (options.logging) {
  setAllLogLevel(options.logging);
}
var logEnabledFeatures = function logEnabledFeatures(features) {
  var listEnabledFeatures = Object.keys(features);
  if (!features || listEnabledFeatures.length === 0) {
    return;
  }
  var logString = "Server started:";

  // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.
  for (var i = 0; i < listEnabledFeatures.length; i++) {
    var key = listEnabledFeatures[i];
    logString += " ".concat(key, " ").concat(features[key] ? "enabled" : "disabled", ",");
  }
  // replace last comma with a period
  logString = logString.slice(0, -1).concat(".");
  _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(logString);
};
logEnabledFeatures(enabledFeatures);
self.addEventListener("beforeunload", function () {
  status.isUnloading = true;
});
var overlay = typeof window !== "undefined" ? (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.createOverlay)(_typeof(options.overlay) === "object" ? {
  trustedTypesPolicyName: options.overlay.trustedTypesPolicyName,
  catchRuntimeError: options.overlay.runtimeErrors
} : {
  trustedTypesPolicyName: false,
  catchRuntimeError: options.overlay
}) : {
  send: function send() {}
};

/**
 * @param {Options} options
 * @param {Status} currentStatus
 */
var reloadApp = function reloadApp(_ref, currentStatus) {
  var hot = _ref.hot,
    liveReload = _ref.liveReload;
  if (currentStatus.isUnloading) {
    return;
  }
  var currentHash = currentStatus.currentHash,
    previousHash = currentStatus.previousHash;
  var isInitial = currentHash.indexOf(/** @type {string} */previousHash) >= 0;
  if (isInitial) {
    return;
  }

  /**
   * @param {Window} rootWindow
   * @param {number} intervalId
   */
  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("App updated. Reloading...");
    rootWindow.location.reload();
  }
  var search = self.location.search.toLowerCase();
  var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
  var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;
  if (hot && allowToHot) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("App hot update...");
    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1___default().emit("webpackHotUpdate", currentStatus.currentHash);
    if (typeof self !== "undefined" && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentStatus.currentHash), "*");
    }
  }
  // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload && allowToLiveReload) {
    var rootWindow = self;

    // use parent window for reload (in case we're in an iframe with no valid src)
    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== "about:") {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;
        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
};
var ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"), "g");

/**
 *
 * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.
 * Adapted from code originally released by Sindre Sorhus
 * Licensed the MIT License
 *
 * @param {string} string
 * @return {string}
 */
var stripAnsi = function stripAnsi(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a `string`, got `".concat(_typeof(string), "`"));
  }
  return string.replace(ansiRegex, "");
};
var onSocketMessage = {
  hot: function hot() {
    if (parsedResourceQuery.hot === "false") {
      return;
    }
    options.hot = true;
  },
  liveReload: function liveReload() {
    if (parsedResourceQuery["live-reload"] === "false") {
      return;
    }
    options.liveReload = true;
  },
  invalid: function invalid() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("App updated. Recompiling...");

    // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.
    if (options.overlay) {
      overlay.send({
        type: "DISMISS"
      });
    }
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Invalid");
  },
  /**
   * @param {string} hash
   */
  hash: function hash(_hash) {
    status.previousHash = status.currentHash;
    status.currentHash = _hash;
  },
  logging: setAllLogLevel,
  /**
   * @param {boolean} value
   */
  overlay: function overlay(value) {
    if (typeof document === "undefined") {
      return;
    }
    options.overlay = value;
    decodeOverlayOptions(options.overlay);
  },
  /**
   * @param {number} value
   */
  reconnect: function reconnect(value) {
    if (parsedResourceQuery.reconnect === "false") {
      return;
    }
    options.reconnect = value;
  },
  /**
   * @param {boolean} value
   */
  progress: function progress(value) {
    options.progress = value;
  },
  /**
   * @param {{ pluginName?: string, percent: number, msg: string }} data
   */
  "progress-update": function progressUpdate(data) {
    if (options.progress) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
    }
    if ((0,_progress_js__WEBPACK_IMPORTED_MODULE_6__.isProgressSupported)()) {
      if (typeof options.progress === "string") {
        var progress = document.querySelector("wds-progress");
        if (!progress) {
          (0,_progress_js__WEBPACK_IMPORTED_MODULE_6__.defineProgressElement)();
          progress = document.createElement("wds-progress");
          document.body.appendChild(progress);
        }
        progress.setAttribute("progress", data.percent);
        progress.setAttribute("type", options.progress);
      }
    }
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Progress", data);
  },
  "still-ok": function stillOk() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("Nothing changed.");
    if (options.overlay) {
      overlay.send({
        type: "DISMISS"
      });
    }
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("StillOk");
  },
  ok: function ok() {
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Ok");
    if (options.overlay) {
      overlay.send({
        type: "DISMISS"
      });
    }
    reloadApp(options, status);
  },
  /**
   * @param {string} file
   */
  "static-changed": function staticChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },
  /**
   * @param {Error[]} warnings
   * @param {any} params
   */
  warnings: function warnings(_warnings, params) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.warn("Warnings while compiling.");
    var printableWarnings = _warnings.map(function (error) {
      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.formatProblem)("warning", error),
        header = _formatProblem.header,
        body = _formatProblem.body;
      return "".concat(header, "\n").concat(stripAnsi(body));
    });
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Warnings", printableWarnings);
    for (var i = 0; i < printableWarnings.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.warn(printableWarnings[i]);
    }
    var overlayWarningsSetting = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;
    if (overlayWarningsSetting) {
      var warningsToDisplay = typeof overlayWarningsSetting === "function" ? _warnings.filter(overlayWarningsSetting) : _warnings;
      if (warningsToDisplay.length) {
        overlay.send({
          type: "BUILD_ERROR",
          level: "warning",
          messages: _warnings
        });
      }
    }
    if (params && params.preventReloading) {
      return;
    }
    reloadApp(options, status);
  },
  /**
   * @param {Error[]} errors
   */
  errors: function errors(_errors) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error("Errors while compiling. Reload prevented.");
    var printableErrors = _errors.map(function (error) {
      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.formatProblem)("error", error),
        header = _formatProblem2.header,
        body = _formatProblem2.body;
      return "".concat(header, "\n").concat(stripAnsi(body));
    });
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Errors", printableErrors);
    for (var i = 0; i < printableErrors.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(printableErrors[i]);
    }
    var overlayErrorsSettings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;
    if (overlayErrorsSettings) {
      var errorsToDisplay = typeof overlayErrorsSettings === "function" ? _errors.filter(overlayErrorsSettings) : _errors;
      if (errorsToDisplay.length) {
        overlay.send({
          type: "BUILD_ERROR",
          level: "error",
          messages: _errors
        });
      }
    }
  },
  /**
   * @param {Error} error
   */
  error: function error(_error) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(_error);
  },
  close: function close() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info("Disconnected!");
    if (options.overlay) {
      overlay.send({
        type: "DISMISS"
      });
    }
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__["default"])("Close");
  }
};

/**
 * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL
 * @returns {string}
 */
var formatURL = function formatURL(objURL) {
  var protocol = objURL.protocol || "";
  if (protocol && protocol.substr(-1) !== ":") {
    protocol += ":";
  }
  var auth = objURL.auth || "";
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }
  var host = "";
  if (objURL.hostname) {
    host = auth + (objURL.hostname.indexOf(":") === -1 ? objURL.hostname : "[".concat(objURL.hostname, "]"));
    if (objURL.port) {
      host += ":".concat(objURL.port);
    }
  }
  var pathname = objURL.pathname || "";
  if (objURL.slashes) {
    host = "//".concat(host || "");
    if (pathname && pathname.charAt(0) !== "/") {
      pathname = "/".concat(pathname);
    }
  } else if (!host) {
    host = "";
  }
  var search = objURL.search || "";
  if (search && search.charAt(0) !== "?") {
    search = "?".concat(search);
  }
  var hash = objURL.hash || "";
  if (hash && hash.charAt(0) !== "#") {
    hash = "#".concat(hash);
  }
  pathname = pathname.replace(/[?#]/g,
  /**
   * @param {string} match
   * @returns {string}
   */
  function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
};

/**
 * @param {URL & { fromCurrentScript?: boolean }} parsedURL
 * @returns {string}
 */
var createSocketURL = function createSocketURL(parsedURL) {
  var hostname = parsedURL.hostname;

  // Node.js module parses it as `::`
  // `new URL(urlString, [baseURLString])` parses it as '[::]'
  var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]";

  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384
  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
    hostname = self.location.hostname;
  }
  var socketURLProtocol = parsedURL.protocol || self.location.protocol;

  // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.
  if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
    socketURLProtocol = self.location.protocol;
  }
  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
  var socketURLAuth = "";

  // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
  // Parse authentication credentials in case we need them
  if (parsedURL.username) {
    socketURLAuth = parsedURL.username;

    // Since HTTP basic authentication does not allow empty username,
    // we only include password if the username is not empty.
    if (parsedURL.password) {
      // Result: <username>:<password>
      socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
    }
  }

  // In case the host is a raw IPv6 address, it can be enclosed in
  // the brackets as the brackets are needed in the final URL string.
  // Need to remove those as url.format blindly adds its own set of brackets
  // if the host string contains colons. That would lead to non-working
  // double brackets (e.g. [[::]]) host
  //
  // All of these web socket url params are optionally passed in through resourceQuery,
  // so we need to fall back to the default if they are not provided
  var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
  var socketURLPort = parsedURL.port;
  if (!socketURLPort || socketURLPort === "0") {
    socketURLPort = self.location.port;
  }

  // If path is provided it'll be passed in via the resourceQuery as a
  // query param so it has to be parsed out of the querystring in order for the
  // client to open the socket to the correct location.
  var socketURLPathname = "/ws";
  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
    socketURLPathname = parsedURL.pathname;
  }
  return formatURL({
    protocol: socketURLProtocol,
    auth: socketURLAuth,
    hostname: socketURLHostname,
    port: socketURLPort,
    pathname: socketURLPathname,
    slashes: true
  });
};
var socketURL = createSocketURL(parsedResourceQuery);
(0,_socket_js__WEBPACK_IMPORTED_MODULE_2__["default"])(socketURL, onSocketMessage, options.reconnect);


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/******/(function () {
  // webpackBootstrap
  /******/
  "use strict";

  /******/
  var __webpack_modules__ = {
    /***/"./client-src/modules/logger/tapable.js": (
    /*!**********************************************!*\
      !*** ./client-src/modules/logger/tapable.js ***!
      \**********************************************/
    /***/
    function (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_404__) {
      __nested_webpack_require_404__.r(__nested_webpack_exports__);
      /* harmony export */
      __nested_webpack_require_404__.d(__nested_webpack_exports__, {
        /* harmony export */SyncBailHook: function () {
          return /* binding */SyncBailHook;
        }
        /* harmony export */
      });
      function SyncBailHook() {
        return {
          call: function call() {}
        };
      }

      /**
       * Client stub for tapable SyncBailHook
       */
      // eslint-disable-next-line import/prefer-default-export

      /***/
    }),
    /***/"./node_modules/webpack/lib/logging/Logger.js": (
    /*!****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/Logger.js ***!
      \****************************************************/
    /***/
    function (module) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */

      function _typeof(o) {
        "@babel/helpers - typeof";

        return _typeof = "function" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) && "symbol" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator ? function (o) {
          return typeof o;
        } : function (o) {
          return o && "function" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }) && o.constructor === (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }) && o !== (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }).prototype ? "symbol" : typeof o;
        }, _typeof(o);
      }
      function _toConsumableArray(r) {
        return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(r, a) {
        if (r) {
          if ("string" == typeof r) return _arrayLikeToArray(r, a);
          var t = {}.toString.call(r).slice(8, -1);
          return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
        }
      }
      function _iterableToArray(r) {
        if ("undefined" != typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) && null != r[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator] || null != r["@@iterator"]) return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
        if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
        return n;
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
          writable: !1
        }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var LogType = Object.freeze({
        error: (/** @type {"error"} */"error"),
        // message, c style arguments
        warn: (/** @type {"warn"} */"warn"),
        // message, c style arguments
        info: (/** @type {"info"} */"info"),
        // message, c style arguments
        log: (/** @type {"log"} */"log"),
        // message, c style arguments
        debug: (/** @type {"debug"} */"debug"),
        // message, c style arguments

        trace: (/** @type {"trace"} */"trace"),
        // no arguments

        group: (/** @type {"group"} */"group"),
        // [label]
        groupCollapsed: (/** @type {"groupCollapsed"} */"groupCollapsed"),
        // [label]
        groupEnd: (/** @type {"groupEnd"} */"groupEnd"),
        // [label]

        profile: (/** @type {"profile"} */"profile"),
        // [profileName]
        profileEnd: (/** @type {"profileEnd"} */"profileEnd"),
        // [profileName]

        time: (/** @type {"time"} */"time"),
        // name, time as [seconds, nanoseconds]

        clear: (/** @type {"clear"} */"clear"),
        // no arguments
        status: (/** @type {"status"} */"status") // message, arguments
      });
      module.exports.LogType = LogType;

      /** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */

      var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger raw log method");
      var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger times");
      var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) {
        return i;
      })("webpack logger aggregated times");
      var WebpackLogger = /*#__PURE__*/function () {
        /**
         * @param {(type: LogTypeEnum, args?: EXPECTED_ANY[]) => void} log log function
         * @param {(name: string | (() => string)) => WebpackLogger} getChildLogger function to create child logger
         */
        function WebpackLogger(log, getChildLogger) {
          _classCallCheck(this, WebpackLogger);
          this[LOG_SYMBOL] = log;
          this.getChildLogger = getChildLogger;
        }

        /**
         * @param {...EXPECTED_ANY} args args
         */
        return _createClass(WebpackLogger, [{
          key: "error",
          value: function error() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            this[LOG_SYMBOL](LogType.error, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "warn",
          value: function warn() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            this[LOG_SYMBOL](LogType.warn, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "info",
          value: function info() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            this[LOG_SYMBOL](LogType.info, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "log",
          value: function log() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            this[LOG_SYMBOL](LogType.log, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "debug",
          value: function debug() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }
            this[LOG_SYMBOL](LogType.debug, args);
          }

          /**
           * @param {EXPECTED_ANY} assertion assertion
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "assert",
          value: function assert(assertion) {
            if (!assertion) {
              for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                args[_key6 - 1] = arguments[_key6];
              }
              this[LOG_SYMBOL](LogType.error, args);
            }
          }
        }, {
          key: "trace",
          value: function trace() {
            this[LOG_SYMBOL](LogType.trace, ["Trace"]);
          }
        }, {
          key: "clear",
          value: function clear() {
            this[LOG_SYMBOL](LogType.clear);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "status",
          value: function status() {
            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }
            this[LOG_SYMBOL](LogType.status, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "group",
          value: function group() {
            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = arguments[_key8];
            }
            this[LOG_SYMBOL](LogType.group, args);
          }

          /**
           * @param {...EXPECTED_ANY} args args
           */
        }, {
          key: "groupCollapsed",
          value: function groupCollapsed() {
            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
              args[_key9] = arguments[_key9];
            }
            this[LOG_SYMBOL](LogType.groupCollapsed, args);
          }
        }, {
          key: "groupEnd",
          value: function groupEnd() {
            this[LOG_SYMBOL](LogType.groupEnd);
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "profile",
          value: function profile(label) {
            this[LOG_SYMBOL](LogType.profile, [label]);
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "profileEnd",
          value: function profileEnd(label) {
            this[LOG_SYMBOL](LogType.profileEnd, [label]);
          }

          /**
           * @param {string} label label
           */
        }, {
          key: "time",
          value: function time(label) {
            /** @type {Map<string | undefined, [number, number]>} */
            this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
            this[TIMERS_SYMBOL].set(label, process.hrtime());
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "timeLog",
          value: function timeLog(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
            }
            var time = process.hrtime(prev);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "timeEnd",
          value: function timeEnd(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
            }
            var time = process.hrtime(prev);
            /** @type {Map<string | undefined, [number, number]>} */
            this[TIMERS_SYMBOL].delete(label);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "timeAggregate",
          value: function timeAggregate(label) {
            var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
            if (!prev) {
              throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
            }
            var time = process.hrtime(prev);
            /** @type {Map<string | undefined, [number, number]>} */
            this[TIMERS_SYMBOL].delete(label);
            /** @type {Map<string | undefined, [number, number]>} */
            this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
            var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);
            if (current !== undefined) {
              if (time[1] + current[1] > 1e9) {
                time[0] += current[0] + 1;
                time[1] = time[1] - 1e9 + current[1];
              } else {
                time[0] += current[0];
                time[1] += current[1];
              }
            }
            this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
          }

          /**
           * @param {string=} label label
           */
        }, {
          key: "timeAggregateEnd",
          value: function timeAggregateEnd(label) {
            if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
            var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
            if (time === undefined) return;
            this[TIMERS_AGGREGATES_SYMBOL].delete(label);
            this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
          }
        }]);
      }();
      module.exports.Logger = WebpackLogger;

      /***/
    }),
    /***/"./node_modules/webpack/lib/logging/createConsoleLogger.js": (
    /*!*****************************************************************!*\
      !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
      \*****************************************************************/
    /***/
    function (module, __unused_webpack_exports, __nested_webpack_require_15131__) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */

      function _slicedToArray(r, e) {
        return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _iterableToArrayLimit(r, l) {
        var t = null == r ? null : "undefined" != typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) && r[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator] || r["@@iterator"];
        if (null != t) {
          var e,
            n,
            i,
            u,
            a = [],
            f = !0,
            o = !1;
          try {
            if (i = (t = t.call(r)).next, 0 === l) {
              if (Object(t) !== t) return;
              f = !1;
            } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
          } catch (r) {
            o = !0, n = r;
          } finally {
            try {
              if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally {
              if (o) throw n;
            }
          }
          return a;
        }
      }
      function _arrayWithHoles(r) {
        if (Array.isArray(r)) return r;
      }
      function _toConsumableArray(r) {
        return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(r, a) {
        if (r) {
          if ("string" == typeof r) return _arrayLikeToArray(r, a);
          var t = {}.toString.call(r).slice(8, -1);
          return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
        }
      }
      function _iterableToArray(r) {
        if ("undefined" != typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) && null != r[(typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator] || null != r["@@iterator"]) return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
        if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
        return n;
      }
      function _typeof(o) {
        "@babel/helpers - typeof";

        return _typeof = "function" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }) && "symbol" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
          return i;
        }).iterator ? function (o) {
          return typeof o;
        } : function (o) {
          return o && "function" == typeof (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }) && o.constructor === (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }) && o !== (typeof Symbol !== "undefined" ? Symbol : function (i) {
            return i;
          }).prototype ? "symbol" : typeof o;
        }, _typeof(o);
      }
      var _require = __nested_webpack_require_15131__(/*! ./Logger */"./node_modules/webpack/lib/logging/Logger.js"),
        LogType = _require.LogType;

      /** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */
      /** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */
      /** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */

      /** @typedef {(item: string) => boolean} FilterFunction */
      /** @typedef {(value: string, type: LogTypeEnum, args?: EXPECTED_ANY[]) => void} LoggingFunction */

      /**
       * @typedef {object} LoggerConsole
       * @property {() => void} clear
       * @property {() => void} trace
       * @property {(...args: EXPECTED_ANY[]) => void} info
       * @property {(...args: EXPECTED_ANY[]) => void} log
       * @property {(...args: EXPECTED_ANY[]) => void} warn
       * @property {(...args: EXPECTED_ANY[]) => void} error
       * @property {(...args: EXPECTED_ANY[]) => void=} debug
       * @property {(...args: EXPECTED_ANY[]) => void=} group
       * @property {(...args: EXPECTED_ANY[]) => void=} groupCollapsed
       * @property {(...args: EXPECTED_ANY[]) => void=} groupEnd
       * @property {(...args: EXPECTED_ANY[]) => void=} status
       * @property {(...args: EXPECTED_ANY[]) => void=} profile
       * @property {(...args: EXPECTED_ANY[]) => void=} profileEnd
       * @property {(...args: EXPECTED_ANY[]) => void=} logTime
       */

      /**
       * @typedef {object} LoggerOptions
       * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
       * @property {FilterTypes|boolean} debug filter for debug logging
       * @property {LoggerConsole} console the console to log to
       */

      /**
       * @param {FilterItemTypes} item an input item
       * @returns {FilterFunction | undefined} filter function
       */
      var filterToFunction = function filterToFunction(item) {
        if (typeof item === "string") {
          var regExp = new RegExp("[\\\\/]".concat(item.replace(/[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
          return function (ident) {
            return regExp.test(ident);
          };
        }
        if (item && _typeof(item) === "object" && typeof item.test === "function") {
          return function (ident) {
            return item.test(ident);
          };
        }
        if (typeof item === "function") {
          return item;
        }
        if (typeof item === "boolean") {
          return function () {
            return item;
          };
        }
      };

      /**
       * @enum {number}
       */
      var LogLevel = {
        none: 6,
        false: 6,
        error: 5,
        warn: 4,
        info: 3,
        log: 2,
        true: 2,
        verbose: 1
      };

      /**
       * @param {LoggerOptions} options options object
       * @returns {LoggingFunction} logging function
       */
      module.exports = function (_ref) {
        var _ref$level = _ref.level,
          level = _ref$level === void 0 ? "info" : _ref$level,
          _ref$debug = _ref.debug,
          debug = _ref$debug === void 0 ? false : _ref$debug,
          console = _ref.console;
        var debugFilters = /** @type {FilterFunction[]} */

        typeof debug === "boolean" ? [function () {
          return debug;
        }] : /** @type {FilterItemTypes[]} */[].concat(debug).map(filterToFunction);
        var loglevel = LogLevel["".concat(level)] || 0;

        /**
         * @param {string} name name of the logger
         * @param {LogTypeEnum} type type of the log entry
         * @param {EXPECTED_ANY[]=} args arguments of the log entry
         * @returns {void}
         */
        var logger = function logger(name, type, args) {
          var labeledArgs = function labeledArgs() {
            if (Array.isArray(args)) {
              if (args.length > 0 && typeof args[0] === "string") {
                return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
              }
              return ["[".concat(name, "]")].concat(_toConsumableArray(args));
            }
            return [];
          };
          var debug = debugFilters.some(function (f) {
            return f(name);
          });
          switch (type) {
            case LogType.debug:
              if (!debug) return;
              if (typeof console.debug === "function") {
                console.debug.apply(console, _toConsumableArray(labeledArgs()));
              } else {
                console.log.apply(console, _toConsumableArray(labeledArgs()));
              }
              break;
            case LogType.log:
              if (!debug && loglevel > LogLevel.log) return;
              console.log.apply(console, _toConsumableArray(labeledArgs()));
              break;
            case LogType.info:
              if (!debug && loglevel > LogLevel.info) return;
              console.info.apply(console, _toConsumableArray(labeledArgs()));
              break;
            case LogType.warn:
              if (!debug && loglevel > LogLevel.warn) return;
              console.warn.apply(console, _toConsumableArray(labeledArgs()));
              break;
            case LogType.error:
              if (!debug && loglevel > LogLevel.error) return;
              console.error.apply(console, _toConsumableArray(labeledArgs()));
              break;
            case LogType.trace:
              if (!debug) return;
              console.trace();
              break;
            case LogType.groupCollapsed:
              if (!debug && loglevel > LogLevel.log) return;
              if (!debug && loglevel > LogLevel.verbose) {
                if (typeof console.groupCollapsed === "function") {
                  console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
                } else {
                  console.log.apply(console, _toConsumableArray(labeledArgs()));
                }
                break;
              }
            // falls through
            case LogType.group:
              if (!debug && loglevel > LogLevel.log) return;
              if (typeof console.group === "function") {
                console.group.apply(console, _toConsumableArray(labeledArgs()));
              } else {
                console.log.apply(console, _toConsumableArray(labeledArgs()));
              }
              break;
            case LogType.groupEnd:
              if (!debug && loglevel > LogLevel.log) return;
              if (typeof console.groupEnd === "function") {
                console.groupEnd();
              }
              break;
            case LogType.time:
              {
                if (!debug && loglevel > LogLevel.log) return;
                var _args = _slicedToArray(/** @type {[string, number, number]} */
                  args, 3),
                  label = _args[0],
                  start = _args[1],
                  end = _args[2];
                var ms = start * 1000 + end / 1000000;
                var msg = "[".concat(name, "] ").concat(label, ": ").concat(ms, " ms");
                if (typeof console.logTime === "function") {
                  console.logTime(msg);
                } else {
                  console.log(msg);
                }
                break;
              }
            case LogType.profile:
              if (typeof console.profile === "function") {
                console.profile.apply(console, _toConsumableArray(labeledArgs()));
              }
              break;
            case LogType.profileEnd:
              if (typeof console.profileEnd === "function") {
                console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
              }
              break;
            case LogType.clear:
              if (!debug && loglevel > LogLevel.log) return;
              if (typeof console.clear === "function") {
                console.clear();
              }
              break;
            case LogType.status:
              if (!debug && loglevel > LogLevel.info) return;
              if (typeof console.status === "function") {
                if (!args || args.length === 0) {
                  console.status();
                } else {
                  console.status.apply(console, _toConsumableArray(labeledArgs()));
                }
              } else if (args && args.length !== 0) {
                console.info.apply(console, _toConsumableArray(labeledArgs()));
              }
              break;
            default:
              throw new Error("Unexpected LogType ".concat(type));
          }
        };
        return logger;
      };

      /***/
    }),
    /***/"./node_modules/webpack/lib/logging/runtime.js": (
    /*!*****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/runtime.js ***!
      \*****************************************************/
    /***/
    function (module, __unused_webpack_exports, __nested_webpack_require_27984__) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */

      function _extends() {
        return _extends = Object.assign ? Object.assign.bind() : function (n) {
          for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
          }
          return n;
        }, _extends.apply(null, arguments);
      }
      var _require = __nested_webpack_require_27984__(/*! tapable */"./client-src/modules/logger/tapable.js"),
        SyncBailHook = _require.SyncBailHook;
      var _require2 = __nested_webpack_require_27984__(/*! ./Logger */"./node_modules/webpack/lib/logging/Logger.js"),
        Logger = _require2.Logger;
      var createConsoleLogger = __nested_webpack_require_27984__(/*! ./createConsoleLogger */"./node_modules/webpack/lib/logging/createConsoleLogger.js");

      /** @type {createConsoleLogger.LoggerOptions} */
      var currentDefaultLoggerOptions = {
        level: "info",
        debug: false,
        console: console
      };
      var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);

      /**
       * @param {string} name name of the logger
       * @returns {Logger} a logger
       */
      module.exports.getLogger = function (name) {
        return new Logger(function (type, args) {
          if (module.exports.hooks.log.call(name, type, args) === undefined) {
            currentDefaultLogger(name, type, args);
          }
        }, function (childName) {
          return module.exports.getLogger("".concat(name, "/").concat(childName));
        });
      };

      /**
       * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
       * @returns {void}
       */
      module.exports.configureDefaultLogger = function (options) {
        _extends(currentDefaultLoggerOptions, options);
        currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
      };
      module.exports.hooks = {
        log: new SyncBailHook(["origin", "type", "args"])
      };

      /***/
    })

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/
  var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/
  function __nested_webpack_require_30373__(moduleId) {
    /******/ // Check if module is in cache
    /******/var cachedModule = __webpack_module_cache__[moduleId];
    /******/
    if (cachedModule !== undefined) {
      /******/return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/
    var module = __webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/exports: {}
      /******/
    };
    /******/
    /******/ // Execute the module function
    /******/
    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_30373__);
    /******/
    /******/ // Return the exports of the module
    /******/
    return module.exports;
    /******/
  }
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/define property getters */
  /******/
  !function () {
    /******/ // define getter functions for harmony exports
    /******/__nested_webpack_require_30373__.d = function (exports, definition) {
      /******/for (var key in definition) {
        /******/if (__nested_webpack_require_30373__.o(definition, key) && !__nested_webpack_require_30373__.o(exports, key)) {
          /******/Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key]
          });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  }();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/
  !function () {
    /******/__nested_webpack_require_30373__.o = function (obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    };
    /******/
  }();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/
  !function () {
    /******/ // define __esModule on exports
    /******/__nested_webpack_require_30373__.r = function (exports) {
      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module'
        });
        /******/
      }
      /******/
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      /******/
    };
    /******/
  }();
  /******/
  /************************************************************************/
  var __nested_webpack_exports__ = {};
  // This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
  !function () {
    /*!********************************************!*\
      !*** ./client-src/modules/logger/index.js ***!
      \********************************************/
    __nested_webpack_require_30373__.r(__nested_webpack_exports__);
    /* harmony export */
    __nested_webpack_require_30373__.d(__nested_webpack_exports__, {
      /* harmony export */"default": function () {
        return /* reexport default export from named module */webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__;
      }
      /* harmony export */
    });
    /* harmony import */
    var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_30373__(/*! webpack/lib/logging/runtime.js */"./node_modules/webpack/lib/logging/runtime.js");
  }();
  var __webpack_export_target__ = exports;
  for (var __webpack_i__ in __nested_webpack_exports__) __webpack_export_target__[__webpack_i__] = __nested_webpack_exports__[__webpack_i__];
  if (__nested_webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", {
    value: true
  });
  /******/
})();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOverlay: () => (/* binding */ createOverlay),
/* harmony export */   formatProblem: () => (/* binding */ formatProblem)
/* harmony export */ });
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).



/**
 * @type {(input: string, position: number) => string}
 */
var getCodePoint = String.prototype.codePointAt ? function (input, position) {
  return input.codePointAt(position);
} : function (input, position) {
  return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;
};

/**
 * @param {string} macroText
 * @param {RegExp} macroRegExp
 * @param {(input: string) => string} macroReplacer
 * @returns {string}
 */
var replaceUsingRegExp = function replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {
  macroRegExp.lastIndex = 0;
  var replaceMatch = macroRegExp.exec(macroText);
  var replaceResult;
  if (replaceMatch) {
    replaceResult = "";
    var replaceLastIndex = 0;
    do {
      if (replaceLastIndex !== replaceMatch.index) {
        replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);
      }
      var replaceInput = replaceMatch[0];
      replaceResult += macroReplacer(replaceInput);
      replaceLastIndex = replaceMatch.index + replaceInput.length;
      // eslint-disable-next-line no-cond-assign
    } while (replaceMatch = macroRegExp.exec(macroText));
    if (replaceLastIndex !== macroText.length) {
      replaceResult += macroText.substring(replaceLastIndex);
    }
  } else {
    replaceResult = macroText;
  }
  return replaceResult;
};
var references = {
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&apos;",
  "&": "&amp;"
};

/**
 * @param {string} text text
 * @returns {string}
 */
function encode(text) {
  if (!text) {
    return "";
  }
  return replaceUsingRegExp(text, /[<>'"&]/g, function (input) {
    var result = references[input];
    if (!result) {
      var code = input.length > 1 ? getCodePoint(input, 0) : input.charCodeAt(0);
      result = "&#".concat(code, ";");
    }
    return result;
  });
}

/**
 * @typedef {Object} StateDefinitions
 * @property {{[event: string]: { target: string; actions?: Array<string> }}} [on]
 */

/**
 * @typedef {Object} Options
 * @property {{[state: string]: StateDefinitions}} states
 * @property {object} context;
 * @property {string} initial
 */

/**
 * @typedef {Object} Implementation
 * @property {{[actionName: string]: (ctx: object, event: any) => object}} actions
 */

/**
 * A simplified `createMachine` from `@xstate/fsm` with the following differences:
 *
 *  - the returned machine is technically a "service". No `interpret(machine).start()` is needed.
 *  - the state definition only support `on` and target must be declared with { target: 'nextState', actions: [] } explicitly.
 *  - event passed to `send` must be an object with `type` property.
 *  - actions implementation will be [assign action](https://xstate.js.org/docs/guides/context.html#assign-action) if you return any value.
 *  Do not return anything if you just want to invoke side effect.
 *
 * The goal of this custom function is to avoid installing the entire `'xstate/fsm'` package, while enabling modeling using
 * state machine. You can copy the first parameter into the editor at https://stately.ai/viz to visualize the state machine.
 *
 * @param {Options} options
 * @param {Implementation} implementation
 */
function createMachine(_ref, _ref2) {
  var states = _ref.states,
    context = _ref.context,
    initial = _ref.initial;
  var actions = _ref2.actions;
  var currentState = initial;
  var currentContext = context;
  return {
    send: function send(event) {
      var currentStateOn = states[currentState].on;
      var transitionConfig = currentStateOn && currentStateOn[event.type];
      if (transitionConfig) {
        currentState = transitionConfig.target;
        if (transitionConfig.actions) {
          transitionConfig.actions.forEach(function (actName) {
            var actionImpl = actions[actName];
            var nextContextValue = actionImpl && actionImpl(currentContext, event);
            if (nextContextValue) {
              currentContext = _objectSpread(_objectSpread({}, currentContext), nextContextValue);
            }
          });
        }
      }
    }
  };
}

/**
 * @typedef {Object} ShowOverlayData
 * @property {'warning' | 'error'} level
 * @property {Array<string  | { moduleIdentifier?: string, moduleName?: string, loc?: string, message?: string }>} messages
 * @property {'build' | 'runtime'} messageSource
 */

/**
 * @typedef {Object} CreateOverlayMachineOptions
 * @property {(data: ShowOverlayData) => void} showOverlay
 * @property {() => void} hideOverlay
 */

/**
 * @param {CreateOverlayMachineOptions} options
 */
var createOverlayMachine = function createOverlayMachine(options) {
  var hideOverlay = options.hideOverlay,
    showOverlay = options.showOverlay;
  return createMachine({
    initial: "hidden",
    context: {
      level: "error",
      messages: [],
      messageSource: "build"
    },
    states: {
      hidden: {
        on: {
          BUILD_ERROR: {
            target: "displayBuildError",
            actions: ["setMessages", "showOverlay"]
          },
          RUNTIME_ERROR: {
            target: "displayRuntimeError",
            actions: ["setMessages", "showOverlay"]
          }
        }
      },
      displayBuildError: {
        on: {
          DISMISS: {
            target: "hidden",
            actions: ["dismissMessages", "hideOverlay"]
          },
          BUILD_ERROR: {
            target: "displayBuildError",
            actions: ["appendMessages", "showOverlay"]
          }
        }
      },
      displayRuntimeError: {
        on: {
          DISMISS: {
            target: "hidden",
            actions: ["dismissMessages", "hideOverlay"]
          },
          RUNTIME_ERROR: {
            target: "displayRuntimeError",
            actions: ["appendMessages", "showOverlay"]
          },
          BUILD_ERROR: {
            target: "displayBuildError",
            actions: ["setMessages", "showOverlay"]
          }
        }
      }
    }
  }, {
    actions: {
      dismissMessages: function dismissMessages() {
        return {
          messages: [],
          level: "error",
          messageSource: "build"
        };
      },
      appendMessages: function appendMessages(context, event) {
        return {
          messages: context.messages.concat(event.messages),
          level: event.level || context.level,
          messageSource: event.type === "RUNTIME_ERROR" ? "runtime" : "build"
        };
      },
      setMessages: function setMessages(context, event) {
        return {
          messages: event.messages,
          level: event.level || context.level,
          messageSource: event.type === "RUNTIME_ERROR" ? "runtime" : "build"
        };
      },
      hideOverlay: hideOverlay,
      showOverlay: showOverlay
    }
  });
};

/**
 *
 * @param {Error} error
 */
var parseErrorToStacks = function parseErrorToStacks(error) {
  if (!error || !(error instanceof Error)) {
    throw new Error("parseErrorToStacks expects Error object");
  }
  if (typeof error.stack === "string") {
    return error.stack.split("\n").filter(function (stack) {
      return stack !== "Error: ".concat(error.message);
    });
  }
};

/**
 * @callback ErrorCallback
 * @param {ErrorEvent} error
 * @returns {void}
 */

/**
 * @param {ErrorCallback} callback
 */
var listenToRuntimeError = function listenToRuntimeError(callback) {
  window.addEventListener("error", callback);
  return function cleanup() {
    window.removeEventListener("error", callback);
  };
};

/**
 * @callback UnhandledRejectionCallback
 * @param {PromiseRejectionEvent} rejectionEvent
 * @returns {void}
 */

/**
 * @param {UnhandledRejectionCallback} callback
 */
var listenToUnhandledRejection = function listenToUnhandledRejection(callback) {
  window.addEventListener("unhandledrejection", callback);
  return function cleanup() {
    window.removeEventListener("unhandledrejection", callback);
  };
};

// Styles are inspired by `react-error-overlay`

var msgStyles = {
  error: {
    backgroundColor: "rgba(206, 17, 38, 0.1)",
    color: "#fccfcf"
  },
  warning: {
    backgroundColor: "rgba(251, 245, 180, 0.1)",
    color: "#fbf5b4"
  }
};
var iframeStyle = {
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  width: "100vw",
  height: "100vh",
  border: "none",
  "z-index": 9999999999
};
var containerStyle = {
  position: "fixed",
  boxSizing: "border-box",
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  width: "100vw",
  height: "100vh",
  fontSize: "large",
  padding: "2rem 2rem 4rem 2rem",
  lineHeight: "1.2",
  whiteSpace: "pre-wrap",
  overflow: "auto",
  backgroundColor: "rgba(0, 0, 0, 0.9)",
  color: "white"
};
var headerStyle = {
  color: "#e83b46",
  fontSize: "2em",
  whiteSpace: "pre-wrap",
  fontFamily: "sans-serif",
  margin: "0 2rem 2rem 0",
  flex: "0 0 auto",
  maxHeight: "50%",
  overflow: "auto"
};
var dismissButtonStyle = {
  color: "#ffffff",
  lineHeight: "1rem",
  fontSize: "1.5rem",
  padding: "1rem",
  cursor: "pointer",
  position: "absolute",
  right: 0,
  top: 0,
  backgroundColor: "transparent",
  border: "none"
};
var msgTypeStyle = {
  color: "#e83b46",
  fontSize: "1.2em",
  marginBottom: "1rem",
  fontFamily: "sans-serif"
};
var msgTextStyle = {
  lineHeight: "1.5",
  fontSize: "1rem",
  fontFamily: "Menlo, Consolas, monospace"
};

// ANSI HTML

var colors = {
  reset: ["transparent", "transparent"],
  black: "181818",
  red: "E36049",
  green: "B3CB74",
  yellow: "FFD080",
  blue: "7CAFC2",
  magenta: "7FACCA",
  cyan: "C3C2EF",
  lightgrey: "EBE7E3",
  darkgrey: "6D7891"
};
ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);

/**
 * @param {string} type
 * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string; stack?: string[] }} item
 * @returns {{ header: string, body: string }}
 */
var formatProblem = function formatProblem(type, item) {
  var header = type === "warning" ? "WARNING" : "ERROR";
  var body = "";
  if (typeof item === "string") {
    body += item;
  } else {
    var file = item.file || "";
    // eslint-disable-next-line no-nested-ternary
    var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
    var loc = item.loc;
    header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
    body += item.message || "";
  }
  if (Array.isArray(item.stack)) {
    item.stack.forEach(function (stack) {
      if (typeof stack === "string") {
        body += "\r\n".concat(stack);
      }
    });
  }
  return {
    header: header,
    body: body
  };
};

/**
 * @typedef {Object} CreateOverlayOptions
 * @property {string | null} trustedTypesPolicyName
 * @property {boolean | (error: Error) => void} [catchRuntimeError]
 */

/**
 *
 * @param {CreateOverlayOptions} options
 */
var createOverlay = function createOverlay(options) {
  /** @type {HTMLIFrameElement | null | undefined} */
  var iframeContainerElement;
  /** @type {HTMLDivElement | null | undefined} */
  var containerElement;
  /** @type {HTMLDivElement | null | undefined} */
  var headerElement;
  /** @type {Array<(element: HTMLDivElement) => void>} */
  var onLoadQueue = [];
  /** @type {TrustedTypePolicy | undefined} */
  var overlayTrustedTypesPolicy;

  /**
   *
   * @param {HTMLElement} element
   * @param {CSSStyleDeclaration} style
   */
  function applyStyle(element, style) {
    Object.keys(style).forEach(function (prop) {
      element.style[prop] = style[prop];
    });
  }

  /**
   * @param {string | null} trustedTypesPolicyName
   */
  function createContainer(trustedTypesPolicyName) {
    // Enable Trusted Types if they are available in the current browser.
    if (window.trustedTypes) {
      overlayTrustedTypesPolicy = window.trustedTypes.createPolicy(trustedTypesPolicyName || "webpack-dev-server#overlay", {
        createHTML: function createHTML(value) {
          return value;
        }
      });
    }
    iframeContainerElement = document.createElement("iframe");
    iframeContainerElement.id = "webpack-dev-server-client-overlay";
    iframeContainerElement.src = "about:blank";
    applyStyle(iframeContainerElement, iframeStyle);
    iframeContainerElement.onload = function () {
      var contentElement = /** @type {Document} */
      (/** @type {HTMLIFrameElement} */
      iframeContainerElement.contentDocument).createElement("div");
      containerElement = /** @type {Document} */
      (/** @type {HTMLIFrameElement} */
      iframeContainerElement.contentDocument).createElement("div");
      contentElement.id = "webpack-dev-server-client-overlay-div";
      applyStyle(contentElement, containerStyle);
      headerElement = document.createElement("div");
      headerElement.innerText = "Compiled with problems:";
      applyStyle(headerElement, headerStyle);
      var closeButtonElement = document.createElement("button");
      applyStyle(closeButtonElement, dismissButtonStyle);
      closeButtonElement.innerText = "×";
      closeButtonElement.ariaLabel = "Dismiss";
      closeButtonElement.addEventListener("click", function () {
        // eslint-disable-next-line no-use-before-define
        overlayService.send({
          type: "DISMISS"
        });
      });
      contentElement.appendChild(headerElement);
      contentElement.appendChild(closeButtonElement);
      contentElement.appendChild(containerElement);

      /** @type {Document} */
      (/** @type {HTMLIFrameElement} */
      iframeContainerElement.contentDocument).body.appendChild(contentElement);
      onLoadQueue.forEach(function (onLoad) {
        onLoad(/** @type {HTMLDivElement} */contentElement);
      });
      onLoadQueue = [];

      /** @type {HTMLIFrameElement} */
      iframeContainerElement.onload = null;
    };
    document.body.appendChild(iframeContainerElement);
  }

  /**
   * @param {(element: HTMLDivElement) => void} callback
   * @param {string | null} trustedTypesPolicyName
   */
  function ensureOverlayExists(callback, trustedTypesPolicyName) {
    if (containerElement) {
      containerElement.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML("") : "";
      // Everything is ready, call the callback right away.
      callback(containerElement);
      return;
    }
    onLoadQueue.push(callback);
    if (iframeContainerElement) {
      return;
    }
    createContainer(trustedTypesPolicyName);
  }

  // Successful compilation.
  function hide() {
    if (!iframeContainerElement) {
      return;
    }

    // Clean up and reset internal state.
    document.body.removeChild(iframeContainerElement);
    iframeContainerElement = null;
    containerElement = null;
  }

  // Compilation with errors (e.g. syntax error or missing modules).
  /**
   * @param {string} type
   * @param {Array<string  | { moduleIdentifier?: string, moduleName?: string, loc?: string, message?: string }>} messages
   * @param {string | null} trustedTypesPolicyName
   * @param {'build' | 'runtime'} messageSource
   */
  function show(type, messages, trustedTypesPolicyName, messageSource) {
    ensureOverlayExists(function () {
      headerElement.innerText = messageSource === "runtime" ? "Uncaught runtime errors:" : "Compiled with problems:";
      messages.forEach(function (message) {
        var entryElement = document.createElement("div");
        var msgStyle = type === "warning" ? msgStyles.warning : msgStyles.error;
        applyStyle(entryElement, _objectSpread(_objectSpread({}, msgStyle), {}, {
          padding: "1rem 1rem 1.5rem 1rem"
        }));
        var typeElement = document.createElement("div");
        var _formatProblem = formatProblem(type, message),
          header = _formatProblem.header,
          body = _formatProblem.body;
        typeElement.innerText = header;
        applyStyle(typeElement, msgTypeStyle);
        if (message.moduleIdentifier) {
          applyStyle(typeElement, {
            cursor: "pointer"
          });
          // element.dataset not supported in IE
          typeElement.setAttribute("data-can-open", true);
          typeElement.addEventListener("click", function () {
            fetch("/webpack-dev-server/open-editor?fileName=".concat(message.moduleIdentifier));
          });
        }

        // Make it look similar to our terminal.
        var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()(encode(body));
        var messageTextNode = document.createElement("div");
        applyStyle(messageTextNode, msgTextStyle);
        messageTextNode.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(text) : text;
        entryElement.appendChild(typeElement);
        entryElement.appendChild(messageTextNode);

        /** @type {HTMLDivElement} */
        containerElement.appendChild(entryElement);
      });
    }, trustedTypesPolicyName);
  }
  var overlayService = createOverlayMachine({
    showOverlay: function showOverlay(_ref3) {
      var _ref3$level = _ref3.level,
        level = _ref3$level === void 0 ? "error" : _ref3$level,
        messages = _ref3.messages,
        messageSource = _ref3.messageSource;
      return show(level, messages, options.trustedTypesPolicyName, messageSource);
    },
    hideOverlay: hide
  });
  if (options.catchRuntimeError) {
    /**
     * @param {Error | undefined} error
     * @param {string} fallbackMessage
     */
    var handleError = function handleError(error, fallbackMessage) {
      var errorObject = error instanceof Error ? error : new Error(error || fallbackMessage);
      var shouldDisplay = typeof options.catchRuntimeError === "function" ? options.catchRuntimeError(errorObject) : true;
      if (shouldDisplay) {
        overlayService.send({
          type: "RUNTIME_ERROR",
          messages: [{
            message: errorObject.message,
            stack: parseErrorToStacks(errorObject)
          }]
        });
      }
    };
    listenToRuntimeError(function (errorEvent) {
      // error property may be empty in older browser like IE
      var error = errorEvent.error,
        message = errorEvent.message;
      if (!error && !message) {
        return;
      }

      // if error stack indicates a React error boundary caught the error, do not show overlay.
      if (error && error.stack && error.stack.includes("invokeGuardedCallbackDev")) {
        return;
      }
      handleError(error, message);
    });
    listenToUnhandledRejection(function (promiseRejectionEvent) {
      var reason = promiseRejectionEvent.reason;
      handleError(reason, "Unknown promise rejection reason");
    });
  }
  return overlayService;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/progress.js":
/*!************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/progress.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defineProgressElement: () => (/* binding */ defineProgressElement),
/* harmony export */   isProgressSupported: () => (/* binding */ isProgressSupported)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper(t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _classPrivateMethodInitSpec(e, a) {
  _checkPrivateRedeclaration(e, a), a.add(e);
}
function _checkPrivateRedeclaration(e, t) {
  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _assertClassBrand(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
function isProgressSupported() {
  return "customElements" in self && !!HTMLElement.prototype.attachShadow;
}
function defineProgressElement() {
  var _WebpackDevServerProgress;
  if (customElements.get("wds-progress")) {
    return;
  }
  var _WebpackDevServerProgress_brand = /*#__PURE__*/new WeakSet();
  var WebpackDevServerProgress = /*#__PURE__*/function (_HTMLElement) {
    function WebpackDevServerProgress() {
      var _this;
      _classCallCheck(this, WebpackDevServerProgress);
      _this = _callSuper(this, WebpackDevServerProgress);
      _classPrivateMethodInitSpec(_this, _WebpackDevServerProgress_brand);
      _this.attachShadow({
        mode: "open"
      });
      _this.maxDashOffset = -219.99078369140625;
      _this.animationTimer = null;
      return _this;
    }
    _inherits(WebpackDevServerProgress, _HTMLElement);
    return _createClass(WebpackDevServerProgress, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        _assertClassBrand(_WebpackDevServerProgress_brand, this, _reset).call(this);
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(name, oldValue, newValue) {
        if (name === "progress") {
          _assertClassBrand(_WebpackDevServerProgress_brand, this, _update).call(this, Number(newValue));
        } else if (name === "type") {
          _assertClassBrand(_WebpackDevServerProgress_brand, this, _reset).call(this);
        }
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["progress", "type"];
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));
  _WebpackDevServerProgress = WebpackDevServerProgress;
  function _reset() {
    var _this$getAttribute, _Number;
    clearTimeout(this.animationTimer);
    this.animationTimer = null;
    var typeAttr = (_this$getAttribute = this.getAttribute("type")) === null || _this$getAttribute === void 0 ? void 0 : _this$getAttribute.toLowerCase();
    this.type = typeAttr === "circular" ? "circular" : "linear";
    var innerHTML = this.type === "circular" ? _circularTemplate.call(_WebpackDevServerProgress) : _linearTemplate.call(_WebpackDevServerProgress);
    this.shadowRoot.innerHTML = innerHTML;
    this.initialProgress = (_Number = Number(this.getAttribute("progress"))) !== null && _Number !== void 0 ? _Number : 0;
    _assertClassBrand(_WebpackDevServerProgress_brand, this, _update).call(this, this.initialProgress);
  }
  function _circularTemplate() {
    return "\n        <style>\n        :host {\n            width: 200px;\n            height: 200px;\n            position: fixed;\n            right: 5%;\n            top: 5%;\n            transition: opacity .25s ease-in-out;\n            z-index: 2147483645;\n        }\n\n        circle {\n            fill: #282d35;\n        }\n\n        path {\n            fill: rgba(0, 0, 0, 0);\n            stroke: rgb(186, 223, 172);\n            stroke-dasharray: 219.99078369140625;\n            stroke-dashoffset: -219.99078369140625;\n            stroke-width: 10;\n            transform: rotate(90deg) translate(0px, -80px);\n        }\n\n        text {\n            font-family: 'Open Sans', sans-serif;\n            font-size: 18px;\n            fill: #ffffff;\n            dominant-baseline: middle;\n            text-anchor: middle;\n        }\n\n        tspan#percent-super {\n            fill: #bdc3c7;\n            font-size: 0.45em;\n            baseline-shift: 10%;\n        }\n\n        @keyframes fade {\n            0% { opacity: 1; transform: scale(1); }\n            100% { opacity: 0; transform: scale(0); }\n        }\n\n        .disappear {\n            animation: fade 0.3s;\n            animation-fill-mode: forwards;\n            animation-delay: 0.5s;\n        }\n\n        .hidden {\n            display: none;\n        }\n        </style>\n        <svg id=\"progress\" class=\"hidden noselect\" viewBox=\"0 0 80 80\">\n        <circle cx=\"50%\" cy=\"50%\" r=\"35\"></circle>\n        <path d=\"M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0\"></path>\n        <text x=\"50%\" y=\"51%\">\n            <tspan id=\"percent-value\">0</tspan>\n            <tspan id=\"percent-super\">%</tspan>\n        </text>\n        </svg>\n      ";
  }
  function _linearTemplate() {
    return "\n        <style>\n        :host {\n            position: fixed;\n            top: 0;\n            left: 0;\n            height: 4px;\n            width: 100vw;\n            z-index: 2147483645;\n        }\n\n        #bar {\n            width: 0%;\n            height: 4px;\n            background-color: rgb(186, 223, 172);\n        }\n\n        @keyframes fade {\n            0% { opacity: 1; }\n            100% { opacity: 0; }\n        }\n\n        .disappear {\n            animation: fade 0.3s;\n            animation-fill-mode: forwards;\n            animation-delay: 0.5s;\n        }\n\n        .hidden {\n            display: none;\n        }\n        </style>\n        <div id=\"progress\"></div>\n        ";
  }
  function _update(percent) {
    var element = this.shadowRoot.querySelector("#progress");
    if (this.type === "circular") {
      var path = this.shadowRoot.querySelector("path");
      var value = this.shadowRoot.querySelector("#percent-value");
      var offset = (100 - percent) / 100 * this.maxDashOffset;
      path.style.strokeDashoffset = offset;
      value.textContent = percent;
    } else {
      element.style.width = "".concat(percent, "%");
    }
    if (percent >= 100) {
      _assertClassBrand(_WebpackDevServerProgress_brand, this, _hide).call(this);
    } else if (percent > 0) {
      _assertClassBrand(_WebpackDevServerProgress_brand, this, _show).call(this);
    }
  }
  function _show() {
    var element = this.shadowRoot.querySelector("#progress");
    element.classList.remove("hidden");
  }
  function _hide() {
    var _this2 = this;
    var element = this.shadowRoot.querySelector("#progress");
    if (this.type === "circular") {
      element.classList.add("disappear");
      element.addEventListener("animationend", function () {
        element.classList.add("hidden");
        _assertClassBrand(_WebpackDevServerProgress_brand, _this2, _update).call(_this2, 0);
      }, {
        once: true
      });
    } else if (this.type === "linear") {
      element.classList.add("disappear");
      this.animationTimer = setTimeout(function () {
        element.classList.remove("disappear");
        element.classList.add("hidden");
        element.style.width = "0%";
        _this2.animationTimer = null;
      }, 800);
    }
  }
  customElements.define("wds-progress", WebpackDevServerProgress);
}

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   client: () => (/* binding */ client),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* global __webpack_dev_server_client__ */




// this WebsocketClient is here as a default fallback, in case the client is not injected
/* eslint-disable camelcase */
var Client =
// eslint-disable-next-line no-nested-ternary
typeof __webpack_dev_server_client__ !== "undefined" ? typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
/* eslint-enable camelcase */

var retries = 0;
var maxRetries = 10;

// Initialized client is exported so external consumers can utilize the same instance
// It is mutable to enforce singleton
// eslint-disable-next-line import/no-mutable-exports
var client = null;
var timeout;

/**
 * @param {string} url
 * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers
 * @param {number} [reconnect]
 */
var socket = function initSocket(url, handlers, reconnect) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
    if (timeout) {
      clearTimeout(timeout);
    }
    if (typeof reconnect !== "undefined") {
      maxRetries = reconnect;
    }
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    }

    // Try to reconnect.
    client = null;

    // After 10 retries stop trying, to prevent logspam.
    if (retries < maxRetries) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
      timeout = setTimeout(function () {
        socket(url, handlers, reconnect);
      }, retryInMs);
    }
  });
  client.onMessage(
  /**
   * @param {any} data
   */
  function (data) {
    var message = JSON.parse(data);
    if (handlers[message.type]) {
      handlers[message.type](message.data, message.params);
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);

var name = "webpack-dev-server";
// default level is set on the client side, so it does not need
// to be set by the CLI or API
var defaultLevel = "info";

// options new options, merge with old options
/**
 * @param {false | true | "none" | "error" | "warn" | "info" | "log" | "verbose"} level
 * @returns {void}
 */
function setLogLevel(level) {
  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
    level: level
  });
}
setLogLevel(defaultLevel);
var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* global __resourceQuery WorkerGlobalScope */

// Send messages to the outside, so plugins can consume it.
/**
 * @param {string} type
 * @param {any} [data]
 */
function sendMsg(type, data) {
  if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, "*");
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);

/***/ }),

/***/ "./node_modules/webpack/hot/dev-server.js":
/*!************************************************!*\
  !*** ./node_modules/webpack/hot/dev-server.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/* globals __webpack_hash__ */
if (true) {
  /** @type {undefined|string} */
  var lastHash;
  var upToDate = function upToDate() {
    return /** @type {string} */lastHash.indexOf(__webpack_require__.h()) >= 0;
  };
  var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
  var check = function check() {
    module.hot.check(true).then(function (updatedModules) {
      if (!updatedModules) {
        log("warning", "[HMR] Cannot find update. " + (typeof window !== "undefined" ? "Need to do a full reload!" : "Please reload manually!"));
        log("warning", "[HMR] (Probably because of restarting the webpack-dev-server)");
        if (typeof window !== "undefined") {
          window.location.reload();
        }
        return;
      }
      if (!upToDate()) {
        check();
      }
      __webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);
      if (upToDate()) {
        log("info", "[HMR] App is up to date.");
      }
    }).catch(function (err) {
      var status = module.hot.status();
      if (["abort", "fail"].indexOf(status) >= 0) {
        log("warning", "[HMR] Cannot apply update. " + (typeof window !== "undefined" ? "Need to do a full reload!" : "Please reload manually!"));
        log("warning", "[HMR] " + log.formatError(err));
        if (typeof window !== "undefined") {
          window.location.reload();
        }
      } else {
        log("warning", "[HMR] Update failed: " + log.formatError(err));
      }
    });
  };
  var hotEmitter = __webpack_require__(/*! ./emitter */ "./node_modules/webpack/hot/emitter.js");
  hotEmitter.on("webpackHotUpdate", function (currentHash) {
    lastHash = currentHash;
    if (!upToDate() && module.hot.status() === "idle") {
      log("info", "[HMR] Checking for updates on the server...");
      check();
    }
  });
  log("info", "[HMR] Waiting for update signal from WDS...");
} else // removed by dead control flow
{}

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();

/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/*!******************************************************!*\
  !*** ./node_modules/webpack/hot/log-apply-result.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

/**
 * @param {(string | number)[]} updatedModules updated modules
 * @param {(string | number)[] | null} renewedModules renewed modules
 */
module.exports = function (updatedModules, renewedModules) {
  var unacceptedModules = updatedModules.filter(function (moduleId) {
    return renewedModules && renewedModules.indexOf(moduleId) < 0;
  });
  var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
  if (unacceptedModules.length > 0) {
    log("warning", "[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
    unacceptedModules.forEach(function (moduleId) {
      log("warning", "[HMR]  - " + moduleId);
    });
  }
  if (!renewedModules || renewedModules.length === 0) {
    log("info", "[HMR] Nothing hot updated.");
  } else {
    log("info", "[HMR] Updated modules:");
    renewedModules.forEach(function (moduleId) {
      if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
        var parts = moduleId.split("!");
        log.groupCollapsed("info", "[HMR]  - " + parts.pop());
        log("info", "[HMR]  - " + moduleId);
        log.groupEnd("info");
      } else {
        log("info", "[HMR]  - " + moduleId);
      }
    });
    var numberIds = renewedModules.every(function (moduleId) {
      return typeof moduleId === "number";
    });
    if (numberIds) log("info", '[HMR] Consider using the optimization.moduleIds: "named" for module names.');
  }
};

/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

/** @typedef {"info" | "warning" | "error"} LogLevel */

/** @type {LogLevel} */
var logLevel = "info";
function dummy() {}

/**
 * @param {LogLevel} level log level
 * @returns {boolean} true, if should log
 */
function shouldLog(level) {
  var shouldLog = logLevel === "info" && level === "info" || ["info", "warning"].indexOf(logLevel) >= 0 && level === "warning" || ["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error";
  return shouldLog;
}

/**
 * @param {(msg?: string) => void} logFn log function
 * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient
 */
function logGroup(logFn) {
  return function (level, msg) {
    if (shouldLog(level)) {
      logFn(msg);
    }
  };
}

/**
 * @param {LogLevel} level log level
 * @param {string|Error} msg message
 */
module.exports = function (level, msg) {
  if (shouldLog(level)) {
    if (level === "info") {
      console.log(msg);
    } else if (level === "warning") {
      console.warn(msg);
    } else if (level === "error") {
      console.error(msg);
    }
  }
};
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
module.exports.group = logGroup(group);
module.exports.groupCollapsed = logGroup(groupCollapsed);
module.exports.groupEnd = logGroup(groupEnd);

/**
 * @param {LogLevel} level log level
 */
module.exports.setLogLevel = function (level) {
  logLevel = level;
};

/**
 * @param {Error} err error
 * @returns {string} formatted error
 */
module.exports.formatError = function (err) {
  var message = err.message;
  var stack = err.stack;
  if (!stack) {
    return message;
  } else if (stack.indexOf(message) < 0) {
    return message + "\n" + stack;
  }
  return stack;
};

/***/ }),

/***/ "./styles/index.scss":
/*!***************************!*\
  !*** ./styles/index.scss ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1754323210273
        var cssReload = __webpack_require__(/*! ../node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js */ "./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(module.id, {"publicPath":""});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 		__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 		module = execOptions.module;
/******/ 		execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("fae2723139d86363ff2e")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "room187:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId, fetchPriority) {
/******/ 				return trackBlockingPromise(require.e(chunkId, fetchPriority));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				// inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results).then(function () {});
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							}, [])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								}
/******/ 								return setStatus("ready").then(function () {
/******/ 									return updatedModules;
/******/ 								});
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/css loading */
/******/ 	(() => {
/******/ 		if (typeof document === "undefined") return;
/******/ 		var createStylesheet = (chunkId, fullhref, oldTag, resolve, reject) => {
/******/ 			var linkTag = document.createElement("link");
/******/ 		
/******/ 			linkTag.rel = "stylesheet";
/******/ 			linkTag.type = "text/css";
/******/ 			if (__webpack_require__.nc) {
/******/ 				linkTag.nonce = __webpack_require__.nc;
/******/ 			}
/******/ 			var onLinkComplete = (event) => {
/******/ 				// avoid mem leaks.
/******/ 				linkTag.onerror = linkTag.onload = null;
/******/ 				if (event.type === 'load') {
/******/ 					resolve();
/******/ 				} else {
/******/ 					var errorType = event && event.type;
/******/ 					var realHref = event && event.target && event.target.href || fullhref;
/******/ 					var err = new Error("Loading CSS chunk " + chunkId + " failed.\n(" + errorType + ": " + realHref + ")");
/******/ 					err.name = "ChunkLoadError";
/******/ 					err.code = "CSS_CHUNK_LOAD_FAILED";
/******/ 					err.type = errorType;
/******/ 					err.request = realHref;
/******/ 					if (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)
/******/ 					reject(err);
/******/ 				}
/******/ 			}
/******/ 			linkTag.onerror = linkTag.onload = onLinkComplete;
/******/ 			linkTag.href = fullhref;
/******/ 		
/******/ 		
/******/ 			if (oldTag) {
/******/ 				oldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);
/******/ 			} else {
/******/ 				document.head.appendChild(linkTag);
/******/ 			}
/******/ 			return linkTag;
/******/ 		};
/******/ 		var findStylesheet = (href, fullhref) => {
/******/ 			var existingLinkTags = document.getElementsByTagName("link");
/******/ 			for(var i = 0; i < existingLinkTags.length; i++) {
/******/ 				var tag = existingLinkTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");
/******/ 				if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;
/******/ 			}
/******/ 			var existingStyleTags = document.getElementsByTagName("style");
/******/ 			for(var i = 0; i < existingStyleTags.length; i++) {
/******/ 				var tag = existingStyleTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href");
/******/ 				if(dataHref === href || dataHref === fullhref) return tag;
/******/ 			}
/******/ 		};
/******/ 		var loadStylesheet = (chunkId) => {
/******/ 			return new Promise((resolve, reject) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				if(findStylesheet(href, fullhref)) return resolve();
/******/ 				createStylesheet(chunkId, fullhref, null, resolve, reject);
/******/ 			});
/******/ 		}
/******/ 		// no chunk loading
/******/ 		
/******/ 		var oldTags = [];
/******/ 		var newTags = [];
/******/ 		var applyHandler = (options) => {
/******/ 			return { dispose: () => {
/******/ 				for(var i = 0; i < oldTags.length; i++) {
/******/ 					var oldTag = oldTags[i];
/******/ 					if(oldTag.parentNode) oldTag.parentNode.removeChild(oldTag);
/******/ 				}
/******/ 				oldTags.length = 0;
/******/ 			}, apply: () => {
/******/ 				for(var i = 0; i < newTags.length; i++) newTags[i].rel = "stylesheet";
/******/ 				newTags.length = 0;
/******/ 			} };
/******/ 		}
/******/ 		__webpack_require__.hmrC.miniCss = (chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) => {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			chunkIds.forEach((chunkId) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				var oldTag = findStylesheet(href, fullhref);
/******/ 				if(!oldTag) return;
/******/ 				promises.push(new Promise((resolve, reject) => {
/******/ 					var tag = createStylesheet(chunkId, fullhref, oldTag, () => {
/******/ 						tag.as = "style";
/******/ 						tag.rel = "preload";
/******/ 						resolve();
/******/ 					}, reject);
/******/ 					oldTags.push(oldTag);
/******/ 					newTags.push(tag);
/******/ 				}));
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdateroom187"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					var result = newModuleFactory
/******/ 						? getAffectedModuleEffects(moduleId)
/******/ 						: {
/******/ 								type: "disposed",
/******/ 								moduleId: moduleId
/******/ 							};
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err1) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err1,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err1);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true");
/******/ 	__webpack_require__("./node_modules/webpack/hot/dev-server.js");
/******/ 	__webpack_require__("./app/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./styles/index.scss");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFOzs7Ozs7Ozs7Ozs7Ozs7QUN0K0NBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0RBQWtEO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxtREFBbUQsSUFBSTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFlBQVk7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxtQ0FBbUMsd0NBQXdDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVSw0QkFBNEI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHVCQUF1QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsWUFBWTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1DQUFtQztBQUN6RSxNQUFNO0FBQ04sc0NBQXNDLGtDQUFrQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQywwQ0FBMEMsdUJBQXVCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOFVBQThVLGdCQUFnQjtBQUM5VjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEdBQUc7V0FDSDtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxtQkFBbUIsMkJBQTJCO1dBQzlDO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxLQUFLO1dBQ0w7V0FDQTs7V0FFQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTtXQUNBLGtCQUFrQixjQUFjO1dBQ2hDO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxjQUFjLGFBQWE7V0FDM0I7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQSxpQkFBaUIsNEJBQTRCO1dBQzdDO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxJQUFJO1dBQ0o7V0FDQTs7V0FFQTs7V0FFQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLElBQUk7V0FDSjs7V0FFQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7O1dBRUE7V0FDQTtXQUNBLGdCQUFnQiw0QkFBNEI7V0FDNUM7V0FDQTtXQUNBOztXQUVBO1dBQ0E7O1dBRUE7V0FDQTs7V0FFQTtXQUNBOztXQUVBO1dBQ0EsZ0JBQWdCLDRCQUE0QjtXQUM1QztXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxrQkFBa0IsdUNBQXVDO1dBQ3pEO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsR0FBRztXQUNIO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0EsbUJBQW1CLGlDQUFpQztXQUNwRDtXQUNBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0Esc0JBQXNCLHVDQUF1QztXQUM3RDtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxzQkFBc0Isc0JBQXNCO1dBQzVDO1dBQ0E7V0FDQSxTQUFTO1dBQ1Q7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLFdBQVc7V0FDWCxXQUFXO1dBQ1g7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxZQUFZO1dBQ1o7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsVUFBVTtXQUNWO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLFdBQVc7V0FDWDtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTtXQUNBLG1CQUFtQix3Q0FBd0M7V0FDM0Q7V0FDQTtXQUNBO1dBQ0E7V0FDQSxNQUFNO1dBQ047V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLFFBQVE7V0FDUixRQUFRO1dBQ1I7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsU0FBUztXQUNUO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLE9BQU87V0FDUDtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsUUFBUTtXQUNSO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxFQUFFLElBQUk7V0FDTjtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsSUFBSTtXQUNKO1dBQ0E7V0FDQSxFQUFFO1dBQ0Y7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBO1dBQ0Esc0NBQXNDO1dBQ3RDO1dBQ0E7V0FDQSxFQUFFO1dBQ0Y7O1dBRUE7O1dBRUEsb0I7Ozs7O1VFMWZBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jbGFzc2VzL0NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jbGFzc2VzL1BhZ2UuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jb21wb25lbnRzL0hlcm8uanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jb21wb25lbnRzL1N0YXRzLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvY29tcG9uZW50cy9TdWJzY3JpcHRpb25Gb3JtLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvY29tcG9uZW50cy9UZXh0U3BsaXQuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9jb21wb25lbnRzL1ZpZGVvUGxheWVyLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvY29tcG9uZW50cy90b29sdGlwLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9wYWdlcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vYXBwL3BhZ2VzL0NvbnRhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL2FwcC9wYWdlcy9HYWxsZXJ5L2luZGV4LmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvcGFnZXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vYXBwL3V0aWxzL0xlbmlzU2Nyb2xsLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9hcHAvdXRpbHMvY3JlYXRlLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL2dzYXAvQ3VzdG9tRWFzZS5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL2dzYXAvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy9nc2FwL1Njcm9sbFRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy9nc2FwL1NwbGl0VGV4dC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL2dzYXAvdXRpbHMvcGF0aHMuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy9sZW5pcy9kaXN0L2xlbmlzLm1qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvcHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zZW5kTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL3Jvb20xODcvLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLWFwcGx5LXJlc3VsdC5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIndlYnBhY2s6Ly9yb29tMTg3Ly4vc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Jvb20xODcvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Jvb20xODcvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Jvb20xODcvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3Jvb20xODcvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL3Jvb20xODcvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9yb29tMTg3L3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vcm9vbTE4Ny93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENyZWF0ZSBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnRzIH0pIHtcbiAgICB0aGlzLnNlbGVjdG9ycyA9IHsgLi4uZWxlbWVudHMgfVxuICAgIENvbXBvbmVudHMucHJvdG90eXBlLmNyZWF0ZSA9IENyZWF0ZVxuICAgIHRoaXMuY3JlYXRlKClcbiAgfVxufSIsImltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5pbXBvcnQgeyBDdXN0b21FYXNlIH0gZnJvbSBcImdzYXAvQ3VzdG9tRWFzZVwiXG5pbXBvcnQgeyBzY3JvbGwgfSBmcm9tICd1dGlscy9MZW5pc1Njcm9sbCdcbmltcG9ydCB7IFNwbGl0VGV4dCB9IGZyb20gJ2dzYXAvU3BsaXRUZXh0J1xuaW1wb3J0IENyZWF0ZSBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKHsgaWQgPSAnZGVmYXVsdCcsIGVsZW1lbnRzID0ge30gfSA9IHt9KSB7XG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5zZWxlY3RvcnMgPSB7IFxuICAgICAgLi4uZWxlbWVudHMsXG4gICAgICBvdmVybGF5OiAnW2RhdGEtcGFnZS10cmFuc2l0aW9uXScsXG4gICAgICBzbGlkZU9uZTogJ1tkYXRhLXBhZ2UtdHJhbnNpdGlvbi1zbGlkZS1vbmVdJyxcbiAgICAgIHNsaWRlVHdvOiAnW2RhdGEtcGFnZS10cmFuc2l0aW9uLXNsaWRlLXR3b10nLFxuICAgICAgbG9hZGVyOiAnW2RhdGEtbG9hZGVyXScsXG4gICAgICBpbWFnZXM6ICdbZGF0YS1sb2FkZXItaW1hZ2VdJyxcbiAgICAgIGltYWdlSGVybzogJ1tkYXRhLWxvYWRlci1oZXJvXScsXG4gICAgICBtYWluVGl0bGVzOiAnW2RhdGEtaGVyb10gW2RhdGEtc3BsaXQtdGV4dF0nLFxuICAgICAgbWlzYzogJ1tkYXRhLW1pc2NdJyxcbiAgICAgIHBhZ2U6ICdbZGF0YS1wYWdlXScsXG4gICAgICBib2R5OiAnYm9keScsXG4gICAgICBiZzogJ1tkYXRhLWJnXScsXG4gICAgICBuYXZCYXI6ICdbZGF0YS1uYXYtYmFyXScsXG4gICAgICBhbHRJbWc6ICdbZGF0YS1hbHQtaGVyby1pbWddJ1xuICAgIH1cblxuICAgIFBhZ2UucHJvdG90eXBlLmNyZWF0ZSA9IENyZWF0ZVxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ3VzdG9tRWFzZSwgU3BsaXRUZXh0KVxuICAgIEN1c3RvbUVhc2UuY3JlYXRlKFwiem9vbVwiLCBcIjAuNzEsIDAsIDAuMDYsIDFcIilcbiAgICB0aGlzLmxTY3JvbGwgPSBzY3JvbGwgICAgXG4gICAgdGhpcy5jcmVhdGUoKVxuICB9XG5cbiAgc2hvdyhpc0ZpcnN0VmlzaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgdGwgPSBnc2FwLnRpbWVsaW5lKClcbiAgICAgIGNvbnN0IGhhc0hlcm9JbWcgPSB0aGlzLmhhc0hlcm9JbWFnZVxuXG4gICAgICBpZighdGhpcy5lbGVtZW50cy5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnbm8tLXNjcm9sbGluZycpKSB7XG4gICAgICAgIHRoaXMucHJldmVudFNjcm9sbGluZygpXG4gICAgICB9XG4gICAgXG4gICAgICBpZiAoaXNGaXJzdFZpc2l0KSB7XG4gICAgICAgIHRoaXMuem9vbUFuaW1hdGlvbih0bCwgaXNGaXJzdFZpc2l0KVxuICAgICAgfSBlbHNlIGlmIChoYXNIZXJvSW1nKSB7XG4gICAgICAgIHRoaXMuem9vbUFuaW1hdGlvbih0bCwgaXNGaXJzdFZpc2l0KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFuaW1hdGVBc3NldHModGwsIHJlc29sdmUpXG4gICAgfSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbGV0IGFuaW1PdXQgPSBnc2FwLnRpbWVsaW5lKClcblxuICAgICAgYW5pbU91dC50byh0aGlzLmVsZW1lbnRzLm92ZXJsYXksIHtcbiAgICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiLFxuICAgICAgICBkdXJhdGlvbjogMC42LFxuICAgICAgICBlYXNlOiBcInpvb21cIlxuICAgICAgfSlcblxuICAgICAgYW5pbU91dC50byh0aGlzLmVsZW1lbnRzLnNsaWRlVHdvLCB7XG4gICAgICAgIGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMCUsIDEwMCUgMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgZWFzZTogXCJ6b29tXCJcbiAgICAgIH0pLmFkZChyZXNvbHZlKVxuXG4gICAgfSlcbiAgfVxuICB6b29tQW5pbWF0aW9uKHRsLCBzaG93RnVsbEFuaW0pIHtcbiAgICBpZighdGhpcy5lbGVtZW50cy5pbWFnZXMpIHJldHVyblxuXG4gICAgY29uc3QgcGFnZU5hbWUgPSB0aGlzLmVsZW1lbnRzLnBhZ2U/LmRhdGFzZXQ/LnBhZ2UgfHwgJyc7XG4gICAgY29uc3QgaXNFcnJvclBhZ2UgPSBwYWdlTmFtZSA9PT0gJ2Vycm9yJztcbiAgICBjb25zdCBoYXNIZXJvSW1nID0gdGhpcy5oYXNIZXJvSW1hZ2VcbiAgICBsZXQgc21hbGxIZXJvSW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtaW1hZ2UtaGVybz1cInNtYWxsXCJdJylcblxuICAgIGlmIChpc0Vycm9yUGFnZSkge1xuICAgICAgdGwudG8odGhpcy5lbGVtZW50cy5sb2FkZXIsIHsgZGlzcGxheTogXCJmbGV4XCIsIGR1cmF0aW9uOiAwLjAxIH0pXG4gICAgICB0aGlzLnNob3dJbWFnZXModGwsIGZhbHNlKVxuXG4gICAgICB0bC50byh7fSwge1xuICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cy5sb2FkZXIuY2xhc3NMaXN0LmFkZCgnYmctLWVycm9yJylcbiAgICAgICAgfVxuICAgICAgfSwgXCItPTAuOFwiKTtcblxuICAgICAgdGwudG8odGhpcy5lbGVtZW50cy5sb2FkZXIsIHsgZGlzcGxheTogXCJub25lXCIsIGR1cmF0aW9uOiAwLjAxLCBvbkNvbXBsZXRlOiAoKT0+IHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5sb2FkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYmctLWVycm9yJylcbiAgICAgIH19LCBcIis9MC42XCIpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGwudG8odGhpcy5lbGVtZW50cy5sb2FkZXIsIHsgZGlzcGxheTogXCJmbGV4XCIsIGR1cmF0aW9uOiAwLjAxIH0pXG4gICAgICB0aGlzLnNob3dJbWFnZXModGwsIHNob3dGdWxsQW5pbSlcblxuICAgICAgaWYoaGFzSGVyb0ltZykge1xuICAgICAgICBpZihzbWFsbEhlcm9JbWcpIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLmltYWdlSGVyby5zdHlsZS50b3AgPSAwXG4gICAgICAgIH1cblxuICAgICAgICB0bC50byh0aGlzLmVsZW1lbnRzLmltYWdlSGVybywgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC4wNCwgZWFzZTogXCJsaW5lYXJcIiB9LCBcIis9MC4xNVwiKVxuICAgICAgICB0bC50byh0aGlzLmVsZW1lbnRzLmltYWdlSGVybywgeyBzY2FsZTogMSwgY2xpcFBhdGg6XCJwb2x5Z29uKDAlIDAlLCAxMDAlIDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCIsIGR1cmF0aW9uOiAwLjYsIGVhc2U6IFwiem9vbVwiIH0sIFwiKz0wLjRcIilcblxuICAgICAgICBpZihzbWFsbEhlcm9JbWcpIHtcbiAgICAgICAgICBsZXQgaW1nSGVpZ2h0ID0gc21hbGxIZXJvSW1nLm9mZnNldEhlaWdodFxuICAgICAgICAgIGxldCBsb2FkZXJJbWdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbG9hZGVyLWltYWdlXTpub3QoW2RhdGEtbG9hZGVyLWhlcm9dKScpXG5cbiAgICAgICAgICB0bC50byhsb2FkZXJJbWdzLCB7IG9wYWNpdHk6IDAsIGR1cmF0aW9uOiAwLjAxLCBlYXNlOiBcImxpbmVhclwiIH0pXG4gICAgICAgICAgICAudG8odGhpcy5lbGVtZW50cy5pbWFnZUhlcm8sIHsgaGVpZ2h0OiBpbWdIZWlnaHQsIGR1cmF0aW9uOiAwLjYsIGVhc2U6IFwiem9vbVwiIH0pXG4gICAgICAgIH1cblxuICAgICAgICB0bC50byh0aGlzLmVsZW1lbnRzLmxvYWRlciwgeyBkaXNwbGF5OiBcIm5vbmVcIiwgZHVyYXRpb246IDAuMDEsIFxuICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgIHRsLnRvKHRoaXMuZWxlbWVudHMuaW1hZ2VIZXJvLCB7IHNjYWxlOiAwLjUsIGNsaXBQYXRoOlwicG9seWdvbigyMCUgMTAlLCA4MCUgMTAlLCA4MCUgOTAlLCAyMCUgOTAlKVwiLCBkdXJhdGlvbjogMC4wMSB9KVxuICAgICAgICAgICAgaWYoc21hbGxIZXJvSW1nKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuaW1hZ2VIZXJvLnN0eWxlLmhlaWdodCA9ICcnXG4gICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuaW1hZ2VIZXJvLnN0eWxlLnRvcCA9ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0bC50byh0aGlzLmVsZW1lbnRzLmxvYWRlciwgeyBkaXNwbGF5OiBcIm5vbmVcIiwgZHVyYXRpb246IDAuMDF9LCBcIis9MC42XCIpXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRsLnRvKHRoaXMuZWxlbWVudHMuaW1hZ2VzLCB7IG9wYWNpdHk6IDAsIGR1cmF0aW9uOiAwLjAxLCBlYXNlOiBcImxpbmVhclwiIH0pXG4gICAgXG4gIH1cblxuICBzaG93SW1hZ2VzKHRsLCBzaG93RnVsbEFuaW0pIHtcbiAgICBpZihzaG93RnVsbEFuaW0pIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuaW1hZ2VzLmZvckVhY2goKGltZywgaSkgPT4ge1xuICAgICAgICB0bC50byhpbWcsIHsgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuMDQsIGVhc2U6IFwibGluZWFyXCIgfSwgXCIrPTAuMTVcIilcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oNCwgdGhpcy5lbGVtZW50cy5pbWFnZXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgIHRsLnRvKHRoaXMuZWxlbWVudHMuaW1hZ2VzW2ldLCB7XG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICBkdXJhdGlvbjogMC4wNCxcbiAgICAgICAgICBlYXNlOiBcImxpbmVhclwiLFxuICAgICAgICB9LCBcIis9MC4xNVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbmltYXRlQXNzZXRzKHRsLCByZXNvbHZlKSB7XG4gICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50cy5vdmVybGF5LCB7IGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMTAwJSwgMTAwJSAxMDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCIgfSlcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLnNsaWRlVHdvLCB7IGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMTAwJSwgMTAwJSAxMDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCIgfSlcbiAgICBcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMubWFpblRpdGxlcyB8fCB0aGlzLmVsZW1lbnRzLm1haW5UaXRsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ21haW5UaXRsZXMgbm90IGZvdW5kIG9yIGVtcHR5OicsIHRoaXMuZWxlbWVudHMubWFpblRpdGxlcylcbiAgICB9XG5cbiAgICBkb2N1bWVudC5mb250cy5yZWFkeS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IGhlcm9UaXRsZXMgPSAodGhpcy5lbGVtZW50cy5tYWluVGl0bGVzIGluc3RhbmNlb2YgTm9kZUxpc3QgfHwgQXJyYXkuaXNBcnJheSh0aGlzLmVsZW1lbnRzLm1haW5UaXRsZXMpKVxuICAgICAgPyBBcnJheS5mcm9tKHRoaXMuZWxlbWVudHMubWFpblRpdGxlcylcbiAgICAgIDogdGhpcy5lbGVtZW50cy5tYWluVGl0bGVzXG4gICAgICAgID8gW3RoaXMuZWxlbWVudHMubWFpblRpdGxlc11cbiAgICAgICAgOiBbXTtcblxuICAgICAgY29uc3QgYWxsTGluZXMgPSBbXTtcbiAgICAgIFxuICAgICAgaGVyb1RpdGxlcy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBjb25zdCBzcGxpdCA9IFNwbGl0VGV4dC5jcmVhdGUoZWwsIFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwibGluZXNcIixcbiAgICAgICAgICAgIGxpbmVDbGFzczogXCJsaW5lXCIsXG4gICAgICAgICAgICBtYXNrOiBcImxpbmVzXCIsXG4gICAgICAgICAgICBhdXRvU3BsaXQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICBhbGxMaW5lcy5wdXNoKHNwbGl0LmxpbmVzKVxuICAgICAgfSlcblxuICAgICAgYWxsTGluZXMuZm9yRWFjaCgodGV4dCwgaSkgPT4ge1xuICAgICAgICB0bC5mcm9tVG8odGV4dCxcbiAgICAgICAgICB7IHk6IFwiMTAwJVwifSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB5OiBcIjBcIiwgXG4gICAgICAgICAgICBkdXJhdGlvbjogMC44LCBcbiAgICAgICAgICAgIGVhc2U6IFwiem9vbVwiLFxuICAgICAgICAgICAgc3RhZ2dlcjogMC4wNVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aXRsZXMgLT0wLjJcIlxuICAgICAgICApXG4gICAgICB9KVxuXG4gICAgICBpZih0aGlzLmVsZW1lbnRzLmFsdEltZykge1xuICAgICAgICB0bC5mcm9tVG8odGhpcy5lbGVtZW50cy5hbHRJbWcsIHsgeTogXCIyMCVcIiwgb3BhY2l0eTogMCB9LCB7IHk6IDAsIG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjQsIGVhc2U6IFwicG93ZXIyLm91dFwiIH0sICctPTAuNicpXG4gICAgICB9XG5cbiAgICAgIHRsLmZyb21Ubyh0aGlzLmVsZW1lbnRzLm1pc2MsIHsgb3BhY2l0eTogMCB9LCB7IG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjgsIGVhc2U6ICdwb3dlcjIub3V0JyB9KVxuICAgICAgXG4gICAgICB0bC5jYWxsKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbmFibGVTY3JvbGxpbmcoKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHByZXZlbnRTY3JvbGxpbmcoKSB7XG4gICAgdGhpcy5sU2Nyb2xsLnN0b3AoKVxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIHRoaXMuZWxlbWVudHMuYm9keS5jbGFzc0xpc3QuYWRkKCduby0tc2Nyb2xsaW5nJylcbiAgfVxuXG4gIGVuYWJsZVNjcm9sbGluZygpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIm5vLS1zY3JvbGxpbmdcIilcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnJ1xuICAgIHRoaXMubFNjcm9sbC5zdGFydCgpXG4gIH1cblxuICBnZXQgaGFzSGVyb0ltYWdlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmltYWdlSGVybyAmJiAhdGhpcy5lbGVtZW50cy5pbWFnZUhlcm8uY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKTtcbiAgfSBcblxufSIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJ2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWRlciBleHRlbmRzIENvbXBvbmVudHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50czoge1xuICAgICAgICBoZXJvSW1nOiAnW2RhdGEtaW1hZ2UtaGVyb10nLFxuICAgICAgICBoZXJvQ29udGVudDogJ1tkYXRhLWhlcm8tY29udGVudF0nLFxuICAgICAgICBoZXJvQmc6ICdbZGF0YS1pbWFnZS1oZXJvXSBbZGF0YS1iZ10nXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMubW0gPSBnc2FwLm1hdGNoTWVkaWEoKVxuICAgIHRoaXMuc2Nyb2xsQW5pbSgpXG4gIH1cblxuICBjcmVhdGUoKSB7XG4gICAgc3VwZXIuY3JlYXRlKClcbiAgfVxuXG4gIHNjcm9sbEFuaW0oKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnRzLmhlcm9Db250ZW50KSByZXR1cm47XG4gICAgbGV0IHNpemUgPSB0aGlzLmdldEhlcm9JbWFnZVNpemUoKVxuICAgIGxldCBzdGFydFBvcyA9IHNpemUgPT09IFwibGFyZ2VcIj8gJzUwJSBjZW50ZXInOiAnNTAlIDQwJSdcbiAgICBcbiAgICBpZihzaXplID09PSBcInNtYWxsXCIpIHtcbiAgICAgIHRoaXMubW0uYWRkKFwiKG1heC13aWR0aDogNTQ5cHgpXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5oZXJvQ29udGVudEFuaW0oJzUwJSBjZW50ZXInKVxuICAgICAgICB0aGlzLmhlcm9JbWdBbmltKHN0YXJ0UG9zKVxuICAgICAgfSlcbiAgICBcbiAgICAgIHRoaXMubW0uYWRkKFwiKG1pbi13aWR0aDogNTUwcHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5cHgpXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5oZXJvQ29udGVudEFuaW0oJzgwJSBjZW50ZXInKVxuICAgICAgICB0aGlzLmhlcm9JbWdBbmltKCc4MCUgY2VudGVyJylcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMubW0uYWRkKFwiKG1pbi13aWR0aDogMTIwMHB4KVwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGVyb0NvbnRlbnRBbmltKHN0YXJ0UG9zKVxuICAgICAgICB0aGlzLmhlcm9JbWdBbmltKHN0YXJ0UG9zKVxuICAgICAgfSlcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlcm9Db250ZW50QW5pbShzdGFydFBvcylcbiAgICAgIHRoaXMuaGVyb0ltZ0FuaW0oc3RhcnRQb3MpXG4gICAgfVxuICB9XG4gIFxuICBnZXRIZXJvSW1hZ2VTaXplKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmhlcm9JbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLWhlcm8nKVxuICB9XG5cbiAgaGVyb0NvbnRlbnRBbmltKHBvcykge1xuICAgIGdzYXAuZnJvbVRvKHRoaXMuZWxlbWVudHMuaGVyb0NvbnRlbnQsIFxuICAgICAgeyBvcGFjaXR5OiAxIH0sXG4gICAgICB7XG4gICAgICAgIG9wYWNpdHk6IDAuMSxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMuaGVyb0NvbnRlbnQsXG4gICAgICAgICAgc3RhcnQ6IHBvcyxcbiAgICAgICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgICAgICBtYXJrZXJzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBoZXJvSW1nQW5pbShwb3MpIHtcbiAgICBnc2FwLmZyb21Ubyh0aGlzLmVsZW1lbnRzLmhlcm9CZywgXG4gICAgICB7IHNjYWxlOiAxIH0sXG4gICAgICB7XG4gICAgICAgIHNjYWxlOiAxLjUsXG4gICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLmhlcm9Db250ZW50LFxuICAgICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgICAgc2NydWI6IHRydWUsXG4gICAgICAgICAgbWFya2VyczogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZWFzZTogXCJwb3dlcjIub3V0XCIsXG4gICAgICB9XG4gICAgKVxuICB9XG59IiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcbmltcG9ydCBDdXN0b21FYXNlIGZyb20gJ2dzYXAvQ3VzdG9tRWFzZSdcbmltcG9ydCB7IHNjcm9sbCB9IGZyb20gJ3V0aWxzL0xlbmlzU2Nyb2xsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIG1lbnU6ICdbZGF0YS1uYXYtbWVudV0nLFxuICAgICAgICB0cmlnZ2VyOiAnW2RhdGEtbmF2LXRyaWdnZXJdJyxcbiAgICAgICAgYm9keTogJ2JvZHknLFxuICAgICAgICBuYXZCYXI6ICdbZGF0YS1uYXYtYmFyXScsXG4gICAgICAgIG5hdkxpbmtzOiAnW2RhdGEtbWVudS1saW5rc10nLFxuICAgICAgICBuYXZMaW5rVGV4dDogJy5uYXYtbWVudSAubmF2LW1lbnUtbGlzdF9faXRlbSBbZGF0YS1uYXYtbGluay10ZXh0XScsXG4gICAgICAgIG5hdkxpbmtIb3ZlcjogJ1tkYXRhLW5hdi1ob3Zlcl0nXG4gICAgICB9XG4gICAgfSlcblxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ3VzdG9tRWFzZSlcbiAgICBDdXN0b21FYXNlLmNyZWF0ZShcInpvb21cIiwgXCIwLjcxLCAwLCAwLjA2LCAxXCIpXG4gICAgdGhpcy50bCA9IGdzYXAudGltZWxpbmUoKVxuXG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlXG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZVxuICAgIHRoaXMuc2Nyb2xsID0gc2Nyb2xsXG4gICAgdGhpcy5maWx0ZXJJZCA9ICcjZmlsdGVyLTQnXG4gICAgdGhpcy5mZVR1cmJ1bGVuY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuZmlsdGVySWR9ID4gZmVUdXJidWxlbmNlYCk7XG4gICAgdGhpcy5wcmltaXRpdmVWYWx1ZXMgPSB7IHR1cmJ1bGVuY2U6IDAgfTtcblxuICAgIHRoaXMuY3JlYXRlTGlua1RpbWVMaW5lKClcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYoIXRoaXMuZWxlbWVudHMudHJpZ2dlciB8fCAhdGhpcy5lbGVtZW50cy5uYXZMaW5rcykgcmV0dXJuXG4gICAgXG4gICAgdGhpcy5lbGVtZW50cy50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYoIXRoaXMuaXNBbmltYXRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWVcbiAgICAgICAgdGhpcy5pc09wZW4gPyB0aGlzLmNsb3NlTWVudSgpIDogdGhpcy5vcGVuTWVudSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuZWxlbWVudHMubmF2TGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgIGxldCBsaW5rSG92ZXIgPSBsaW5rLm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgaWYgKCFsaW5rSG92ZXIpIHJldHVybjtcbiAgXG4gICAgICBsZXQgbGlua1RsID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICAgIGxpbmtIb3Zlci5zdHlsZS5maWx0ZXIgPSBgdXJsKCR7dGhpcy5maWx0ZXJJZH0pYDtcbiAgICAgICAgfSxcbiAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgIGxpbmtIb3Zlci5zdHlsZS5maWx0ZXIgPSAnbm9uZSc7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVXBkYXRlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5mZVR1cmJ1bGVuY2Uuc2V0QXR0cmlidXRlKCdiYXNlRnJlcXVlbmN5JywgdGhpcy5wcmltaXRpdmVWYWx1ZXMudHVyYnVsZW5jZSlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIFxuICAgICAgbGV0IG9uTW91c2VFbnRlckZuID0gKCkgPT4gbGlua1RsLnJlc3RhcnQoKTtcbiAgICAgIGxldCBvbk1vdXNlTGVhdmVGbiA9ICgpID0+IGxpbmtUbC5wcm9ncmVzcygxKS5raWxsKCk7XG4gIFxuICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25Nb3VzZUVudGVyRm4pO1xuICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlRm4pO1xuICBcbiAgICAgIGxpbmtUbC50byh0aGlzLnByaW1pdGl2ZVZhbHVlcywgeyBcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgZWFzZTogXCJzdGVwcygxMilcIixcbiAgICAgICAgc3RhcnRBdDoge3R1cmJ1bGVuY2U6IDAuMDJ9LFxuICAgICAgICB0dXJidWxlbmNlOiAwXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgb3Blbk1lbnUoKSB7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlXG4gICAgdGhpcy5zY3JvbGwuc3RvcCgpXG4gICAgdGhpcy5lbGVtZW50cy50cmlnZ2VyLmNsYXNzTGlzdC5hZGQoJ29wZW4nKVxuICAgIHRoaXMuZWxlbWVudHMubWVudS5jbGFzc0xpc3QuYWRkKCdzaG93JylcbiAgICBjb25zb2xlLmxvZyh0aGlzLmVsZW1lbnRzLm5hdkxpbmtUZXh0KVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLm1lbnUsIHtcbiAgICAgIGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMCUsIDEwMCUgMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICBlYXNlOiBcInpvb21cIixcbiAgICB9KVxuXG4gICAgdGhpcy50bC5mcm9tVG8odGhpcy5lbGVtZW50cy5uYXZMaW5rVGV4dCwgeyB5OiBcIjEwMCVcIiB9LCB7IHk6IDAsIGR1cmF0aW9uOiAwLjgsIGVhc2U6IFwiem9vbVwiLFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2VcbiAgICAgIH1cbiAgICB9LCAnLT0wLjEnKVxuICB9XG5cbiAgY2xvc2VNZW51KCkge1xuICAgIHRoaXMuZWxlbWVudHMudHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJylcbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMubWVudSwge1xuICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAxMDAlLCAxMDAlIDEwMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICBlYXNlOiBcInpvb21cIixcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKHRoaXMuZWxlbWVudHMubmF2TGlua1RleHQpXG4gICAgdGhpcy50bC5mcm9tVG8odGhpcy5lbGVtZW50cy5uYXZMaW5rVGV4dCwgeyB5OiAwIH0sIHsgeTogXCIxMDAlXCIsIGR1cmF0aW9uOiAwLjAxLCBcbiAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2VcbiAgICAgICAgdGhpcy5lbGVtZW50cy5tZW51LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgICAgICB0aGlzLnNjcm9sbC5zdGFydCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZUxpbmtUaW1lTGluZSgpIHtcbiAgICB0aGlzLmxpbmtUbCA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgcGF1c2VkOiB0cnVlLFxuICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLm5hdkxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgICAgbGV0IGxpbmtIb3ZlciA9IGxpbmsucXVlcnlTZWxlY3RvcignW2RhdGEtbmF2LWhvdmVyXScpO1xuICAgICAgICAgIGlmIChsaW5rSG92ZXIpIGxpbmtIb3Zlci5zdHlsZS5maWx0ZXIgPSBgdXJsKCR7dGhpcy5maWx0ZXJJZH0pYDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLm5hdkxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgICAgbGV0IGxpbmtIb3ZlciA9IGxpbmsucXVlcnlTZWxlY3RvcignW2RhdGEtbmF2LWhvdmVyXScpO1xuICAgICAgICAgIGlmIChsaW5rSG92ZXIpIGxpbmtIb3Zlci5zdHlsZS5maWx0ZXIgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tICdnc2FwL1Njcm9sbFRyaWdnZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRzIGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHN0YXRzOiAnW2RhdGEtc3RhdHNdJ1xuICAgICAgfVxuICAgIH0pXG4gIFxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcbiAgICB0aGlzLnNldFVwU2Nyb2xsVHJpZ2dlcigpXG4gIH1cblxuICBzZXRVcFNjcm9sbFRyaWdnZXIoKSB7XG4gICAgaWYodGhpcy5lbGVtZW50cy5zdGF0cyAhPT0gbnVsbCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5lbGVtZW50cy5zdGF0cykgfHwgKHR5cGVvZiB0aGlzLmVsZW1lbnRzLnN0YXRzID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5zdGF0cy5mb3JFYWNoKHN0YXRzID0+IHtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLmNyZWF0ZSh7XG4gICAgICAgICAgICB0cmlnZ2VyOiBzdGF0cyxcbiAgICAgICAgICAgIHN0YXJ0OiBcInRvcCBib3R0b21cIixcbiAgICAgICAgICAgIG9uRW50ZXI6ICgpID0+IHRoaXMuY291bnQoc3RhdHMpLFxuICAgICAgICAgICAgbWFya2VyczogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLnN0YXRzLFxuICAgICAgICAgIHN0YXJ0OiBcInRvcCBib3R0b21cIixcbiAgICAgICAgICBvbkVudGVyOiAoKSA9PiB0aGlzLmNvdW50KHRoaXMuZWxlbWVudHMuc3RhdHMpLFxuICAgICAgICAgIG1hcmtlcnM6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuXG4gIGNvdW50KHN0YXRzKSB7XG4gICAgbGV0IGludGVydmFsID0gMjAwMFxuICAgIGxldCBuID0gMVxuICAgIGxldCBzdGF0c051bSA9IHBhcnNlSW50KHN0YXRzLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGF0cycpKVxuICAgIGxldCBzdGFydFZhbCA9IHN0YXRzTnVtID4gMTAwMD8gKHN0YXRzTnVtIC0gNTAwKSA6IDBcbiAgICBsZXQgZW5kVmFsID0gc3RhdHNOdW1cbiAgICBsZXQgZHVyYXRpb24gPSBNYXRoLmZsb29yKGludGVydmFsIC8gZW5kVmFsKVxuXG4gICAgbGV0IGNvdW50ZXIgPSBzZXRJbnRlcnZhbCgoKT0+IHtcbiAgICAgIHN0YXJ0VmFsICs9IG5cbiAgICAgIHN0YXRzLnRleHRDb250ZW50ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCkuZm9ybWF0KHN0YXJ0VmFsKVxuXG4gICAgICBpZihzdGFydFZhbCA9PT0gZW5kVmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY291bnRlcilcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbilcbiAgfVxufSIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJ2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5pbXBvcnQgQ3VzdG9tRWFzZSBmcm9tICdnc2FwL0N1c3RvbUVhc2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1YnNjcmlwdGlvbkZvcm0gZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgZm9ybTogJ1tkYXRhLXN1YnNjcmlwdGlvbi1mb3JtXScsXG4gICAgICAgIHN1Ym1pdEJ0bjogJ1tkYXRhLXN1YnNjcmlwdGlvbi1zdWJtaXQtYnRuXScsXG4gICAgICAgIGlucHV0OiAnaW5wdXRbbmFtZT1cImVtYWlsXCJdJyxcbiAgICAgICAgdG9hc3Q6ICdbZGF0YS10b2FzdF0nLFxuICAgICAgICB0b2FzdFRleHQ6ICdbZGF0YS10b2FzdC1tZXNzYWdlXScsXG4gICAgICAgIGlucHV0TGluZTogJ1tkYXRhLWlucHV0LWxpbmVdJyxcbiAgICAgICAgaW5wdXRNZXNzYWdlOiAnW2RhdGEtaW5wdXQtbWVzc2FnZV0nLFxuICAgICAgICBjbG9zZVRvYXN0SWNvbjogJ1tkYXRhLXRvYXN0LWNsb3NlXScsXG4gICAgICAgIHRvYXN0SWNvbjogJ1tkYXRhLXRvYXN0LWljb25dJ1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBnc2FwLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbUVhc2UpXG4gICAgQ3VzdG9tRWFzZS5jcmVhdGUoXCJ6b29tXCIsIFwiMC43MSwgMCwgMC4wNiwgMVwiKVxuXG4gICAgdGhpcy5pc1RvYXN0T3BlbiA9IGZhbHNlXG4gICAgdGhpcy50b2FzdFRpbWVvdXRJZCA9IG51bGxcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG4gIH1cblxuICB1cGRhdGVUb2FzdChtZXNzYWdlLCB0eXBlID0gJ2luZm8nKSB7XG4gICAgdGhpcy5lbGVtZW50cy50b2FzdFRleHQudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgIFxuXG4gICAgdGhpcy5lbGVtZW50cy50b2FzdC5jbGFzc0xpc3QuYWRkKGAke3R5cGV9YClcbiAgICB0aGlzLmVsZW1lbnRzLnRvYXN0SWNvbi5jbGFzc0xpc3QuYWRkKGB0b2FzdC1pY29uLS0ke3R5cGV9YClcblxuICAgIGlmKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMudG9hc3QuY2xhc3NMaXN0LnJlbW92ZSgnc3VjY2VzcycsICdsb2FkaW5nJylcbiAgICAgIHRoaXMuZWxlbWVudHMudG9hc3RJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3RvYXN0LWljb24tLXN1Y2Nlc3MnLCAndG9hc3QtaWNvbi0tbG9hZGluZycpXG5cbiAgICB9IGVsc2UgaWYodHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLnRvYXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJywgJ2xvYWRpbmcnKVxuICAgICAgdGhpcy5lbGVtZW50cy50b2FzdEljb24uY2xhc3NMaXN0LnJlbW92ZSgndG9hc3QtaWNvbi0tZXJyb3InLCAndG9hc3QtaWNvbi0tbG9hZGluZycpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy50b2FzdC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicsICdzdWNjZXNzJylcbiAgICAgIHRoaXMuZWxlbWVudHMudG9hc3RJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3RvYXN0LWljb24tLWVycm9yJywgJ3RvYXN0LWljb24tLXN1Y2Nlc3MnKVxuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0ZVRvYXN0KClcbiAgfVxuXG4gIHVwZGF0ZUlucHV0RmllbGQobWVzc2FnZSwgdHlwZSkge1xuICAgIGlmKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuaW5wdXRMaW5lLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJylcbiAgICAgIHRoaXMuZWxlbWVudHMuaW5wdXRNZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ2Vycm9yX190ZXh0JylcbiAgICAgIHRoaXMuZWxlbWVudHMuaW5wdXRNZXNzYWdlLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5pbnB1dExpbmUuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKVxuICAgICAgdGhpcy5lbGVtZW50cy5pbnB1dE1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3JfX3RleHQnKVxuICAgICAgdGhpcy5lbGVtZW50cy5pbnB1dE1lc3NhZ2UudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVUb2FzdCgpIHtcbiAgICBnc2FwLnRvKHRoaXMuZWxlbWVudHMudG9hc3QsIHtcbiAgICAgIHk6IDAsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgIGVhc2U6ICd6b29tJyxcbiAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5pc1RvYXN0T3BlbiA9IHRydWVcblxuICAgICAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dCBiZWZvcmUgc2V0dGluZyBhIG5ldyBvbmVcbiAgICAgICAgaWYgKHRoaXMudG9hc3RUaW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50b2FzdFRpbWVvdXRJZClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9hc3RUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsb3NlVG9hc3QoKVxuICAgICAgICAgIHRoaXMudG9hc3RUaW1lb3V0SWQgPSBudWxsXG4gICAgICAgIH0sIDgwMDApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlVG9hc3QoKSB7XG4gICAgLy8gSWYgdGltZW91dCBleGlzdHMsIGNsZWFyIGl0IHNvIGl0IGRvZXNuJ3QgdHJpZ2dlciBhZnRlciBtYW51YWwgY2xvc2VcbiAgICBpZiAodGhpcy50b2FzdFRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG9hc3RUaW1lb3V0SWQpXG4gICAgICB0aGlzLnRvYXN0VGltZW91dElkID0gbnVsbFxuICAgIH1cblxuICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy50b2FzdCwge1xuICAgICAgeTogJzIwMCUnLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICBlYXNlOiAnem9vbScsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNUb2FzdE9wZW4gPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIHRoaXMuZWxlbWVudHMuY2xvc2VUb2FzdEljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VUb2FzdCgpXG4gICAgfSlcblxuICAgIHRoaXMuZWxlbWVudHMuc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xuICAgICAgY29uc3QgZW1haWwgPSB0aGlzLmVsZW1lbnRzLmlucHV0LnZhbHVlLnRyaW0oKTtcbiAgXG4gICAgICAvLyBDbGllbnQtc2lkZSBlbWFpbCByZWdleCB2YWxpZGF0aW9uXG4gICAgICBjb25zdCB2YWxpZEVtYWlsID0gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC8udGVzdChlbWFpbCk7XG4gICAgICBpZiAoIXZhbGlkRW1haWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJbnB1dEZpZWxkKFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcy5cIiwgXCJlcnJvclwiKTtcbiAgICAgICAgdGhpcy51cGRhdGVUb2FzdChcIkVtYWlsIGFkZHJlc3Mgbm90IHZhbGlkXCIsIFwiZXJyb3JcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBIb25leXBvdCB0cmFwIChpbnZpc2libGUgaW5wdXQgZmllbGQsIGFkZGVkIGJlbG93KVxuICAgICAgY29uc3QgYm90VHJhcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm90LWZpZWxkXCIpO1xuICAgICAgaWYgKGJvdFRyYXAgJiYgYm90VHJhcC52YWx1ZSkge1xuICAgICAgICByZXR1cm47IC8vIHNpbGVudGx5IGlnbm9yZVxuICAgICAgfVxuICAgICAgXG4gICAgICB0aGlzLnVwZGF0ZVRvYXN0KFwiU3Vic2NyaWJpbmdcIiwgXCJsb2FkaW5nXCIpO1xuICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiL3N1YnNjcmliZVwiLCB7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlbWFpbCB9KSxcbiAgICAgICAgfSk7XG4gIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJbnB1dEZpZWxkKFwiXCIsIFwic3VjY2Vzc1wiKVxuICAgICAgICAgIHRoaXMudXBkYXRlVG9hc3QocmVzdWx0Lm1lc3NhZ2UsIFwic3VjY2Vzc1wiKVxuICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRGaWVsZChcIlwiLCBcIlwiKVxuICAgICAgICAgIHRoaXMudXBkYXRlVG9hc3QocmVzdWx0LmVycm9yIHx8IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFRyeSBhZ2Fpbi5cIiwgXCJlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVG9hc3QoXCJTZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIsIFwiZXJyb3JcIik7XG4gICAgICAgIHRoaXMudXBkYXRlSW5wdXRGaWVsZChcIlwiLCBcIlwiKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cbn0iLCJpbXBvcnQgQ29tcG9uZW50cyBmcm9tICdjbGFzc2VzL0NvbXBvbmVudHMnXG5pbXBvcnQgZ3NhcCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gJ2dzYXAvU2Nyb2xsVHJpZ2dlcidcbmltcG9ydCB7IFNwbGl0VGV4dCB9IGZyb20gJ2dzYXAvU3BsaXRUZXh0J1xuaW1wb3J0IHsgQ3VzdG9tRWFzZSB9IGZyb20gJ2dzYXAvQ3VzdG9tRWFzZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dFNwbGl0IGV4dGVuZHMgQ29tcG9uZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHRleHRPblNjcm9sbDogJ1tkYXRhLXNwbGl0LXRleHQ9XCJzY3JvbGxcIl0nXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIsIEN1c3RvbUVhc2UsIFNwbGl0VGV4dClcbiAgICBDdXN0b21FYXNlLmNyZWF0ZShcInpvb21cIiwgXCIwLjcxLCAwLCAwLjA2LCAxXCIpXG5cbiAgICB0aGlzLmluaXQoKVxuICB9XG4gIFxuICBpbml0KCkgeyBcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMudGV4dE9uU2Nyb2xsKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05vIHRleHQgZWxlbWVudHMgZm91bmQgaW4gdGhlIERPTS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNwbGl0VGV4dCh0aGlzLmVsZW1lbnRzLnRleHRPblNjcm9sbClcbiAgfVxuXG4gIHNwbGl0VGV4dCh0ZXh0KSB7XG4gICAgaWYgKCF0ZXh0IHx8IHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ21haW5UaXRsZXMgbm90IGZvdW5kIG9yIGVtcHR5OicsIHRoaXMuZWxlbWVudHMudGV4dE9uU2Nyb2xsKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZm9udHMucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmlzQXJyYXkodGV4dCkgfHwgdGV4dCBpbnN0YW5jZW9mIE5vZGVMaXN0XG4gICAgICA/IEFycmF5LmZyb20odGV4dClcbiAgICAgIDogW3RleHRdXG5cbiAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gU3BsaXRUZXh0LmNyZWF0ZShlbCwge1xuICAgICAgICAgIHR5cGU6IFwibGluZXNcIixcbiAgICAgICAgICBsaW5lQ2xhc3M6IFwibGluZVwiLFxuICAgICAgICAgIG1hc2s6IFwibGluZXNcIixcbiAgICAgICAgICBhdXRvU3BsaXQ6IHRydWUsXG4gICAgICAgICAgb25TcGxpdDogKHNlbGYpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBUZXh0U3BsaXQuc2Nyb2xsQW5pbWF0ZVRleHQoZWwsIHNlbGYubGluZXMpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gXG4gIHN0YXRpYyBzY3JvbGxBbmltYXRlVGV4dCh0ZXh0LCBsaW5lcykge1xuICAgIGdzYXAuZnJvbVRvKGxpbmVzLFxuICAgICAgeyB5OiBcIjEwMCVcIiB9LFxuICAgICAge1xuICAgICAgICB5OiAwLFxuICAgICAgICBkdXJhdGlvbjogMC44LFxuICAgICAgICBlYXNlOiBcInpvb21cIixcbiAgICAgICAgc3RhZ2dlcjogMC4wNSxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgIHRyaWdnZXI6IHRleHQsXG4gICAgICAgICAgc3RhcnQ6ICc1MCUgYm90dG9tJyxcbiAgICAgICAgICBtYXJrZXJzOiBmYWxzZSxcbiAgICAgICAgICBzY3J1YjogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudHMgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnRzJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IHNjcm9sbCB9IGZyb20gJ3V0aWxzL0xlbmlzU2Nyb2xsJ1xuaW1wb3J0IHsgQ3VzdG9tRWFzZSB9IGZyb20gJ2dzYXAvQ3VzdG9tRWFzZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlkZW9QbGF5ZXIgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgdHJpZ2dlcjogJ1tkYXRhLXBsYXldJyxcbiAgICAgICAgdmlkZW9CZzogJ1tkYXRhLXBsYXktYmddJyxcbiAgICAgICAgY2xvc2VCdG46ICdbZGF0YS1jbG9zZV0nXG4gICAgICB9XG4gICAgfSlcblxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ3VzdG9tRWFzZSlcbiAgICBDdXN0b21FYXNlLmNyZWF0ZShcInpvb21cIiwgXCIwLjcxLCAwLCAwLjA2LCAxXCIpXG5cbiAgICB0aGlzLnRsID0gZ3NhcC50aW1lbGluZSgpXG4gICAgdGhpcy52aWRlbyA9IG51bGxcbiAgICB0aGlzLnZpZGVvT3ZlcmxheSA9IG51bGxcbiAgICB0aGlzLnZpZGVvQmcgPSBudWxsXG4gICAgdGhpcy5zY3JvbGwgPSBzY3JvbGxcbiAgICB0aGlzLmlzT3ZlcmxheU9wZW4gPSBmYWxzZVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHsgICAgXG4gICAgaWYodGhpcy5lbGVtZW50cy50cmlnZ2VyICE9PSBudWxsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmVsZW1lbnRzLnRyaWdnZXIpIHx8ICh0eXBlb2YgdGhpcy5lbGVtZW50cy50cmlnZ2VyID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy50cmlnZ2VyLmZvckVhY2goYnRuID0+IHtcbiAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsYXlWaWRlbyhidG4pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9IFxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy5wbGF5VmlkZW8odGhpcy5lbGVtZW50cy50cmlnZ2VyKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzLmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZVBsYXllcigpXG4gICAgfSlcbiAgfVxuICBcbiAgcGxheVZpZGVvKHRyaWdnZXIpIHtcbiAgICBsZXQgdmlkZW9JRCA9IHRyaWdnZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXBsYXknKVxuICAgIGxldCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXZpZGVvPSR7dmlkZW9JRH1dYClcbiAgICB0aGlzLnZpZGVvID0gdmlkZW9cbiAgICBcbiAgICBpZih0cmlnZ2VyLmhhc0F0dHJpYnV0ZSgnZGF0YS1vcGVuLXZpZGVvLW92ZXJsYXknKSkge1xuICAgICAgbGV0IHZpZGVvT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXZpZGVvLW92ZXJsYXk9JHt2aWRlb0lEfV1gKVxuICAgICAgXG4gICAgICB0aGlzLmlzT3ZlcmxheU9wZW4gPSB0cnVlXG4gICAgICB0aGlzLnZpZGVvT3ZlcmxheSA9IHZpZGVvT3ZlcmxheVxuICAgICAgXG4gICAgICB2aWRlb092ZXJsYXkuY2xhc3NMaXN0LmFkZCgnb3BlbicpXG4gICAgICB0aGlzLnNjcm9sbC5zdG9wKClcblxuICAgICAgdGhpcy50bC50byh2aWRlb092ZXJsYXksIHtcbiAgICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiLFxuICAgICAgICBkdXJhdGlvbjogMC42LFxuICAgICAgICBlYXNlOiBcInpvb21cIixcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMudGwudG8odGhpcy5lbGVtZW50cy5jbG9zZUJ0biwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC4zLCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuXG4gICAgICB0aGlzLnRsLnRvKHZpZGVvLCB7IG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjQsIGVhc2U6IFwicG93ZXIyLm91dFwiLCBcbiAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgIHZpZGVvLnBsYXkoKVxuICAgICAgICB9IFxuICAgICAgfSwgXCIrPTAuNFwiKVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGwudG8odHJpZ2dlciwgeyBvcGFjaXR5OiAwLCBkdXJhdGlvbjogMC40LCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICAgICAgdmlkZW8ucGxheSgpXG4gICAgICBcbiAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlUGxheWVyKClcbiAgICAgICAgdmlkZW8ubG9hZCgpXG4gICAgICAgIHRoaXMudGwudG8odHJpZ2dlciwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC40LCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICAgICAgfSlcbiAgICB9IFxuICB9XG4gIFxuICBjbG9zZVBsYXllcigpIHtcbiAgICB0aGlzLnZpZGVvLnBhdXNlKClcbiAgICBcbiAgICBpZih0aGlzLmlzT3ZlcmxheU9wZW4pIHtcbiAgICAgIHRoaXMudGwudG8odGhpcy52aWRlb092ZXJsYXksIHtcbiAgICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAxMDAlLCAxMDAlIDEwMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIiwgIFxuICAgICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgXG4gICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICB0aGlzLnZpZGVvT3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJylcbiAgICAgICAgICB0aGlzLnZpZGVvLmN1cnJlbnRUaW1lID0gMFxuICAgICAgICAgIHRoaXMudGwudG8odGhpcy5lbGVtZW50cy5jbG9zZUJ0biwgeyBvcGFjaXR5OiAwLCBkdXJhdGlvbjogMC4wMDEgfSlcbiAgICAgICAgICB0aGlzLnRsLnRvKHRoaXMudmlkZW8sIHsgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuMDAxLCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICAgICAgICAgIHRoaXMuc2Nyb2xsLnN0YXJ0KClcbiAgICAgICAgICB0aGlzLmlzT3ZlcmxheU9wZW4gPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZGVvLmN1cnJlbnRUaW1lID0gMFxuICAgIH1cbiAgfVxufSIsImltcG9ydCBDb21wb25lbnRzIGZyb20gJ2NsYXNzZXMvQ29tcG9uZW50cydcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgdG9vbHRpcDogJ1tkYXRhLXRvb2x0aXBdJyxcbiAgICAgICAgdG9vbHRpcEl0ZW06ICdbZGF0YS10b29sdGlwLWl0ZW1dJyxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5pbml0KClcbiAgfVxuICBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIGNvbnN0IHRvb2x0aXBJdGVtcyA9IHRoaXMuZWxlbWVudHMudG9vbHRpcEl0ZW07XG4gIFxuICAgIGlmICghdG9vbHRpcEl0ZW1zKSByZXR1cm47XG5cbiAgICBjb25zdCBpc0xpc3QgPSB0b29sdGlwSXRlbXMgaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBBcnJheS5pc0FycmF5KHRvb2x0aXBJdGVtcyk7XG4gICAgY29uc3QgaXRlbXMgPSBpc0xpc3QgPyB0b29sdGlwSXRlbXMgOiBbdG9vbHRpcEl0ZW1zXTtcblxuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCB0b29sdGlwID0gaXRlbS5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtdG9vbHRpcF1cIik7XG4gICAgICBpZiAoIXRvb2x0aXApIHJldHVybjtcblxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGNvbnN0IHggPSBlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgICAgIGNvbnN0IHkgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgICAgICB0b29sdGlwLnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcbiAgICAgICAgdG9vbHRpcC5zdHlsZS50b3AgPSBgJHt5fXB4YDtcbiAgICAgIH0pXG5cbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xuICAgICAgICB0b29sdGlwLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgfSlcblxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XG4gICAgICAgIHRvb2x0aXAuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpXG4gIH1cbn0iLCJpbXBvcnQgeyBzY3JvbGwgfSBmcm9tICd1dGlscy9MZW5pc1Njcm9sbCdcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJ1xuaW1wb3J0IFBhZ2UgZnJvbSAnY2xhc3Nlcy9QYWdlJ1xuaW1wb3J0IEFib3V0IGZyb20gJ3BhZ2VzL0Fib3V0J1xuaW1wb3J0IEhvbWUgZnJvbSAncGFnZXMvSG9tZSdcbmltcG9ydCBHYWxsZXJ5IGZyb20gJ3BhZ2VzL0dhbGxlcnknXG5pbXBvcnQgQ29udGFjdCBmcm9tICcuL3BhZ2VzL0NvbnRhY3QnXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tICdjb21wb25lbnRzL05hdmlnYXRpb24nXG5pbXBvcnQgVGV4dFNwbGl0IGZyb20gJ2NvbXBvbmVudHMvVGV4dFNwbGl0J1xuaW1wb3J0IFZpZGVvUGxheWVyIGZyb20gJy4vY29tcG9uZW50cy9WaWRlb1BsYXllcidcbmltcG9ydCBTdGF0cyBmcm9tICcuL2NvbXBvbmVudHMvU3RhdHMnXG5pbXBvcnQgSGVybyBmcm9tICcuL2NvbXBvbmVudHMvSGVybydcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vY29tcG9uZW50cy90b29sdGlwJ1xuaW1wb3J0IFN1YnNjcmlwdGlvbkZvcm0gZnJvbSAnLi9jb21wb25lbnRzL1N1YnNjcmlwdGlvbkZvcm0nXG5cbmNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGVuaXNTY3JvbGwgPSBzY3JvbGxcbiAgICB0aGlzLmlzRmlyc3RWaXNpdFxuICAgIHRoaXMuYm9vdHN0cmFwKClcbiAgICB0aGlzLmNyZWF0ZU5hdmlnYXRpb24oKVxuICB9XG5cbiAgc2V0VXBTY3JvbGxUcmlnZ2VyKCkge1xuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcbiAgICBcbiAgICB0aGlzLmxlbmlzU2Nyb2xsLm9uKCdzY3JvbGwnLCBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSk7XG5cbiAgICBnc2FwLnRpY2tlci5hZGQoKHRpbWUpID0+IHtcbiAgICAgIHRoaXMubGVuaXNTY3JvbGwucmFmKHRpbWUgKiAxMDAwKTtcbiAgICB9KTtcblxuICAgIGdzYXAudGlja2VyLmxhZ1Ntb290aGluZygwKTtcbiAgfVxuXG4gIGNyZWF0ZVZpZGVvUGxheWVyKCkge1xuICAgIHRoaXMudmlkZW9QbGF5ZXIgPSBuZXcgVmlkZW9QbGF5ZXIoKVxuICB9XG5cbiAgY3JlYXRlU3RhdHMoKSB7XG4gICAgdGhpcy5zdGF0cyA9IG5ldyBTdGF0cygpXG4gIH1cblxuICBjcmVhdGVIZXJvKCkge1xuICAgIHRoaXMuaGVybyA9IG5ldyBIZXJvKClcbiAgfVxuXG4gIGFkZFNwbGl0VGV4dCgpIHtcbiAgICB0aGlzLnRleHRTcGxpdCA9IG5ldyBUZXh0U3BsaXQoKVxuICB9XG5cbiAgY3JlYXRlUHJlbG9hZGVyKCkge1xuICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcigpXG4gIH1cblxuICBjcmVhdGVUb29sdGlwKCkge1xuICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKClcbiAgfVxuXG4gIGNyZWF0ZU5hdmlnYXRpb24oKSB7XG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKVxuICB9XG5cbiAgY3JlYXRlQ29udGVudCgpIHtcbiAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMuY29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFnZScpXG4gIH1cblxuICBjcmVhdGVTdWJzY3JpcHRpb25Gb3JtKCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uRm9ybSA9IG5ldyBTdWJzY3JpcHRpb25Gb3JtKClcbiAgfVxuXG4gIGFzeW5jIGluaXRQYWdlcygpIHtcbiAgICBjb25zdCBwYWdlQ2xhc3NlcyA9IHtcbiAgICAgIGhvbWU6IEhvbWUsXG4gICAgICBhYm91dDogQWJvdXQsXG4gICAgICBnYWxsZXJ5OiBHYWxsZXJ5LFxuICAgICAgY29udGFjdDogQ29udGFjdFxuICAgIH1cblxuICAgIGNvbnN0IGlkID0gdGhpcy50ZW1wbGF0ZVxuICAgIGNvbnN0IFBhZ2VDbGFzcyA9IHBhZ2VDbGFzc2VzW2lkXSB8fCBQYWdlXG5cbiAgICB0aGlzLmlzRmlyc3RWaXNpdCA9IHRoaXMuaXNGaXJzdFZpc2l0ID09PSB1bmRlZmluZWRcblxuICAgIHRoaXMucGFnZSA9IG5ldyBQYWdlQ2xhc3MoKVxuXG4gICAgYXdhaXQgdGhpcy5wYWdlLnNob3codGhpcy5pc0ZpcnN0VmlzaXQpXG5cbiAgICB0aGlzLmlzRmlyc3RWaXNpdCA9IGZhbHNlXG4gIH1cblxuICBvblBvcFN0YXRlICgpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKHtcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgcHVzaDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgb25DaGFuZ2UoeyB1cmwsIHB1c2ggPSB0cnVlIH0pIHtcbiAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYWdlICYmIHRoaXMucGFnZS5oaWRlXG4gID8gW3RoaXMucGFnZS5oaWRlKCldXG4gIDogW11cbiAgICBcbiAgICBjb25zdCByZXEgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKVxuXG4gICAgaWYgKHRoaXMubmF2aWdhdGlvbi5pc09wZW4pIHtcbiAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLm5hdmlnYXRpb24uY2xvc2VNZW51KClcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSwgMzAwKVxuICAgICAgfSkgICAgXG4gICAgfVxuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoYW5pbWF0aW9ucylcblxuICAgIGlmKHJlcS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcS50ZXh0KClcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICAgIGlmKHB1c2gpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCB1cmwpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXG4gICAgICBcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGl0bGUnKVxuICAgICAgY29uc3QgbmV3VGl0bGVUZXh0ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3RpdGxlJykuaW5uZXJUZXh0XG4gICAgICB0aXRsZS5pbm5lckhUTUwgPSBuZXdUaXRsZVRleHRcblxuICAgICAgdGhpcy5jcmVhdGVOZXdQYWdlKGRpdilcbiAgICAgIGF3YWl0IHRoaXMuaW5pdCgpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGxvYWRpbmcgcGFnZSEnKVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU5ld1BhZ2UoZGl2KSB7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxuICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcignLm1haW4nKVxuICAgIGNvbnN0IGxvYWRlckhlcm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1sb2FkZXItaGVyb10nKTtcbiAgICBjb25zdCBsb2FkZXJJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1sb2FkZXItaW1hZ2VdIFtkYXRhLWJnXScpXG4gICAgY29uc3QgbmV3TGlzdCA9IGRpdkNvbnRlbnQuY2xhc3NMaXN0XG5cbiAgICB0aGlzLmNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnRlbXBsYXRlKVxuICAgIHRoaXMuY29udGVudC5jbGFzc0xpc3QuYWRkKC4uLm5ld0xpc3QpXG4gICAgXG4gICAgdGhpcy50ZW1wbGF0ZSA9IGRpdkNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhZ2UnKVxuICAgIHRoaXMuY29udGVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGFnZScsIHRoaXMudGVtcGxhdGUpXG5cbiAgICBpZih0aGlzLnRlbXBsYXRlICE9PSBcImVycm9yXCIpIHtcbiAgICAgIGlmKGJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdlcnJvcicpKSB7XG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBib2R5LmNsYXNzTGlzdC5hZGQoJ2Vycm9yJylcbiAgICB9XG4gICAgXG4gICAgdGhpcy5jb250ZW50LmlubmVySFRNTCA9IGRpdkNvbnRlbnQuaW5uZXJIVE1MXG5cbiAgICBsZXQgbmV3SW1nID0gdGhpcy5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWltYWdlLWhlcm9dIFtkYXRhLWJnXScpXG5cbiAgICBpZihuZXdJbWcpIHtcbiAgICAgIGxldCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5ld0ltZyk7XG4gICAgICBsZXQgYmFja2dyb3VuZEltYWdlID0gc3R5bGUuYmFja2dyb3VuZEltYWdlO1xuICAgICAgbGV0IHVybCA9IGJhY2tncm91bmRJbWFnZS5yZXBsYWNlKC9edXJsXFwoW1wiJ10/LywgJycpLnJlcGxhY2UoL1tcIiddP1xcKSQvLCAnJyk7XG4gICAgICBsb2FkZXJJbWcuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybChcIiR7dXJsfVwiKWBcblxuICAgICAgaWYobG9hZGVySGVyby5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSB7XG4gICAgICAgIGxvYWRlckhlcm8uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9IFxuICAgIGVsc2Uge1xuICAgICAgaWYoIWxvYWRlckltZy5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSB7XG4gICAgICAgIGxvYWRlckhlcm8uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcnMgKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMub25Qb3BTdGF0ZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgYXN5bmMgYm9vdHN0cmFwKCkge1xuICAgIGF3YWl0IHRoaXMuaW5pdCgpXG4gIH1cblxuICBhZGRMaW5rTGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcGFnZS10cmlnZ2VyXScpXG4gICAgXG4gICAgbGlua3MuZm9yRWFjaCgobCkgPT4ge1xuICAgICAgbC5vbmNsaWNrID0gZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGNvbnN0IGhyZWYgPSBsLmhyZWZcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVHlwZSA9IGwuZGF0YXNldC5wYWdlVHJpZ2dlclxuICAgICAgICBpZihocmVmID09PSB3aW5kb3cubG9jYXRpb24uaHJlZikgcmV0dXJuXG4gICAgICAgIHRoaXMub25DaGFuZ2UoeyB1cmw6IGhyZWYgfSlcbiAgICAgIH1cbiAgICB9KTsgXG4gIH1cblxuICBhc3luYyBpbml0KCkge1xuICAgIHRoaXMuYWRkU3BsaXRUZXh0KClcbiAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKVxuICAgIGF3YWl0IHRoaXMuaW5pdFBhZ2VzKClcbiAgICB0aGlzLmFkZExpbmtMaXN0ZW5lcnMoKVxuICAgIHRoaXMuY3JlYXRlVmlkZW9QbGF5ZXIoKVxuICAgIHRoaXMuY3JlYXRlU3RhdHMoKVxuICAgIHRoaXMuY3JlYXRlSGVybygpXG4gICAgdGhpcy5jcmVhdGVUb29sdGlwKClcbiAgICB0aGlzLmNyZWF0ZVN1YnNjcmlwdGlvbkZvcm0oKVxuICB9XG59XG5cbm5ldyBBcHAoKTsiLCJpbXBvcnQgUGFnZSBmcm9tICdjbGFzc2VzL1BhZ2UnXG5pbXBvcnQgTGVuaXMgZnJvbSAnbGVuaXMnXG5pbXBvcnQgZ3NhcCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgQ3VzdG9tRWFzZSB9IGZyb20gJ2dzYXAvQ3VzdG9tRWFzZSdcbmltcG9ydCB7IFNwbGl0VGV4dCB9IGZyb20gJ2dzYXAvU3BsaXRUZXh0J1xuaW1wb3J0IFRleHRTcGxpdCBmcm9tICdjb21wb25lbnRzL1RleHRTcGxpdCdcbmltcG9ydCB7IHNjcm9sbCB9IGZyb20gJ3V0aWxzL0xlbmlzU2Nyb2xsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCBleHRlbmRzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBpZDogJ2Fib3V0JyxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGJpb1RyaWdnZXI6ICdbZGF0YS1iaW8tdHJpZ2dlcl0nLFxuICAgICAgICBjbG9zZTogJ1tkYXRhLWJpby1vdmVybGF5LW1vZGFsXSBbZGF0YS1jbG9zZV0nLFxuICAgICAgICBiaW9PdmVybGF5OiAnW2RhdGEtYmlvLW92ZXJsYXktbW9kYWxdJyxcbiAgICAgICAgYmlvQ29udGFpbmVyOiAnW2RhdGEtYmlvLW92ZXJsYXktY29udGVudF0nLFxuICAgICAgICBib2R5OiAnYm9keSdcbiAgICAgIH1cbiAgICB9KVxuICAgIFxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ3VzdG9tRWFzZSwgU3BsaXRUZXh0KVxuICAgIEN1c3RvbUVhc2UuY3JlYXRlKFwiem9vbVwiLCBcIjAuNzEsIDAsIDAuMDYsIDFcIilcbiAgICB0aGlzLnBhZ2VTY3JvbGwgPSBzY3JvbGxcbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlXG4gICAgdGhpcy50bCA9IG5ldyBnc2FwLnRpbWVsaW5lKClcbiAgICB0aGlzLm1tID0gZ3NhcC5tYXRjaE1lZGlhKClcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIG9uUG9wU3RhdGUgKCkge1xuICAgIHRoaXMub25DaGFuZ2Uoe1xuICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBwdXNoOiBmYWxzZVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBvbkNoYW5nZSh7IHVybCwgcHVzaCA9IHRydWUgfSkge1xuICAgIGlmIChwdXNoKSB7XG4gICAgICB0aGlzLnByZXZpb3VzVXJsID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIHVybClcbiAgICB9XG4gICAgY29uc3QgcmVxID0gYXdhaXQgd2luZG93LmZldGNoKHVybClcblxuICAgIGlmKHJlcS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcS50ZXh0KClcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFxuXG4gICAgICBpZihwdXNoKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgXCJcIiwgdXJsKVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBkaXZDb250ZW50ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlubmVyLWNvbnRlbnRdJylcbiAgICAgIFxuICAgICAgdGhpcy5lbGVtZW50cy5iaW9Db250YWluZXIuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUxcbiAgICAgIHRoaXMuZWxlbWVudHMuYmlvSW1hZ2UgPSB0aGlzLmVsZW1lbnRzLmJpb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1iaW8taW1hZ2VdJylcbiAgICAgIHRoaXMuZWxlbWVudHMubWFpblRpdGxlcyA9IHRoaXMuZWxlbWVudHMuYmlvQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJpby1vdmVybGF5LW1vZGFsXSBbZGF0YS1oZXJvXSBbZGF0YS10ZXh0LXJldmVhbF0nKVxuICAgICAgdGhpcy5lbGVtZW50cy5iaW9UZXh0ID0gdGhpcy5lbGVtZW50cy5iaW9Db250YWluZXIucXVlcnlTZWxlY3RvcignLmJpb19fY29udGVudCBbZGF0YS1zcGxpdC10ZXh0XScpXG4gICAgICB0aGlzLmVsZW1lbnRzLmJpb1JvbGUgPSB0aGlzLmVsZW1lbnRzLmJpb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1iaW8tb3ZlcmxheS1tb2RhbF0gLmJpb19fcm9sZSBbZGF0YS1zcGxpdC10ZXh0XScpXG4gICAgICBcbiAgICAgIGlmICghdGhpcy5tb2RhbFNjcm9sbCkge1xuICAgICAgICB0aGlzLmluaXQoKTsgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZGFsU2Nyb2xsLnJlc2l6ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uUG9zaXRpb25zKClcbiAgICAgIHRoaXMuYW5pbWF0ZUNvbnRlbnQoKVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUNvbnRlbnQoKSB7XG4gICAgdGhpcy5lbGVtZW50cy5iaW9Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxuICB9XG5cbiAgb3Blbk1vZGFsKCkge1xuICAgIGlmICh0aGlzLmlzT3BlbikgcmV0dXJuXG5cbiAgICB0aGlzLnBhZ2VTY3JvbGwuc3RvcCgpXG4gICAgdGhpcy5lbGVtZW50cy5ib2R5LmNsYXNzTGlzdC5hZGQoJ25vLXNjcm9sbGluZycpXG5cbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMuYmlvT3ZlcmxheSwge1xuICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiLFxuICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgIGVhc2U6IFwiem9vbVwiXG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLmJpb092ZXJsYXksIHtcbiAgICAgIGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMTAwJSwgMTAwJSAxMDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCIsICBcbiAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICBlYXNlOiBcInpvb21cIixcbiAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZVxuICAgICAgICB0aGlzLnNldEFuaW1hdGlvblBvc2l0aW9ucygpXG4gICAgICAgIHRoaXMucmVtb3ZlQ29udGVudCgpXG4gICAgICAgIHRoaXMucGFnZVNjcm9sbC5zdGFydCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVDb250ZW50KCkge1xuICAgIGNvbnN0IHRsID0gZ3NhcC50aW1lbGluZSgpXG4gICAgXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLm1haW5UaXRsZXMsIHsgeTogMCwgZHVyYXRpb246IDAuOCwgZWFzZTogXCJ6b29tXCIsIHN0YWdnZXI6IChpLCB0YXJnZXQpID0+IHRhcmdldC5kYXRhc2V0LnRleHRSZXZlYWwgPyAwLjA1ICogTnVtYmVyKHRhcmdldC5kYXRhc2V0LnRleHRSZXZlYWwpOiAwLjA1IH0sICctPTAuMycpXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLmJpb1JvbGUsIHsgeTogMCwgZHVyYXRpb246IDAuOCwgZWFzZTogXCJ6b29tXCJ9LCAnLT0wLjYnKVxuXG4gICAgZG9jdW1lbnQuZm9udHMucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBzcGxpdCA9IFNwbGl0VGV4dC5jcmVhdGUodGhpcy5lbGVtZW50cy5iaW9UZXh0LCB7XG4gICAgICAgIHR5cGU6IFwibGluZXNcIixcbiAgICAgICAgbGluZUNsYXNzOiBcImxpbmVcIixcbiAgICAgICAgbWFzazogXCJsaW5lc1wiLFxuICAgICAgICBhdXRvU3BsaXQ6IHRydWUsXG4gICAgICAgIG9uU3BsaXQ6IChzZWxmKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZUJvZHlUZXh0KHRoaXMuZWxlbWVudHMuYmlvVGV4dCwgc2VsZi5saW5lcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLmJpb0ltYWdlLCB7IHk6IDAsIG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjQsIGVhc2U6IFwicG93ZXIyLm91dFwiIH0sICctPTAuNicpXG4gICAgICBcbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMuY2xvc2UsIHsgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuMywgZWFzZTogXCJwb3dlcjIub3V0XCIsIG9uQ29tcGxldGU6ICgpPT4ge1xuICAgICAgdGhpcy5pc09wZW4gPSB0cnVlXG4gICAgICB0aGlzLmVsZW1lbnRzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbm8tLXNjcm9sbGluZycpXG4gICAgICB0aGlzLm1vZGFsU2Nyb2xsLnN0YXJ0KClcbiAgICB9fSwgJy09MC4yJylcbiAgfVxuXG4gIGFuaW1hdGVCb2R5VGV4dCh0ZXh0LCBsaW5lcykge1xuICAgIHRoaXMubW0uYWRkKFwiKG1heC13aWR0aDogMTE5OXB4KVwiLCAoKSA9PiB7XG4gICAgICBUZXh0U3BsaXQuc2Nyb2xsQW5pbWF0ZVRleHQodGV4dCwgbGluZXMpXG4gICAgfSlcblxuICAgIHRoaXMubW0uYWRkKFwiKG1pbi13aWR0aDogMTIwMHB4KVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnRsLmZyb21UbyhsaW5lcyxcbiAgICAgICAgeyB5OiBcIjEwMCVcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMC44LFxuICAgICAgICAgIGVhc2U6IFwiem9vbVwiLFxuICAgICAgICAgIHN0YWdnZXI6IDAuMDVcbiAgICAgICAgfSxcbiAgICAgICctPTAuOCcpXG4gICAgfSlcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy5iaW9UcmlnZ2VyIHx8ICF0aGlzLmVsZW1lbnRzLmNsb3NlKSByZXR1cm5cbiAgICBcbiAgICB0aGlzLmVsZW1lbnRzLmJpb1RyaWdnZXIuZm9yRWFjaCgobCkgPT4ge1xuICAgICAgXG4gICAgICBsLm9uY2xpY2sgPSBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgY29uc3QgaHJlZiA9IGwuaHJlZlxuXG4gICAgICAgIHRoaXMub3Blbk1vZGFsKClcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh7IHVybDogaHJlZiB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmVsZW1lbnRzLmNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucHJldmlvdXNVcmwpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBcIlwiLCB0aGlzLnByZXZpb3VzVXJsKVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNsb3NlTW9kYWwoKVxuICAgIH0pXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLm9uUG9wU3RhdGUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHNldEFuaW1hdGlvblBvc2l0aW9ucygpIHtcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLmNsb3NlLCB7IG9wYWNpdHk6IDAgfSlcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLm1haW5UaXRsZXMsIHsgeTogXCIxMDAlXCIgfSlcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLmJpb1JvbGUsIHsgeTogXCIxMDAlXCIgfSlcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLmJpb0ltYWdlLCB7IHk6IFwiMjAlXCIsIG9wYWNpdHk6IDAgfSlcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnRzLmJpb092ZXJsYXkgfHwgIXRoaXMuZWxlbWVudHMuYmlvQ29udGFpbmVyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwi4p2MIExlbmlzIEluaXRpYWxpemF0aW9uIEZhaWxlZDogTWlzc2luZyBFbGVtZW50c1wiLCB0aGlzLmVsZW1lbnRzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1vZGFsU2Nyb2xsID0gbmV3IExlbmlzKHtcbiAgICAgIHdyYXBwZXI6IHRoaXMuZWxlbWVudHMuYmlvT3ZlcmxheSxcbiAgICAgIGNvbnRlbnQ6IHRoaXMuZWxlbWVudHMuYmlvQ29udGFpbmVyLFxuICAgICAgYXV0b1JhZjogdHJ1ZSxcbiAgICAgIGR1cmF0aW9uOiAxXG4gICAgfSlcblxuICAgIGNvbnN0IHJhZiA9ICh0aW1lKSA9PiB7XG4gICAgICB0aGlzLm1vZGFsU2Nyb2xsLnJhZih0aW1lKVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZilcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmKVxuXG4gICAgdGhpcy5tb2RhbFNjcm9sbC5zdG9wKClcbiAgfVxuICBcbn0iLCJpbXBvcnQgUGFnZSBmcm9tICdjbGFzc2VzL1BhZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRhY3QgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgaWQ6ICdjb250YWN0JyxcbiAgICAgIGVsZW1lbnQ6ICcuY29udGFjdCdcbiAgICB9KVxuICB9XG59IiwiaW1wb3J0IFBhZ2UgZnJvbSAnY2xhc3Nlcy9QYWdlJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IHNjcm9sbCB9IGZyb20gJ3V0aWxzL0xlbmlzU2Nyb2xsJ1xuaW1wb3J0IHsgQ3VzdG9tRWFzZSB9IGZyb20gJ2dzYXAvQ3VzdG9tRWFzZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FsbGVyeSBleHRlbmRzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBpZDogJ2dhbGxlcnknLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgZ2FsbGVyeTogJ1tkYXRhLWdhbGxlcnldJyxcbiAgICAgICAgZ2FsbGVyeUl0ZW1zOiAnW2RhdGEtZ2FsbGVyeS1pdGVtXScsXG4gICAgICAgIHNsaWRlU2hvdzogJ1tkYXRhLXNsaWRlc2hvd10nLFxuICAgICAgICBwcmV2OiAnW2RhdGEtc2xpZGVzaG93LXByZXZdJyxcbiAgICAgICAgbmV4dDogJ1tkYXRhLXNsaWRlc2hvdy1uZXh0XScsXG4gICAgICAgIGNsb3NlOiAnW2RhdGEtc2xpZGVzaG93XSBbZGF0YS1jbG9zZV0nLFxuICAgICAgICBzbGlkZVNob3dDb250YWluZXI6ICdbZGF0YS1zbGlkZXNob3ctY29udGFpbmVyXScsXG4gICAgICAgIHNsaWRlU2hvd0NvdW50ZXI6ICdbZGF0YS1zbGlkZXNob3ctaW5kZXhdJyxcbiAgICAgICAgbWluaU1hcDogJ1tkYXRhLW1pbmktbWFwXScsXG4gICAgICAgIG1pbmlNYXBJdGVtczogJ1tkYXRhLW1pbmktbWFwLWl0ZW1dJyxcbiAgICAgICAgbWluaU1hcEluZGljYXRvcjogJ1tkYXRhLW1pbmktbWFwLWluZGljYXRvcl0nLFxuICAgICAgICBwbGF5QnRuczogJ1tkYXRhLWdhbGxlcnktaXRlbS1wbGF5LWJ0bl0nXG5cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZ3NhcC5yZWdpc3RlclBsdWdpbihDdXN0b21FYXNlKVxuICAgIEN1c3RvbUVhc2UuY3JlYXRlKFwiem9vbVwiLCBcIjAuNzEsIDAsIDAuMDYsIDFcIilcblxuICAgIHRoaXMudGwgPSBnc2FwLnRpbWVsaW5lKClcbiAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDBcbiAgICB0aGlzLm1lZGlhID0gW11cbiAgICB0aGlzLnNjcm9sbCA9IHNjcm9sbFxuICAgIHRoaXMuaGFzTWVkaWFCZWVuU2V0ID0gZmFsc2VcblxuICAgIHRoaXMuYWxsb3dTbGlkZU5hdmlnYXRpb24gPSBmYWxzZVxuICAgIFxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBvcGVuU2xpZGVTaG93KGUpIHtcbiAgICBjb25zdCBtZWRpYUVsZW1lbnQgPSBlLnRhcmdldDtcbiAgICBjb25zdCBtZWRpYUlkID0gbWVkaWFFbGVtZW50LmRhdGFzZXQuZ2FsbGVyeUlkO1xuXG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLm1lZGlhLmZpbmRJbmRleChtZWRpYSA9PiBtZWRpYS5kYXRhc2V0LmdhbGxlcnlJZCA9PT0gbWVkaWFJZClcbiAgICB0aGlzLmRpc3BsYXlJbmRleCgpXG4gICAgdGhpcy5zY3JvbGwuc3RvcCgpXG4gICAgdGhpcy50bC5jbGVhcigpXG5cbiAgICB0aGlzLnVwZGF0ZU1pbmltYXBJbmRpY2F0b3IobWVkaWFJZCwgdHJ1ZSk7XG5cbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMuZ2FsbGVyeUl0ZW1zLCB7IFxuICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAxMDAlLCAxMDAlIDEwMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIiwgXG4gICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgZWFzZTogXCJ6b29tXCJcbiAgICB9KVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnBsYXlCdG5zLCBcbiAgICB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgIGVhc2U6IFwicG93ZXIyLm91dFwiXG4gICAgfSwnLT0wLjQnKVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdywge1xuICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiLFxuICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgIGVhc2U6IFwiem9vbVwiLFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdy5jbGFzc0xpc3QucmVtb3ZlKCdjYW5ub3QtaW50ZXJhY3QnKVxuICAgICAgICB0aGlzLnNob3dNZWRpYSgpXG4gICAgICAgIHRoaXMuZW5hYmxlU2xpZGVOYXZpZ2F0aW9uKClcbiAgICAgIH1cbiAgICB9LCAnLT0wLjInKVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLmNsb3NlLCB7IG9wYWNpdHk6IDEsIGR1cmF0aW9uOiAwLjMsIGVhc2U6IFwicG93ZXIyLm91dFwiIH0pXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnByZXYsIHsgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuMywgZWFzZTogXCJwb3dlcjIub3V0XCIgfSwgJ2NvbnRyb2xzJylcbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMubmV4dCwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC4zLCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9LCAnY29udHJvbHMnKVxuICB9XG5cbiAgY2xvc2VTbGlkZVNob3coKSB7XG4gICAgdGhpcy5kaXNhYmxlU2xpZGVOYXZpZ2F0aW9uKClcbiAgICBsZXQgc2xpZGVTaG93TWVkaWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVzaG93LW1lZGlhX19pdGVtJylcbiAgICB0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdy5jbGFzc0xpc3QuYWRkKCdjYW5ub3QtaW50ZXJhY3QnKVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdywge1xuICAgICAgY2xpcFBhdGg6IFwicG9seWdvbigwJSAxMDAlLCAxMDAlIDEwMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICBlYXNlOiBcInpvb21cIixcbiAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgc2xpZGVTaG93TWVkaWEucmVtb3ZlKClcbiAgICAgICAgdGhpcy5oYXNNZWRpYUJlZW5TZXQgPSBmYWxzZVxuICAgICAgICB0aGlzLnNjcm9sbC5zdGFydCgpXG4gICAgICAgIHRoaXMuYW5pbWF0ZUltYWdlcyhmYWxzZSwgdHJ1ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnBsYXlCdG5zLCB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgIGVhc2U6IFwicG93ZXIyLm91dFwiXG4gICAgfSwgXCIrPTAuMlwiKVxuXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLmNsb3NlLCB7IG9wYWNpdHk6IDAsIGR1cmF0aW9uOiAwLjAwMSB9LCAnaGlkZScpXG4gICAgdGhpcy50bC50byh0aGlzLmVsZW1lbnRzLnByZXYsIHsgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuMDAxIH0sICdoaWRlJylcbiAgICB0aGlzLnRsLnRvKHRoaXMuZWxlbWVudHMubmV4dCwgeyBvcGFjaXR5OiAwLCBkdXJhdGlvbjogMC4wMDEgfSwgJ2hpZGUnKVxuICAgIFxuICAgIC8vIFJlbW92ZSBpbWFnZSBwYXJhbWV0ZXIgZnJvbSBVUkxcbiAgICBjb25zdCBuZXdVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbik7XG4gICAgbmV3VXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoXCJtZWRpYVwiKTtcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIG5ld1VybCk7XG4gIH1cbiAgXG4gIGdvVG9NZWRpYShpbmRleCkge1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5tZWRpYS5sZW5ndGggfHwgaW5kZXggPT09IHRoaXMuY3VycmVudEluZGV4KSByZXR1cm47XG4gICAgXG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmRpc3BsYXlJbmRleCgpO1xuXG4gICAgaWYgKHRoaXMudGwuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy50bC5hZGQoKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dNZWRpYSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd01lZGlhKCk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlTWVkaWEoZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgb2xkSW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleFxuICAgIHRoaXMuY3VycmVudEluZGV4ID0gKHRoaXMuY3VycmVudEluZGV4ICsgZGlyZWN0aW9uICsgdGhpcy5tZWRpYS5sZW5ndGgpICUgdGhpcy5tZWRpYS5sZW5ndGhcbiAgICB0aGlzLmRpc3BsYXlJbmRleCgpXG4gICAgXG4gICAgaWYgKG9sZEluZGV4ID09PSB0aGlzLmN1cnJlbnRJbmRleCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy50bC5pc0FjdGl2ZSgpKSB7XG4gICAgICB0aGlzLnRsLmFkZCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd01lZGlhKCk7XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3dNZWRpYSgpO1xuICAgIH1cbiAgfVxuXG4gIHNob3dNZWRpYSgpIHtcbiAgICBjb25zdCBtZWRpYUN1cnJlbnRFbGVtID0gdGhpcy5tZWRpYVt0aGlzLmN1cnJlbnRJbmRleF1cbiAgICBjb25zdCBtZWRpYVR5cGUgPSBtZWRpYUN1cnJlbnRFbGVtLmRhdGFzZXQuZ2FsbGVyeUl0ZW1cbiAgICBjb25zdCBtZWRpYUlkID0gbWVkaWFDdXJyZW50RWxlbS5kYXRhc2V0LmdhbGxlcnlJZDtcbiAgICBcbiAgICB0aGlzLnVwZGF0ZU1pbmltYXBJbmRpY2F0b3IobWVkaWFJZClcblxuICAgIC8vIElmIHRoZSBzYW1lIG1lZGlhLCBkb24ndCBkbyBhbnl0aGluZ1xuICAgIGlmICh0aGlzLmVsZW1lbnRzLnNsaWRlU2hvd0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbZGF0YS1zbGlkZXNob3ctaWQ9XCIke21lZGlhSWR9XCJdYCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGFzTWVkaWFCZWVuU2V0KSB7XG4gICAgICB0aGlzLmNyZWF0ZUFuZFNldE1lZGlhRWxlbWVudChtZWRpYUN1cnJlbnRFbGVtLCBtZWRpYVR5cGUpXG4gICAgICB0aGlzLmhhc01lZGlhQmVlblNldCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zd2FwTWVkaWFFbGVtZW50KG1lZGlhQ3VycmVudEVsZW0sIG1lZGlhVHlwZSlcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIFVSTCB3aXRoIHRoZSBuZXcgaW1hZ2UgSURcbiAgICBjb25zdCBuZXdVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbilcbiAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldChcIm1lZGlhXCIsIG1lZGlhSWQpXG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBuZXdVcmwpXG4gIH1cblxuICBjcmVhdGVBbmRTZXRNZWRpYUVsZW1lbnQobWVkaWFFbGVtLCBtZWRpYVR5cGUpIHtcbiAgICBjb25zdCBuZXdFbGVtID0gdGhpcy5jcmVhdGVOZXdNZWRpYUl0ZW0obWVkaWFUeXBlKVxuICAgIHRoaXMuc2V0TWVkaWFBdHRyaWJ1dGVzKG5ld0VsZW0sIG1lZGlhRWxlbSwgbWVkaWFUeXBlKVxuXG4gICAgdGhpcy5lbGVtZW50cy5zbGlkZVNob3dDb250YWluZXIuaW5uZXJIVE1MID0gJycgLy8gQ2xlYXIgcHJldmlvdXMgZWxlbWVudHNcbiAgICB0aGlzLmVsZW1lbnRzLnNsaWRlU2hvd0NvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdFbGVtKVxuXG4gICAgZ3NhcC5mcm9tVG8obmV3RWxlbSwgeyBjbGlwUGF0aDogXCJwb2x5Z29uKDAlIDEwMCUsIDEwMCUgMTAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiIH0sIHsgY2xpcFBhdGg6IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiLCBkdXJhdGlvbjogMC42LCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICB9XG5cbiAgZGlzcGxheUluZGV4KCkge1xuICAgIHRoaXMuZWxlbWVudHMuc2xpZGVTaG93Q291bnRlci5pbm5lckhUTUwgPSBTdHJpbmcodGhpcy5jdXJyZW50SW5kZXggKyAxKS5wYWRTdGFydCgyLCAnMCcpXG4gIH1cblxuICBzd2FwTWVkaWFFbGVtZW50KG1lZGlhRWxlbSwgbWVkaWFUeXBlKSB7XG4gICAgY29uc3Qgb2xkRWxlbSA9IHRoaXMuZWxlbWVudHMuc2xpZGVTaG93Q29udGFpbmVyLmZpcnN0Q2hpbGRcbiAgICBjb25zdCBuZXdFbGVtID0gdGhpcy5jcmVhdGVOZXdNZWRpYUl0ZW0obWVkaWFUeXBlKVxuICAgIHRoaXMuc2V0TWVkaWFBdHRyaWJ1dGVzKG5ld0VsZW0sIG1lZGlhRWxlbSwgbWVkaWFUeXBlKVxuXG4gICAgdGhpcy5lbGVtZW50cy5zbGlkZVNob3dDb250YWluZXIuYXBwZW5kQ2hpbGQobmV3RWxlbSlcbiAgICBcbiAgICB0aGlzLnRsLmZyb21UbyhuZXdFbGVtLCB7IG9wYWNpdHk6IDAgfSwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC40LCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICAgIFxuICAgIHRoaXMudGwudG8ob2xkRWxlbSwge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgb2xkRWxlbS5yZW1vdmUoKVxuICAgICAgfVxuICAgIH0sIFwiLT0wLjJcIilcbiAgfVxuXG4gIHNldHVwU2Nyb2xsTmF2aWdhdGlvbigpIHtcbiAgICBsZXQgdGlja2luZyA9IGZhbHNlO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgKGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5hbGxvd1NsaWRlTmF2aWdhdGlvbiB8fCB0aWNraW5nKSByZXR1cm47XG5cbiAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gZS5kZWx0YVkgPiAwID8gMSA6IC0xO1xuXG4gICAgICB0aGlzLmNoYW5nZU1lZGlhKGRpcmVjdGlvbik7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICB9LCA2MDApOyAvLyBkZWxheSB0byBwcmV2ZW50IG92ZXJzY3JvbGxcbiAgICB9KTtcbiAgfVxuXG4gIHNldHVwU3dpcGVOYXZpZ2F0aW9uKCkge1xuICAgIGlmKCF0aGlzLmVsZW1lbnRzLnNsaWRlU2hvd0NvbnRhaW5lcikgcmV0dXJuXG5cbiAgICBsZXQgdG91Y2hTdGFydFggPSAwO1xuICAgIGxldCB0b3VjaEVuZFggPSAwO1xuXG4gICAgY29uc3QgdGhyZXNob2xkID0gNTA7IC8vIE1pbmltdW0gc3dpcGUgZGlzdGFuY2VcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZWxlbWVudHMuc2xpZGVTaG93Q29udGFpbmVyO1xuICAgIFxuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGUpID0+IHtcbiAgICAgIHRvdWNoU3RhcnRYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5zY3JlZW5YO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKGUpID0+IHtcbiAgICAgIHRvdWNoRW5kWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWDtcbiAgICAgIGhhbmRsZVN3aXBlKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVTd2lwZSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5hbGxvd1NsaWRlTmF2aWdhdGlvbikgcmV0dXJuO1xuICAgICAgY29uc3QgZGVsdGEgPSB0b3VjaFN0YXJ0WCAtIHRvdWNoRW5kWDtcbiAgICAgIFxuICAgICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+IHRocmVzaG9sZCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBkZWx0YSA+IDAgPyAxIDogLTE7XG4gICAgICAgIHRoaXMuY2hhbmdlTWVkaWEoZGlyZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZGlzYWJsZVNsaWRlTmF2aWdhdGlvbigpIHtcbiAgICB0aGlzLmFsbG93U2xpZGVOYXZpZ2F0aW9uID0gZmFsc2U7XG4gIH1cblxuICBlbmFibGVTbGlkZU5hdmlnYXRpb24oKSB7XG4gICAgdGhpcy5hbGxvd1NsaWRlTmF2aWdhdGlvbiA9IHRydWU7XG4gIH1cblxuICBjcmVhdGVOZXdNZWRpYUl0ZW0odHlwZSkge1xuICAgIGNvbnN0IGVsZW0gPSB0eXBlID09PSBcInZpZGVvXCIgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ3NsaWRlc2hvdy1tZWRpYV9faXRlbScpXG4gICAgcmV0dXJuIGVsZW1cbiAgfVxuXG4gIHNldE1lZGlhQXR0cmlidXRlcyhlbGVtLCBtZWRpYUVsZW0sIG1lZGlhVHlwZSkge1xuICAgIGNvbnN0IG1lZGlhSWQgPSBtZWRpYUVsZW0uZGF0YXNldC5nYWxsZXJ5SWRcbiAgICBjb25zdCBwb3N0ZXJJbWcgPSBtZWRpYUVsZW0uc3JjXG5cbiAgICBlbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZXNob3ctaWQnLCBtZWRpYUlkKVxuXG4gICAgaWYgKG1lZGlhVHlwZSA9PT0gXCJ2aWRlb1wiKSB7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnYXV0b3BsYXknLCAnJylcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdsb29wJywgJycpXG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAnJylcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdjb250cm9scycsICcnKVxuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ3Bvc3RlcicsIHBvc3RlckltZylcblxuICAgICAgY29uc3Qgc291cmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJylcbiAgICAgIHNvdXJjZS5zcmMgPSBtZWRpYUVsZW0uZGF0YXNldC5nYWxsZXJ5U3JjXG4gICAgICBzb3VyY2UudHlwZSA9IFwidmlkZW8vbXA0XCJcbiAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoc291cmNlKVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW0uc3JjID0gbWVkaWFFbGVtLmRhdGFzZXQuZ2FsbGVyeVNyY1xuICAgICAgZWxlbS5hbHQgPSBtZWRpYUVsZW0uYWx0IHx8IFwiR2FsbGVyeSBJbWFnZVwiXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTWluaW1hcEluZGljYXRvcihtZWRpYUlkID0gdGhpcy5tZWRpYVt0aGlzLmN1cnJlbnRJbmRleF0/LmRhdGFzZXQuZ2FsbGVyeUlkLCBpbnN0YW50ID0gZmFsc2UpIHtcbiAgICBpZiAoIW1lZGlhSWQpIHJldHVyblxuICAgIGxldCBtaW5pTWFwUmVjdCA9IHRoaXMuZWxlbWVudHMubWluaU1hcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgdGhpcy5lbGVtZW50cy5taW5pTWFwSXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uZGF0YXNldC5nYWxsZXJ5SWQgPT09IG1lZGlhSWQpIHtcbiAgICAgICAgbGV0IGl0ZW1SZWN0ID0gaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdGFyZ2V0WCA9IC1pdGVtLm9mZnNldExlZnRcbiAgICAgICAgY29uc3QgaW5kaWNhdG9yWHBvcyA9IGl0ZW1SZWN0LmxlZnQgLSBtaW5pTWFwUmVjdC5sZWZ0XG5cbiAgICAgICAgaWYgKGluc3RhbnQpIHtcbiAgICAgICAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLm1pbmlNYXBJbmRpY2F0b3IsIHt4OiBpbmRpY2F0b3JYcG9zfSlcbiAgICAgICAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLm1pbmlNYXAsIHsgeDogdGFyZ2V0WCB9KVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLm1pbmlNYXBJbmRpY2F0b3IsIHtcbiAgICAgICAgICAgIHg6IGluZGljYXRvclhwb3MsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgICAgICAgZWFzZTogXCJ6b29tXCJcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLm1pbmlNYXAsIHtcbiAgICAgICAgICAgIHg6IHRhcmdldFgsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgICAgICAgZWFzZTogXCJwb3dlcjMub3V0XCJcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBDaGVjayBVUkwgb24gUGFnZSBMb2FkICYgT3BlbiBTbGlkZXNob3cgaWYgTmVlZGVkXG4gIGNoZWNrVVJMRm9yU2xpZGVTaG93KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgY29uc3QgbWVkaWFJZCA9IHVybFBhcmFtcy5nZXQoXCJtZWRpYVwiKTtcbiAgXG4gICAgICBpZiAobWVkaWFJZCkge1xuICAgICAgICBjb25zdCBtZWRpYUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1nYWxsZXJ5LWlkPVwiJHttZWRpYUlkfVwiXWApO1xuICAgICAgICBpZiAobWVkaWFFbGVtZW50KSB0aGlzLm9wZW5TbGlkZVNob3coeyB0YXJnZXQ6IG1lZGlhRWxlbWVudCB9KTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIFxuICBhbmltYXRlSW1hZ2VzKHVzZVN0cm9sbFRyaWdnZXIsIHNob3cgPSB0cnVlKSB7XG4gICAgbGV0IGNsaXBQYXRoUG9seSA9IHNob3c/IFwicG9seWdvbigwJSAwJSwgMTAwJSAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiIDogXCJwb2x5Z29uKDAlIDEwMCUsIDEwMCUgMTAwJSwgMTAwJSAxMDAlLCAwJSAxMDAlKVwiIFxuXG4gICAgaWYodXNlU3Ryb2xsVHJpZ2dlcikge1xuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLmdhbGxlcnlJdGVtcyxcbiAgICAgICAge1xuICAgICAgICAgIGNsaXBQYXRoOiBjbGlwUGF0aFBvbHksXG4gICAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLmdhbGxlcnlJdGVtcyxcbiAgICAgICAgICAgIHN0YXJ0OiAndG9wIGJvdHRvbScsXG4gICAgICAgICAgICBzY3J1YjogZmFsc2UsXG4gICAgICAgICAgICBtYXJrZXJzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWFzZTogXCJ6b29tXCJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5nYWxsZXJ5SXRlbXMsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGlwUGF0aDogY2xpcFBhdGhQb2x5LFxuICAgICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgICAgZWFzZTogXCJ6b29tXCJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMudGwudG8odGhpcy5lbGVtZW50cy5wbGF5QnRucywge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIlxuICAgIH0sIFwiKz0wLjJcIilcbiAgfVxuXG4gIGFuaW1hdGVBc3NldHModGwsIHJlc29sdmUpIHtcbiAgICBzdXBlci5hbmltYXRlQXNzZXRzKHRsLCAoKSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGVJbWFnZXModHJ1ZSlcblxuICAgICAgcmVzb2x2ZSgpXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICB0aGlzLnVwZGF0ZU1pbmltYXBJbmRpY2F0b3IoKVxuICB9XG5cbiAgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XG4gICAgLy8gT25seSBwcm9jZWVkIGlmIHNsaWRlc2hvdyBpcyBvcGVuXG4gICAgaWYgKCF0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdyB8fCB0aGlzLmVsZW1lbnRzLnNsaWRlU2hvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2Nhbm5vdC1pbnRlcmFjdCcpKSByZXR1cm5cblxuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICB0aGlzLmNoYW5nZU1lZGlhKDEpXG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93TGVmdCcpIHtcbiAgICAgIHRoaXMuY2hhbmdlTWVkaWEoLTEpXG4gICAgfVxuICB9XG5cbiAgLy8gRGVib3VuY2UgaGVscGVyIChhdm9pZHMgc3BhbW1pbmcgZHVyaW5nIHJlc2l6ZSlcbiAgZGVib3VuY2UoZm4sIGRlbGF5ID0gMTAwKSB7XG4gICAgbGV0IHRpbWVvdXRcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmbiwgZGVsYXkpXG4gICAgfVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYoIXRoaXMuZWxlbWVudHMuZ2FsbGVyeUl0ZW1zIHx8ICF0aGlzLmVsZW1lbnRzLmNsb3NlKSByZXR1cm5cblxuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudHMuZ2FsbGVyeUl0ZW1zLCB7IGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMTAwJSwgMTAwJSAxMDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCJ9KVxuICBcbiAgICBpZih0aGlzLmVsZW1lbnRzLnBsYXlCdG5zKSB7XG4gICAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLnBsYXlCdG5zLCB7IG9wYWNpdHk6IDAgfSlcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmVsZW1lbnRzLmdhbGxlcnlJdGVtcykgfHwgKHR5cGVvZiB0aGlzLmVsZW1lbnRzLmdhbGxlcnlJdGVtcyA9PT0gJ29iamVjdCcpKSB7XG4gICAgICB0aGlzLm1lZGlhID0gQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRzLmdhbGxlcnlJdGVtcylcbiAgICAgIHRoaXMuZWxlbWVudHMuZ2FsbGVyeUl0ZW1zLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMub3BlblNsaWRlU2hvdyhlKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cy5nYWxsZXJ5SXRlbXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLm9wZW5TbGlkZVNob3coZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYodGhpcy5lbGVtZW50cy5wcmV2KSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLnByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2hhbmdlTWVkaWEoLTEpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmKHRoaXMuZWxlbWVudHMubmV4dCkge1xuICAgICAgdGhpcy5lbGVtZW50cy5uZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmNoYW5nZU1lZGlhKDEpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMuY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlU2xpZGVTaG93KClcbiAgICB9KVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bilcblxuICAgIGlmKHRoaXMuZWxlbWVudHMubWluaU1hcEl0ZW1zKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLm1pbmlNYXBJdGVtcy5mb3JFYWNoKChlbGVtLCBpKSA9PiB7XG4gICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmFsbG93U2xpZGVOYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgICAgICAgdGhpcy5nb1RvTWVkaWEoaSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZGVib3VuY2UodGhpcy5oYW5kbGVSZXNpemUpKVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcbiAgICB0aGlzLmNoZWNrVVJMRm9yU2xpZGVTaG93KClcbiAgICB0aGlzLnNldHVwU3dpcGVOYXZpZ2F0aW9uKClcbiAgICB0aGlzLnNldHVwU2Nyb2xsTmF2aWdhdGlvbigpXG4gIH1cbn0iLCJpbXBvcnQgUGFnZSBmcm9tICdjbGFzc2VzL1BhZ2UnXG5pbXBvcnQgZ3NhcCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gJ2dzYXAvU2Nyb2xsVHJpZ2dlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSBleHRlbmRzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBpZDogJ2hvbWUnLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgaGVyb0NvbnRlbnQ6ICdbZGF0YS1oZXJvLWNvbnRlbnRdJyxcbiAgICAgICAgaG9tZUJvZHk6ICdbZGF0YS1ob21lLWJvZHldJyxcbiAgICAgICAgdmlkZW9CbG9jazogJ1tkYXRhLXZpZGVvLXNjcm9sbF0nLFxuICAgICAgICB2aWRlbzogJ1tkYXRhLXZpZGVvLXNjcm9sbF0gW2RhdGEtdmlkZW9dJyxcbiAgICAgICAgcG9sYXJvaWQ6ICdbZGF0YS1wb2xhcm9pZF0nLFxuICAgICAgICByb29tS2V5U2VjdGlvbjogJ1tkYXRhLXJvb20ta2V5LXNlY3Rpb25dJyxcbiAgICAgICAgcm9vbUtleUhlYWRlcjogJ1tkYXRhLXJvb20ta2V5LWhlYWRlcl0nLFxuICAgICAgICByb29tS2V5VGl0bGU6ICdbZGF0YS1yb29tLWtleS10aXRsZXNdJyxcbiAgICAgICAgcm9vbUtleTogJ1tkYXRhLXJvb20ta2V5XScsXG4gICAgICAgIHByb2dyZXNzQmFyOiAnW2RhdGEtcHJvZ3Jlc3MtYmFyXScsXG4gICAgICAgIHByb2dyZXNzSGlnaGxpZ2h0OiAnW2RhdGEtcHJvZ3Jlc3MtaGlnaGxpZ2h0XScsXG4gICAgICAgIHByb2dyZXNzSW5kaWNlczogJ1tkYXRhLXByb2dyZXNzLWluZGV4XScsXG4gICAgICAgIHN0ZXBzOiAnW2RhdGEtcHJvZ3Jlc3Mtc3RlcHNdJyxcbiAgICAgICAgYXJ0aXN0TmFtZXM6ICdbZGF0YS1hcnRpc3QtbmFtZS1hbmltYXRpb25dJyxcbiAgICAgICAgc3RlcENvbnRhaW5lcjogJ1tkYXRhLXN0ZXAtY29udGFpbmVyXSdcbiAgICAgIH1cbiAgICB9KVxuICAgIFxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcbiAgICBcbiAgICB0aGlzLm1tID0gZ3NhcC5tYXRjaE1lZGlhKClcbiAgICB0aGlzLnBpbm5lZEhlaWdodCA9IHRoaXMuZWxlbWVudHMucm9vbUtleVNlY3Rpb24/IHRoaXMuZWxlbWVudHMucm9vbUtleVNlY3Rpb24ub2Zmc2V0SGVpZ2h0IDogMTAwXG4gICAgdGhpcy5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IGZhbHNlXG4gICAgdGhpcy5jdXJyZW50QWN0aXZlSW5kZXggPSAtMVxuXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zZXRVcFNjcm9sbEFuaW1hdGlvbnMoKVxuICB9XG5cbiAgYW5pbWF0ZUluZGV4SGlnaGxpZ2h0ZXIobmV3SW5kZXgpIHtcbiAgICBpZihuZXdJbmRleCAhPT0gdGhpcy5jdXJyZW50QWN0aXZlSW5kZXgpIHtcbiAgICAgIGxldCB5UG9zQ2FsYyA9IG5ld0luZGV4ICogMTAwXG4gICAgICBsZXQgeVBvcyA9IGAke3lQb3NDYWxjfSVgXG5cbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5wcm9ncmVzc0hpZ2hsaWdodCwgeyB5OiB5UG9zLCBkdXJhdGlvbjogMC40LCBlYXNlOiBcInBvd2VyMi5vdXRcIiB9KVxuICAgICAgdGhpcy5jdXJyZW50QWN0aXZlSW5kZXggPSBuZXdJbmRleFxuICAgIH1cbiAgfVxuXG4gIGhpZGVQcm9ncmVzc0JhcigpIHtcbiAgICBnc2FwLnRvKHRoaXMuZWxlbWVudHMucHJvZ3Jlc3NCYXIgLCB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgIGVhc2U6IFwicG93ZXIyLm91dFwiXG4gICAgfSlcblxuICAgIHRoaXMuaXNQcm9ncmVzc0JhclZpc2libGUgPSBmYWxzZVxuICB9XG5cbiAgc2hvd1Byb2dyZXNzQmFyKCkge1xuICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5wcm9ncmVzc0JhciAsIHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgZWFzZTogXCJwb3dlcjIub3V0XCJcbiAgICB9KVxuXG4gICAgdGhpcy5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IHRydWVcbiAgfVxuXG4gIHNldFVwU2Nyb2xsQW5pbWF0aW9ucygpIHtcbiAgICB0aGlzLnBvbGFyb2lkUGFyYWxsYXgoKVxuICAgIHRoaXMucm9vbUtleUFuaW1hdGlvbnMoKVxuICAgIHRoaXMuYXJ0aXN0U2VjdGlvbkFuaW1hdGlvbnMoKVxuICB9XG4gIFxuICBwb2xhcm9pZFBhcmFsbGF4KCkge1xuICAgIGlmKCF0aGlzLmVsZW1lbnRzLnBvbGFyb2lkKSByZXR1cm5cblxuICAgIHRoaXMuZWxlbWVudHMucG9sYXJvaWQuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xuICAgICAgZ3NhcC5mcm9tVG8oZWxlbWVudCwgXG4gICAgICAgIHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICAgIHRyaWdnZXI6IGVsZW1lbnQsXG4gICAgICAgICAgICBzdGFydDogJzUwJSBib3R0b20nLCAvLyBTdGFydCB0aGUgYW5pbWF0aW9uIHdoZW4gdGhlIHRvcCBvZiB0aGUgaGVyb0NvbnRlbnQgaGl0cyA5MCUgb2YgdGhlIHZpZXdwb3J0XG4gICAgICAgICAgICBzY3J1YjogZmFsc2UsXG4gICAgICAgICAgICBtYXJrZXJzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWFzZTogXCJwb3dlcjIub3V0XCIsXG4gICAgICAgICAgZHVyYXRpb246IDAuNlxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIGdzYXAuZnJvbVRvKGVsZW1lbnQsIFxuICAgICAgICB7XG4gICAgICAgICAgeTogXCIxMCVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgeTogXCItMjAlXCIsXG4gICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgdHJpZ2dlcjogZWxlbWVudCxcbiAgICAgICAgICAgIHN0YXJ0OiAnNSUgYm90dG9tJyxcbiAgICAgICAgICAgIHNjcnViOiB0cnVlLFxuICAgICAgICAgICAgbWFya2VyczogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH0pXG4gIH1cbiAgXG4gIHJvb21LZXlBbmltYXRpb25zKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy5yb29tS2V5IHx8ICF0aGlzLmVsZW1lbnRzLnN0ZXBzIHx8ICF0aGlzLmVsZW1lbnRzLnJvb21LZXlIZWFkZXIgfHwgIXRoaXMuZWxlbWVudHMuc3RlcENvbnRhaW5lciB8fCAhdGhpcy5lbGVtZW50cy5wcm9ncmVzc0JhcikgcmV0dXJuO1xuXG4gICAgbGV0IHRvdGFsU3RlcHNIZWlnaHQgPSB0aGlzLmVsZW1lbnRzLnN0ZXBzPyBBcnJheS5mcm9tKHRoaXMuZWxlbWVudHMuc3RlcHMpLnJlZHVjZSgodG90YWwsIHN0ZXApID0+IHRvdGFsICsgc3RlcC5vZmZzZXRIZWlnaHQsIDApIDogbnVsbDtcbiAgICBsZXQgYWRqdXN0ZWRQaW5EdXJhdGlvbiA9IHRvdGFsU3RlcHNIZWlnaHQgLSAodGhpcy5lbGVtZW50cy5yb29tS2V5Lm9mZnNldEhlaWdodCArICh0aGlzLmVsZW1lbnRzLnJvb21LZXkub2Zmc2V0SGVpZ2h0IC8gNCkpO1xuICAgIGxldCBzY3JvbGxPcHRpb25zID0ge1xuICAgICAgdHJpZ2dlcjogdGhpcy5lbGVtZW50cy5yb29tS2V5LFxuICAgICAgc3RhcnQ6IFwiY2VudGVyIGNlbnRlclwiLFxuICAgICAgZW5kOiBgKz0ke3RoaXMuZWxlbWVudHMuc3RlcHNbMF0ub2Zmc2V0SGVpZ2h0fWAsXG4gICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgIG9uRW50ZXI6ICgpID0+IGdzYXAuc2V0KHRoaXMuZWxlbWVudHMuc3RlcHMsIHsgb3BhY2l0eTogMCB9KVxuICAgIH1cblxuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudHMuc3RlcHMsIHsgb3BhY2l0eTogMCwgeTogNTAgfSlcbiAgICBnc2FwLnNldCh0aGlzLmVsZW1lbnRzLnByb2dyZXNzQmFyLCB7IG9wYWNpdHk6IDAgfSlcblxuICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgIGlkOiBcInJvb21LZXlQaW5cIixcbiAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMucm9vbUtleUhlYWRlcixcbiAgICAgIHN0YXJ0OiBcInRvcCB0b3BcIixcbiAgICAgIGVuZDogKCkgPT4gYCs9JHt0aGlzLmVsZW1lbnRzLnJvb21LZXkub2Zmc2V0SGVpZ2h0ICogMS41fWAsIC8vIEtlZXAgaXQgcGlubmVkIHdoaWxlIHJvb21LZXkgbW92ZXMgb3ZlclxuICAgICAgcGluOiB0cnVlLFxuICAgICAgcGluU3BhY2luZzogZmFsc2UsXG4gICAgICBzY3J1YjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLnJvb21LZXlIZWFkZXIsIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMucm9vbUtleSxcbiAgICAgICAgc3RhcnQ6IFwidG9wIDU1JVwiLCAvLyBCZWdpbiBmYWRlIHdoZW4gcm9vbUtleSBzdGFydHMgb3ZlcmxhcHBpbmdcbiAgICAgICAgZW5kOiBcInRvcCAzMCVcIiwgLy8gRnVsbHkgZmFkZWQgd2hlbiByb29tS2V5IGlzIGluIHRoZSBtaWRkbGVcbiAgICAgICAgc2NydWI6IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5tbS5hZGQoXCIobWF4LXdpZHRoOiA3NjdweClcIiwgKCkgPT4ge1xuICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLnJvb21LZXksXG4gICAgICAgIHN0YXJ0OiBcImNlbnRlciAzMCVcIixcbiAgICAgICAgZW5kOiBgKz0ke2FkanVzdGVkUGluRHVyYXRpb259YCxcbiAgICAgICAgcGluOiB0cnVlLFxuICAgICAgICBzY3J1YjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIC8vIDLvuI/ig6MgUGluIFN0ZXAgQ29udGFpbmVyIEFGVEVSIFJvb21LZXkgaXMgZG9uZVxuICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLnN0ZXBDb250YWluZXIsXG4gICAgICAgIHN0YXJ0OiBcImJvdHRvbSBib3R0b21cIixcbiAgICAgICAgZW5kOiBgKz0ke3RoaXMuZWxlbWVudHMuc3RlcHMubGVuZ3RoICogd2luZG93LmlubmVySGVpZ2h0fWAsXG4gICAgICAgIHBpbjogdHJ1ZSxcbiAgICAgICAgbWFya2VyczogdHJ1ZSxcbiAgICAgICAgcGluU3BhY2luZzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAvLyAz77iP4oOjIEhpZGUgQWxsIFN0ZXBzIEluaXRpYWxseVxuICAgICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50cy5zdGVwcywgeyBvcGFjaXR5OiAwLCBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB3aWR0aDogXCIxMDAlXCIgfSk7XG5cbiAgICAgIC8vIDTvuI/ig6MgU3RlcCBUcmFuc2l0aW9ucyAtIFNob3cgT25lIFN0ZXAgYXQgYSBUaW1lXG4gICAgICBsZXQgc3RlcFRsID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLnN0ZXBDb250YWluZXIsXG4gICAgICAgICAgc3RhcnQ6IFwidG9wIGNlbnRlclwiLFxuICAgICAgICAgIGVuZDogYCs9JHt0aGlzLmVsZW1lbnRzLnN0ZXBzLmxlbmd0aCAqIHdpbmRvdy5pbm5lckhlaWdodH1gLFxuICAgICAgICAgIHNjcnViOiB0cnVlLFxuICAgICAgICAgIHBpbjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5lbGVtZW50cy5zdGVwcy5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgICAgICBzdGVwVGwudG8oc3RlcCwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC44IH0pIC8vIFN0ZXAgZmFkZXMgaW5cbiAgICAgICAgICAgICAgLnRvKHN0ZXAsIHsgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuOCB9LCBgKz0xLjVgKTsgLy8gRGVsYXkgYmVmb3JlIGhpZGluZ1xuXG4gICAgICAgIC8vIOKchSBTdGVwIENvbnRyb2xzIFVwZGF0ZSBpbiBTeW5jIHdpdGggU3RlcHNcbiAgICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICAgIHRyaWdnZXI6IHN0ZXAsXG4gICAgICAgICAgc3RhcnQ6IFwidG9wIDYwJVwiLCAvLyBFbnN1cmUgc3RlcCBpcyBmdWxseSB2aXNpYmxlIGJlZm9yZSB1cGRhdGluZ1xuICAgICAgICAgIGVuZDogXCJ0b3AgNDAlXCIsXG4gICAgICAgICAgb25FbnRlcjogKCkgPT4ge1xuICAgICAgICAgICAgaWYoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5hbmltYXRlSW5kZXhIaWdobGlnaHRlcihpbmRleCk7IC8vIEhpZ2hsaWdodCB0aGUgY29ycmVzcG9uZGluZyBkb3QgZm9yIHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUluZGV4SGlnaGxpZ2h0ZXIoaW5kZXggLSAxKTsgLy8gSGlnaGxpZ2h0IHRoZSBjb3JyZXNwb25kaW5nIGRvdCBmb3IgdGhlIGN1cnJlbnQgc3RlcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25MZWF2ZUJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGlmKGluZGV4ID09PSAxKSB7XG4gICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUluZGV4SGlnaGxpZ2h0ZXIoaW5kZXggLSAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUluZGV4SGlnaGxpZ2h0ZXIoaW5kZXggLSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIDXvuI/ig6MgUm9vbUtleSBGbGlwIC0gS0VQVCBTQU1FIEFTIFlPVVIgQ09ERVxuICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICB0cmlnZ2VyOiB0aGlzLmVsZW1lbnRzLnN0ZXBzWzFdLCAvLyBTdGVwIDJcbiAgICAgICAgc3RhcnQ6IFwidG9wIGNlbnRlclwiLFxuICAgICAgICBvbkVudGVyOiAoKSA9PiB0aGlzLmVsZW1lbnRzLnJvb21LZXkuY2xhc3NMaXN0LmFkZChcImZsaXBcIiksXG4gICAgICAgIG9uTGVhdmVCYWNrOiAoKSA9PiB0aGlzLmVsZW1lbnRzLnJvb21LZXkuY2xhc3NMaXN0LnJlbW92ZShcImZsaXBcIilcbiAgICAgIH0pO1xuXG4gICAgICAvLyAvLyA277iP4oOjIFVucGluIFN0ZXAgQ29udGFpbmVyIGF0IHRoZSBFbmRcbiAgICAgIC8vIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgIC8vICAgdHJpZ2dlcjogdGhpcy5lbGVtZW50cy5zdGVwc1t0aGlzLmVsZW1lbnRzLnN0ZXBzLmxlbmd0aCAtIDFdLFxuICAgICAgLy8gICBzdGFydDogXCJib3R0b20gY2VudGVyXCIsXG4gICAgICAvLyAgIG9uRW50ZXI6ICgpID0+IGdzYXAuc2V0KHRoaXMuZWxlbWVudHMuc3RlcENvbnRhaW5lciwgeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH0pLFxuICAgICAgLy8gICBvbkxlYXZlQmFjazogKCkgPT4gZ3NhcC5zZXQodGhpcy5lbGVtZW50cy5zdGVwQ29udGFpbmVyLCB7IHBvc2l0aW9uOiBcImZpeGVkXCIgfSlcbiAgICAgIC8vIH0pO1xuXG4gICAgICAvLyA377iP4oOjIEVuc3VyZSBQcm9ncmVzcyBCYXIgU2hvd3MgTGlrZSBtaW4td2lkdGg6IDc2OHB4XG4gICAgICBTY3JvbGxUcmlnZ2VyLmNyZWF0ZSh7XG4gICAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMuc3RlcHNbMV0sXG4gICAgICAgIHN0YXJ0OiBcInRvcCBjZW50ZXJcIixcbiAgICAgICAgb25FbnRlcjogKCkgPT4gdGhpcy5zaG93UHJvZ3Jlc3NCYXIoKSxcbiAgICAgICAgb25MZWF2ZUJhY2s6ICgpID0+IHRoaXMuaGlkZVByb2dyZXNzQmFyKClcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIFxuICAgIHRoaXMubW0uYWRkKFwiKG1pbi13aWR0aDogNzY4cHgpXCIsICgpID0+IHtcbiAgICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgICAgdHJpZ2dlcjogdGhpcy5lbGVtZW50cy5yb29tS2V5LFxuICAgICAgICBzdGFydDogXCJjZW50ZXIgY2VudGVyXCIsXG4gICAgICAgIGVuZDogYCs9JHthZGp1c3RlZFBpbkR1cmF0aW9ufWAsXG4gICAgICAgIHBpbjogdHJ1ZSxcbiAgICAgICAgc2NydWI6IHRydWVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBnc2FwLnRvKHRoaXMuZWxlbWVudHMucm9vbUtleSwge1xuICAgICAgICB4OiBcIjg1JVwiLFxuICAgICAgICByb3RhdGU6IFwiNWRlZ1wiLFxuICAgICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjogc2Nyb2xsT3B0aW9uc1xuICAgICAgfSlcblxuICAgICAgLy8gU3RlcCBvcGFjaXR5IHNob3VsZCBiZSBzY3JvbGwtYmFzZWQgKGZhZGUgaW4vb3V0IGJhc2VkIG9uIHNjcm9sbClcbiAgICAgIHRoaXMuZWxlbWVudHMuc3RlcHMuZm9yRWFjaCgoc3RlcCwgaW5kZXgpID0+IHsgXG4gICAgICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgICAgICB0cmlnZ2VyOiBzdGVwLFxuICAgICAgICAgIHN0YXJ0OiBcInRvcCA3MCVcIixcbiAgICAgICAgICBlbmQ6IFwidG9wIDUwJVwiLFxuICAgICAgICAgIHNjcnViOiB0cnVlLFxuICAgICAgICAgIHRvZ2dsZUFjdGlvbnM6IFwicGxheSBub25lIG5vbmUgcmV2ZXJzZVwiLFxuICAgICAgICAgIG9uRW50ZXI6ICgpID0+IGdzYXAudG8oc3RlcCwgeyBvcGFjaXR5OiAxLCB5OiAwLCBkdXJhdGlvbjogMC4zIH0pLFxuICAgICAgICAgIG9uTGVhdmVCYWNrOiAoKSA9PiBnc2FwLnRvKHN0ZXAsIHsgb3BhY2l0eTogMCwgeTogNTAsIGR1cmF0aW9uOiAwLjMgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gKipGbGlwIHJvb20ta2V5IHdoZW4gdGhlIHNlY29uZCBzdGVwIGFwcGVhcnMqKlxuICAgICAgICBpZiAoaW5kZXggPT09IDIpIHtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLmNyZWF0ZSh7XG4gICAgICAgICAgICB0cmlnZ2VyOiBzdGVwLFxuICAgICAgICAgICAgc3RhcnQ6IFwidG9wIGNlbnRlclwiLFxuICAgICAgICAgICAgb25FbnRlcjogKCkgPT4gdGhpcy5lbGVtZW50cy5yb29tS2V5LmNsYXNzTGlzdC5hZGQoXCJmbGlwXCIpLFxuICAgICAgICAgICAgb25MZWF2ZUJhY2s6ICgpID0+IHRoaXMuZWxlbWVudHMucm9vbUtleS5jbGFzc0xpc3QucmVtb3ZlKFwiZmxpcFwiKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICAgIHRyaWdnZXI6IHN0ZXAsXG4gICAgICAgICAgc3RhcnQ6IFwidG9wIDUwJVwiLCAvLyBXaGVuIHRoZSBzdGVwIHJlYWNoZXMgNTAlIG9mIHRoZSB2aWV3cG9ydFxuICAgICAgICAgIGVuZDogXCJ0b3AgMzAlXCIsIC8vIFdoZW4gdGhlIHN0ZXAgaXMgYWxtb3N0IGZ1bGx5IGluIHZpZXdcbiAgICAgICAgICBvbkVudGVyOiAoKSA9PiB7XG4gICAgICAgICAgICBpZihpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVJbmRleEhpZ2hsaWdodGVyKGluZGV4KTsgLy8gSGlnaGxpZ2h0IHRoZSBjb3JyZXNwb25kaW5nIGRvdCBmb3IgdGhlIGN1cnJlbnQgc3RlcFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5hbmltYXRlSW5kZXhIaWdobGlnaHRlcihpbmRleCAtIDEpOyAvLyBIaWdobGlnaHQgdGhlIGNvcnJlc3BvbmRpbmcgZG90IGZvciB0aGUgY3VycmVudCBzdGVwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkxlYXZlQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgaWYoaW5kZXggPT09IDEpIHtcbiAgICAgICAgICAgICAgdGhpcy5hbmltYXRlSW5kZXhIaWdobGlnaHRlcihpbmRleCAtIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5hbmltYXRlSW5kZXhIaWdobGlnaHRlcihpbmRleCAtIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBQaW4gcHJvZ3Jlc3MgYmFyIGF0IGFsbCB0aW1lcyAob25seSBzaG93L2hpZGUpXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgdHJpZ2dlcjogdGhpcy5lbGVtZW50cy5yb29tS2V5U2VjdGlvbixcbiAgICAgIHN0YXJ0OiBcInRvcCB0b3BcIixcbiAgICAgIGVuZDogXCJib3R0b20gYm90dG9tXCIsXG4gICAgICBwaW46IHRoaXMuZWxlbWVudHMucHJvZ3Jlc3NCYXJcbiAgICB9KVxuXG4gICAgLy8gU2hvdyBwcm9ncmVzcyBiYXIgd2hlbiByb29tS2V5IGlzIGZ1bGx5IGluIHZpZXdcblxuICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMuc3RlcHNbMV0sXG4gICAgICBzdGFydDogXCJ0b3AgY2VudGVyXCIsIC8vIFdoZW4gdGhlIGZpcnN0IHN0ZXAgcmVhY2hlcyB0aGUgY2VudGVyIG9mIHRoZSB2aWV3cG9ydFxuICAgICAgb25FbnRlcjogKCkgPT4gdGhpcy5zaG93UHJvZ3Jlc3NCYXIoKSxcbiAgICAgIG9uTGVhdmVCYWNrOiAoKSA9PiB0aGlzLmhpZGVQcm9ncmVzc0JhcigpLFxuICAgICAgbWFya2VyczogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGFydGlzdFNlY3Rpb25BbmltYXRpb25zKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy52aWRlb0Jsb2NrIHx8ICF0aGlzLmVsZW1lbnRzLnZpZGVvIHx8ICF0aGlzLmVsZW1lbnRzLmFydGlzdE5hbWVzKSByZXR1cm47XG5cbiAgICBnc2FwLmZyb21Ubyh0aGlzLmVsZW1lbnRzLnZpZGVvQmxvY2ssIFxuICAgICAgeyBjbGlwUGF0aDogXCJwb2x5Z29uKDUlIDUlLCA5NSUgNSUsIDk1JSA5NSUsIDUlIDk1JSlcIn0sXG4gICAgICB7XG4gICAgICAgIGNsaXBQYXRoOiBcInBvbHlnb24oMCUgMCUsIDEwMCUgMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMudmlkZW9CbG9jayxcbiAgICAgICAgICBzdGFydDogJzUlIGJvdHRvbScsXG4gICAgICAgICAgc2NydWI6IHRydWUsXG4gICAgICAgICAgbWFya2VyczogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZWFzZTogXCJwb3dlcjIub3V0XCIsXG4gICAgICB9XG4gICAgKVxuICAgIGdzYXAuZnJvbVRvKHRoaXMuZWxlbWVudHMudmlkZW8sIFxuICAgICAge1xuICAgICAgICBzY2FsZTogMS41XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgIHRyaWdnZXI6IHRoaXMuZWxlbWVudHMudmlkZW9CbG9jayxcbiAgICAgICAgICBzdGFydDogJzUlIGJvdHRvbScsIC8vIFN0YXJ0IHRoZSBhbmltYXRpb24gd2hlbiB0aGUgdG9wIG9mIHRoZSBoZXJvQ29udGVudCBoaXRzIDkwJSBvZiB0aGUgdmlld3BvcnRcbiAgICAgICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgICAgICBtYXJrZXJzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBlYXNlOiBcInBvd2VyMi5vdXRcIixcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLmVsZW1lbnRzLmFydGlzdE5hbWVzLmZvckVhY2goKG5hbWUsIGkpID0+IHtcbiAgICAgIGxldCBnZXRWYWwgPSBuYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1hcnRpc3QtbmFtZS1hbmltYXRpb24nKVxuICAgICAgbGV0IHN0YXJ0WHBvcyA9IGdldFZhbCA9PT0gXCJsZWZ0XCIgPyBcIjEwJVwiOiBcIi0xMCVcIlxuICAgICAgXG4gICAgICBnc2FwLmZyb21UbyhuYW1lLFxuICAgICAgICB7IFxuICAgICAgICAgIHg6IHN0YXJ0WHBvcyxcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIGVhc2U6IFwicG93ZXIyLm91dFwiLFxuICAgICAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgdHJpZ2dlcjogbmFtZSxcbiAgICAgICAgICAgIHN0YXJ0OiBcInRvcCBib3R0b21cIixcbiAgICAgICAgICAgIG1hcmtlcnM6IGZhbHNlLFxuICAgICAgICAgICAgc2NydWI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcblxuICAgIH0pXG4gIH1cbn0iLCJpbXBvcnQgTGVuaXMgZnJvbSAnbGVuaXMnXG5cbmV4cG9ydCBjb25zdCBzY3JvbGwgPSBuZXcgTGVuaXMoe1xuICBhdXRvUmFmOiB0cnVlLFxuICBkdXJhdGlvbjogMVxufSk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ3JlYXRlKCkge1xuICB0aGlzLmVsZW1lbnRzID0ge31cbiAgZm9yKGNvbnN0IG9iaiBpbiB0aGlzLnNlbGVjdG9ycykge1xuICAgIGxldCBlbCA9IHRoaXMuc2VsZWN0b3JzW29ial1cbiAgICBpZihlbCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCB8fCBcbiAgICAgIGVsIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8IEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzW29ial0gPSBlbFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHNbb2JqXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXG5cbiAgICAgIGlmKHRoaXMuZWxlbWVudHNbb2JqXS5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW29ial0gPSBudWxsXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudHNbb2JqXS5sZW5ndGggPT0gMSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW29ial0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMy4wXG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnc2FwLCBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgZ2V0VW5pdCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX2NoZWNrUGx1Z2luLCBfcmVwbGFjZVJhbmRvbSwgX3BsdWdpbnMsIEdTQ2FjaGUsIFByb3BUd2VlbiwgX2NvbmZpZywgX3RpY2tlciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSAvL2ZvciB0aGUgY29tbWVudGVkLW91dCBjbGFzc05hbWUgZmVhdHVyZS5cbn0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5cbnZhciBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsZW1lbnQsXG4gICAgX3BsdWdpbkluaXR0ZWQsXG4gICAgX3RlbXBEaXYsXG4gICAgX3RlbXBEaXZTdHlsZXIsXG4gICAgX3JlY2VudFNldHRlclBsdWdpbixcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3BzID0ge30sXG4gICAgX1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICBfYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9ob3Jpem9udGFsRXhwID0gLyhsZWZ0fHJpZ2h0fHdpZHRofG1hcmdpbnxwYWRkaW5nfHgpL2ksXG4gICAgX2NvbXBsZXhFeHAgPSAvW1xccyxcXChdXFxTLyxcbiAgICBfcHJvcGVydHlBbGlhc2VzID0ge1xuICBhdXRvQWxwaGE6IFwib3BhY2l0eSx2aXNpYmlsaXR5XCIsXG4gIHNjYWxlOiBcInNjYWxlWCxzY2FsZVlcIixcbiAgYWxwaGE6IFwib3BhY2l0eVwiXG59LFxuICAgIF9yZW5kZXJDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wV2l0aEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wV2l0aEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID09PSAxID8gZGF0YS5lIDogTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51IDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgLy9pZiB1bml0cyBjaGFuZ2UsIHdlIG5lZWQgYSB3YXkgdG8gcmVuZGVyIHRoZSBvcmlnaW5hbCB1bml0L3ZhbHVlIHdoZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nIChyYXRpbzowKVxuX3JlbmRlclJvdW5kZWRDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlclJvdW5kZWRDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEucyArIGRhdGEuYyAqIHJhdGlvO1xuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgfn4odmFsdWUgKyAodmFsdWUgPCAwID8gLS41IDogLjUpKSArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyAhPT0gMSA/IGRhdGEuYiA6IGRhdGEuZSwgZGF0YSk7XG59LFxuICAgIF9zZXR0ZXJDU1NTdHlsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NTdHlsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NQcm9wKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlID0gZnVuY3Rpb24gX3NldHRlclNjYWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAuc2NhbGVYID0gdGFyZ2V0Ll9nc2FwLnNjYWxlWSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclNjYWxlV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZS5zY2FsZVggPSBjYWNoZS5zY2FsZVkgPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGVbcHJvcGVydHldID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcCA9IFwidHJhbnNmb3JtXCIsXG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCIsXG4gICAgX3NhdmVTdHlsZSA9IGZ1bmN0aW9uIF9zYXZlU3R5bGUocHJvcGVydHksIGlzTm90Q1NTKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcblxuICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHN0eWxlKSB7XG4gICAgdGhpcy50Zm0gPSB0aGlzLnRmbSB8fCB7fTtcblxuICAgIGlmIChwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eTtcbiAgICAgIH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSA/IHByb3BlcnR5LnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy50Zm1bYV0gPSBfZ2V0KHRhcmdldCwgYSk7XG4gICAgICB9KSA6IHRoaXMudGZtW3Byb3BlcnR5XSA9IGNhY2hlLnggPyBjYWNoZVtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpOyAvLyBub3RlOiBzY2FsZSB3b3VsZCBtYXAgdG8gXCJzY2FsZVgsc2NhbGVZXCIsIHRodXMgd2UgbG9vcCBhbmQgYXBwbHkgdGhlbSBib3RoLlxuXG4gICAgICBwcm9wZXJ0eSA9PT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRoaXMudGZtLnpPcmlnaW4gPSBjYWNoZS56T3JpZ2luKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF9wcm9wZXJ0eUFsaWFzZXMudHJhbnNmb3JtLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBfc2F2ZVN0eWxlLmNhbGwoX3RoaXMsIHAsIGlzTm90Q1NTKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmluZGV4T2YoX3RyYW5zZm9ybVByb3ApID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICB0aGlzLnN2Z28gPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpO1xuICAgICAgdGhpcy5wcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBpc05vdENTUywgXCJcIik7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgfVxuXG4gIChzdHlsZSB8fCBpc05vdENTUykgJiYgdGhpcy5wcm9wcy5wdXNoKHByb3BlcnR5LCBpc05vdENTUywgc3R5bGVbcHJvcGVydHldKTtcbn0sXG4gICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2NhbGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gIH1cbn0sXG4gICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgaSxcbiAgICAgIHA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgLy8gc3RvcmVkIGxpa2UgdGhpczogcHJvcGVydHksIGlzTm90Q1NTLCB2YWx1ZVxuICAgIGlmICghcHJvcHNbaSArIDFdKSB7XG4gICAgICBwcm9wc1tpICsgMl0gPyBzdHlsZVtwcm9wc1tpXV0gPSBwcm9wc1tpICsgMl0gOiBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wc1tpXS5zdWJzdHIoMCwgMikgPT09IFwiLS1cIiA/IHByb3BzW2ldIDogcHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIGlmIChwcm9wc1tpICsgMV0gPT09IDIpIHtcbiAgICAgIC8vIG5vbi1DU1MgdmFsdWUgKGZ1bmN0aW9uLWJhc2VkKVxuICAgICAgdGFyZ2V0W3Byb3BzW2ldXShwcm9wc1tpICsgMl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBub24tQ1NTIHZhbHVlIChub3QgZnVuY3Rpb24tYmFzZWQpXG4gICAgICB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoKCFpIHx8ICFpLmlzU3RhcnQpICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBpZiAoY2FjaGUuek9yaWdpbiAmJiBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdICs9IFwiIFwiICsgY2FjaGUuek9yaWdpbiArIFwicHhcIjsgLy8gc2luY2Ugd2UncmUgdW5jYWNoaW5nLCB3ZSBtdXN0IHB1dCB0aGUgek9yaWdpbiBiYWNrIGludG8gdGhlIHRyYW5zZm9ybU9yaWdpbiBzbyB0aGF0IHdlIGNhbiBwdWxsIGl0IG91dCBhY2N1cmF0ZWx5IHdoZW4gd2UgcGFyc2UgYWdhaW4uIE90aGVyd2lzZSwgd2UnZCBsb3NlIHRoZSB6IHBvcnRpb24gb2YgdGhlIG9yaWdpbiBzaW5jZSB3ZSBleHRyYWN0IGl0IHRvIHByb3RlY3QgZnJvbSBTYWZhcmkgYnVncy5cblxuICAgICAgICBjYWNoZS56T3JpZ2luID0gMDtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpOyAvLyBqdXN0IG1ha2Ugc3VyZSB0aGVyZSdzIGEgX2dzYXAgY2FjaGUgZGVmaW5lZCBiZWNhdXNlIHdlIHJlYWQgZnJvbSBpdCBpbiBfc2F2ZVN0eWxlKCkgYW5kIGl0J3MgbW9yZSBlZmZpY2llbnQgdG8ganVzdCBjaGVjayBpdCBoZXJlIG9uY2UuXG5cbiAgcHJvcGVydGllcyAmJiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7IC8vIG1ha2Ugc3VyZSBpdCdzIGEgRE9NIG5vZGUgdG9vLlxuXG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUgJiYgZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldFJlcGFyZW50ZWRDbG9uZUJCb3ggPSBmdW5jdGlvbiBfZ2V0UmVwYXJlbnRlZENsb25lQkJveCh0YXJnZXQpIHtcbiAgLy93b3JrcyBhcm91bmQgaXNzdWVzIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgdGhhdCBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IGdldEJCb3goKSBvbiBTVkcgZWxlbWVudHMgaW5zaWRlIGEgPGRlZnM+IGVsZW1lbnQgYW5kL29yIDxtYXNrPi4gV2UgdHJ5IGNyZWF0aW5nIGFuIFNWRywgYWRkaW5nIGl0IHRvIHRoZSBkb2N1bWVudEVsZW1lbnQgYW5kIHRvc3MgdGhlIGVsZW1lbnQgaW4gdGhlcmUgc28gdGhhdCBpdCdzIGRlZmluaXRlbHkgcGFydCBvZiB0aGUgcmVuZGVyaW5nIHRyZWUsIHRoZW4gZ3JhYiB0aGUgYmJveCBhbmQgaWYgaXQgd29ya3MsIHdlIGFjdHVhbGx5IHN3YXAgb3V0IHRoZSBvcmlnaW5hbCBnZXRCQm94KCkgbWV0aG9kIGZvciBvdXIgb3duIHRoYXQgZG9lcyB0aGVzZSBleHRyYSBzdGVwcyB3aGVuZXZlciBnZXRCQm94IGlzIG5lZWRlZC4gVGhpcyBoZWxwcyBlbnN1cmUgdGhhdCBwZXJmb3JtYW5jZSBpcyBvcHRpbWFsIChvbmx5IGRvIGFsbCB0aGVzZSBleHRyYSBzdGVwcyB3aGVuIGFic29sdXRlbHkgbmVjZXNzYXJ5Li4ubW9zdCBlbGVtZW50cyBkb24ndCBuZWVkIGl0KS5cbiAgdmFyIG93bmVyID0gdGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCxcbiAgICAgIHN2ZyA9IF9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIG93bmVyICYmIG93bmVyLmdldEF0dHJpYnV0ZShcInhtbG5zXCIpIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiksXG4gICAgICBjbG9uZSA9IHRhcmdldC5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICBiYm94O1xuXG4gIGNsb25lLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIHN2Zy5hcHBlbmRDaGlsZChjbG9uZSk7XG5cbiAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3ZnKTtcblxuICB0cnkge1xuICAgIGJib3ggPSBjbG9uZS5nZXRCQm94KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgc3ZnLnJlbW92ZUNoaWxkKGNsb25lKTtcblxuICBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZChzdmcpO1xuXG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHMsIGNsb25lZDtcblxuICB0cnkge1xuICAgIGJvdW5kcyA9IHRhcmdldC5nZXRCQm94KCk7IC8vRmlyZWZveCB0aHJvd3MgZXJyb3JzIGlmIHlvdSB0cnkgY2FsbGluZyBnZXRCQm94KCkgb24gYW4gU1ZHIGVsZW1lbnQgdGhhdCdzIG5vdCByZW5kZXJlZCAobGlrZSBpbiBhIDxzeW1ib2w+IG9yIDxkZWZzPikuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYxMjExOFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGJvdW5kcyA9IF9nZXRSZXBhcmVudGVkQ2xvbmVCQm94KHRhcmdldCk7XG4gICAgY2xvbmVkID0gMTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IGNsb25lZCB8fCAoYm91bmRzID0gX2dldFJlcGFyZW50ZWRDbG9uZUJCb3godGFyZ2V0KSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgZmlyc3QyQ2hhcnM7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGZpcnN0MkNoYXJzID0gcHJvcGVydHkuc3Vic3RyKDAsIDIpO1xuXG4gICAgICBpZiAoZmlyc3QyQ2hhcnMgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KGZpcnN0MkNoYXJzID09PSBcIi0tXCIgPyBwcm9wZXJ0eSA6IHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gdW5pdCAhPT0gXCJyZW1cIiAmJiB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodG9QZXJjZW50ICYmIChwcm9wZXJ0eSA9PT0gXCJoZWlnaHRcIiB8fCBwcm9wZXJ0eSA9PT0gXCJ3aWR0aFwiKSkge1xuICAgICAgLy8gaWYgd2UncmUgZGVhbGluZyB3aXRoIHdpZHRoL2hlaWdodCB0aGF0J3MgaW5zaWRlIGEgY29udGFpbmVyIHdpdGggcGFkZGluZyBhbmQvb3IgaXQncyBhIGZsZXhib3gvZ3JpZCBjb250YWluZXIsIHdlIG11c3QgYXBwbHkgaXQgdG8gdGhlIHRhcmdldCBpdHNlbGYgcmF0aGVyIHRoYW4gdGhlIF90ZW1wRGl2IGluIG9yZGVyIHRvIGVuc3VyZSBjb21wbGV0ZSBhY2N1cmFjeSwgZmFjdG9yaW5nIGluIHRoZSBwYXJlbnQncyBwYWRkaW5nLlxuICAgICAgdmFyIHYgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuICAgICAgdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IGFtb3VudCArIHVuaXQ7XG4gICAgICBweCA9IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgICAgdiA/IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2IDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICAgIHBhcmVudCA9PT0gdGFyZ2V0ICYmIChzdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCIpOyAvLyBsaWtlIGZvciBib3JkZXJSYWRpdXMsIGlmIGl0J3MgYSAlIHdlIG11c3QgaGF2ZSBpdCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0IGl0c2VsZiBidXQgdGhhdCBtYXkgbm90IGhhdmUgcG9zaXRpb246IHJlbGF0aXZlIG9yIHBvc2l0aW9uOiBhYnNvbHV0ZSBpbiB3aGljaCBjYXNlIGl0J2QgZ28gdXAgdGhlIGNoYWluIHVudGlsIGl0IGZpbmRzIGl0cyBvZmZzZXRQYXJlbnQgKGJhZCkuIHBvc2l0aW9uOiBzdGF0aWMgcHJvdGVjdHMgYWdhaW5zdCB0aGF0LlxuXG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIH1cblxuICAgIGlmIChob3Jpem9udGFsICYmIHRvUGVyY2VudCkge1xuICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUocGFyZW50KTtcbiAgICAgIGNhY2hlLnRpbWUgPSBfdGlja2VyLnRpbWU7XG4gICAgICBjYWNoZS53aWR0aCA9IHBhcmVudFttZWFzdXJlUHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfcm91bmQodG9QaXhlbHMgPyBweCAqIGN1clZhbHVlIC8gYW1vdW50IDogcHggJiYgY3VyVmFsdWUgPyBhbW91bnQgLyBweCAqIGN1clZhbHVlIDogMCk7XG59LFxuICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgdmFyIHZhbHVlO1xuICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICBpZiAocHJvcGVydHkgaW4gX3Byb3BlcnR5QWxpYXNlcyAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoXCIsXCIpKSB7XG4gICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnNwbGl0KFwiLFwiKVswXTtcbiAgICB9XG4gIH1cblxuICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHZhbHVlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSk7XG4gICAgdmFsdWUgPSBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IHZhbHVlW3Byb3BlcnR5XSA6IHZhbHVlLnN2ZyA/IHZhbHVlLm9yaWdpbiA6IF9maXJzdFR3b09ubHkoX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkpICsgXCIgXCIgKyB2YWx1ZS56T3JpZ2luICsgXCJweFwiO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09IFwiYXV0b1wiIHx8IHVuY2FjaGUgfHwgfih2YWx1ZSArIFwiXCIpLmluZGV4T2YoXCJjYWxjKFwiKSkge1xuICAgICAgdmFsdWUgPSBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSAmJiBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB8fCBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgKHByb3BlcnR5ID09PSBcIm9wYWNpdHlcIiA/IDEgOiAwKTsgLy8gbm90ZTogc29tZSBicm93c2VycywgbGlrZSBGaXJlZm94LCBkb24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSEgSW5zdGVhZCwgaXQgb25seSByZXBvcnRzIGV2ZXJ5IGNvcm5lciBsaWtlICBib3JkZXJUb3BMZWZ0UmFkaXVzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuaXQgJiYgIX4odmFsdWUgKyBcIlwiKS50cmltKCkuaW5kZXhPZihcIiBcIikgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkgKyB1bml0IDogdmFsdWU7XG59LFxuICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcgPSBmdW5jdGlvbiBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCkge1xuICAvLyBub3RlOiB3ZSBjYWxsIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbChwbHVnaW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0ID09PSBcIm5vbmVcIikge1xuICAgIC8vIHNvbWUgYnJvd3NlcnMgbGlrZSBTYWZhcmkgYWN0dWFsbHkgUFJFRkVSIHRoZSBwcmVmaXhlZCBwcm9wZXJ0eSBhbmQgbWlzLXJlcG9ydCB0aGUgdW5wcmVmaXhlZCB2YWx1ZSBsaWtlIGNsaXBQYXRoIChCVUcpLiBJbiBvdGhlciB3b3JkcywgZXZlbiB0aG91Z2ggY2xpcFBhdGggZXhpc3RzIGluIHRoZSBzdHlsZSAoXCJjbGlwUGF0aFwiIGluIHRhcmdldC5zdHlsZSkgYW5kIGl0J3Mgc2V0IGluIHRoZSBDU1MgcHJvcGVybHkgKGFsb25nIHdpdGggLXdlYmtpdC1jbGlwLXBhdGgpLCBTYWZhcmkgcmVwb3J0cyBjbGlwUGF0aCBhcyBcIm5vbmVcIiB3aGVyZWFzIFdlYmtpdENsaXBQYXRoIHJlcG9ydHMgYWNjdXJhdGVseSBsaWtlIFwiZWxsaXBzZSgxMDAlIDAlIGF0IDUwJSAwJSlcIiwgc28gaW4gdGhpcyBjYXNlIHdlIG11c3QgU1dJVENIIHRvIHVzaW5nIHRoZSBwcmVmaXhlZCBwcm9wZXJ0eSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzI0NTgzLWhvdy10by1yZXR1cm4tY29sb3JzLXRoYXQtaS1oYWQtYWZ0ZXItcmV2ZXJzZS9cbiAgICB9XG4gIH1cblxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgYSxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0VmFsdWVzLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBjb2xvcixcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgZW5kVW5pdCxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFZhbHVlcztcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvLyBlbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZC5zdWJzdHJpbmcoMCwgNikgPT09IFwidmFyKC0tXCIpIHtcbiAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIGVuZC5zdWJzdHJpbmcoNCwgZW5kLmluZGV4T2YoXCIpXCIpKSk7XG4gIH1cblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcF07XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHN0YXJ0VmFsdWUgPyB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydFZhbHVlIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiAhdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NS4gTm90ZTogcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIHJlcG9ydCBhIG51bGwgb2Zmc2V0UGFyZW50IGJ1dCB0aGV5IGNvdWxkIGFsc28gYmUgaW52aXNpYmxlIGJlY2F1c2UgdGhleSdyZSBpbiBhbiBhbmNlc3RvciB3aXRoIGRpc3BsYXk6IG5vbmUsIHNvIHdlIGNoZWNrIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLiBXZSBvbmx5IHdhbnQgdG8gYWx0ZXIgdGhlIERPTSBpZiB3ZSBhYnNvbHV0ZWx5IGhhdmUgdG8gYmVjYXVzZSBpdCBjYW4gY2F1c2UgaWZyYW1lIGNvbnRlbnQgdG8gcmVsb2FkLCBsaWtlIGEgVmltZW8gdmlkZW8uXG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7IC8vIGlmICghKFwieE9yaWdpblwiIGluIGNhY2hlKSAmJiAoeE9yaWdpbiB8fCB5T3JpZ2luKSkgeyAvLyBhZGRlZCBpbiAzLjEyLjMsIHJldmVydGVkIGluIDMuMTIuNDsgcmVxdWlyZXMgbW9yZSBleHBsb3JhdGlvblxuICAgIC8vIFx0eE9yaWdpbiAtPSBib3VuZHMueDtcbiAgICAvLyBcdHlPcmlnaW4gLT0gYm91bmRzLnk7XG4gICAgLy8gfVxuICB9IGVsc2UgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXggJiYgKGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYykpIHtcbiAgICAvL2lmIGl0J3MgemVybyAobGlrZSBpZiBzY2FsZVggYW5kIHNjYWxlWSBhcmUgemVybyksIHNraXAgaXQgdG8gYXZvaWQgZXJyb3JzIHdpdGggZGl2aWRpbmcgYnkgemVyby5cbiAgICB4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArIChjICogdHkgLSBkICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHhPcmlnaW4gPSB4O1xuICAgIHlPcmlnaW4gPSB5OyAvLyB0aGVvcnk6IHdlIG9ubHkgaGFkIHRvIGRvIHRoaXMgZm9yIHNtb290aGluZyBhbmQgaXQgYXNzdW1lcyB0aGF0IHRoZSBwcmV2aW91cyBvbmUgd2FzIG5vdCBvcmlnaW5Jc0Fic29sdXRlLlxuICB9XG5cbiAgaWYgKHNtb290aCB8fCBzbW9vdGggIT09IGZhbHNlICYmIGNhY2hlLnNtb290aCkge1xuICAgIHR4ID0geE9yaWdpbiAtIHhPcmlnaW5PbGQ7XG4gICAgdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcbiAgICBjYWNoZS54T2Zmc2V0ID0geE9mZnNldE9sZCArICh0eCAqIGEgKyB0eSAqIGMpIC0gdHg7XG4gICAgY2FjaGUueU9mZnNldCA9IHlPZmZzZXRPbGQgKyAodHggKiBiICsgdHkgKiBkKSAtIHR5O1xuICB9IGVsc2Uge1xuICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGNhY2hlLnhPcmlnaW4gPSB4T3JpZ2luO1xuICBjYWNoZS55T3JpZ2luID0geU9yaWdpbjtcbiAgY2FjaGUuc21vb3RoID0gISFzbW9vdGg7XG4gIGNhY2hlLm9yaWdpbiA9IG9yaWdpbjtcbiAgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSA9ICEhb3JpZ2luSXNBYnNvbHV0ZTtcbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiMHB4IDBweFwiOyAvL290aGVyd2lzZSwgaWYgc29tZW9uZSBzZXRzICBhbiBvcmlnaW4gdmlhIENTUywgaXQgd2lsbCBsaWtlbHkgaW50ZXJmZXJlIHdpdGggdGhlIFNWRyB0cmFuc2Zvcm0gYXR0cmlidXRlIG9uZXMgKGJlY2F1c2UgcmVtZW1iZXIsIHdlJ3JlIGJha2luZyB0aGUgb3JpZ2luIGludG8gdGhlIG1hdHJpeCgpIHZhbHVlKS5cblxuICBpZiAocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9yaWdpblwiLCB4T3JpZ2luT2xkLCB4T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T3JpZ2luXCIsIHlPcmlnaW5PbGQsIHlPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPZmZzZXRcIiwgeE9mZnNldE9sZCwgY2FjaGUueE9mZnNldCk7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9mZnNldFwiLCB5T2Zmc2V0T2xkLCBjYWNoZS55T2Zmc2V0KTtcbiAgfVxuXG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgeE9yaWdpbiArIFwiIFwiICsgeU9yaWdpbik7XG59LFxuICAgIF9wYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IG5ldyBHU0NhY2hlKHRhcmdldCk7XG5cbiAgaWYgKFwieFwiIGluIGNhY2hlICYmICF1bmNhY2hlICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgaW52ZXJ0ZWRTY2FsZVggPSBjYWNoZS5zY2FsZVggPCAwLFxuICAgICAgcHggPSBcInB4XCIsXG4gICAgICBkZWcgPSBcImRlZ1wiLFxuICAgICAgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG5cbiAgaWYgKGNzLnRyYW5zbGF0ZSkge1xuICAgIC8vIGFjY29tbW9kYXRlIGluZGVwZW5kZW50IHRyYW5zZm9ybXMgYnkgY29tYmluaW5nIHRoZW0gaW50byBub3JtYWwgb25lcy5cbiAgICBpZiAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiB8fCBjcy5zY2FsZSAhPT0gXCJub25lXCIgfHwgY3Mucm90YXRlICE9PSBcIm5vbmVcIikge1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgPyBcInRyYW5zbGF0ZTNkKFwiICsgKGNzLnRyYW5zbGF0ZSArIFwiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwgMykuam9pbihcIiwgXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3Mucm90YXRlICE9PSBcIm5vbmVcIiA/IFwicm90YXRlKFwiICsgY3Mucm90YXRlICsgXCIpIFwiIDogXCJcIikgKyAoY3Muc2NhbGUgIT09IFwibm9uZVwiID8gXCJzY2FsZShcIiArIGNzLnNjYWxlLnNwbGl0KFwiIFwiKS5qb2luKFwiLFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJub25lXCIgPyBjc1tfdHJhbnNmb3JtUHJvcF0gOiBcIlwiKTtcbiAgICB9XG5cbiAgICBzdHlsZS5zY2FsZSA9IHN0eWxlLnJvdGF0ZSA9IHN0eWxlLnRyYW5zbGF0ZSA9IFwibm9uZVwiO1xuICB9XG5cbiAgbWF0cml4ID0gX2dldE1hdHJpeCh0YXJnZXQsIGNhY2hlLnN2Zyk7XG5cbiAgaWYgKGNhY2hlLnN2Zykge1xuICAgIGlmIChjYWNoZS51bmNhY2hlKSB7XG4gICAgICAvLyBpZiBjYWNoZS51bmNhY2hlIGlzIHRydWUgKGFuZCBtYXliZSBpZiBvcmlnaW4gaXMgMCwwKSwgd2UgbmVlZCB0byBzZXQgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAoY2FjaGUueE9yaWdpbiAtIGJib3gueCkgKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSBiYm94LnkpICsgXCJweFwiLiBQcmV2aW91c2x5IHdlIGxldCB0aGUgZGF0YS1zdmctb3JpZ2luIHN0YXkgaW5zdGVhZCwgYnV0IHdoZW4gaW50cm9kdWNpbmcgcmV2ZXJ0KCksIGl0IGNvbXBsaWNhdGVkIHRoaW5ncy5cbiAgICAgIHQyID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgIG9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gLSB0Mi54ICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gdDIueSkgKyBcInB4XCI7XG4gICAgICB0MSA9IFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQxID0gIXVuY2FjaGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTsgLy8gIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuICAgIH1cblxuICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIHQxIHx8IG9yaWdpbiwgISF0MSB8fCBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlLCBjYWNoZS5zbW9vdGggIT09IGZhbHNlLCBtYXRyaXgpO1xuICB9XG5cbiAgeE9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gfHwgMDtcbiAgeU9yaWdpbiA9IGNhY2hlLnlPcmlnaW4gfHwgMDtcblxuICBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuICAgIGEgPSBtYXRyaXhbMF07IC8vYTExXG5cbiAgICBiID0gbWF0cml4WzFdOyAvL2EyMVxuXG4gICAgYyA9IG1hdHJpeFsyXTsgLy9hMzFcblxuICAgIGQgPSBtYXRyaXhbM107IC8vYTQxXG5cbiAgICB4ID0gYTEyID0gbWF0cml4WzRdO1xuICAgIHkgPSBhMjIgPSBtYXRyaXhbNV07IC8vMkQgbWF0cml4XG5cbiAgICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgICAgc2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuICAgICAgcm90YXRpb24gPSBhIHx8IGIgPyBfYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IDA7IC8vbm90ZTogaWYgc2NhbGVYIGlzIDAsIHdlIGNhbm5vdCBhY2N1cmF0ZWx5IG1lYXN1cmUgcm90YXRpb24uIFNhbWUgZm9yIHNrZXdYIHdpdGggYSBzY2FsZVkgb2YgMC4gVGhlcmVmb3JlLCB3ZSBkZWZhdWx0IHRvIHRoZSBwcmV2aW91c2x5IHJlY29yZGVkIHZhbHVlIChvciB6ZXJvIGlmIHRoYXQgZG9lc24ndCBleGlzdCkuXG5cbiAgICAgIHNrZXdYID0gYyB8fCBkID8gX2F0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IDA7XG4gICAgICBza2V3WCAmJiAoc2NhbGVZICo9IE1hdGguYWJzKE1hdGguY29zKHNrZXdYICogX0RFRzJSQUQpKSk7XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICB5IC09IHlPcmlnaW4gLSAoeE9yaWdpbiAqIGIgKyB5T3JpZ2luICogZCk7XG4gICAgICB9IC8vM0QgbWF0cml4XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgYTQyID0gbWF0cml4WzddO1xuICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgYTMzID0gbWF0cml4WzEwXTtcbiAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgIHkgPSBtYXRyaXhbMTNdO1xuICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICByb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHOyAvL3JvdGF0aW9uWFxuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICB0MyA9IGEzMiAqIGNvcyArIGEzMyAqIHNpbjtcbiAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgYTMzID0gYTMyICogLXNpbiArIGEzMyAqIGNvcztcbiAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYTEyID0gdDE7XG4gICAgICAgIGEyMiA9IHQyO1xuICAgICAgICBhMzIgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvbllcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgIHJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBjICogY29zIC0gYTMzICogc2luO1xuICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGIgPSB0MjtcbiAgICAgICAgYyA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWlxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgcm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICBiID0gYiAqIGNvcyAtIGEgKiBzaW47XG4gICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBhMTIgPSB0MjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG4gICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgfVxuXG4gICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGExMiwgYTIyKTtcbiAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAvL3NlbnNlIGlmIHRoZXJlIGFyZSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9uIGFuIFNWRyBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB3aGVuIHJlbmRlcmluZy4gVGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaXMgbW9yZSByZWxpYWJsZSBjcm9zcy1icm93c2VyLCBidXQgd2UgY2FuJ3QganVzdCByZW1vdmUgdGhlIENTUyBvbmVzIGJlY2F1c2UgdGhleSBtYXkgYmUgYXBwbGllZCBpbiBhIENTUyBydWxlIHNvbWV3aGVyZSAobm90IGp1c3QgaW5saW5lKS5cbiAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICB0MSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHQxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG4gICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICBzY2FsZVggKj0gLTE7XG4gICAgICBza2V3WCArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVkgKj0gLTE7XG4gICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9XG4gIH1cblxuICB1bmNhY2hlID0gdW5jYWNoZSB8fCBjYWNoZS51bmNhY2hlO1xuICBjYWNoZS54ID0geCAtICgoY2FjaGUueFBlcmNlbnQgPSB4ICYmICghdW5jYWNoZSAmJiBjYWNoZS54UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldFdpZHRoICogY2FjaGUueFBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS55ID0geSAtICgoY2FjaGUueVBlcmNlbnQgPSB5ICYmICghdW5jYWNoZSAmJiBjYWNoZS55UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgPT09IE1hdGgucm91bmQoLXkpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRIZWlnaHQgKiBjYWNoZS55UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnogPSB6ICsgcHg7XG4gIGNhY2hlLnNjYWxlWCA9IF9yb3VuZChzY2FsZVgpO1xuICBjYWNoZS5zY2FsZVkgPSBfcm91bmQoc2NhbGVZKTtcbiAgY2FjaGUucm90YXRpb24gPSBfcm91bmQocm90YXRpb24pICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblggPSBfcm91bmQocm90YXRpb25YKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25ZID0gX3JvdW5kKHJvdGF0aW9uWSkgKyBkZWc7XG4gIGNhY2hlLnNrZXdYID0gc2tld1ggKyBkZWc7XG4gIGNhY2hlLnNrZXdZID0gc2tld1kgKyBkZWc7XG4gIGNhY2hlLnRyYW5zZm9ybVBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmUgKyBweDtcblxuICBpZiAoY2FjaGUuek9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luLnNwbGl0KFwiIFwiKVsyXSkgfHwgIXVuY2FjaGUgJiYgY2FjaGUuek9yaWdpbiB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG4gIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7IC8vc29tZSBicm93c2VycyBwcmlvcml0aXplIENTUyB0cmFuc2Zvcm1zIG92ZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUuIFdoZW4gd2Ugc2Vuc2UgdGhhdCB0aGUgdXNlciBoYXMgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCwgd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB0aGlzIHdheSAob3RoZXJ3aXNlIHNvbWUgYnJvd3NlciBzaW1wbHkgd29uJ3QgcmVuZGVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGNoYW5nZXMhKVxufSxcbiAgICBfYWRkUm90YXRpb25hbFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGVuZFZhbHVlKSB7XG4gIHZhciBjYXAgPSAzNjAsXG4gICAgICBpc1N0cmluZyA9IF9pc1N0cmluZyhlbmRWYWx1ZSksXG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKSAqIChpc1N0cmluZyAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhZFwiKSA/IF9SQUQyREVHIDogMSksXG4gICAgICBjaGFuZ2UgPSBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgIGZpbmFsVmFsdWUgPSBzdGFydE51bSArIGNoYW5nZSArIFwiZGVnXCIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBwdDtcblxuICBpZiAoaXNTdHJpbmcpIHtcbiAgICBkaXJlY3Rpb24gPSBlbmRWYWx1ZS5zcGxpdChcIl9cIilbMV07XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcInNob3J0XCIpIHtcbiAgICAgIGNoYW5nZSAlPSBjYXA7XG5cbiAgICAgIGlmIChjaGFuZ2UgIT09IGNoYW5nZSAlIChjYXAgLyAyKSkge1xuICAgICAgICBjaGFuZ2UgKz0gY2hhbmdlIDwgMCA/IGNhcCA6IC1jYXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJjd1wiICYmIGNoYW5nZSA8IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgKyBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFwiY2N3XCIgJiYgY2hhbmdlID4gMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSAtIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9XG4gIH1cblxuICBwbHVnaW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBjaGFuZ2UsIF9yZW5kZXJQcm9wV2l0aEVuZCk7XG4gIHB0LmUgPSBmaW5hbFZhbHVlO1xuICBwdC51ID0gXCJkZWdcIjtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2Fzc2lnbiA9IGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgZG9lc24ndCBoYXZlIE9iamVjdC5hc3NpZ24oKSwgc28gd2UgcmVjcmVhdGUgaXQgaGVyZS5cbiAgZm9yICh2YXIgcCBpbiBzb3VyY2UpIHtcbiAgICB0YXJnZXRbcF0gPSBzb3VyY2VbcF07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSxcbiAgICBfYWRkUmF3VHJhbnNmb3JtUFRzID0gZnVuY3Rpb24gX2FkZFJhd1RyYW5zZm9ybVBUcyhwbHVnaW4sIHRyYW5zZm9ybXMsIHRhcmdldCkge1xuICAvL2ZvciBoYW5kbGluZyBjYXNlcyB3aGVyZSBzb21lb25lIHBhc3NlcyBpbiBhIHdob2xlIHRyYW5zZm9ybSBzdHJpbmcsIGxpa2UgdHJhbnNmb3JtOiBcInNjYWxlKDIsIDMpIHJvdGF0ZSgyMGRlZykgdHJhbnNsYXRlWSgzMGVtKVwiXG4gIHZhciBzdGFydENhY2hlID0gX2Fzc2lnbih7fSwgdGFyZ2V0Ll9nc2FwKSxcbiAgICAgIGV4Y2x1ZGUgPSBcInBlcnNwZWN0aXZlLGZvcmNlM0QsdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpblwiLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBlbmRDYWNoZSxcbiAgICAgIHAsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGVuZE51bSxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFVuaXQ7XG5cbiAgaWYgKHN0YXJ0Q2FjaGUuc3ZnKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG5cbiAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHN0YXJ0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0VmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldClbX3RyYW5zZm9ybVByb3BdO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBzdGFydFZhbHVlO1xuICB9XG5cbiAgZm9yIChwIGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHN0YXJ0VmFsdWUgPSBzdGFydENhY2hlW3BdO1xuICAgIGVuZFZhbHVlID0gZW5kQ2FjaGVbcF07XG5cbiAgICBpZiAoc3RhcnRWYWx1ZSAhPT0gZW5kVmFsdWUgJiYgZXhjbHVkZS5pbmRleE9mKHApIDwgMCkge1xuICAgICAgLy90d2VlbmluZyB0byBubyBwZXJzcGVjdGl2ZSBnaXZlcyB2ZXJ5IHVuaW50dWl0aXZlIHJlc3VsdHMgLSBqdXN0IGtlZXAgdGhlIHNhbWUgcGVyc3BlY3RpdmUgaW4gdGhhdCBjYXNlLlxuICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgIHN0YXJ0TnVtID0gc3RhcnRVbml0ICE9PSBlbmRVbml0ID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSA6IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgIHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIGVuZENhY2hlLCBwLCBzdGFydE51bSwgZW5kTnVtIC0gc3RhcnROdW0sIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgIHBsdWdpbi5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgcGx1Z2luLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxuXG4gIF9hc3NpZ24oZW5kQ2FjaGUsIHN0YXJ0Q2FjaGUpO1xufTsgLy8gaGFuZGxlIHNwbGl0dGluZyBhcGFydCBwYWRkaW5nLCBtYXJnaW4sIGJvcmRlcldpZHRoLCBhbmQgYm9yZGVyUmFkaXVzIGludG8gdGhlaXIgNCBjb21wb25lbnRzLiBGaXJlZm94LCBmb3IgZXhhbXBsZSwgd29uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkgLSBpdCB3aWxsIG9ubHkgZG8gYm9yZGVyVG9wTGVmdFJhZGl1cyBhbmQgdGhlIG90aGVyIGNvcm5lcnMuIFdlIGFsc28gd2FudCB0byBoYW5kbGUgcGFkZGluZ1RvcCwgbWFyZ2luTGVmdCwgYm9yZGVyUmlnaHRXaWR0aCwgZXRjLlxuXG5cbl9mb3JFYWNoTmFtZShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgdmFyIHQgPSBcIlRvcFwiLFxuICAgICAgciA9IFwiUmlnaHRcIixcbiAgICAgIGIgPSBcIkJvdHRvbVwiLFxuICAgICAgbCA9IFwiTGVmdFwiLFxuICAgICAgcHJvcHMgPSAoaW5kZXggPCAzID8gW3QsIHIsIGIsIGxdIDogW3QgKyBsLCB0ICsgciwgYiArIHIsIGIgKyBsXSkubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMiA/IG5hbWUgKyBzaWRlIDogXCJib3JkZXJcIiArIHNpZGUgKyBuYW1lO1xuICB9KTtcblxuICBfc3BlY2lhbFByb3BzW2luZGV4ID4gMSA/IFwiYm9yZGVyXCIgKyBuYW1lIDogbmFtZV0gPSBmdW5jdGlvbiAocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgYSwgdmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkge1xuICAgICAgLy8gZ2V0dGVyLCBwYXNzZWQgdGFyZ2V0LCBwcm9wZXJ0eSwgYW5kIHVuaXQgKGZyb20gX2dldCgpKVxuICAgICAgYSA9IHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gX2dldChwbHVnaW4sIHByb3AsIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgICAgdmFycyA9IGEuam9pbihcIiBcIik7XG4gICAgICByZXR1cm4gdmFycy5zcGxpdChhWzBdKS5sZW5ndGggPT09IDUgPyBhWzBdIDogdmFycztcbiAgICB9XG5cbiAgICBhID0gKGVuZFZhbHVlICsgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgIHZhcnMgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICByZXR1cm4gdmFyc1twcm9wXSA9IGFbaV0gPSBhW2ldIHx8IGFbKGkgLSAxKSAvIDIgfCAwXTtcbiAgICB9KTtcbiAgICBwbHVnaW4uaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgdmFyIENTU1BsdWdpbiA9IHtcbiAgbmFtZTogXCJjc3NcIixcbiAgcmVnaXN0ZXI6IF9pbml0Q29yZSxcbiAgdGFyZ2V0VGVzdDogZnVuY3Rpb24gdGFyZ2V0VGVzdCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwcm9wcyA9IHRoaXMuX3Byb3BzLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgc3RhcnRBdCA9IHR3ZWVuLnZhcnMuc3RhcnRBdCxcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIGVuZE51bSxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHNwZWNpYWxQcm9wLFxuICAgICAgICBwLFxuICAgICAgICBzdGFydFVuaXQsXG4gICAgICAgIGVuZFVuaXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQsXG4gICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbixcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIHNtb290aCxcbiAgICAgICAgaGFzUHJpb3JpdHksXG4gICAgICAgIGlubGluZVByb3BzO1xuICAgIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpOyAvLyB3ZSBtYXkgY2FsbCBpbml0KCkgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgcGx1Z2luIGluc3RhbmNlLCBsaWtlIHdoZW4gYWRkaW5nIHNwZWNpYWwgcHJvcGVydGllcywgc28gbWFrZSBzdXJlIHdlIGRvbid0IG92ZXJ3cml0ZSB0aGUgcmV2ZXJ0IGRhdGEgb3IgaW5saW5lUHJvcHNcblxuICAgIHRoaXMuc3R5bGVzID0gdGhpcy5zdHlsZXMgfHwgX2dldFN0eWxlU2F2ZXIodGFyZ2V0KTtcbiAgICBpbmxpbmVQcm9wcyA9IHRoaXMuc3R5bGVzLnByb3BzO1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICBpZiAocCA9PT0gXCJhdXRvUm91bmRcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZW5kVmFsdWUgPSB2YXJzW3BdO1xuXG4gICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgX2NoZWNrUGx1Z2luKHAsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSkge1xuICAgICAgICAvLyBwbHVnaW5zXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgc3BlY2lhbFByb3AgPSBfc3BlY2lhbFByb3BzW3BdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVuZFZhbHVlID0gZW5kVmFsdWUuY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgICBlbmRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKGVuZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWNpYWxQcm9wKSB7XG4gICAgICAgIHNwZWNpYWxQcm9wKHRoaXMsIHRhcmdldCwgcCwgZW5kVmFsdWUsIHR3ZWVuKSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH0gZWxzZSBpZiAocC5zdWJzdHIoMCwgMikgPT09IFwiLS1cIikge1xuICAgICAgICAvL0NTUyB2YXJpYWJsZVxuICAgICAgICBzdGFydFZhbHVlID0gKGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5nZXRQcm9wZXJ0eVZhbHVlKHApICsgXCJcIikudHJpbSgpO1xuICAgICAgICBlbmRWYWx1ZSArPSBcIlwiO1xuICAgICAgICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICAgICAgICBpZiAoIV9jb2xvckV4cC50ZXN0KHN0YXJ0VmFsdWUpKSB7XG4gICAgICAgICAgLy8gY29sb3JzIGRvbid0IGhhdmUgdW5pdHNcbiAgICAgICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZFVuaXQgPyBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0VmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpICsgZW5kVW5pdCkgOiBzdGFydFVuaXQgJiYgKGVuZFZhbHVlICs9IHN0YXJ0VW5pdCk7XG4gICAgICAgIHRoaXMuYWRkKHN0eWxlLCBcInNldFByb3BlcnR5XCIsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICAgIGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChzdGFydEF0ICYmIHAgaW4gc3RhcnRBdCkge1xuICAgICAgICAgIC8vIGluIGNhc2Ugc29tZW9uZSBoYXJkLWNvZGVzIGEgY29tcGxleCB2YWx1ZSBhcyB0aGUgc3RhcnQsIGxpa2UgdG9wOiBcImNhbGMoMnZoIC8gMilcIi4gV2l0aG91dCB0aGlzLCBpdCdkIHVzZSB0aGUgY29tcHV0ZWQgdmFsdWUgKGFsd2F5cyBpbiBweClcbiAgICAgICAgICBzdGFydFZhbHVlID0gdHlwZW9mIHN0YXJ0QXRbcF0gPT09IFwiZnVuY3Rpb25cIiA/IHN0YXJ0QXRbcF0uY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiBzdGFydEF0W3BdO1xuICAgICAgICAgIF9pc1N0cmluZyhzdGFydFZhbHVlKSAmJiB+c3RhcnRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSAmJiAoc3RhcnRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKHN0YXJ0VmFsdWUpKTtcbiAgICAgICAgICBnZXRVbml0KHN0YXJ0VmFsdWUgKyBcIlwiKSB8fCBzdGFydFZhbHVlID09PSBcImF1dG9cIiB8fCAoc3RhcnRWYWx1ZSArPSBfY29uZmlnLnVuaXRzW3BdIHx8IGdldFVuaXQoX2dldCh0YXJnZXQsIHApKSB8fCBcIlwiKTsgLy8gZm9yIGNhc2VzIHdoZW4gc29tZW9uZSBwYXNzZXMgaW4gYSB1bml0bGVzcyB2YWx1ZSBsaWtlIHt4OiAxMDB9OyBpZiB3ZSB0cnkgc2V0dGluZyB0cmFuc2xhdGUoMTAwLCAwcHgpIGl0IHdvbid0IHdvcmsuXG5cbiAgICAgICAgICAoc3RhcnRWYWx1ZSArIFwiXCIpLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCkpOyAvLyBjYW4ndCB3b3JrIHdpdGggcmVsYXRpdmUgdmFsdWVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgZW5kVmFsdWUuc3Vic3RyKDAsIDIpO1xuICAgICAgICByZWxhdGl2ZSAmJiAoZW5kVmFsdWUgPSBlbmRWYWx1ZS5zdWJzdHIoMikpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcblxuICAgICAgICBpZiAocCBpbiBfcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgICAgICAgaWYgKHAgPT09IFwiYXV0b0FscGhhXCIpIHtcbiAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIHdoZXJlIHdlIGNvbnRyb2wgdGhlIHZpc2liaWxpdHkgYWxvbmcgd2l0aCBvcGFjaXR5LiBXZSBzdGlsbCBhbGxvdyB0aGUgb3BhY2l0eSB2YWx1ZSB0byBwYXNzIHRocm91Z2ggYW5kIGdldCB0d2VlbmVkLlxuICAgICAgICAgICAgaWYgKHN0YXJ0TnVtID09PSAxICYmIF9nZXQodGFyZ2V0LCBcInZpc2liaWxpdHlcIikgPT09IFwiaGlkZGVuXCIgJiYgZW5kTnVtKSB7XG4gICAgICAgICAgICAgIC8vaWYgdmlzaWJpbGl0eSBpcyBpbml0aWFsbHkgc2V0IHRvIFwiaGlkZGVuXCIsIHdlIHNob3VsZCBpbnRlcnByZXQgdGhhdCBhcyBpbnRlbnQgdG8gbWFrZSBvcGFjaXR5IDAgKGEgY29udmVuaWVuY2UpXG4gICAgICAgICAgICAgIHN0YXJ0TnVtID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChcInZpc2liaWxpdHlcIiwgMCwgc3R5bGUudmlzaWJpbGl0eSk7XG5cbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBcInZpc2liaWxpdHlcIiwgc3RhcnROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsIGVuZE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgIWVuZE51bSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAgIT09IFwic2NhbGVcIiAmJiBwICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBwID0gX3Byb3BlcnR5QWxpYXNlc1twXTtcbiAgICAgICAgICAgIH5wLmluZGV4T2YoXCIsXCIpICYmIChwID0gcC5zcGxpdChcIixcIilbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCA9IHAgaW4gX3RyYW5zZm9ybVByb3BzOyAvLy0tLSBUUkFOU0ZPUk0tUkVMQVRFRCAtLS1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXMuc2F2ZShwKTtcblxuICAgICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLnN1YnN0cmluZygwLCA2KSA9PT0gXCJ2YXIoLS1cIikge1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIGVuZFZhbHVlLnN1YnN0cmluZyg0LCBlbmRWYWx1ZS5pbmRleE9mKFwiKVwiKSkpO1xuICAgICAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogdHlwZW9mIHRhcmdldFtwXSA9PT0gXCJmdW5jdGlvblwiID8gaW5saW5lUHJvcHMucHVzaChwLCAyLCB0YXJnZXRbcF0oKSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCIvKiFcbiAqIEN1c3RvbUVhc2UgMy4xMy4wXG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBzdHJpbmdUb1Jhd1BhdGgsIHJhd1BhdGhUb1N0cmluZywgdHJhbnNmb3JtUmF3UGF0aCB9IGZyb20gXCIuL3V0aWxzL3BhdGhzLmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuICBnc2FwID0gX2dldEdTQVAoKTtcblxuICBpZiAoZ3NhcCkge1xuICAgIGdzYXAucmVnaXN0ZXJFYXNlKFwiX0NFXCIsIEN1c3RvbUVhc2UuY3JlYXRlKTtcbiAgICBfY29yZUluaXR0ZWQgPSAxO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbUVhc2UpXCIpO1xuICB9XG59LFxuICAgIF9iaWdOdW0gPSAxZTIwLFxuICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gfn4odmFsdWUgKiAxMDAwICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgLyAxMDAwO1xufSxcbiAgICBfYm9udXNWYWxpZGF0ZWQgPSAxLFxuICAgIC8vPG5hbWU+Q3VzdG9tRWFzZTwvbmFtZT5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2dpLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbmVlZHNQYXJzaW5nRXhwID0gL1tjTGxzU2FBaEh2VnRUcVFdL2csXG4gICAgX2ZpbmRNaW5pbXVtID0gZnVuY3Rpb24gX2ZpbmRNaW5pbXVtKHZhbHVlcykge1xuICB2YXIgbCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAxOyBpIDwgbDsgaSArPSA2KSB7XG4gICAgK3ZhbHVlc1tpXSA8IG1pbiAmJiAobWluID0gK3ZhbHVlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gbWluO1xufSxcbiAgICAvL3Rha2VzIGFsbCB0aGUgcG9pbnRzIGFuZCB0cmFuc2xhdGVzL3NjYWxlcyB0aGVtIHNvIHRoYXQgdGhlIHggc3RhcnRzIGF0IDAgYW5kIGVuZHMgYXQgMS5cbl9ub3JtYWxpemUgPSBmdW5jdGlvbiBfbm9ybWFsaXplKHZhbHVlcywgaGVpZ2h0LCBvcmlnaW5ZKSB7XG4gIGlmICghb3JpZ2luWSAmJiBvcmlnaW5ZICE9PSAwKSB7XG4gICAgb3JpZ2luWSA9IE1hdGgubWF4KCt2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdLCArdmFsdWVzWzFdKTtcbiAgfVxuXG4gIHZhciB0eCA9ICt2YWx1ZXNbMF0gKiAtMSxcbiAgICAgIHR5ID0gLW9yaWdpblksXG4gICAgICBsID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIHN4ID0gMSAvICgrdmFsdWVzW2wgLSAyXSArIHR4KSxcbiAgICAgIHN5ID0gLWhlaWdodCB8fCAoTWF0aC5hYnMoK3ZhbHVlc1tsIC0gMV0gLSArdmFsdWVzWzFdKSA8IDAuMDEgKiAoK3ZhbHVlc1tsIC0gMl0gLSArdmFsdWVzWzBdKSA/IF9maW5kTWluaW11bSh2YWx1ZXMpICsgdHkgOiArdmFsdWVzW2wgLSAxXSArIHR5KSxcbiAgICAgIGk7XG5cbiAgaWYgKHN5KSB7XG4gICAgLy90eXBpY2FsbHkgeSBlbmRzIGF0IDEgKHNvIHRoYXQgdGhlIGVuZCB2YWx1ZXMgYXJlIHJlYWNoZWQpXG4gICAgc3kgPSAxIC8gc3k7XG4gIH0gZWxzZSB7XG4gICAgLy9pbiBjYXNlIHRoZSBlYXNlIHJldHVybnMgdG8gaXRzIGJlZ2lubmluZyB2YWx1ZSwgc2NhbGUgZXZlcnl0aGluZyBwcm9wb3J0aW9uYWxseVxuICAgIHN5ID0gLXN4O1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMikge1xuICAgIHZhbHVlc1tpXSA9ICgrdmFsdWVzW2ldICsgdHgpICogc3g7XG4gICAgdmFsdWVzW2kgKyAxXSA9ICgrdmFsdWVzW2kgKyAxXSArIHR5KSAqIHN5O1xuICB9XG59LFxuICAgIC8vbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBwb2ludCBvYmplY3RzIGxpa2Uge3gsIHl9IHJhdGhlciB0aGFuIHdvcmtpbmcgd2l0aCBzZWdtZW50cyB3aGljaCBhcmUgYXJyYXlzIHdpdGggYWx0ZXJuYXRpbmcgeCwgeSB2YWx1ZXMgYXMgaW4gdGhlIHNpbWlsYXIgZnVuY3Rpb24gaW4gcGF0aHMuanNcbl9iZXppZXJUb1BvaW50cyA9IGZ1bmN0aW9uIF9iZXppZXJUb1BvaW50cyh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQsIHRocmVzaG9sZCwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgeDEyID0gKHgxICsgeDIpIC8gMixcbiAgICAgIHkxMiA9ICh5MSArIHkyKSAvIDIsXG4gICAgICB4MjMgPSAoeDIgKyB4MykgLyAyLFxuICAgICAgeTIzID0gKHkyICsgeTMpIC8gMixcbiAgICAgIHgzNCA9ICh4MyArIHg0KSAvIDIsXG4gICAgICB5MzQgPSAoeTMgKyB5NCkgLyAyLFxuICAgICAgeDEyMyA9ICh4MTIgKyB4MjMpIC8gMixcbiAgICAgIHkxMjMgPSAoeTEyICsgeTIzKSAvIDIsXG4gICAgICB4MjM0ID0gKHgyMyArIHgzNCkgLyAyLFxuICAgICAgeTIzNCA9ICh5MjMgKyB5MzQpIC8gMixcbiAgICAgIHgxMjM0ID0gKHgxMjMgKyB4MjM0KSAvIDIsXG4gICAgICB5MTIzNCA9ICh5MTIzICsgeTIzNCkgLyAyLFxuICAgICAgZHggPSB4NCAtIHgxLFxuICAgICAgZHkgPSB5NCAtIHkxLFxuICAgICAgZDIgPSBNYXRoLmFicygoeDIgLSB4NCkgKiBkeSAtICh5MiAtIHk0KSAqIGR4KSxcbiAgICAgIGQzID0gTWF0aC5hYnMoKHgzIC0geDQpICogZHkgLSAoeTMgLSB5NCkgKiBkeCksXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKCFwb2ludHMpIHtcbiAgICBwb2ludHMgPSBbe1xuICAgICAgeDogeDEsXG4gICAgICB5OiB5MVxuICAgIH0sIHtcbiAgICAgIHg6IHg0LFxuICAgICAgeTogeTRcbiAgICB9XTtcbiAgICBpbmRleCA9IDE7XG4gIH1cblxuICBwb2ludHMuc3BsaWNlKGluZGV4IHx8IHBvaW50cy5sZW5ndGggLSAxLCAwLCB7XG4gICAgeDogeDEyMzQsXG4gICAgeTogeTEyMzRcbiAgfSk7XG5cbiAgaWYgKChkMiArIGQzKSAqIChkMiArIGQzKSA+IHRocmVzaG9sZCAqIChkeCAqIGR4ICsgZHkgKiBkeSkpIHtcbiAgICBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgX2JlemllclRvUG9pbnRzKHgxLCB5MSwgeDEyLCB5MTIsIHgxMjMsIHkxMjMsIHgxMjM0LCB5MTIzNCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4KTtcblxuICAgIF9iZXppZXJUb1BvaW50cyh4MTIzNCwgeTEyMzQsIHgyMzQsIHkyMzQsIHgzNCwgeTM0LCB4NCwgeTQsIHRocmVzaG9sZCwgcG9pbnRzLCBpbmRleCArIDEgKyAocG9pbnRzLmxlbmd0aCAtIGxlbmd0aCkpO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn07XG5cbmV4cG9ydCB2YXIgQ3VzdG9tRWFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEN1c3RvbUVhc2UoaWQsIGRhdGEsIGNvbmZpZykge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgX2JvbnVzVmFsaWRhdGVkICYmIHRoaXMuc2V0RGF0YShkYXRhLCBjb25maWcpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEN1c3RvbUVhc2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXREYXRhID0gZnVuY3Rpb24gc2V0RGF0YShkYXRhLCBjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgZGF0YSA9IGRhdGEgfHwgXCIwLDAsMSwxXCI7XG4gICAgdmFyIHZhbHVlcyA9IGRhdGEubWF0Y2goX251bUV4cCksXG4gICAgICAgIGNsb3Nlc3QgPSAxLFxuICAgICAgICBwb2ludHMgPSBbXSxcbiAgICAgICAgbG9va3VwID0gW10sXG4gICAgICAgIHByZWNpc2lvbiA9IGNvbmZpZy5wcmVjaXNpb24gfHwgMSxcbiAgICAgICAgZmFzdCA9IHByZWNpc2lvbiA8PSAxLFxuICAgICAgICBsLFxuICAgICAgICBhMSxcbiAgICAgICAgYTIsXG4gICAgICAgIGksXG4gICAgICAgIGluYyxcbiAgICAgICAgaixcbiAgICAgICAgcG9pbnQsXG4gICAgICAgIHByZXZQb2ludCxcbiAgICAgICAgcDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgaWYgKF9uZWVkc1BhcnNpbmdFeHAudGVzdChkYXRhKSB8fCB+ZGF0YS5pbmRleE9mKFwiTVwiKSAmJiBkYXRhLmluZGV4T2YoXCJDXCIpIDwgMCkge1xuICAgICAgdmFsdWVzID0gc3RyaW5nVG9SYXdQYXRoKGRhdGEpWzBdO1xuICAgIH1cblxuICAgIGwgPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgaWYgKGwgPT09IDQpIHtcbiAgICAgIHZhbHVlcy51bnNoaWZ0KDAsIDApO1xuICAgICAgdmFsdWVzLnB1c2goMSwgMSk7XG4gICAgICBsID0gODtcbiAgICB9IGVsc2UgaWYgKChsIC0gMikgJSA2KSB7XG4gICAgICB0aHJvdyBcIkludmFsaWQgQ3VzdG9tRWFzZVwiO1xuICAgIH1cblxuICAgIGlmICgrdmFsdWVzWzBdICE9PSAwIHx8ICt2YWx1ZXNbbCAtIDJdICE9PSAxKSB7XG4gICAgICBfbm9ybWFsaXplKHZhbHVlcywgY29uZmlnLmhlaWdodCwgY29uZmlnLm9yaWdpblkpO1xuICAgIH1cblxuICAgIHRoaXMuc2VnbWVudCA9IHZhbHVlcztcblxuICAgIGZvciAoaSA9IDI7IGkgPCBsOyBpICs9IDYpIHtcbiAgICAgIGExID0ge1xuICAgICAgICB4OiArdmFsdWVzW2kgLSAyXSxcbiAgICAgICAgeTogK3ZhbHVlc1tpIC0gMV1cbiAgICAgIH07XG4gICAgICBhMiA9IHtcbiAgICAgICAgeDogK3ZhbHVlc1tpICsgNF0sXG4gICAgICAgIHk6ICt2YWx1ZXNbaSArIDVdXG4gICAgICB9O1xuICAgICAgcG9pbnRzLnB1c2goYTEsIGEyKTtcblxuICAgICAgX2JlemllclRvUG9pbnRzKGExLngsIGExLnksICt2YWx1ZXNbaV0sICt2YWx1ZXNbaSArIDFdLCArdmFsdWVzW2kgKyAyXSwgK3ZhbHVlc1tpICsgM10sIGEyLngsIGEyLnksIDEgLyAocHJlY2lzaW9uICogMjAwMDAwKSwgcG9pbnRzLCBwb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgbCA9IHBvaW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIHByZXZQb2ludCA9IHBvaW50c1tpIC0gMV0gfHwgcG9pbnQ7XG5cbiAgICAgIGlmICgocG9pbnQueCA+IHByZXZQb2ludC54IHx8IHByZXZQb2ludC55ICE9PSBwb2ludC55ICYmIHByZXZQb2ludC54ID09PSBwb2ludC54IHx8IHBvaW50ID09PSBwcmV2UG9pbnQpICYmIHBvaW50LnggPD0gMSkge1xuICAgICAgICAvL2lmIGEgcG9pbnQgZ29lcyBCQUNLV0FSRCBpbiB0aW1lIG9yIGlzIGEgZHVwbGljYXRlLCBqdXN0IGRyb3AgaXQuIEFsc28gaXQgc2hvdWxkbid0IGdvIHBhc3QgMSBvbiB0aGUgeCBheGlzLCBhcyBjb3VsZCBoYXBwZW4gaW4gYSBzdHJpbmcgbGlrZSBcIk0wLDAgQzAsMCAwLjEyLDAuNjggMC4xOCwwLjc4OCAwLjE5NSwwLjg0NSAwLjMwOCwxIDAuMzIsMSAwLjQwMywxLjAwNSAwLjM5OCwxIDAuNSwxIDAuNjAyLDEgMC44MTYsMS4wMDUgMC45LDEgMC45MSwxIDAuOTQ4LDAuNjkgMC45NjIsMC42MTUgMS4wMDMsMC4zNzYgMSwwIDEsMFwiLlxuICAgICAgICBwcmV2UG9pbnQuY3ggPSBwb2ludC54IC0gcHJldlBvaW50Lng7IC8vY2hhbmdlIGluIHggYmV0d2VlbiB0aGlzIHBvaW50IGFuZCB0aGUgbmV4dCBwb2ludCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuXG4gICAgICAgIHByZXZQb2ludC5jeSA9IHBvaW50LnkgLSBwcmV2UG9pbnQueTtcbiAgICAgICAgcHJldlBvaW50Lm4gPSBwb2ludDtcbiAgICAgICAgcHJldlBvaW50Lm54ID0gcG9pbnQueDsgLy9uZXh0IHBvaW50J3MgeCB2YWx1ZSAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLCBtYWtpbmcgbG9va3VwcyBmYXN0ZXIgaW4gZ2V0UmF0aW8oKSkuIFJlbWVtYmVyLCB0aGUgbG9va3VwIHdpbGwgYWx3YXlzIGxhbmQgb24gYSBzcG90IHdoZXJlIGl0J3MgZWl0aGVyIHRoaXMgcG9pbnQgb3IgdGhlIHZlcnkgbmV4dCBvbmUgKG5ldmVyIGJleW9uZCB0aGF0KVxuXG4gICAgICAgIGlmIChmYXN0ICYmIGkgPiAxICYmIE1hdGguYWJzKHByZXZQb2ludC5jeSAvIHByZXZQb2ludC5jeCAtIHBvaW50c1tpIC0gMl0uY3kgLyBwb2ludHNbaSAtIDJdLmN4KSA+IDIpIHtcbiAgICAgICAgICAvL2lmIHRoZXJlJ3MgYSBzdWRkZW4gY2hhbmdlIGluIGRpcmVjdGlvbiwgcHJpb3JpdGl6ZSBhY2N1cmFjeSBvdmVyIHNwZWVkLiBMaWtlIGEgYm91bmNlIGVhc2UgLSB5b3UgZG9uJ3Qgd2FudCB0byByaXNrIHRoZSBzYW1wbGluZyBjaHVua3MgbGFuZGluZyBvbiBlYWNoIHNpZGUgb2YgdGhlIGJvdW5jZSBhbmNob3IgYW5kIGhhdmluZyBpdCBjbGlwcGVkIG9mZi5cbiAgICAgICAgICBmYXN0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2UG9pbnQuY3ggPCBjbG9zZXN0KSB7XG4gICAgICAgICAgaWYgKCFwcmV2UG9pbnQuY3gpIHtcbiAgICAgICAgICAgIHByZXZQb2ludC5jeCA9IDAuMDAxOyAvL2F2b2lkcyBtYXRoIHByb2JsZW1zIGluIGdldFJhdGlvKCkgKGRpdmlkaW5nIGJ5IHplcm8pXG5cbiAgICAgICAgICAgIGlmIChpID09PSBsIC0gMSkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgdGhlIGZpbmFsIHNlZ21lbnQgZ29lcyB2ZXJ0aWNhbCBSSUdIVCBhdCB0aGUgZW5kLCBtYWtlIHN1cmUgd2UgZW5kIGF0IHRoZSBlbmQuXG4gICAgICAgICAgICAgIHByZXZQb2ludC54IC09IDAuMDAxO1xuICAgICAgICAgICAgICBjbG9zZXN0ID0gTWF0aC5taW4oY2xvc2VzdCwgMC4wMDEpO1xuICAgICAgICAgICAgICBmYXN0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2VzdCA9IHByZXZQb2ludC5jeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50cy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgbC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIGwgPSAxIC8gY2xvc2VzdCArIDEgfCAwO1xuICAgIGluYyA9IDEgLyBsO1xuICAgIGogPSAwO1xuICAgIHBvaW50ID0gcG9pbnRzWzBdO1xuXG4gICAgaWYgKGZhc3QpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgLy9mb3IgZmFzdGVzdCBsb29rdXBzLCB3ZSBqdXN0IHNhbXBsZSBhbG9uZyB0aGUgcGF0aCBhdCBlcXVhbCB4ICh0aW1lKSBkaXN0YW5jZS4gVXNlcyBtb3JlIG1lbW9yeSBhbmQgaXMgc2xpZ2h0bHkgbGVzcyBhY2N1cmF0ZSBmb3IgYW5jaG9ycyB0aGF0IGRvbid0IGxhbmQgb24gdGhlIHNhbXBsaW5nIHBvaW50cywgYnV0IGZvciB0aGUgdmFzdCBtYWpvcml0eSBvZiBlYXNlcyBpdCdzIGV4Y2VsbGVudCAoYW5kIGZhc3QpLlxuICAgICAgICBwID0gaSAqIGluYztcblxuICAgICAgICBpZiAocG9pbnQubnggPCBwKSB7XG4gICAgICAgICAgcG9pbnQgPSBwb2ludHNbKytqXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGExID0gcG9pbnQueSArIChwIC0gcG9pbnQueCkgLyBwb2ludC5jeCAqIHBvaW50LmN5O1xuICAgICAgICBsb29rdXBbaV0gPSB7XG4gICAgICAgICAgeDogcCxcbiAgICAgICAgICBjeDogaW5jLFxuICAgICAgICAgIHk6IGExLFxuICAgICAgICAgIGN5OiAwLFxuICAgICAgICAgIG54OiA5XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICBsb29rdXBbaSAtIDFdLmN5ID0gYTEgLSBsb29rdXBbaSAtIDFdLnk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaiA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICBsb29rdXBbbCAtIDFdLmN5ID0gai55IC0gYTE7XG4gICAgICBsb29rdXBbbCAtIDFdLmN4ID0gai54IC0gbG9va3VwW2xvb2t1cC5sZW5ndGggLSAxXS54OyAvL21ha2Ugc3VyZSBpdCBsYW5kcyBFWEFDVExZIHdoZXJlIGl0IHNob3VsZC4gT3RoZXJ3aXNlLCBpdCBtaWdodCBiZSBzb21ldGhpbmcgbGlrZSAwLjk5OTk5OTk5OTkgaW5zdGVhZCBvZiAxLlxuICAgIH0gZWxzZSB7XG4gICAgICAvL3RoaXMgb3B0aW9uIGlzIG1vcmUgYWNjdXJhdGUsIGVuc3VyaW5nIHRoYXQgRVZFUlkgYW5jaG9yIGlzIGhpdCBwZXJmZWN0bHkuIENsaXBwaW5nIGFjcm9zcyBhIGJvdW5jZSwgZm9yIGV4YW1wbGUsIHdvdWxkIG5ldmVyIGhhcHBlbi5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgLy9idWlsZCBhIGxvb2t1cCB0YWJsZSBiYXNlZCBvbiB0aGUgc21hbGxlc3QgZGlzdGFuY2Ugc28gdGhhdCB3ZSBjYW4gaW5zdGFudGx5IGZpbmQgdGhlIGFwcHJvcHJpYXRlIHBvaW50ICh3ZWxsLCBpdCdsbCBlaXRoZXIgYmUgdGhhdCBwb2ludCBvciB0aGUgdmVyeSBuZXh0IG9uZSkuIFdlJ2xsIGxvb2sgdXAgYmFzZWQgb24gdGhlIGxpbmVhciBwcm9ncmVzcy4gU28gaXQncyBpdCdzIDAuNSBhbmQgdGhlIGxvb2t1cCB0YWJsZSBoYXMgMTAwIGVsZW1lbnRzLCBpdCdkIGJlIGxpa2UgbG9va3VwW01hdGguZmxvb3IoMC41ICogMTAwKV1cbiAgICAgICAgaWYgKHBvaW50Lm54IDwgaSAqIGluYykge1xuICAgICAgICAgIHBvaW50ID0gcG9pbnRzWysral07XG4gICAgICAgIH1cblxuICAgICAgICBsb29rdXBbaV0gPSBwb2ludDtcbiAgICAgIH1cblxuICAgICAgaWYgKGogPCBwb2ludHMubGVuZ3RoIC0gMSkge1xuICAgICAgICBsb29rdXBbaSAtIDFdID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXTtcbiAgICAgIH1cbiAgICB9IC8vdGhpcy5fY2FsY0VuZCA9IChwb2ludHNbcG9pbnRzLmxlbmd0aC0xXS55ICE9PSAxIHx8IHBvaW50c1swXS55ICE9PSAwKTsgLy9lbnN1cmVzIHRoYXQgd2UgZG9uJ3QgcnVuIGludG8gZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiBBcyBsb25nIGFzIHdlJ3JlIHN0YXJ0aW5nIGF0IDAgYW5kIGVuZGluZyBhdCAxLCB0ZWxsIEdTQVAgdG8gc2tpcCB0aGUgZmluYWwgY2FsY3VsYXRpb24gYW5kIHVzZSAwLzEgYXMgdGhlIGZhY3Rvci5cblxuXG4gICAgdGhpcy5lYXNlID0gZnVuY3Rpb24gKHApIHtcbiAgICAgIHZhciBwb2ludCA9IGxvb2t1cFtwICogbCB8IDBdIHx8IGxvb2t1cFtsIC0gMV07XG5cbiAgICAgIGlmIChwb2ludC5ueCA8IHApIHtcbiAgICAgICAgcG9pbnQgPSBwb2ludC5uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcG9pbnQueSArIChwIC0gcG9pbnQueCkgLyBwb2ludC5jeCAqIHBvaW50LmN5O1xuICAgIH07XG5cbiAgICB0aGlzLmVhc2UuY3VzdG9tID0gdGhpcztcbiAgICB0aGlzLmlkICYmIGdzYXAgJiYgZ3NhcC5yZWdpc3RlckVhc2UodGhpcy5pZCwgdGhpcy5lYXNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0U1ZHRGF0YSA9IGZ1bmN0aW9uIGdldFNWR0RhdGEoY29uZmlnKSB7XG4gICAgcmV0dXJuIEN1c3RvbUVhc2UuZ2V0U1ZHRGF0YSh0aGlzLCBjb25maWcpO1xuICB9O1xuXG4gIEN1c3RvbUVhc2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGlkLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gbmV3IEN1c3RvbUVhc2UoaWQsIGRhdGEsIGNvbmZpZykuZWFzZTtcbiAgfTtcblxuICBDdXN0b21FYXNlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuICAgIGdzYXAgPSBjb3JlO1xuXG4gICAgX2luaXRDb3JlKCk7XG4gIH07XG5cbiAgQ3VzdG9tRWFzZS5nZXQgPSBmdW5jdGlvbiBnZXQoaWQpIHtcbiAgICByZXR1cm4gZ3NhcC5wYXJzZUVhc2UoaWQpO1xuICB9O1xuXG4gIEN1c3RvbUVhc2UuZ2V0U1ZHRGF0YSA9IGZ1bmN0aW9uIGdldFNWR0RhdGEoZWFzZSwgY29uZmlnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IGNvbmZpZy53aWR0aCB8fCAxMDAsXG4gICAgICAgIGhlaWdodCA9IGNvbmZpZy5oZWlnaHQgfHwgMTAwLFxuICAgICAgICB4ID0gY29uZmlnLnggfHwgMCxcbiAgICAgICAgeSA9IChjb25maWcueSB8fCAwKSArIGhlaWdodCxcbiAgICAgICAgZSA9IGdzYXAudXRpbHMudG9BcnJheShjb25maWcucGF0aClbMF0sXG4gICAgICAgIGEsXG4gICAgICAgIHNsb3BlLFxuICAgICAgICBpLFxuICAgICAgICBpbmMsXG4gICAgICAgIHR4LFxuICAgICAgICB0eSxcbiAgICAgICAgcHJlY2lzaW9uLFxuICAgICAgICB0aHJlc2hvbGQsXG4gICAgICAgIHByZXZYLFxuICAgICAgICBwcmV2WTtcblxuICAgIGlmIChjb25maWcuaW52ZXJ0KSB7XG4gICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgeSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlYXNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBlYXNlID0gZ3NhcC5wYXJzZUVhc2UoZWFzZSk7XG4gICAgfVxuXG4gICAgaWYgKGVhc2UuY3VzdG9tKSB7XG4gICAgICBlYXNlID0gZWFzZS5jdXN0b207XG4gICAgfVxuXG4gICAgaWYgKGVhc2UgaW5zdGFuY2VvZiBDdXN0b21FYXNlKSB7XG4gICAgICBhID0gcmF3UGF0aFRvU3RyaW5nKHRyYW5zZm9ybVJhd1BhdGgoW2Vhc2Uuc2VnbWVudF0sIHdpZHRoLCAwLCAwLCAtaGVpZ2h0LCB4LCB5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBbeCwgeV07XG4gICAgICBwcmVjaXNpb24gPSBNYXRoLm1heCg1LCAoY29uZmlnLnByZWNpc2lvbiB8fCAxKSAqIDIwMCk7XG4gICAgICBpbmMgPSAxIC8gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uICs9IDI7XG4gICAgICB0aHJlc2hvbGQgPSA1IC8gcHJlY2lzaW9uO1xuICAgICAgcHJldlggPSBfcm91bmQoeCArIGluYyAqIHdpZHRoKTtcbiAgICAgIHByZXZZID0gX3JvdW5kKHkgKyBlYXNlKGluYykgKiAtaGVpZ2h0KTtcbiAgICAgIHNsb3BlID0gKHByZXZZIC0geSkgLyAocHJldlggLSB4KTtcblxuICAgICAgZm9yIChpID0gMjsgaSA8IHByZWNpc2lvbjsgaSsrKSB7XG4gICAgICAgIHR4ID0gX3JvdW5kKHggKyBpICogaW5jICogd2lkdGgpO1xuICAgICAgICB0eSA9IF9yb3VuZCh5ICsgZWFzZShpICogaW5jKSAqIC1oZWlnaHQpO1xuXG4gICAgICAgIGlmIChNYXRoLmFicygodHkgLSBwcmV2WSkgLyAodHggLSBwcmV2WCkgLSBzbG9wZSkgPiB0aHJlc2hvbGQgfHwgaSA9PT0gcHJlY2lzaW9uIC0gMSkge1xuICAgICAgICAgIC8vb25seSBhZGQgcG9pbnRzIHdoZW4gdGhlIHNsb3BlIGNoYW5nZXMgYmV5b25kIHRoZSB0aHJlc2hvbGRcbiAgICAgICAgICBhLnB1c2gocHJldlgsIHByZXZZKTtcbiAgICAgICAgICBzbG9wZSA9ICh0eSAtIHByZXZZKSAvICh0eCAtIHByZXZYKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZYID0gdHg7XG4gICAgICAgIHByZXZZID0gdHk7XG4gICAgICB9XG5cbiAgICAgIGEgPSBcIk1cIiArIGEuam9pbihcIixcIik7XG4gICAgfVxuXG4gICAgZSAmJiBlLnNldEF0dHJpYnV0ZShcImRcIiwgYSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgcmV0dXJuIEN1c3RvbUVhc2U7XG59KCk7XG5DdXN0b21FYXNlLnZlcnNpb24gPSBcIjMuMTMuMFwiO1xuQ3VzdG9tRWFzZS5oZWFkbGVzcyA9IHRydWU7XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ3VzdG9tRWFzZSk7XG5leHBvcnQgeyBDdXN0b21FYXNlIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogT2JzZXJ2ZXIgMy4xMy4wXG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2NsYW1wLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWwsXG4gICAgX2JvZHksXG4gICAgX2lzVG91Y2gsXG4gICAgX3BvaW50ZXJUeXBlLFxuICAgIFNjcm9sbFRyaWdnZXIsXG4gICAgX3Jvb3QsXG4gICAgX25vcm1hbGl6ZXIsXG4gICAgX2V2ZW50VHlwZXMsXG4gICAgX2NvbnRleHQsXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9zdGFydHVwID0gMSxcbiAgICBfb2JzZXJ2ZXJzID0gW10sXG4gICAgX3Njcm9sbGVycyA9IFtdLFxuICAgIF9wcm94aWVzID0gW10sXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9pbnRlZ3JhdGUgPSBmdW5jdGlvbiBfaW50ZWdyYXRlKCkge1xuICB2YXIgY29yZSA9IFNjcm9sbFRyaWdnZXIuY29yZSxcbiAgICAgIGRhdGEgPSBjb3JlLmJyaWRnZSB8fCB7fSxcbiAgICAgIHNjcm9sbGVycyA9IGNvcmUuX3Njcm9sbGVycyxcbiAgICAgIHByb3hpZXMgPSBjb3JlLl9wcm94aWVzO1xuICBzY3JvbGxlcnMucHVzaC5hcHBseShzY3JvbGxlcnMsIF9zY3JvbGxlcnMpO1xuICBwcm94aWVzLnB1c2guYXBwbHkocHJveGllcywgX3Byb3hpZXMpO1xuICBfc2Nyb2xsZXJzID0gc2Nyb2xsZXJzO1xuICBfcHJveGllcyA9IHByb3hpZXM7XG5cbiAgX2JyaWRnZSA9IGZ1bmN0aW9uIF9icmlkZ2UobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZGF0YVtuYW1lXSh2YWx1ZSk7XG4gIH07XG59LFxuICAgIF9nZXRQcm94eVByb3AgPSBmdW5jdGlvbiBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIHJldHVybiB+X3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSAmJiBfcHJveGllc1tfcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICsgMV1bcHJvcGVydHldO1xufSxcbiAgICBfaXNWaWV3cG9ydCA9IGZ1bmN0aW9uIF9pc1ZpZXdwb3J0KGVsKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGVsKTtcbn0sXG4gICAgX2FkZExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIHBhc3NpdmUsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCB7XG4gICAgcGFzc2l2ZTogcGFzc2l2ZSAhPT0gZmFsc2UsXG4gICAgY2FwdHVyZTogISFjYXB0dXJlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG59LFxuICAgIF9zY3JvbGxMZWZ0ID0gXCJzY3JvbGxMZWZ0XCIsXG4gICAgX3Njcm9sbFRvcCA9IFwic2Nyb2xsVG9wXCIsXG4gICAgX29uU2Nyb2xsID0gZnVuY3Rpb24gX29uU2Nyb2xsKCkge1xuICByZXR1cm4gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkIHx8IF9zY3JvbGxlcnMuY2FjaGUrKztcbn0sXG4gICAgX3Njcm9sbENhY2hlRnVuYyA9IGZ1bmN0aW9uIF9zY3JvbGxDYWNoZUZ1bmMoZiwgZG9Ob3RDYWNoZSkge1xuICB2YXIgY2FjaGluZ0Z1bmMgPSBmdW5jdGlvbiBjYWNoaW5nRnVuYyh2YWx1ZSkge1xuICAgIC8vIHNpbmNlIHJlYWRpbmcgdGhlIHNjcm9sbFRvcC9zY3JvbGxMZWZ0L3BhZ2VPZmZzZXRZL3BhZ2VPZmZzZXRYIGNhbiB0cmlnZ2VyIGEgbGF5b3V0LCB0aGlzIGZ1bmN0aW9uIGFsbG93cyB1cyB0byBjYWNoZSB0aGUgdmFsdWUgc28gaXQgb25seSBnZXRzIHJlYWQgZnJlc2ggYWZ0ZXIgYSBcInNjcm9sbFwiIGV2ZW50IGZpcmVzIChvciB3aGlsZSB3ZSdyZSByZWZyZXNoaW5nIGJlY2F1c2UgdGhhdCBjYW4gbGVuZ3RoZW4gdGhlIHBhZ2UgYW5kIGFsdGVyIHRoZSBzY3JvbGwgcG9zaXRpb24pLiB3aGVuIFwic29mdFwiIGlzIHRydWUsIHRoYXQgbWVhbnMgZG9uJ3QgYWN0dWFsbHkgc2V0IHRoZSBzY3JvbGwsIGJ1dCBjYWNoZSB0aGUgbmV3IHZhbHVlIGluc3RlYWQgKHVzZWZ1bCBpbiBTY3JvbGxTbW9vdGhlcilcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIF9zdGFydHVwICYmIChfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiKTsgLy8gb3RoZXJ3aXNlIHRoZSBuZXcgcG9zaXRpb24gd2lsbCBnZXQgb3ZlcndyaXR0ZW4gYnkgdGhlIGJyb3dzZXIgb25sb2FkLlxuXG4gICAgICB2YXIgaXNOb3JtYWxpemluZyA9IF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZDtcbiAgICAgIHZhbHVlID0gY2FjaGluZ0Z1bmMudiA9IE1hdGgucm91bmQodmFsdWUpIHx8IChfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pT1MgPyAxIDogMCk7IC8vVE9ETzogaU9TIEJ1ZzogaWYgeW91IGFsbG93IGl0IHRvIGdvIHRvIDAsIFNhZmFyaSBjYW4gc3RhcnQgdG8gcmVwb3J0IHN1cGVyIHN0cmFuZ2UgKHdpbGRseSBpbmFjY3VyYXRlKSB0b3VjaCBwb3NpdGlvbnMhXG5cbiAgICAgIGYodmFsdWUpO1xuICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICBpc05vcm1hbGl6aW5nICYmIF9icmlkZ2UoXCJzc1wiLCB2YWx1ZSk7IC8vIHNldCBzY3JvbGwgKG5vdGlmeSBTY3JvbGxUcmlnZ2VyIHNvIGl0IGNhbiBkaXNwYXRjaCBhIFwic2Nyb2xsU3RhcnRcIiBldmVudCBpZiBuZWNlc3NhcnlcbiAgICB9IGVsc2UgaWYgKGRvTm90Q2FjaGUgfHwgX3Njcm9sbGVycy5jYWNoZSAhPT0gY2FjaGluZ0Z1bmMuY2FjaGVJRCB8fCBfYnJpZGdlKFwicmVmXCIpKSB7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGNhY2hpbmdGdW5jLnYgPSBmKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hpbmdGdW5jLnYgKyBjYWNoaW5nRnVuYy5vZmZzZXQ7XG4gIH07XG5cbiAgY2FjaGluZ0Z1bmMub2Zmc2V0ID0gMDtcbiAgcmV0dXJuIGYgJiYgY2FjaGluZ0Z1bmM7XG59LFxuICAgIF9ob3Jpem9udGFsID0ge1xuICBzOiBfc2Nyb2xsTGVmdCxcbiAgcDogXCJsZWZ0XCIsXG4gIHAyOiBcIkxlZnRcIixcbiAgb3M6IFwicmlnaHRcIixcbiAgb3MyOiBcIlJpZ2h0XCIsXG4gIGQ6IFwid2lkdGhcIixcbiAgZDI6IFwiV2lkdGhcIixcbiAgYTogXCJ4XCIsXG4gIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3dpbi5zY3JvbGxUbyh2YWx1ZSwgX3ZlcnRpY2FsLnNjKCkpIDogX3dpbi5wYWdlWE9mZnNldCB8fCBfZG9jW19zY3JvbGxMZWZ0XSB8fCBfZG9jRWxbX3Njcm9sbExlZnRdIHx8IF9ib2R5W19zY3JvbGxMZWZ0XSB8fCAwO1xuICB9KVxufSxcbiAgICBfdmVydGljYWwgPSB7XG4gIHM6IF9zY3JvbGxUb3AsXG4gIHA6IFwidG9wXCIsXG4gIHAyOiBcIlRvcFwiLFxuICBvczogXCJib3R0b21cIixcbiAgb3MyOiBcIkJvdHRvbVwiLFxuICBkOiBcImhlaWdodFwiLFxuICBkMjogXCJIZWlnaHRcIixcbiAgYTogXCJ5XCIsXG4gIG9wOiBfaG9yaXpvbnRhbCxcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKF9ob3Jpem9udGFsLnNjKCksIHZhbHVlKSA6IF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsVG9wXSB8fCBfZG9jRWxbX3Njcm9sbFRvcF0gfHwgX2JvZHlbX3Njcm9sbFRvcF0gfHwgMDtcbiAgfSlcbn0sXG4gICAgX2dldFRhcmdldCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXQodCwgc2VsZikge1xuICByZXR1cm4gKHNlbGYgJiYgc2VsZi5fY3R4ICYmIHNlbGYuX2N0eC5zZWxlY3RvciB8fCBnc2FwLnV0aWxzLnRvQXJyYXkpKHQpWzBdIHx8ICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiBnc2FwLmNvbmZpZygpLm51bGxUYXJnZXRXYXJuICE9PSBmYWxzZSA/IGNvbnNvbGUud2FybihcIkVsZW1lbnQgbm90IGZvdW5kOlwiLCB0KSA6IG51bGwpO1xufSxcbiAgICBfaXNXaXRoaW4gPSBmdW5jdGlvbiBfaXNXaXRoaW4oZWxlbWVudCwgbGlzdCkge1xuICAvLyBjaGVjayBpZiB0aGUgZWxlbWVudCBpcyBpbiB0aGUgbGlzdCBvciBpcyBhIGRlc2NlbmRhbnQgb2YgYW4gZWxlbWVudCBpbiB0aGUgbGlzdC5cbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGxpc3RbaV0gPT09IGVsZW1lbnQgfHwgbGlzdFtpXS5jb250YWlucyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSxcbiAgICBfZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxGdW5jKGVsZW1lbnQsIF9yZWYpIHtcbiAgdmFyIHMgPSBfcmVmLnMsXG4gICAgICBzYyA9IF9yZWYuc2M7XG4gIC8vIHdlIHN0b3JlIHRoZSBzY3JvbGxlciBmdW5jdGlvbnMgaW4gYW4gYWx0ZXJuYXRpbmcgc2VxdWVuY2VkIEFycmF5IGxpa2UgW2VsZW1lbnQsIHZlcnRpY2FsU2Nyb2xsRnVuYywgaG9yaXpvbnRhbFNjcm9sbEZ1bmMsIC4uLl0gc28gdGhhdCB3ZSBjYW4gbWluaW1pemUgbWVtb3J5LCBtYXhpbWl6ZSBwZXJmb3JtYW5jZSwgYW5kIHdlIGFsc28gcmVjb3JkIHRoZSBsYXN0IHBvc2l0aW9uIGFzIGEgXCIucmVjXCIgcHJvcGVydHkgaW4gb3JkZXIgdG8gcmV2ZXJ0IHRvIHRoYXQgYWZ0ZXIgcmVmcmVzaGluZyB0byBlbnN1cmUgdGhpbmdzIGRvbid0IHNoaWZ0IGFyb3VuZC5cbiAgX2lzVmlld3BvcnQoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsKTtcblxuICB2YXIgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZihlbGVtZW50KSxcbiAgICAgIG9mZnNldCA9IHNjID09PSBfdmVydGljYWwuc2MgPyAxIDogMjtcblxuICAhfmkgJiYgKGkgPSBfc2Nyb2xsZXJzLnB1c2goZWxlbWVudCkgLSAxKTtcbiAgX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSB8fCBfYWRkTGlzdGVuZXIoZWxlbWVudCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gY2xlYXIgdGhlIGNhY2hlIHdoZW4gYSBzY3JvbGwgb2NjdXJzXG5cbiAgdmFyIHByZXYgPSBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdLFxuICAgICAgZnVuYyA9IHByZXYgfHwgKF9zY3JvbGxlcnNbaSArIG9mZnNldF0gPSBfc2Nyb2xsQ2FjaGVGdW5jKF9nZXRQcm94eVByb3AoZWxlbWVudCwgcyksIHRydWUpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IHNjIDogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGVsZW1lbnRbc10gPSB2YWx1ZSA6IGVsZW1lbnRbc107XG4gIH0pKSk7XG4gIGZ1bmMudGFyZ2V0ID0gZWxlbWVudDtcbiAgcHJldiB8fCAoZnVuYy5zbW9vdGggPSBnc2FwLmdldFByb3BlcnR5KGVsZW1lbnQsIFwic2Nyb2xsQmVoYXZpb3JcIikgPT09IFwic21vb3RoXCIpOyAvLyBvbmx5IHNldCBpdCB0aGUgZmlyc3QgdGltZSAoZG9uJ3QgcmVzZXQgZXZlcnkgdGltZSBhIHNjcm9sbEZ1bmMgaXMgcmVxdWVzdGVkIGJlY2F1c2UgcGVyaGFwcyBpdCBoYXBwZW5zIGR1cmluZyBhIHJlZnJlc2goKSB3aGVuIGl0J3MgZGlzYWJsZWQgaW4gU2Nyb2xsVHJpZ2dlci5cblxuICByZXR1cm4gZnVuYztcbn0sXG4gICAgX2dldFZlbG9jaXR5UHJvcCA9IGZ1bmN0aW9uIF9nZXRWZWxvY2l0eVByb3AodmFsdWUsIG1pblRpbWVSZWZyZXNoLCB1c2VEZWx0YSkge1xuICB2YXIgdjEgPSB2YWx1ZSxcbiAgICAgIHYyID0gdmFsdWUsXG4gICAgICB0MSA9IF9nZXRUaW1lKCksXG4gICAgICB0MiA9IHQxLFxuICAgICAgbWluID0gbWluVGltZVJlZnJlc2ggfHwgNTAsXG4gICAgICBkcm9wVG9aZXJvVGltZSA9IE1hdGgubWF4KDUwMCwgbWluICogMyksXG4gICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUodmFsdWUsIGZvcmNlKSB7XG4gICAgdmFyIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgaWYgKGZvcmNlIHx8IHQgLSB0MSA+IG1pbikge1xuICAgICAgdjIgPSB2MTtcbiAgICAgIHYxID0gdmFsdWU7XG4gICAgICB0MiA9IHQxO1xuICAgICAgdDEgPSB0O1xuICAgIH0gZWxzZSBpZiAodXNlRGVsdGEpIHtcbiAgICAgIHYxICs9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBub3QgdG90YWxseSBuZWNlc3NhcnksIGJ1dCBtYWtlcyBpdCBhIGJpdCBtb3JlIGFjY3VyYXRlIGJ5IGFkanVzdGluZyB0aGUgdjEgdmFsdWUgYWNjb3JkaW5nIHRvIHRoZSBuZXcgc2xvcGUuIFRoaXMgd2F5IHdlJ3JlIG5vdCBqdXN0IGlnbm9yaW5nIHRoZSBpbmNvbWluZyBkYXRhLiBSZW1vdmluZyBmb3Igbm93IGJlY2F1c2UgaXQgZG9lc24ndCBzZWVtIHRvIG1ha2UgbXVjaCBwcmFjdGljYWwgZGlmZmVyZW5jZSBhbmQgaXQncyBwcm9iYWJseSBub3Qgd29ydGggdGhlIGtiLlxuICAgICAgdjEgPSB2MiArICh2YWx1ZSAtIHYyKSAvICh0IC0gdDIpICogKHQxIC0gdDIpO1xuICAgIH1cbiAgfSxcbiAgICAgIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdjIgPSB2MSA9IHVzZURlbHRhID8gMCA6IHYxO1xuICAgIHQyID0gdDEgPSAwO1xuICB9LFxuICAgICAgZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiBnZXRWZWxvY2l0eShsYXRlc3RWYWx1ZSkge1xuICAgIHZhciB0T2xkID0gdDIsXG4gICAgICAgIHZPbGQgPSB2MixcbiAgICAgICAgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICAobGF0ZXN0VmFsdWUgfHwgbGF0ZXN0VmFsdWUgPT09IDApICYmIGxhdGVzdFZhbHVlICE9PSB2MSAmJiB1cGRhdGUobGF0ZXN0VmFsdWUpO1xuICAgIHJldHVybiB0MSA9PT0gdDIgfHwgdCAtIHQyID4gZHJvcFRvWmVyb1RpbWUgPyAwIDogKHYxICsgKHVzZURlbHRhID8gdk9sZCA6IC12T2xkKSkgLyAoKHVzZURlbHRhID8gdCA6IHQxKSAtIHRPbGQpICogMTAwMDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIHJlc2V0OiByZXNldCxcbiAgICBnZXRWZWxvY2l0eTogZ2V0VmVsb2NpdHlcbiAgfTtcbn0sXG4gICAgX2dldEV2ZW50ID0gZnVuY3Rpb24gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSB7XG4gIHByZXZlbnREZWZhdWx0ICYmICFlLl9nc2FwQWxsb3cgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlcyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlO1xufSxcbiAgICBfZ2V0QWJzb2x1dGVNYXggPSBmdW5jdGlvbiBfZ2V0QWJzb2x1dGVNYXgoYSkge1xuICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgYSksXG4gICAgICBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBhKTtcbiAgcmV0dXJuIE1hdGguYWJzKG1heCkgPj0gTWF0aC5hYnMobWluKSA/IG1heCA6IG1pbjtcbn0sXG4gICAgX3NldFNjcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsVHJpZ2dlcigpIHtcbiAgU2Nyb2xsVHJpZ2dlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsVHJpZ2dlcjtcbiAgU2Nyb2xsVHJpZ2dlciAmJiBTY3JvbGxUcmlnZ2VyLmNvcmUgJiYgX2ludGVncmF0ZSgpO1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoY29yZSkge1xuICBnc2FwID0gY29yZSB8fCBfZ2V0R1NBUCgpO1xuXG4gIGlmICghX2NvcmVJbml0dGVkICYmIGdzYXAgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcbiAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuXG4gICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIF9wb2ludGVyVHlwZSA9IFwib25wb2ludGVyZW50ZXJcIiBpbiBfYm9keSA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgIF9pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaCA9IF93aW4ubWF0Y2hNZWRpYSAmJiBfd2luLm1hdGNoTWVkaWEoXCIoaG92ZXI6IG5vbmUpLCAocG9pbnRlcjogY29hcnNlKVwiKS5tYXRjaGVzID8gMSA6IFwib250b3VjaHN0YXJ0XCIgaW4gX3dpbiB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCA/IDIgOiAwO1xuICAgIF9ldmVudFR5cGVzID0gT2JzZXJ2ZXIuZXZlbnRUeXBlcyA9IChcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbCA/IFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIiA6ICEoXCJvbnBvaW50ZXJkb3duXCIgaW4gX2RvY0VsKSA/IFwibW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZXVwLG1vdXNldXBcIiA6IFwicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIikuc3BsaXQoXCIsXCIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICB9LCA1MDApO1xuXG4gICAgX3NldFNjcm9sbFRyaWdnZXIoKTtcblxuICAgIF9jb3JlSW5pdHRlZCA9IDE7XG4gIH1cblxuICByZXR1cm4gX2NvcmVJbml0dGVkO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5fc2Nyb2xsZXJzLmNhY2hlID0gMDtcbmV4cG9ydCB2YXIgT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPYnNlcnZlcih2YXJzKSB7XG4gICAgdGhpcy5pbml0KHZhcnMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9ic2VydmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycykge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpO1xuICAgIFNjcm9sbFRyaWdnZXIgfHwgX3NldFNjcm9sbFRyaWdnZXIoKTtcbiAgICB2YXIgdG9sZXJhbmNlID0gdmFycy50b2xlcmFuY2UsXG4gICAgICAgIGRyYWdNaW5pbXVtID0gdmFycy5kcmFnTWluaW11bSxcbiAgICAgICAgdHlwZSA9IHZhcnMudHlwZSxcbiAgICAgICAgdGFyZ2V0ID0gdmFycy50YXJnZXQsXG4gICAgICAgIGxpbmVIZWlnaHQgPSB2YXJzLmxpbmVIZWlnaHQsXG4gICAgICAgIGRlYm91bmNlID0gdmFycy5kZWJvdW5jZSxcbiAgICAgICAgcHJldmVudERlZmF1bHQgPSB2YXJzLnByZXZlbnREZWZhdWx0LFxuICAgICAgICBvblN0b3AgPSB2YXJzLm9uU3RvcCxcbiAgICAgICAgb25TdG9wRGVsYXkgPSB2YXJzLm9uU3RvcERlbGF5LFxuICAgICAgICBpZ25vcmUgPSB2YXJzLmlnbm9yZSxcbiAgICAgICAgd2hlZWxTcGVlZCA9IHZhcnMud2hlZWxTcGVlZCxcbiAgICAgICAgZXZlbnQgPSB2YXJzLmV2ZW50LFxuICAgICAgICBvbkRyYWdTdGFydCA9IHZhcnMub25EcmFnU3RhcnQsXG4gICAgICAgIG9uRHJhZ0VuZCA9IHZhcnMub25EcmFnRW5kLFxuICAgICAgICBvbkRyYWcgPSB2YXJzLm9uRHJhZyxcbiAgICAgICAgb25QcmVzcyA9IHZhcnMub25QcmVzcyxcbiAgICAgICAgb25SZWxlYXNlID0gdmFycy5vblJlbGVhc2UsXG4gICAgICAgIG9uUmlnaHQgPSB2YXJzLm9uUmlnaHQsXG4gICAgICAgIG9uTGVmdCA9IHZhcnMub25MZWZ0LFxuICAgICAgICBvblVwID0gdmFycy5vblVwLFxuICAgICAgICBvbkRvd24gPSB2YXJzLm9uRG93bixcbiAgICAgICAgb25DaGFuZ2VYID0gdmFycy5vbkNoYW5nZVgsXG4gICAgICAgIG9uQ2hhbmdlWSA9IHZhcnMub25DaGFuZ2VZLFxuICAgICAgICBvbkNoYW5nZSA9IHZhcnMub25DaGFuZ2UsXG4gICAgICAgIG9uVG9nZ2xlWCA9IHZhcnMub25Ub2dnbGVYLFxuICAgICAgICBvblRvZ2dsZVkgPSB2YXJzLm9uVG9nZ2xlWSxcbiAgICAgICAgb25Ib3ZlciA9IHZhcnMub25Ib3ZlcixcbiAgICAgICAgb25Ib3ZlckVuZCA9IHZhcnMub25Ib3ZlckVuZCxcbiAgICAgICAgb25Nb3ZlID0gdmFycy5vbk1vdmUsXG4gICAgICAgIGlnbm9yZUNoZWNrID0gdmFycy5pZ25vcmVDaGVjayxcbiAgICAgICAgaXNOb3JtYWxpemVyID0gdmFycy5pc05vcm1hbGl6ZXIsXG4gICAgICAgIG9uR2VzdHVyZVN0YXJ0ID0gdmFycy5vbkdlc3R1cmVTdGFydCxcbiAgICAgICAgb25HZXN0dXJlRW5kID0gdmFycy5vbkdlc3R1cmVFbmQsXG4gICAgICAgIG9uV2hlZWwgPSB2YXJzLm9uV2hlZWwsXG4gICAgICAgIG9uRW5hYmxlID0gdmFycy5vbkVuYWJsZSxcbiAgICAgICAgb25EaXNhYmxlID0gdmFycy5vbkRpc2FibGUsXG4gICAgICAgIG9uQ2xpY2sgPSB2YXJzLm9uQ2xpY2ssXG4gICAgICAgIHNjcm9sbFNwZWVkID0gdmFycy5zY3JvbGxTcGVlZCxcbiAgICAgICAgY2FwdHVyZSA9IHZhcnMuY2FwdHVyZSxcbiAgICAgICAgYWxsb3dDbGlja3MgPSB2YXJzLmFsbG93Q2xpY2tzLFxuICAgICAgICBsb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMsXG4gICAgICAgIG9uTG9ja0F4aXMgPSB2YXJzLm9uTG9ja0F4aXM7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHRhcmdldCkgfHwgX2RvY0VsO1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgaWdub3JlICYmIChpZ25vcmUgPSBnc2FwLnV0aWxzLnRvQXJyYXkoaWdub3JlKSk7XG4gICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDFlLTk7XG4gICAgZHJhZ01pbmltdW0gPSBkcmFnTWluaW11bSB8fCAwO1xuICAgIHdoZWVsU3BlZWQgPSB3aGVlbFNwZWVkIHx8IDE7XG4gICAgc2Nyb2xsU3BlZWQgPSBzY3JvbGxTcGVlZCB8fCAxO1xuICAgIHR5cGUgPSB0eXBlIHx8IFwid2hlZWwsdG91Y2gscG9pbnRlclwiO1xuICAgIGRlYm91bmNlID0gZGVib3VuY2UgIT09IGZhbHNlO1xuICAgIGxpbmVIZWlnaHQgfHwgKGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSkubGluZUhlaWdodCkgfHwgMjIpOyAvLyBub3RlOiBicm93c2VyIG1heSByZXBvcnQgXCJub3JtYWxcIiwgc28gZGVmYXVsdCB0byAyMi5cblxuICAgIHZhciBpZCxcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgIGRyYWdnZWQsXG4gICAgICAgIG1vdmVkLFxuICAgICAgICB3aGVlbGVkLFxuICAgICAgICBsb2NrZWQsXG4gICAgICAgIGF4aXMsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBwcmV2RGVsdGFYID0gMCxcbiAgICAgICAgcHJldkRlbHRhWSA9IDAsXG4gICAgICAgIHBhc3NpdmUgPSB2YXJzLnBhc3NpdmUgfHwgIXByZXZlbnREZWZhdWx0ICYmIHZhcnMucGFzc2l2ZSAhPT0gZmFsc2UsXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgLy8gZm9yIGRldmljZXMgdGhhdCBhY2NvbW1vZGF0ZSBtb3VzZSBldmVudHMgYW5kIHRvdWNoIGV2ZW50cywgd2UgbmVlZCB0byBkaXN0aW5ndWlzaC5cbiAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgIC8vIHdoZWVsLCBzY3JvbGwsIHBvaW50ZXIvdG91Y2hcbiAgICBkZWx0YVkgPSBbMCwgMCwgMF0sXG4gICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgcmV0dXJuIG9uQ2xpY2tUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgcmV0dXJuIChzZWxmLmV2ZW50ID0gZSkgJiYgaWdub3JlICYmIF9pc1dpdGhpbihlLnRhcmdldCwgaWdub3JlKSB8fCBpc1BvaW50ZXJPclRvdWNoICYmIGxpbWl0VG9Ub3VjaCAmJiBlLnBvaW50ZXJUeXBlICE9PSBcInRvdWNoXCIgfHwgaWdub3JlQ2hlY2sgJiYgaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCk7XG4gICAgfSxcbiAgICAgICAgb25TdG9wRnVuYyA9IGZ1bmN0aW9uIG9uU3RvcEZ1bmMoKSB7XG4gICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgb25TdG9wICYmIG9uU3RvcChzZWxmKTtcbiAgICB9LFxuICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgZHggPSBzZWxmLmRlbHRhWCA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVgpLFxuICAgICAgICAgIGR5ID0gc2VsZi5kZWx0YVkgPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFZKSxcbiAgICAgICAgICBjaGFuZ2VkWCA9IE1hdGguYWJzKGR4KSA+PSB0b2xlcmFuY2UsXG4gICAgICAgICAgY2hhbmdlZFkgPSBNYXRoLmFicyhkeSkgPj0gdG9sZXJhbmNlO1xuXG4gICAgICBvbkNoYW5nZSAmJiAoY2hhbmdlZFggfHwgY2hhbmdlZFkpICYmIG9uQ2hhbmdlKHNlbGYsIGR4LCBkeSwgZGVsdGFYLCBkZWx0YVkpOyAvLyBpbiBTY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCgpLCB3ZSBuZWVkIHRvIGtub3cgaWYgaXQgd2FzIHRvdWNoL3BvaW50ZXIgc28gd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIGRlbHRhWC9kZWx0YVkgQXJyYXlzIGJlZm9yZSB3ZSBjbGVhciB0aGVtIG91dC5cblxuICAgICAgaWYgKGNoYW5nZWRYKSB7XG4gICAgICAgIG9uUmlnaHQgJiYgc2VsZi5kZWx0YVggPiAwICYmIG9uUmlnaHQoc2VsZik7XG4gICAgICAgIG9uTGVmdCAmJiBzZWxmLmRlbHRhWCA8IDAgJiYgb25MZWZ0KHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVggJiYgb25DaGFuZ2VYKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVggJiYgc2VsZi5kZWx0YVggPCAwICE9PSBwcmV2RGVsdGFYIDwgMCAmJiBvblRvZ2dsZVgoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVggPSBzZWxmLmRlbHRhWDtcbiAgICAgICAgZGVsdGFYWzBdID0gZGVsdGFYWzFdID0gZGVsdGFYWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRZKSB7XG4gICAgICAgIG9uRG93biAmJiBzZWxmLmRlbHRhWSA+IDAgJiYgb25Eb3duKHNlbGYpO1xuICAgICAgICBvblVwICYmIHNlbGYuZGVsdGFZIDwgMCAmJiBvblVwKHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVkgJiYgb25DaGFuZ2VZKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVkgJiYgc2VsZi5kZWx0YVkgPCAwICE9PSBwcmV2RGVsdGFZIDwgMCAmJiBvblRvZ2dsZVkoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVkgPSBzZWxmLmRlbHRhWTtcbiAgICAgICAgZGVsdGFZWzBdID0gZGVsdGFZWzFdID0gZGVsdGFZWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmVkIHx8IGRyYWdnZWQpIHtcbiAgICAgICAgb25Nb3ZlICYmIG9uTW92ZShzZWxmKTtcblxuICAgICAgICBpZiAoZHJhZ2dlZCkge1xuICAgICAgICAgIG9uRHJhZ1N0YXJ0ICYmIGRyYWdnZWQgPT09IDEgJiYgb25EcmFnU3RhcnQoc2VsZik7XG4gICAgICAgICAgb25EcmFnICYmIG9uRHJhZyhzZWxmKTtcbiAgICAgICAgICBkcmFnZ2VkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vdmVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxvY2tlZCAmJiAhKGxvY2tlZCA9IGZhbHNlKSAmJiBvbkxvY2tBeGlzICYmIG9uTG9ja0F4aXMoc2VsZik7XG5cbiAgICAgIGlmICh3aGVlbGVkKSB7XG4gICAgICAgIG9uV2hlZWwoc2VsZik7XG4gICAgICAgIHdoZWVsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWQgPSAwO1xuICAgIH0sXG4gICAgICAgIG9uRGVsdGEgPSBmdW5jdGlvbiBvbkRlbHRhKHgsIHksIGluZGV4KSB7XG4gICAgICBkZWx0YVhbaW5kZXhdICs9IHg7XG4gICAgICBkZWx0YVlbaW5kZXhdICs9IHk7XG5cbiAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4KTtcblxuICAgICAgc2VsZi5fdnkudXBkYXRlKHkpO1xuXG4gICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgIH0sXG4gICAgICAgIG9uVG91Y2hPclBvaW50ZXJEZWx0YSA9IGZ1bmN0aW9uIG9uVG91Y2hPclBvaW50ZXJEZWx0YSh4LCB5KSB7XG4gICAgICBpZiAobG9ja0F4aXMgJiYgIWF4aXMpIHtcbiAgICAgICAgc2VsZi5heGlzID0gYXhpcyA9IE1hdGguYWJzKHgpID4gTWF0aC5hYnMoeSkgPyBcInhcIiA6IFwieVwiO1xuICAgICAgICBsb2NrZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyAhPT0gXCJ5XCIpIHtcbiAgICAgICAgZGVsdGFYWzJdICs9IHg7XG5cbiAgICAgICAgc2VsZi5fdngudXBkYXRlKHgsIHRydWUpOyAvLyB1cGRhdGUgdGhlIHZlbG9jaXR5IGFzIGZyZXF1ZW50bHkgYXMgcG9zc2libGUgaW5zdGVhZCBvZiBpbiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHNvIHRoYXQgdmVyeSBxdWljayB0b3VjaC1zY3JvbGxzIChmbGlja3MpIGZlZWwgbmF0dXJhbC4gSWYgaXQncyB0aGUgbW91c2UvdG91Y2gvcG9pbnRlciwgZm9yY2UgaXQgc28gdGhhdCB3ZSBnZXQgc25hcHB5L2FjY3VyYXRlIG1vbWVudHVtIHNjcm9sbC5cblxuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyAhPT0gXCJ4XCIpIHtcbiAgICAgICAgZGVsdGFZWzJdICs9IHk7XG5cbiAgICAgICAgc2VsZi5fdnkudXBkYXRlKHksIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgIH0sXG4gICAgICAgIF9vbkRyYWcgPSBmdW5jdGlvbiBfb25EcmFnKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlID0gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueSxcbiAgICAgICAgICBpc0RyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nO1xuICAgICAgc2VsZi54ID0geDtcbiAgICAgIHNlbGYueSA9IHk7XG5cbiAgICAgIGlmIChpc0RyYWdnaW5nIHx8IChkeCB8fCBkeSkgJiYgKE1hdGguYWJzKHNlbGYuc3RhcnRYIC0geCkgPj0gZHJhZ01pbmltdW0gfHwgTWF0aC5hYnMoc2VsZi5zdGFydFkgLSB5KSA+PSBkcmFnTWluaW11bSkpIHtcbiAgICAgICAgZHJhZ2dlZCA9IGlzRHJhZ2dpbmcgPyAyIDogMTsgLy8gZHJhZ2dlZDogMCA9IG5vdCBkcmFnZ2luZywgMSA9IGZpcnN0IGRyYWcsIDIgPSBub3JtYWwgZHJhZ1xuXG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgKHNlbGYuaXNEcmFnZ2luZyA9IHRydWUpO1xuICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBfb25QcmVzcyA9IHNlbGYub25QcmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpIHx8IGUgJiYgZS5idXR0b24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmF4aXMgPSBheGlzID0gbnVsbDtcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICBzZWxmLmlzUHJlc3NlZCA9IHRydWU7XG4gICAgICBlID0gX2dldEV2ZW50KGUpOyAvLyBub3RlOiBtYXkgbmVlZCB0byBwcmV2ZW50RGVmYXVsdCg/KSBXb24ndCBzaWRlLXNjcm9sbCBvbiBpT1MgU2FmYXJpIGlmIHdlIGRvLCB0aG91Z2guXG5cbiAgICAgIHByZXZEZWx0YVggPSBwcmV2RGVsdGFZID0gMDtcbiAgICAgIHNlbGYuc3RhcnRYID0gc2VsZi54ID0gZS5jbGllbnRYO1xuICAgICAgc2VsZi5zdGFydFkgPSBzZWxmLnkgPSBlLmNsaWVudFk7XG5cbiAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7IC8vIG90aGVyd2lzZSB0aGUgdDIgbWF5IGJlIHN0YWxlIGlmIHRoZSB1c2VyIHRvdWNoZXMgYW5kIGZsaWNrcyBzdXBlciBmYXN0IGFuZCByZWxlYXNlcyBpbiBsZXNzIHRoYW4gMiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdGlja3MsIGNhdXNpbmcgdmVsb2NpdHkgdG8gYmUgMC5cblxuXG4gICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICBfYWRkTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCBwYXNzaXZlLCB0cnVlKTtcblxuICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICBvblByZXNzICYmIG9uUHJlc3Moc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uUmVsZWFzZSA9IHNlbGYub25SZWxlYXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcblxuICAgICAgdmFyIGlzVHJhY2tpbmdEcmFnID0gIWlzTmFOKHNlbGYueSAtIHNlbGYuc3RhcnRZKSxcbiAgICAgICAgICB3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcbiAgICAgICAgICBpc0RyYWdOb3RDbGljayA9IHdhc0RyYWdnaW5nICYmIChNYXRoLmFicyhzZWxmLnggLSBzZWxmLnN0YXJ0WCkgPiAzIHx8IE1hdGguYWJzKHNlbGYueSAtIHNlbGYuc3RhcnRZKSA+IDMpLFxuICAgICAgICAgIC8vIHNvbWUgdG91Y2ggZGV2aWNlcyBuZWVkIHNvbWUgd2lnZ2xlIHJvb20gaW4gdGVybXMgb2Ygc2Vuc2luZyBjbGlja3MgLSB0aGUgZmluZ2VyIG1heSBtb3ZlIGEgZmV3IHBpeGVscy5cbiAgICAgIGV2ZW50RGF0YSA9IF9nZXRFdmVudChlKTtcblxuICAgICAgaWYgKCFpc0RyYWdOb3RDbGljayAmJiBpc1RyYWNraW5nRHJhZykge1xuICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7IC8vaWYgKHByZXZlbnREZWZhdWx0ICYmIGFsbG93Q2xpY2tzICYmIHNlbGYuaXNQcmVzc2VkKSB7IC8vIGNoZWNrIGlzUHJlc3NlZCBiZWNhdXNlIGluIGEgcmFyZSBlZGdlIGNhc2UsIHRoZSBpbnB1dE9ic2VydmVyIGluIFNjcm9sbFRyaWdnZXIgbWF5IHN0b3BQcm9wYWdhdGlvbigpIG9uIHRoZSBwcmVzcy9kcmFnLCBzbyB0aGUgb25SZWxlYXNlIG1heSBnZXQgZmlyZWQgd2l0aG91dCB0aGUgb25QcmVzcy9vbkRyYWcgZXZlciBnZXR0aW5nIGNhbGxlZCwgdGh1cyBpdCBjb3VsZCB0cmlnZ2VyIGEgY2xpY2sgdG8gb2NjdXIgb24gYSBsaW5rIGFmdGVyIHNjcm9sbC1kcmFnZ2luZyBpdC5cblxuXG4gICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcykge1xuICAgICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wOCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cbiAgICAgICAgICAgIGlmIChfZ2V0VGltZSgpIC0gb25DbGlja1RpbWUgPiAzMDAgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xpY2spIHtcbiAgICAgICAgICAgICAgICAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgbW9iaWxlIFNhZmFyaSkgZG9uJ3QgcHJvcGVybHkgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG93bmVyRG9jLmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIF93aW4sIDEsIGV2ZW50RGF0YS5zY3JlZW5YLCBldmVudERhdGEuc2NyZWVuWSwgZXZlbnREYXRhLmNsaWVudFgsIGV2ZW50RGF0YS5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChzeW50aGV0aWNFdmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcbiAgICAgIG9uU3RvcCAmJiB3YXNEcmFnZ2luZyAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICBkcmFnZ2VkICYmIHVwZGF0ZSgpOyAvLyBpbiBjYXNlIGRlYm91bmNpbmcsIHdlIGRvbid0IHdhbnQgb25EcmFnIHRvIGZpcmUgQUZURVIgb25EcmFnRW5kKCkuXG5cbiAgICAgIG9uRHJhZ0VuZCAmJiB3YXNEcmFnZ2luZyAmJiBvbkRyYWdFbmQoc2VsZik7XG4gICAgICBvblJlbGVhc2UgJiYgb25SZWxlYXNlKHNlbGYsIGlzRHJhZ05vdENsaWNrKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiBfb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgcmV0dXJuIGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMSAmJiAoc2VsZi5pc0dlc3R1cmluZyA9IHRydWUpICYmIG9uR2VzdHVyZVN0YXJ0KGUsIHNlbGYuaXNEcmFnZ2luZyk7XG4gICAgfSxcbiAgICAgICAgX29uR2VzdHVyZUVuZCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVFbmQoKSB7XG4gICAgICByZXR1cm4gKHNlbGYuaXNHZXN0dXJpbmcgPSBmYWxzZSkgfHwgb25HZXN0dXJlRW5kKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIG9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgICB5ID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIG9uRGVsdGEoKHggLSBzY3JvbGxYKSAqIHNjcm9sbFNwZWVkLCAoeSAtIHNjcm9sbFkpICogc2Nyb2xsU3BlZWQsIDEpO1xuICAgICAgc2Nyb2xsWCA9IHg7XG4gICAgICBzY3JvbGxZID0geTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0sXG4gICAgICAgIF9vbldoZWVsID0gZnVuY3Rpb24gX29uV2hlZWwoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgb25XaGVlbCAmJiAod2hlZWxlZCA9IHRydWUpO1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSAoZS5kZWx0YU1vZGUgPT09IDEgPyBsaW5lSGVpZ2h0IDogZS5kZWx0YU1vZGUgPT09IDIgPyBfd2luLmlubmVySGVpZ2h0IDogMSkgKiB3aGVlbFNwZWVkO1xuICAgICAgb25EZWx0YShlLmRlbHRhWCAqIG11bHRpcGxpZXIsIGUuZGVsdGFZICogbXVsdGlwbGllciwgMCk7XG4gICAgICBvblN0b3AgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0sXG4gICAgICAgIF9vbk1vdmUgPSBmdW5jdGlvbiBfb25Nb3ZlKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgeCA9IGUuY2xpZW50WCxcbiAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICBkeSA9IHkgLSBzZWxmLnk7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcbiAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgKGR4IHx8IGR5KSAmJiBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlciA9IGZ1bmN0aW9uIF9vbkhvdmVyKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlcihzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlckVuZCA9IGZ1bmN0aW9uIF9vbkhvdmVyRW5kKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlckVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICAgIHJldHVybiBfaWdub3JlQ2hlY2soZSkgfHwgX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSAmJiBvbkNsaWNrKHNlbGYpO1xuICAgIH07XG5cbiAgICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjID0gZ3NhcC5kZWxheWVkQ2FsbChvblN0b3BEZWxheSB8fCAwLjI1LCBvblN0b3BGdW5jKS5wYXVzZSgpO1xuICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgIHNlbGYuX3Z4ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgc2VsZi5fdnkgPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLnNjcm9sbFggPSBzY3JvbGxGdW5jWDtcbiAgICBzZWxmLnNjcm9sbFkgPSBzY3JvbGxGdW5jWTtcbiAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcblxuICAgIF9jb250ZXh0KHRoaXMpO1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIHR5cGUuaW5kZXhPZihcInNjcm9sbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBwYXNzaXZlLCBjYXB0dXJlKTtcbiAgICAgICAgdHlwZS5pbmRleE9mKFwid2hlZWxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBwYXNzaXZlLCBjYXB0dXJlKTtcblxuICAgICAgICBpZiAodHlwZS5pbmRleE9mKFwidG91Y2hcIikgPj0gMCAmJiBfaXNUb3VjaCB8fCB0eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID49IDApIHtcbiAgICAgICAgICBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIHBhc3NpdmUsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIGFsbG93Q2xpY2tzICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBvbkNsaWNrICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgX29uQ2xpY2spO1xuICAgICAgICAgIG9uR2VzdHVyZVN0YXJ0ICYmIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcbiAgICAgICAgICBvbkdlc3R1cmVFbmQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG4gICAgICAgICAgb25Ib3ZlciAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImVudGVyXCIsIF9vbkhvdmVyKTtcbiAgICAgICAgICBvbkhvdmVyRW5kICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuICAgICAgICAgIG9uTW92ZSAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcIm1vdmVcIiwgX29uTW92ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmlzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNHZXN0dXJpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IG1vdmVkID0gZHJhZ2dlZCA9IGZhbHNlO1xuXG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKTtcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICAgIGUgJiYgZS50eXBlICYmIF9vblByZXNzKGUpO1xuICAgICAgICBvbkVuYWJsZSAmJiBvbkVuYWJsZShzZWxmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIHNlbGYuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICAvLyBvbmx5IHJlbW92ZSB0aGUgX29uU2Nyb2xsIGxpc3RlbmVyIGlmIHRoZXJlIGFyZW4ndCBhbnkgb3RoZXJzIHRoYXQgcmVseSBvbiB0aGUgZnVuY3Rpb25hbGl0eS5cbiAgICAgICAgX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gbyAhPT0gc2VsZiAmJiBfaXNWaWV3cG9ydChvLnRhcmdldCk7XG4gICAgICAgIH0pLmxlbmd0aCB8fCBfcmVtb3ZlTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIGlmIChzZWxmLmlzUHJlc3NlZCkge1xuICAgICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX2V2ZW50VHlwZXNbMF0sIF9vblByZXNzLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzJdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgdHJ1ZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlZW5kXCIsIF9vbkdlc3R1cmVFbmQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcblxuICAgICAgICBzZWxmLmlzRW5hYmxlZCA9IHNlbGYuaXNQcmVzc2VkID0gc2VsZi5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIG9uRGlzYWJsZSAmJiBvbkRpc2FibGUoc2VsZik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYua2lsbCA9IHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5kaXNhYmxlKCk7XG5cbiAgICAgIHZhciBpID0gX29ic2VydmVycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX29ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICBfbm9ybWFsaXplciA9PT0gc2VsZiAmJiAoX25vcm1hbGl6ZXIgPSAwKTtcbiAgICB9O1xuXG4gICAgX29ic2VydmVycy5wdXNoKHNlbGYpO1xuXG4gICAgaXNOb3JtYWxpemVyICYmIF9pc1ZpZXdwb3J0KHRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gc2VsZik7XG4gICAgc2VsZi5lbmFibGUoZXZlbnQpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICBrZXk6IFwidmVsb2NpdHlYXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnguZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmVsb2NpdHlZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2JzZXJ2ZXI7XG59KCk7XG5PYnNlcnZlci52ZXJzaW9uID0gXCIzLjEzLjBcIjtcblxuT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cbk9ic2VydmVyLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuXG5PYnNlcnZlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLnNsaWNlKCk7XG59O1xuXG5PYnNlcnZlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvLnZhcnMuaWQgPT09IGlkO1xuICB9KVswXTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5leHBvcnQgeyBPYnNlcnZlciBhcyBkZWZhdWx0LCBfaXNWaWV3cG9ydCwgX3Njcm9sbGVycywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9wcm94aWVzLCBfZ2V0VmVsb2NpdHlQcm9wLCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfZ2V0VGFyZ2V0IH07IiwiLyohXG4gKiBTY3JvbGxUcmlnZ2VyIDMuMTMuMFxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjUsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZVxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIF9nZXRUYXJnZXQsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9zY3JvbGxlcnMsIF9wcm94aWVzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX2dldFZlbG9jaXR5UHJvcCB9IGZyb20gXCIuL09ic2VydmVyLmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9yb290LFxuICAgIF9yZXNpemVEZWxheSxcbiAgICBfdG9BcnJheSxcbiAgICBfY2xhbXAsXG4gICAgX3RpbWUyLFxuICAgIF9zeW5jSW50ZXJ2YWwsXG4gICAgX3JlZnJlc2hpbmcsXG4gICAgX3BvaW50ZXJJc0Rvd24sXG4gICAgX3RyYW5zZm9ybVByb3AsXG4gICAgX2ksXG4gICAgX3ByZXZXaWR0aCxcbiAgICBfcHJldkhlaWdodCxcbiAgICBfYXV0b1JlZnJlc2gsXG4gICAgX3NvcnQsXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfaWdub3JlUmVzaXplLFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9pZ25vcmVNb2JpbGVSZXNpemUsXG4gICAgX2Jhc2VTY3JlZW5IZWlnaHQsXG4gICAgX2Jhc2VTY3JlZW5XaWR0aCxcbiAgICBfZml4SU9TQnVnLFxuICAgIF9jb250ZXh0LFxuICAgIF9zY3JvbGxSZXN0b3JhdGlvbixcbiAgICBfZGl2MTAwdmgsXG4gICAgXzEwMHZoLFxuICAgIF9pc1JldmVydGVkLFxuICAgIF9jbGFtcGluZ01heCxcbiAgICBfbGltaXRDYWxsYmFja3MsXG4gICAgLy8gaWYgdHJ1ZSwgd2UnbGwgb25seSB0cmlnZ2VyIGNhbGxiYWNrcyBpZiB0aGUgYWN0aXZlIHN0YXRlIHRvZ2dsZXMsIHNvIGlmIHlvdSBzY3JvbGwgaW1tZWRpYXRlbHkgcGFzdCBib3RoIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBhIFNjcm9sbFRyaWdnZXIgKHRodXMgaW5hY3RpdmUgdG8gaW5hY3RpdmUpLCBuZWl0aGVyIGl0cyBvbkVudGVyIG5vciBvbkxlYXZlIHdpbGwgYmUgY2FsbGVkLiBUaGlzIGlzIHVzZWZ1bCBkdXJpbmcgc3RhcnR1cC5cbl9zdGFydHVwID0gMSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF90aW1lMSA9IF9nZXRUaW1lKCksXG4gICAgX2xhc3RTY3JvbGxUaW1lID0gMCxcbiAgICBfZW5hYmxlZCA9IDAsXG4gICAgX3BhcnNlQ2xhbXAgPSBmdW5jdGlvbiBfcGFyc2VDbGFtcCh2YWx1ZSwgdHlwZSwgc2VsZikge1xuICB2YXIgY2xhbXAgPSBfaXNTdHJpbmcodmFsdWUpICYmICh2YWx1ZS5zdWJzdHIoMCwgNikgPT09IFwiY2xhbXAoXCIgfHwgdmFsdWUuaW5kZXhPZihcIm1heFwiKSA+IC0xKTtcbiAgc2VsZltcIl9cIiArIHR5cGUgKyBcIkNsYW1wXCJdID0gY2xhbXA7XG4gIHJldHVybiBjbGFtcCA/IHZhbHVlLnN1YnN0cig2LCB2YWx1ZS5sZW5ndGggLSA3KSA6IHZhbHVlO1xufSxcbiAgICBfa2VlcENsYW1wID0gZnVuY3Rpb24gX2tlZXBDbGFtcCh2YWx1ZSwgY2xhbXApIHtcbiAgcmV0dXJuIGNsYW1wICYmICghX2lzU3RyaW5nKHZhbHVlKSB8fCB2YWx1ZS5zdWJzdHIoMCwgNikgIT09IFwiY2xhbXAoXCIpID8gXCJjbGFtcChcIiArIHZhbHVlICsgXCIpXCIgOiB2YWx1ZTtcbn0sXG4gICAgX3JhZkJ1Z0ZpeCA9IGZ1bmN0aW9uIF9yYWZCdWdGaXgoKSB7XG4gIHJldHVybiBfZW5hYmxlZCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3JhZkJ1Z0ZpeCk7XG59LFxuICAgIC8vIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCksIHNjcmVlbiByZXBhaW50cyB3ZXJlbid0IGNvbnNpc3RlbnQgdW5sZXNzIHdlIGhhZCBTT01FVEhJTkcgcXVldWVkIHVwIGluIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpISBTbyB0aGlzIGp1c3QgY3JlYXRlcyBhIHN1cGVyIHNpbXBsZSBsb29wIHRvIGtlZXAgaXQgYWxpdmUgYW5kIHNtb290aCBvdXQgcmVwYWludHMuXG5fcG9pbnRlckRvd25IYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJEb3duSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbn0sXG4gICAgX3BvaW50ZXJVcEhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlclVwSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMDtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHYpIHtcbiAgcmV0dXJuIHY7XG59LFxuICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCBfd2luZG93RXhpc3RzKCkgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfaXNWaWV3cG9ydCA9IGZ1bmN0aW9uIF9pc1ZpZXdwb3J0KGUpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZSk7XG59LFxuICAgIF9nZXRWaWV3cG9ydERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkaW1lbnNpb25Qcm9wZXJ0eSkge1xuICByZXR1cm4gKGRpbWVuc2lvblByb3BlcnR5ID09PSBcIkhlaWdodFwiID8gXzEwMHZoIDogX3dpbltcImlubmVyXCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV0pIHx8IF9kb2NFbFtcImNsaWVudFwiICsgZGltZW5zaW9uUHJvcGVydHldIHx8IF9ib2R5W1wiY2xpZW50XCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV07XG59LFxuICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gICAgX3dpbk9mZnNldHMuaGVpZ2h0ID0gXzEwMHZoO1xuICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgfSk7XG59LFxuICAgIF9nZXRTaXplRnVuYyA9IGZ1bmN0aW9uIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgX3JlZikge1xuICB2YXIgZCA9IF9yZWYuZCxcbiAgICAgIGQyID0gX3JlZi5kMixcbiAgICAgIGEgPSBfcmVmLmE7XG4gIHJldHVybiAoYSA9IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYSgpW2RdO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaXNWaWV3cG9ydCA/IF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYyKSB7XG4gIHZhciBzID0gX3JlZjIucyxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBkID0gX3JlZjIuZCxcbiAgICAgIGEgPSBfcmVmMi5hO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyAoX2RvY0VsW3NdIHx8IF9ib2R5W3NdKSAtIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBlbGVtZW50W3NdIC0gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdKTtcbn0sXG4gICAgX2l0ZXJhdGVBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uIF9pdGVyYXRlQXV0b1JlZnJlc2goZnVuYywgZXZlbnRzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX2F1dG9SZWZyZXNoLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgKCFldmVudHMgfHwgfmV2ZW50cy5pbmRleE9mKF9hdXRvUmVmcmVzaFtpICsgMV0pKSAmJiBmdW5jKF9hdXRvUmVmcmVzaFtpXSwgX2F1dG9SZWZyZXNoW2kgKyAxXSwgX2F1dG9SZWZyZXNoW2kgKyAyXSk7XG4gIH1cbn0sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9lbmRBbmltYXRpb24gPSBmdW5jdGlvbiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgcmV2ZXJzZWQsIHBhdXNlKSB7XG4gIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKHJldmVyc2VkID8gMCA6IDEpICYmIHBhdXNlICYmIGFuaW1hdGlvbi5wYXVzZSgpO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soc2VsZiwgZnVuYykge1xuICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IHNlbGYuX2N0eCA/IHNlbGYuX2N0eC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmMoc2VsZik7XG4gICAgfSkgOiBmdW5jKHNlbGYpO1xuICAgIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbiAgfVxufSxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICBfdG9wID0gXCJ0b3BcIixcbiAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgX3dpZHRoID0gXCJ3aWR0aFwiLFxuICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICBfTGVmdCA9IFwiTGVmdFwiLFxuICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgIF9wYWRkaW5nID0gXCJwYWRkaW5nXCIsXG4gICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgIF9IZWlnaHQgPSBcIkhlaWdodFwiLFxuICAgIF9weCA9IFwicHhcIixcbiAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0sXG4gICAgX21ha2VQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiBfbWFrZVBvc2l0aW9uYWJsZShlbGVtZW50KSB7XG4gIC8vIGlmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIHBvc2l0aW9uOiBhYnNvbHV0ZSBvciBmaXhlZCwgbGVhdmUgdGhhdCwgb3RoZXJ3aXNlIG1ha2UgaXQgcG9zaXRpb246IHJlbGF0aXZlXG4gIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcC50byhlbGVtZW50LCB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHhQZXJjZW50OiAwLFxuICAgIHlQZXJjZW50OiAwLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHJvdGF0aW9uWDogMCxcbiAgICByb3RhdGlvblk6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgc2tld1g6IDAsXG4gICAgc2tld1k6IDBcbiAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gIHJldHVybiBib3VuZHM7XG59LFxuICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjMpIHtcbiAgdmFyIGQyID0gX3JlZjMuZDI7XG4gIHJldHVybiBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0gfHwgZWxlbWVudFtcImNsaWVudFwiICsgZDJdIHx8IDA7XG59LFxuICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIF9nZXRDbG9zZXN0TGFiZWwgPSBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGdzYXAudXRpbHMuc25hcChfZ2V0TGFiZWxSYXRpb0FycmF5KGFuaW1hdGlvbiksIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX3NuYXBEaXJlY3Rpb25hbCA9IGZ1bmN0aW9uIF9zbmFwRGlyZWN0aW9uYWwoc25hcEluY3JlbWVudE9yQXJyYXkpIHtcbiAgdmFyIHNuYXAgPSBnc2FwLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgYSA9IEFycmF5LmlzQXJyYXkoc25hcEluY3JlbWVudE9yQXJyYXkpICYmIHNuYXBJbmNyZW1lbnRPckFycmF5LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICByZXR1cm4gYSA/IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgfVxuXG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIHNuYXAodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB2YWx1ZSAtPSB0aHJlc2hvbGQ7IC8vIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9ycy4gSWYgd2UncmUgdG9vIHN0cmljdCwgaXQgbWlnaHQgc25hcCBmb3J3YXJkLCB0aGVuIGltbWVkaWF0ZWx5IGFnYWluLCBhbmQgYWdhaW4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFbaSAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gYS5sZW5ndGg7XG4gICAgICB2YWx1ZSArPSB0aHJlc2hvbGQ7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhWzBdO1xuICB9IDogZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgc25hcHBlZCA9IHNuYXAodmFsdWUpO1xuICAgIHJldHVybiAhZGlyZWN0aW9uIHx8IE1hdGguYWJzKHNuYXBwZWQgLSB2YWx1ZSkgPCB0aHJlc2hvbGQgfHwgc25hcHBlZCAtIHZhbHVlIDwgMCA9PT0gZGlyZWN0aW9uIDwgMCA/IHNuYXBwZWQgOiBzbmFwKGRpcmVjdGlvbiA8IDAgPyB2YWx1ZSAtIHNuYXBJbmNyZW1lbnRPckFycmF5IDogdmFsdWUgKyBzbmFwSW5jcmVtZW50T3JBcnJheSk7XG4gIH07XG59LFxuICAgIF9nZXRMYWJlbEF0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24odGltZWxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSkodmFsdWUsIHN0LmRpcmVjdGlvbik7XG4gIH07XG59LFxuICAgIF9tdWx0aUxpc3RlbmVyID0gZnVuY3Rpb24gX211bHRpTGlzdGVuZXIoZnVuYywgZWxlbWVudCwgdHlwZXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0eXBlcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBmdW5jKGVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgfSk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfd2hlZWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF93aGVlbExpc3RlbmVyKGZ1bmMsIGVsLCBzY3JvbGxGdW5jKSB7XG4gIHNjcm9sbEZ1bmMgPSBzY3JvbGxGdW5jICYmIHNjcm9sbEZ1bmMud2hlZWxIYW5kbGVyO1xuXG4gIGlmIChzY3JvbGxGdW5jKSB7XG4gICAgZnVuYyhlbCwgXCJ3aGVlbFwiLCBzY3JvbGxGdW5jKTtcbiAgICBmdW5jKGVsLCBcInRvdWNobW92ZVwiLCBzY3JvbGxGdW5jKTtcbiAgfVxufSxcbiAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gIHN0YXJ0Q29sb3I6IFwiZ3JlZW5cIixcbiAgZW5kQ29sb3I6IFwicmVkXCIsXG4gIGluZGVudDogMCxcbiAgZm9udFNpemU6IFwiMTZweFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gIGFudGljaXBhdGVQaW46IDBcbn0sXG4gICAgX2tleXdvcmRzID0ge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGNlbnRlcjogMC41LFxuICBib3R0b206IDEsXG4gIHJpZ2h0OiAxXG59LFxuICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgIGlmICh+ZXFJbmRleCkge1xuICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNCwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICB2YXIgc3RhcnRDb2xvciA9IF9yZWY0LnN0YXJ0Q29sb3IsXG4gICAgICBlbmRDb2xvciA9IF9yZWY0LmVuZENvbG9yLFxuICAgICAgZm9udFNpemUgPSBfcmVmNC5mb250U2l6ZSxcbiAgICAgIGluZGVudCA9IF9yZWY0LmluZGVudCxcbiAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNC5mb250V2VpZ2h0O1xuXG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IF9pc1ZpZXdwb3J0KGNvbnRhaW5lcikgfHwgX2dldFByb3h5UHJvcChjb250YWluZXIsIFwicGluVHlwZVwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgaXNTY3JvbGxlciA9IHR5cGUuaW5kZXhPZihcInNjcm9sbGVyXCIpICE9PSAtMSxcbiAgICAgIHBhcmVudCA9IHVzZUZpeGVkUG9zaXRpb24gPyBfYm9keSA6IGNvbnRhaW5lcixcbiAgICAgIGlzU3RhcnQgPSB0eXBlLmluZGV4T2YoXCJzdGFydFwiKSAhPT0gLTEsXG4gICAgICBjb2xvciA9IGlzU3RhcnQgPyBzdGFydENvbG9yIDogZW5kQ29sb3IsXG4gICAgICBjc3MgPSBcImJvcmRlci1jb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC1zaXplOlwiICsgZm9udFNpemUgKyBcIjtjb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC13ZWlnaHQ6XCIgKyBmb250V2VpZ2h0ICsgXCI7cG9pbnRlci1ldmVudHM6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixBcmlhbDt6LWluZGV4OjEwMDA7cGFkZGluZzo0cHggOHB4O2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpzb2xpZDtcIjtcblxuICBjc3MgKz0gXCJwb3NpdGlvbjpcIiArICgoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24pICYmIHVzZUZpeGVkUG9zaXRpb24gPyBcImZpeGVkO1wiIDogXCJhYnNvbHV0ZTtcIik7XG4gIChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gIGUuX2lzU3RhcnQgPSBpc1N0YXJ0O1xuICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlICsgKG5hbWUgPyBcIiBtYXJrZXItXCIgKyBuYW1lIDogXCJcIikpO1xuICBlLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gIGUuaW5uZXJUZXh0ID0gbmFtZSB8fCBuYW1lID09PSAwID8gdHlwZSArIFwiLVwiICsgbmFtZSA6IHR5cGU7XG4gIHBhcmVudC5jaGlsZHJlblswXSA/IHBhcmVudC5pbnNlcnRCZWZvcmUoZSwgcGFyZW50LmNoaWxkcmVuWzBdKSA6IHBhcmVudC5hcHBlbmRDaGlsZChlKTtcbiAgZS5fb2Zmc2V0ID0gZVtcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICBfcG9zaXRpb25NYXJrZXIoZSwgMCwgZGlyZWN0aW9uLCBpc1N0YXJ0KTtcblxuICByZXR1cm4gZTtcbn0sXG4gICAgX3Bvc2l0aW9uTWFya2VyID0gZnVuY3Rpb24gX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgc3RhcnQsIGRpcmVjdGlvbiwgZmxpcHBlZCkge1xuICB2YXIgdmFycyA9IHtcbiAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgfSxcbiAgICAgIHNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwib3MyXCIgOiBcInAyXCJdLFxuICAgICAgb3Bwb3NpdGVTaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcInAyXCIgOiBcIm9zMlwiXTtcbiAgbWFya2VyLl9pc0ZsaXBwZWQgPSBmbGlwcGVkO1xuICB2YXJzW2RpcmVjdGlvbi5hICsgXCJQZXJjZW50XCJdID0gZmxpcHBlZCA/IC0xMDAgOiAwO1xuICB2YXJzW2RpcmVjdGlvbi5hXSA9IGZsaXBwZWQgPyBcIjFweFwiIDogMDtcbiAgdmFyc1tcImJvcmRlclwiICsgc2lkZSArIF9XaWR0aF0gPSAxO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBvcHBvc2l0ZVNpZGUgKyBfV2lkdGhdID0gMDtcbiAgdmFyc1tkaXJlY3Rpb24ucF0gPSBzdGFydCArIFwicHhcIjtcbiAgZ3NhcC5zZXQobWFya2VyLCB2YXJzKTtcbn0sXG4gICAgX3RyaWdnZXJzID0gW10sXG4gICAgX2lkcyA9IHt9LFxuICAgIF9yYWZJRCxcbiAgICBfc3luYyA9IGZ1bmN0aW9uIF9zeW5jKCkge1xuICByZXR1cm4gX2dldFRpbWUoKSAtIF9sYXN0U2Nyb2xsVGltZSA+IDM0ICYmIChfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSkpO1xufSxcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIC8vIHByZXZpb3VzbHksIHdlIHRyaWVkIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGJ5IGJhdGNoaW5nL2RlZmVycmluZyB0byB0aGUgbmV4dCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSwgYnV0IGRpc2NvdmVyZWQgdGhhdCBTYWZhcmkgaGFzIGEgZmV3IGJ1Z3MgdGhhdCBtYWtlIHRoaXMgdW53b3JrYWJsZSAoZXNwZWNpYWxseSBvbiBpT1MpLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMTZjNDM1YjEyZWYwOWMzODEyNTIwNDgxOGU3YjQ1ZmM/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9Kak94WXBRLzNkZDY1Y2NlYzVhNjBmMWQ4NjJjMzU1ZDg0ZDE0NTYyP2VkaXRvcnM9MDAxMCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vRXhiclBOYS8wODdjZWYxOTdkYzM1NDQ1YTA5NTFlODkzNWM0MTUwMz9lZGl0b3JzPTAwMTBcbiAgaWYgKCFfbm9ybWFsaXplciB8fCAhX25vcm1hbGl6ZXIuaXNQcmVzc2VkIHx8IF9ub3JtYWxpemVyLnN0YXJ0WCA+IF9ib2R5LmNsaWVudFdpZHRoKSB7XG4gICAgLy8gaWYgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgdGhlIHNjcm9sbGJhciwgYWxsb3cgaXQuXG4gICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuXG4gICAgaWYgKF9ub3JtYWxpemVyKSB7XG4gICAgICBfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91cGRhdGVBbGwoKTsgLy8gU2FmYXJpIGluIHBhcnRpY3VsYXIgKG9uIGRlc2t0b3ApIE5FRURTIHRoZSBpbW1lZGlhdGUgdXBkYXRlIHJhdGhlciB0aGFuIHdhaXRpbmcgZm9yIGEgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgd2hlcmVhcyBpT1Mgc2VlbXMgdG8gYmVuZWZpdCBmcm9tIHdhaXRpbmcgZm9yIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB0aWNrLCBhdCBsZWFzdCB3aGVuIG5vcm1hbGl6aW5nLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vcUJZb3pxTz9lZGl0b3JzPTAxMTBcblxuICAgIH1cblxuICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSgpO1xuICB9XG59LFxuICAgIF9zZXRCYXNlRGltZW5zaW9ucyA9IGZ1bmN0aW9uIF9zZXRCYXNlRGltZW5zaW9ucygpIHtcbiAgX2Jhc2VTY3JlZW5XaWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgX2Jhc2VTY3JlZW5IZWlnaHQgPSBfd2luLmlubmVySGVpZ2h0O1xufSxcbiAgICBfb25SZXNpemUgPSBmdW5jdGlvbiBfb25SZXNpemUoZm9yY2UpIHtcbiAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAoZm9yY2UgPT09IHRydWUgfHwgIV9yZWZyZXNoaW5nICYmICFfaWdub3JlUmVzaXplICYmICFfZG9jLmZ1bGxzY3JlZW5FbGVtZW50ICYmICFfZG9jLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ICYmICghX2lnbm9yZU1vYmlsZVJlc2l6ZSB8fCBfYmFzZVNjcmVlbldpZHRoICE9PSBfd2luLmlubmVyV2lkdGggfHwgTWF0aC5hYnMoX3dpbi5pbm5lckhlaWdodCAtIF9iYXNlU2NyZWVuSGVpZ2h0KSA+IF93aW4uaW5uZXJIZWlnaHQgKiAwLjI1KSkgJiYgX3Jlc2l6ZURlbGF5LnJlc3RhcnQodHJ1ZSk7XG59LFxuICAgIC8vIGlnbm9yZSByZXNpemVzIHRyaWdnZXJlZCBieSByZWZyZXNoKClcbl9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9zb2Z0UmVmcmVzaCA9IGZ1bmN0aW9uIF9zb2Z0UmVmcmVzaCgpIHtcbiAgcmV0dXJuIF9yZW1vdmVMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpIHx8IF9yZWZyZXNoQWxsKHRydWUpO1xufSxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVyc1t0eXBlXSAmJiBfbGlzdGVuZXJzW3R5cGVdLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pIHx8IF9lbXB0eUFycmF5O1xufSxcbiAgICBfc2F2ZWRTdHlsZXMgPSBbXSxcbiAgICAvLyB3aGVuIFNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcygpIGlzIGNhbGxlZCwgdGhlIGlubGluZSBzdHlsZXMgYXJlIHJlY29yZGVkIGluIHRoaXMgQXJyYXkgaW4gYSBzZXF1ZW50aWFsIGZvcm1hdCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCBnc0NhY2hlLCBtZWRpYV0uIFRoaXMga2VlcHMgaXQgdmVyeSBtZW1vcnktZWZmaWNpZW50IGFuZCBmYXN0IHRvIGl0ZXJhdGUgdGhyb3VnaC5cbl9yZXZlcnRSZWNvcmRlZCA9IGZ1bmN0aW9uIF9yZXZlcnRSZWNvcmRlZChtZWRpYSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9zYXZlZFN0eWxlcy5sZW5ndGg7IGkgKz0gNSkge1xuICAgIGlmICghbWVkaWEgfHwgX3NhdmVkU3R5bGVzW2kgKyA0XSAmJiBfc2F2ZWRTdHlsZXNbaSArIDRdLnF1ZXJ5ID09PSBtZWRpYSkge1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLnN0eWxlLmNzc1RleHQgPSBfc2F2ZWRTdHlsZXNbaSArIDFdO1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLmdldEJCb3ggJiYgX3NhdmVkU3R5bGVzW2ldLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBfc2F2ZWRTdHlsZXNbaSArIDJdIHx8IFwiXCIpO1xuICAgICAgX3NhdmVkU3R5bGVzW2kgKyAzXS51bmNhY2hlID0gMTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3JldmVydEFsbCA9IGZ1bmN0aW9uIF9yZXZlcnRBbGwoa2lsbCwgbWVkaWEpIHtcbiAgdmFyIHRyaWdnZXI7XG5cbiAgZm9yIChfaSA9IDA7IF9pIDwgX3RyaWdnZXJzLmxlbmd0aDsgX2krKykge1xuICAgIHRyaWdnZXIgPSBfdHJpZ2dlcnNbX2ldO1xuXG4gICAgaWYgKHRyaWdnZXIgJiYgKCFtZWRpYSB8fCB0cmlnZ2VyLl9jdHggPT09IG1lZGlhKSkge1xuICAgICAgaWYgKGtpbGwpIHtcbiAgICAgICAgdHJpZ2dlci5raWxsKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJpZ2dlci5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2lzUmV2ZXJ0ZWQgPSB0cnVlO1xuICBtZWRpYSAmJiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpO1xuICBtZWRpYSB8fCBfZGlzcGF0Y2goXCJyZXZlcnRcIik7XG59LFxuICAgIF9jbGVhclNjcm9sbE1lbW9yeSA9IGZ1bmN0aW9uIF9jbGVhclNjcm9sbE1lbW9yeShzY3JvbGxSZXN0b3JhdGlvbiwgZm9yY2UpIHtcbiAgLy8gemVyby1vdXQgYWxsIHRoZSByZWNvcmRlZCBzY3JvbGwgcG9zaXRpb25zLiBEb24ndCB1c2UgX3RyaWdnZXJzIGJlY2F1c2UgaWYsIGZvciBleGFtcGxlLCAubWF0Y2hNZWRpYSgpIGlzIHVzZWQgdG8gY3JlYXRlIHNvbWUgU2Nyb2xsVHJpZ2dlcnMgYW5kIHRoZW4gdGhlIHVzZXIgcmVzaXplcyBhbmQgaXQgcmVtb3ZlcyBBTEwgU2Nyb2xsVHJpZ2dlcnMsIGFuZCB0aGVuIGdvIGJhY2sgdG8gYSBzaXplIHdoZXJlIHRoZXJlIGFyZSBTY3JvbGxUcmlnZ2VycywgaXQgd291bGQgaGF2ZSBrZXB0IHRoZSBwb3NpdGlvbihzKSBzYXZlZCBmcm9tIHRoZSBpbml0aWFsIHN0YXRlLlxuICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gIChmb3JjZSB8fCAhX3JlZnJlc2hpbmdBbGwpICYmIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG9iaikgJiYgb2JqLmNhY2hlSUQrKyAmJiAob2JqLnJlYyA9IDApO1xuICB9KTtcbiAgX2lzU3RyaW5nKHNjcm9sbFJlc3RvcmF0aW9uKSAmJiAoX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gX3Njcm9sbFJlc3RvcmF0aW9uID0gc2Nyb2xsUmVzdG9yYXRpb24pO1xufSxcbiAgICBfcmVmcmVzaGluZ0FsbCxcbiAgICBfcmVmcmVzaElEID0gMCxcbiAgICBfcXVldWVSZWZyZXNoSUQsXG4gICAgX3F1ZXVlUmVmcmVzaEFsbCA9IGZ1bmN0aW9uIF9xdWV1ZVJlZnJlc2hBbGwoKSB7XG4gIC8vIHdlIGRvbid0IHdhbnQgdG8gY2FsbCBfcmVmcmVzaEFsbCgpIGV2ZXJ5IHRpbWUgd2UgY3JlYXRlIGEgbmV3IFNjcm9sbFRyaWdnZXIgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSAtIGl0J3MgYmV0dGVyIHRvIGJhdGNoIHRoZW0uIFNvbWUgZnJhbWV3b3JrcyBkeW5hbWljYWxseSBsb2FkIGNvbnRlbnQgYW5kIHdlIGNhbid0IHJlbHkgb24gdGhlIHdpbmRvdydzIFwibG9hZFwiIG9yIFwiRE9NQ29udGVudExvYWRlZFwiIGV2ZW50cyB0byB0cmlnZ2VyIGl0LlxuICBpZiAoX3F1ZXVlUmVmcmVzaElEICE9PSBfcmVmcmVzaElEKSB7XG4gICAgdmFyIGlkID0gX3F1ZXVlUmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlkID09PSBfcmVmcmVzaElEICYmIF9yZWZyZXNoQWxsKHRydWUpO1xuICAgIH0pO1xuICB9XG59LFxuICAgIF9yZWZyZXNoMTAwdmggPSBmdW5jdGlvbiBfcmVmcmVzaDEwMHZoKCkge1xuICBfYm9keS5hcHBlbmRDaGlsZChfZGl2MTAwdmgpO1xuXG4gIF8xMDB2aCA9ICFfbm9ybWFsaXplciAmJiBfZGl2MTAwdmgub2Zmc2V0SGVpZ2h0IHx8IF93aW4uaW5uZXJIZWlnaHQ7XG5cbiAgX2JvZHkucmVtb3ZlQ2hpbGQoX2RpdjEwMHZoKTtcbn0sXG4gICAgX2hpZGVBbGxNYXJrZXJzID0gZnVuY3Rpb24gX2hpZGVBbGxNYXJrZXJzKGhpZGUpIHtcbiAgcmV0dXJuIF90b0FycmF5KFwiLmdzYXAtbWFya2VyLXN0YXJ0LCAuZ3NhcC1tYXJrZXItZW5kLCAuZ3NhcC1tYXJrZXItc2Nyb2xsZXItc3RhcnQsIC5nc2FwLW1hcmtlci1zY3JvbGxlci1lbmRcIikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwuc3R5bGUuZGlzcGxheSA9IGhpZGUgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgfSk7XG59LFxuICAgIF9yZWZyZXNoQWxsID0gZnVuY3Rpb24gX3JlZnJlc2hBbGwoZm9yY2UsIHNraXBSZXZlcnQpIHtcbiAgX2RvY0VsID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7IC8vIHNvbWUgZnJhbWV3b3JrcyBsaWtlIEFzdHJvIG1heSBjYWNoZSB0aGUgPGJvZHk+IGFuZCByZXBsYWNlIGl0IGR1cmluZyByb3V0aW5nLCBzbyB3ZSdsbCBqdXN0IHJlLXJlY29yZCB0aGUgX2RvY0VsIGFuZCBfYm9keSBmb3Igc2FmZXR5IChvdGhlcndpc2UsIHRoZSBtYXJrZXJzIG1heSBub3QgZ2V0IGFkZGVkIHByb3Blcmx5KS5cblxuICBfYm9keSA9IF9kb2MuYm9keTtcbiAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG5cbiAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhZm9yY2UgJiYgIV9pc1JldmVydGVkKSB7XG4gICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyLmlzUmVmcmVzaGluZyA9IHRydWU7XG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiArK29iai5jYWNoZUlEICYmIChvYmoucmVjID0gb2JqKCkpO1xuICB9KTsgLy8gZm9yY2UgdGhlIGNsZWFyaW5nIG9mIHRoZSBjYWNoZSBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgdGFrZSBhIGxpdHRsZSB3aGlsZSB0byBkaXNwYXRjaCB0aGUgXCJzY3JvbGxcIiBldmVudCBhbmQgdGhlIHVzZXIgbWF5IGhhdmUgY2hhbmdlZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFuZCB0aGVuIGNhbGxlZCBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSByaWdodCBhd2F5XG5cblxuICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlci5zb3J0KCk7XG4gIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIG9iai5zbW9vdGggJiYgKG9iai50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIik7IC8vIHNtb290aCBzY3JvbGxpbmcgaW50ZXJmZXJlc1xuXG4gICAgICBvYmooMCk7XG4gICAgfVxuICB9KTtcblxuICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnJlZnJlc2goKTtcbiAgfSk7IC8vIGRvbid0IGxvb3Agd2l0aCBfaSBiZWNhdXNlIGR1cmluZyBhIHJlZnJlc2goKSBzb21lb25lIGNvdWxkIGNhbGwgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKSB3aGljaCB3b3VsZCBpdGVyYXRlIHRocm91Z2ggX2kgcmVzdWx0aW5nIGluIGEgc2tpcC5cblxuXG4gIF9pc1JldmVydGVkID0gZmFsc2U7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAvLyBuZXN0ZWQgcGlucyAocGlubmVkQ29udGFpbmVyKSB3aXRoIHBpblNwYWNpbmcgbWF5IGV4cGFuZCB0aGUgY29udGFpbmVyLCBzbyB3ZSBtdXN0IGFjY29tbW9kYXRlIHRoYXQgaGVyZS5cbiAgICBpZiAodC5fc3ViUGluT2Zmc2V0ICYmIHQucGluKSB7XG4gICAgICB2YXIgcHJvcCA9IHQudmFycy5ob3Jpem9udGFsID8gXCJvZmZzZXRXaWR0aFwiIDogXCJvZmZzZXRIZWlnaHRcIixcbiAgICAgICAgICBvcmlnaW5hbCA9IHQucGluW3Byb3BdO1xuICAgICAgdC5yZXZlcnQodHJ1ZSwgMSk7XG4gICAgICB0LmFkanVzdFBpblNwYWNpbmcodC5waW5bcHJvcF0gLSBvcmlnaW5hbCk7XG4gICAgICB0LnJlZnJlc2goKTtcbiAgICB9XG4gIH0pO1xuXG4gIF9jbGFtcGluZ01heCA9IDE7IC8vIHBpblNwYWNpbmcgbWlnaHQgYmUgcHJvcHBpbmcgYSBwYWdlIG9wZW4sIHRodXMgd2hlbiB3ZSAuc2V0UG9zaXRpb25zKCkgdG8gY2xhbXAgYSBTY3JvbGxUcmlnZ2VyJ3MgZW5kIHdlIHNob3VsZCBsZWF2ZSB0aGUgcGluU3BhY2luZyBhbG9uZS4gVGhhdCdzIHdoYXQgdGhpcyBmbGFnIGlzIGZvci5cblxuICBfaGlkZUFsbE1hcmtlcnModHJ1ZSk7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAvLyB0aGUgc2Nyb2xsZXIncyBtYXggc2Nyb2xsIHBvc2l0aW9uIG1heSBjaGFuZ2UgYWZ0ZXIgYWxsIHRoZSBTY3JvbGxUcmlnZ2VycyByZWZyZXNoZWQgKGxpa2UgcGlubmluZyBjb3VsZCBwdXNoIGl0IGRvd24pLCBzbyB3ZSBuZWVkIHRvIGxvb3AgYmFjayBhbmQgY29ycmVjdCBhbnkgd2l0aCBlbmQ6IFwibWF4XCIuIFNhbWUgZm9yIGFueXRoaW5nIHdpdGggYSBjbGFtcGVkIGVuZFxuICAgIHZhciBtYXggPSBfbWF4U2Nyb2xsKHQuc2Nyb2xsZXIsIHQuX2RpciksXG4gICAgICAgIGVuZENsYW1wID0gdC52YXJzLmVuZCA9PT0gXCJtYXhcIiB8fCB0Ll9lbmRDbGFtcCAmJiB0LmVuZCA+IG1heCxcbiAgICAgICAgc3RhcnRDbGFtcCA9IHQuX3N0YXJ0Q2xhbXAgJiYgdC5zdGFydCA+PSBtYXg7XG5cbiAgICAoZW5kQ2xhbXAgfHwgc3RhcnRDbGFtcCkgJiYgdC5zZXRQb3NpdGlvbnMoc3RhcnRDbGFtcCA/IG1heCAtIDEgOiB0LnN0YXJ0LCBlbmRDbGFtcCA/IE1hdGgubWF4KHN0YXJ0Q2xhbXAgPyBtYXggOiB0LnN0YXJ0ICsgMSwgbWF4KSA6IHQuZW5kLCB0cnVlKTtcbiAgfSk7XG5cbiAgX2hpZGVBbGxNYXJrZXJzKGZhbHNlKTtcblxuICBfY2xhbXBpbmdNYXggPSAwO1xuICByZWZyZXNoSW5pdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucmVuZGVyICYmIHJlc3VsdC5yZW5kZXIoLTEpO1xuICB9KTsgLy8gaWYgdGhlIG9uUmVmcmVzaEluaXQoKSByZXR1cm5zIGFuIGFuaW1hdGlvbiAodHlwaWNhbGx5IGEgZ3NhcC5zZXQoKSksIHJldmVydCBpdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIHB1dCB0aGluZ3MgaW4gYSBjZXJ0YWluIHNwb3QgYmVmb3JlIHJlZnJlc2hpbmcgZm9yIG1lYXN1cmVtZW50IHB1cnBvc2VzLCBhbmQgdGhlbiBwdXQgdGhpbmdzIGJhY2suXG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgb2JqLnNtb290aCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gICAgICB9KTtcbiAgICAgIG9iai5yZWMgJiYgb2JqKG9iai5yZWMpO1xuICAgIH1cbiAgfSk7XG5cbiAgX2NsZWFyU2Nyb2xsTWVtb3J5KF9zY3JvbGxSZXN0b3JhdGlvbiwgMSk7XG5cbiAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgX3JlZnJlc2hJRCsrO1xuICBfcmVmcmVzaGluZ0FsbCA9IDI7XG5cbiAgX3VwZGF0ZUFsbCgyKTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbih0LnZhcnMub25SZWZyZXNoKSAmJiB0LnZhcnMub25SZWZyZXNoKHQpO1xuICB9KTtcblxuICBfcmVmcmVzaGluZ0FsbCA9IFNjcm9sbFRyaWdnZXIuaXNSZWZyZXNoaW5nID0gZmFsc2U7XG5cbiAgX2Rpc3BhdGNoKFwicmVmcmVzaFwiKTtcbn0sXG4gICAgX2xhc3RTY3JvbGwgPSAwLFxuICAgIF9kaXJlY3Rpb24gPSAxLFxuICAgIF9wcmltYXJ5LFxuICAgIF91cGRhdGVBbGwgPSBmdW5jdGlvbiBfdXBkYXRlQWxsKGZvcmNlKSB7XG4gIGlmIChmb3JjZSA9PT0gMiB8fCAhX3JlZnJlc2hpbmdBbGwgJiYgIV9pc1JldmVydGVkKSB7XG4gICAgLy8gX2lzUmV2ZXJ0ZWQgY291bGQgYmUgdHJ1ZSBpZiwgZm9yIGV4YW1wbGUsIGEgbWF0Y2hNZWRpYSgpIGlzIGluIHRoZSBwcm9jZXNzIG9mIGV4ZWN1dGluZy4gV2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgZHVyaW5nIHRoZSB0aW1lIGV2ZXJ5dGhpbmcgaXMgcmV2ZXJ0ZWQuXG4gICAgU2Nyb2xsVHJpZ2dlci5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICBfcHJpbWFyeSAmJiBfcHJpbWFyeS51cGRhdGUoMCk7IC8vIFNjcm9sbFNtb290aGVyIHVzZXMgcmVmcmVzaFByaW9yaXR5IC05OTk5IHRvIGJlY29tZSB0aGUgcHJpbWFyeSB0aGF0IGdldHMgdXBkYXRlZCBiZWZvcmUgYWxsIG90aGVycyBiZWNhdXNlIGl0IGFmZmVjdHMgdGhlIHNjcm9sbCBwb3NpdGlvbi5cblxuICAgIHZhciBsID0gX3RyaWdnZXJzLmxlbmd0aCxcbiAgICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgIHJlY29yZFZlbG9jaXR5ID0gdGltZSAtIF90aW1lMSA+PSA1MCxcbiAgICAgICAgc2Nyb2xsID0gbCAmJiBfdHJpZ2dlcnNbMF0uc2Nyb2xsKCk7XG5cbiAgICBfZGlyZWN0aW9uID0gX2xhc3RTY3JvbGwgPiBzY3JvbGwgPyAtMSA6IDE7XG4gICAgX3JlZnJlc2hpbmdBbGwgfHwgKF9sYXN0U2Nyb2xsID0gc2Nyb2xsKTtcblxuICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgdGltZSAtIF9sYXN0U2Nyb2xsVGltZSA+IDIwMCkge1xuICAgICAgICBfbGFzdFNjcm9sbFRpbWUgPSAwO1xuXG4gICAgICAgIF9kaXNwYXRjaChcInNjcm9sbEVuZFwiKTtcbiAgICAgIH1cblxuICAgICAgX3RpbWUyID0gX3RpbWUxO1xuICAgICAgX3RpbWUxID0gdGltZTtcbiAgICB9XG5cbiAgICBpZiAoX2RpcmVjdGlvbiA8IDApIHtcbiAgICAgIF9pID0gbDtcblxuICAgICAgd2hpbGUgKF9pLS0gPiAwKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuXG4gICAgICBfZGlyZWN0aW9uID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgbDsgX2krKykge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIF9yYWZJRCA9IDA7XG59LFxuICAgIF9wcm9wTmFtZXNUb0NvcHkgPSBbX2xlZnQsIF90b3AsIF9ib3R0b20sIF9yaWdodCwgX21hcmdpbiArIF9Cb3R0b20sIF9tYXJnaW4gKyBfUmlnaHQsIF9tYXJnaW4gKyBfVG9wLCBfbWFyZ2luICsgX0xlZnQsIFwiZGlzcGxheVwiLCBcImZsZXhTaHJpbmtcIiwgXCJmbG9hdFwiLCBcInpJbmRleFwiLCBcImdyaWRDb2x1bW5TdGFydFwiLCBcImdyaWRDb2x1bW5FbmRcIiwgXCJncmlkUm93U3RhcnRcIiwgXCJncmlkUm93RW5kXCIsIFwiZ3JpZEFyZWFcIiwgXCJqdXN0aWZ5U2VsZlwiLCBcImFsaWduU2VsZlwiLCBcInBsYWNlU2VsZlwiLCBcIm9yZGVyXCJdLFxuICAgIF9zdGF0ZVByb3BzID0gX3Byb3BOYW1lc1RvQ29weS5jb25jYXQoW193aWR0aCwgX2hlaWdodCwgXCJib3hTaXppbmdcIiwgXCJtYXhcIiArIF9XaWR0aCwgXCJtYXhcIiArIF9IZWlnaHQsIFwicG9zaXRpb25cIiwgX21hcmdpbiwgX3BhZGRpbmcsIF9wYWRkaW5nICsgX1RvcCwgX3BhZGRpbmcgKyBfUmlnaHQsIF9wYWRkaW5nICsgX0JvdHRvbSwgX3BhZGRpbmcgKyBfTGVmdF0pLFxuICAgIF9zd2FwUGluT3V0ID0gZnVuY3Rpb24gX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHN0YXRlKSB7XG4gIF9zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgdmFyIGNhY2hlID0gcGluLl9nc2FwO1xuXG4gIGlmIChjYWNoZS5zcGFjZXJJc05hdGl2ZSkge1xuICAgIF9zZXRTdGF0ZShjYWNoZS5zcGFjZXJTdGF0ZSk7XG4gIH0gZWxzZSBpZiAocGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBwYXJlbnQgPSBzcGFjZXIucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGluLCBzcGFjZXIpO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwYWNlcik7XG4gICAgfVxuICB9XG5cbiAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IGZhbHNlO1xufSxcbiAgICBfc3dhcFBpbkluID0gZnVuY3Rpb24gX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MsIHNwYWNlclN0YXRlKSB7XG4gIGlmICghcGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBpID0gX3Byb3BOYW1lc1RvQ29weS5sZW5ndGgsXG4gICAgICAgIHNwYWNlclN0eWxlID0gc3BhY2VyLnN0eWxlLFxuICAgICAgICBwaW5TdHlsZSA9IHBpbi5zdHlsZSxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHAgPSBfcHJvcE5hbWVzVG9Db3B5W2ldO1xuICAgICAgc3BhY2VyU3R5bGVbcF0gPSBjc1twXTtcbiAgICB9XG5cbiAgICBzcGFjZXJTdHlsZS5wb3NpdGlvbiA9IGNzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIgPyBcImFic29sdXRlXCIgOiBcInJlbGF0aXZlXCI7XG4gICAgY3MuZGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiAoc3BhY2VyU3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpO1xuICAgIHBpblN0eWxlW19ib3R0b21dID0gcGluU3R5bGVbX3JpZ2h0XSA9IFwiYXV0b1wiO1xuICAgIHNwYWNlclN0eWxlLmZsZXhCYXNpcyA9IGNzLmZsZXhCYXNpcyB8fCBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5vdmVyZmxvdyA9IFwidmlzaWJsZVwiO1xuICAgIHNwYWNlclN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgIHNwYWNlclN0eWxlW193aWR0aF0gPSBfZ2V0U2l6ZShwaW4sIF9ob3Jpem9udGFsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfaGVpZ2h0XSA9IF9nZXRTaXplKHBpbiwgX3ZlcnRpY2FsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfcGFkZGluZ10gPSBwaW5TdHlsZVtfbWFyZ2luXSA9IHBpblN0eWxlW190b3BdID0gcGluU3R5bGVbX2xlZnRdID0gXCIwXCI7XG5cbiAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgcGluU3R5bGVbX3dpZHRoXSA9IHBpblN0eWxlW1wibWF4XCIgKyBfV2lkdGhdID0gY3NbX3dpZHRoXTtcbiAgICBwaW5TdHlsZVtfaGVpZ2h0XSA9IHBpblN0eWxlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IGNzW19oZWlnaHRdO1xuICAgIHBpblN0eWxlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcblxuICAgIGlmIChwaW4ucGFyZW50Tm9kZSAhPT0gc3BhY2VyKSB7XG4gICAgICBwaW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3BhY2VyLCBwaW4pO1xuICAgICAgc3BhY2VyLmFwcGVuZENoaWxkKHBpbik7XG4gICAgfVxuXG4gICAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IHRydWU7XG4gIH1cbn0sXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9zZXRTdGF0ZSA9IGZ1bmN0aW9uIF9zZXRTdGF0ZShzdGF0ZSkge1xuICBpZiAoc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50LnN0eWxlLFxuICAgICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcCxcbiAgICAgICAgdmFsdWU7XG4gICAgKHN0YXRlLnQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHN0YXRlLnQpKS51bmNhY2hlID0gMTsgLy8gb3RoZXJ3aXNlIHRyYW5zZm9ybXMgbWF5IGJlIG9mZlxuXG4gICAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGVbaSArIDFdO1xuICAgICAgcCA9IHN0YXRlW2ldO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc3R5bGVbcF0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVbcF0pIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldFN0YXRlID0gZnVuY3Rpb24gX2dldFN0YXRlKGVsZW1lbnQpIHtcbiAgLy8gcmV0dXJucyBhbiBBcnJheSB3aXRoIGFsdGVybmF0aW5nIHZhbHVlcyBsaWtlIFtwcm9wZXJ0eSwgdmFsdWUsIHByb3BlcnR5LCB2YWx1ZV0gYW5kIGEgXCJ0XCIgcHJvcGVydHkgcG9pbnRpbmcgdG8gdGhlIHRhcmdldCAoZWxlbWVudCkuIE1ha2VzIGl0IGZhc3QgYW5kIGNoZWFwLlxuICB2YXIgbCA9IF9zdGF0ZVByb3BzLmxlbmd0aCxcbiAgICAgIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgIHN0YXRlID0gW10sXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHN0YXRlLnB1c2goX3N0YXRlUHJvcHNbaV0sIHN0eWxlW19zdGF0ZVByb3BzW2ldXSk7XG4gIH1cblxuICBzdGF0ZS50ID0gZWxlbWVudDtcbiAgcmV0dXJuIHN0YXRlO1xufSxcbiAgICBfY29weVN0YXRlID0gZnVuY3Rpb24gX2NvcHlTdGF0ZShzdGF0ZSwgb3ZlcnJpZGUsIG9taXRPZmZzZXRzKSB7XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICBpID0gb21pdE9mZnNldHMgPyA4IDogMCxcbiAgICAgIC8vIHNraXAgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tIGlmIG9taXRPZmZzZXRzIGlzIHRydWVcbiAgcDtcblxuICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgIHAgPSBzdGF0ZVtpXTtcbiAgICByZXN1bHQucHVzaChwLCBwIGluIG92ZXJyaWRlID8gb3ZlcnJpZGVbcF0gOiBzdGF0ZVtpICsgMV0pO1xuICB9XG5cbiAgcmVzdWx0LnQgPSBzdGF0ZS50O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfd2luT2Zmc2V0cyA9IHtcbiAgbGVmdDogMCxcbiAgdG9wOiAwXG59LFxuICAgIC8vIC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAoPykgQWxsb3cgdXNlcnMgdG8gY2FsY3VsYXRlIHdoZXJlIGEgdHJpZ2dlciBoaXRzIChzY3JvbGwgcG9zaXRpb24pIGxpa2UgZ2V0U2Nyb2xsUG9zaXRpb24oXCIjaWRcIiwgXCJ0b3AgYm90dG9tXCIpXG4vLyBfZ2V0U2Nyb2xsUG9zaXRpb24gPSAodHJpZ2dlciwgcG9zaXRpb24sIHtzY3JvbGxlciwgY29udGFpbmVyQW5pbWF0aW9uLCBob3Jpem9udGFsfSkgPT4ge1xuLy8gXHRzY3JvbGxlciA9IF9nZXRUYXJnZXQoc2Nyb2xsZXIgfHwgX3dpbik7XG4vLyBcdGxldCBkaXJlY3Rpb24gPSBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4vLyBcdFx0aXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKTtcbi8vIFx0X2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pO1xuLy8gXHRyZXR1cm4gX3BhcnNlUG9zaXRpb24ocG9zaXRpb24sIF9nZXRUYXJnZXQodHJpZ2dlciksIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSgpLCBkaXJlY3Rpb24sIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pKCksIDAsIDAsIDAsIF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCkoKSwgaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCwgMCwgY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyKSwgY29udGFpbmVyQW5pbWF0aW9uKTtcbi8vIH0sXG5fcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKHZhbHVlLCB0cmlnZ2VyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsLCBtYXJrZXIsIG1hcmtlclNjcm9sbGVyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIHNjcm9sbGVyTWF4LCBjb250YWluZXJBbmltYXRpb24sIGNsYW1wWmVyb1Byb3ApIHtcbiAgX2lzRnVuY3Rpb24odmFsdWUpICYmICh2YWx1ZSA9IHZhbHVlKHNlbGYpKTtcblxuICBpZiAoX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdWJzdHIoMCwgMykgPT09IFwibWF4XCIpIHtcbiAgICB2YWx1ZSA9IHNjcm9sbGVyTWF4ICsgKHZhbHVlLmNoYXJBdCg0KSA9PT0gXCI9XCIgPyBfb2Zmc2V0VG9QeChcIjBcIiArIHZhbHVlLnN1YnN0cigzKSwgc2Nyb2xsZXJTaXplKSA6IDApO1xuICB9XG5cbiAgdmFyIHRpbWUgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZSgpIDogMCxcbiAgICAgIHAxLFxuICAgICAgcDIsXG4gICAgICBlbGVtZW50O1xuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsoMCk7XG4gIGlzTmFOKHZhbHVlKSB8fCAodmFsdWUgPSArdmFsdWUpOyAvLyBjb252ZXJ0IGEgc3RyaW5nIG51bWJlciBsaWtlIFwiNDVcIiB0byBhbiBhY3R1YWwgbnVtYmVyXG5cbiAgaWYgKCFfaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgX2lzRnVuY3Rpb24odHJpZ2dlcikgJiYgKHRyaWdnZXIgPSB0cmlnZ2VyKHNlbGYpKTtcbiAgICB2YXIgb2Zmc2V0cyA9ICh2YWx1ZSB8fCBcIjBcIikuc3BsaXQoXCIgXCIpLFxuICAgICAgICBib3VuZHMsXG4gICAgICAgIGxvY2FsT2Zmc2V0LFxuICAgICAgICBnbG9iYWxPZmZzZXQsXG4gICAgICAgIGRpc3BsYXk7XG4gICAgZWxlbWVudCA9IF9nZXRUYXJnZXQodHJpZ2dlciwgc2VsZikgfHwgX2JvZHk7XG4gICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KSB8fCB7fTtcblxuICAgIGlmICgoIWJvdW5kcyB8fCAhYm91bmRzLmxlZnQgJiYgIWJvdW5kcy50b3ApICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBpZiBkaXNwbGF5IGlzIFwibm9uZVwiLCBpdCB3b24ndCByZXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcHJvcGVybHlcbiAgICAgIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgICAgZGlzcGxheSA/IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgOiBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICB9XG5cbiAgICBsb2NhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMF0sIGJvdW5kc1tkaXJlY3Rpb24uZF0pO1xuICAgIGdsb2JhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMV0gfHwgXCIwXCIsIHNjcm9sbGVyU2l6ZSk7XG4gICAgdmFsdWUgPSBib3VuZHNbZGlyZWN0aW9uLnBdIC0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLnBdIC0gYm9yZGVyV2lkdGggKyBsb2NhbE9mZnNldCArIHNjcm9sbCAtIGdsb2JhbE9mZnNldDtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIGdsb2JhbE9mZnNldCwgZGlyZWN0aW9uLCBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQgPCAyMCB8fCBtYXJrZXJTY3JvbGxlci5faXNTdGFydCAmJiBnbG9iYWxPZmZzZXQgPiAyMCk7XG4gICAgc2Nyb2xsZXJTaXplIC09IHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldDsgLy8gYWRqdXN0IGZvciB0aGUgbWFya2VyXG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uICYmICh2YWx1ZSA9IGdzYXAudXRpbHMubWFwUmFuZ2UoY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuc3RhcnQsIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmVuZCwgMCwgc2Nyb2xsZXJNYXgsIHZhbHVlKSk7XG4gICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoY2xhbXBaZXJvUHJvcCkge1xuICAgIHNlbGZbY2xhbXBaZXJvUHJvcF0gPSB2YWx1ZSB8fCAtMC4wMDE7XG4gICAgdmFsdWUgPCAwICYmICh2YWx1ZSA9IDApO1xuICB9XG5cbiAgaWYgKG1hcmtlcikge1xuICAgIHZhciBwb3NpdGlvbiA9IHZhbHVlICsgc2Nyb2xsZXJTaXplLFxuICAgICAgICBpc1N0YXJ0ID0gbWFya2VyLl9pc1N0YXJ0O1xuICAgIHAxID0gXCJzY3JvbGxcIiArIGRpcmVjdGlvbi5kMjtcblxuICAgIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHBvc2l0aW9uLCBkaXJlY3Rpb24sIGlzU3RhcnQgJiYgcG9zaXRpb24gPiAyMCB8fCAhaXNTdGFydCAmJiAodXNlRml4ZWRQb3NpdGlvbiA/IE1hdGgubWF4KF9ib2R5W3AxXSwgX2RvY0VsW3AxXSkgOiBtYXJrZXIucGFyZW50Tm9kZVtwMV0pIDw9IHBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBfZ2V0Qm91bmRzKG1hcmtlclNjcm9sbGVyKTtcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgKG1hcmtlci5zdHlsZVtkaXJlY3Rpb24ub3AucF0gPSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ub3AucF0gLSBkaXJlY3Rpb24ub3AubSAtIG1hcmtlci5fb2Zmc2V0ICsgX3B4KTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmIGVsZW1lbnQpIHtcbiAgICBwMSA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsoc2Nyb2xsZXJNYXgpO1xuICAgIHAyID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCA9IHAxW2RpcmVjdGlvbi5wXSAtIHAyW2RpcmVjdGlvbi5wXTtcbiAgICB2YWx1ZSA9IHZhbHVlIC8gY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgKiBzY3JvbGxlck1heDtcbiAgfVxuXG4gIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2Vlayh0aW1lKTtcbiAgcmV0dXJuIGNvbnRhaW5lckFuaW1hdGlvbiA/IHZhbHVlIDogTWF0aC5yb3VuZCh2YWx1ZSk7XG59LFxuICAgIF9wcmVmaXhFeHAgPSAvKHdlYmtpdHxtb3p8bGVuZ3RofGNzc1RleHR8aW5zZXQpL2ksXG4gICAgX3JlcGFyZW50ID0gZnVuY3Rpb24gX3JlcGFyZW50KGVsZW1lbnQsIHBhcmVudCwgdG9wLCBsZWZ0KSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHAsXG4gICAgICAgIGNzO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gX2JvZHkpIHtcbiAgICAgIGVsZW1lbnQuX3N0T3JpZyA9IHN0eWxlLmNzc1RleHQ7IC8vIHJlY29yZCBvcmlnaW5hbCBpbmxpbmUgc3R5bGVzIHNvIHdlIGNhbiByZXZlcnQgdGhlbSBsYXRlclxuXG4gICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgICBmb3IgKHAgaW4gY3MpIHtcbiAgICAgICAgLy8gbXVzdCBjb3B5IGFsbCByZWxldmFudCBzdHlsZXMgdG8gZW5zdXJlIHRoYXQgbm90aGluZyBjaGFuZ2VzIHZpc3VhbGx5IHdoZW4gd2UgcmVwYXJlbnQgdG8gdGhlIDxib2R5Pi4gU2tpcCB0aGUgdmVuZG9yIHByZWZpeGVkIG9uZXMuXG4gICAgICAgIGlmICghK3AgJiYgIV9wcmVmaXhFeHAudGVzdChwKSAmJiBjc1twXSAmJiB0eXBlb2Ygc3R5bGVbcF0gPT09IFwic3RyaW5nXCIgJiYgcCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICBzdHlsZVtwXSA9IGNzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnRvcCA9IHRvcDtcbiAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gZWxlbWVudC5fc3RPcmlnO1xuICAgIH1cblxuICAgIGdzYXAuY29yZS5nZXRDYWNoZShlbGVtZW50KS51bmNhY2hlID0gMTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cbn0sXG4gICAgX2ludGVycnVwdGlvblRyYWNrZXIgPSBmdW5jdGlvbiBfaW50ZXJydXB0aW9uVHJhY2tlcihnZXRWYWx1ZUZ1bmMsIGluaXRpYWxWYWx1ZSwgb25JbnRlcnJ1cHQpIHtcbiAgdmFyIGxhc3QxID0gaW5pdGlhbFZhbHVlLFxuICAgICAgbGFzdDIgPSBsYXN0MTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBjdXJyZW50ID0gTWF0aC5yb3VuZChnZXRWYWx1ZUZ1bmMoKSk7IC8vIHJvdW5kIGJlY2F1c2UgaW4gc29tZSBbdmVyeSB1bmNvbW1vbl0gV2luZG93cyBlbnZpcm9ubWVudHMsIHNjcm9sbCBjYW4gZ2V0IHJlcG9ydGVkIHdpdGggZGVjaW1hbHMgZXZlbiB0aG91Z2ggaXQgd2FzIHNldCB3aXRob3V0LlxuXG4gICAgaWYgKGN1cnJlbnQgIT09IGxhc3QxICYmIGN1cnJlbnQgIT09IGxhc3QyICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MSkgPiAzICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MikgPiAzKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBzY3JvbGxzLCBraWxsIHRoZSB0d2Vlbi4gaU9TIFNhZmFyaSBpbnRlcm1pdHRlbnRseSBtaXNyZXBvcnRzIHRoZSBzY3JvbGwgcG9zaXRpb24sIGl0IG1heSBiZSB0aGUgbW9zdCByZWNlbnRseS1zZXQgb25lIG9yIHRoZSBvbmUgYmVmb3JlIHRoYXQhIFdoZW4gU2FmYXJpIGlzIHpvb21lZCAoQ01ELSspLCBpdCBvZnRlbiBtaXNyZXBvcnRzIGFzIDEgcGl4ZWwgb2ZmIHRvbyEgU28gaWYgd2Ugc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gdG8gMTI1LCBmb3IgZXhhbXBsZSwgaXQnbGwgYWN0dWFsbHkgcmVwb3J0IGl0IGFzIDEyNC5cbiAgICAgIHZhbHVlID0gY3VycmVudDtcbiAgICAgIG9uSW50ZXJydXB0ICYmIG9uSW50ZXJydXB0KCk7XG4gICAgfVxuXG4gICAgbGFzdDIgPSBsYXN0MTtcbiAgICBsYXN0MSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIHJldHVybiBsYXN0MTtcbiAgfTtcbn0sXG4gICAgX3NoaWZ0TWFya2VyID0gZnVuY3Rpb24gX3NoaWZ0TWFya2VyKG1hcmtlciwgZGlyZWN0aW9uLCB2YWx1ZSkge1xuICB2YXIgdmFycyA9IHt9O1xuICB2YXJzW2RpcmVjdGlvbi5wXSA9IFwiKz1cIiArIHZhbHVlO1xuICBnc2FwLnNldChtYXJrZXIsIHZhcnMpO1xufSxcbiAgICAvLyBfbWVyZ2VBbmltYXRpb25zID0gYW5pbWF0aW9ucyA9PiB7XG4vLyBcdGxldCB0bCA9IGdzYXAudGltZWxpbmUoe3Ntb290aENoaWxkVGltaW5nOiB0cnVlfSkuc3RhcnRUaW1lKE1hdGgubWluKC4uLmFuaW1hdGlvbnMubWFwKGEgPT4gYS5nbG9iYWxUaW1lKDApKSkpO1xuLy8gXHRhbmltYXRpb25zLmZvckVhY2goYSA9PiB7bGV0IHRpbWUgPSBhLnRvdGFsVGltZSgpOyB0bC5hZGQoYSk7IGEudG90YWxUaW1lKHRpbWUpOyB9KTtcbi8vIFx0dGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBmYWxzZTtcbi8vIFx0cmV0dXJuIHRsO1xuLy8gfSxcbi8vIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHR3ZWVuIHRoZSBzY3JvbGwgcG9zaXRpb24gaW4gdGhlIGRpcmVjdGlvbiBwcm92aWRlZCwgYW5kIHdoZW4gZG9pbmcgc28gaXQnbGwgYWRkIGEgLnR3ZWVuIHByb3BlcnR5IHRvIHRoZSBGVU5DVElPTiBpdHNlbGYsIGFuZCByZW1vdmUgaXQgd2hlbiB0aGUgdHdlZW4gY29tcGxldGVzIG9yIGdldHMga2lsbGVkLiBUaGlzIGdpdmVzIHVzIGEgd2F5IHRvIGhhdmUgbXVsdGlwbGUgU2Nyb2xsVHJpZ2dlcnMgdXNlIGEgY2VudHJhbCBmdW5jdGlvbiBmb3IgYW55IGdpdmVuIHNjcm9sbGVyIGFuZCBzZWUgaWYgdGhlcmUncyBhIHNjcm9sbCB0d2VlbiBydW5uaW5nICh3aGljaCB3b3VsZCBhZmZlY3QgaWYvaG93IHRoaW5ncyBnZXQgdXBkYXRlZClcbl9nZXRUd2VlbkNyZWF0b3IgPSBmdW5jdGlvbiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBkaXJlY3Rpb24pIHtcbiAgdmFyIGdldFNjcm9sbCA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgcHJvcCA9IFwiX3Njcm9sbFwiICsgZGlyZWN0aW9uLnAyLFxuICAgICAgLy8gYWRkIGEgdHdlZW5hYmxlIHByb3BlcnR5IHRvIHRoZSBzY3JvbGxlciB0aGF0J3MgYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLCBsaWtlIF9zY3JvbGxUb3Agb3IgX3Njcm9sbExlZnQuIFRoaXMgd2F5LCBpZiBzb21lb25lIGRvZXMgZ3NhcC5raWxsVHdlZW5zT2Yoc2Nyb2xsZXIpIGl0J2xsIGtpbGwgdGhlIHNjcm9sbCB0d2Vlbi5cbiAgZ2V0VHdlZW4gPSBmdW5jdGlvbiBnZXRUd2VlbihzY3JvbGxUbywgdmFycywgaW5pdGlhbFZhbHVlLCBjaGFuZ2UxLCBjaGFuZ2UyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4sXG4gICAgICAgIG9uQ29tcGxldGUgPSB2YXJzLm9uQ29tcGxldGUsXG4gICAgICAgIG1vZGlmaWVycyA9IHt9O1xuICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZSB8fCBnZXRTY3JvbGwoKTtcblxuICAgIHZhciBjaGVja0ZvckludGVycnVwdGlvbiA9IF9pbnRlcnJ1cHRpb25UcmFja2VyKGdldFNjcm9sbCwgaW5pdGlhbFZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0d2Vlbi5raWxsKCk7XG4gICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgfSk7XG5cbiAgICBjaGFuZ2UyID0gY2hhbmdlMSAmJiBjaGFuZ2UyIHx8IDA7IC8vIGlmIGNoYW5nZTEgaXMgMCwgd2Ugc2V0IHRoYXQgdG8gdGhlIGRpZmZlcmVuY2UgYW5kIGlnbm9yZSBjaGFuZ2UyLiBPdGhlcndpc2UsIHRoZXJlIHdvdWxkIGJlIGEgY29tcG91bmQgZWZmZWN0LlxuXG4gICAgY2hhbmdlMSA9IGNoYW5nZTEgfHwgc2Nyb2xsVG8gLSBpbml0aWFsVmFsdWU7XG4gICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICB2YXJzLmluaGVyaXQgPSBmYWxzZTtcbiAgICB2YXJzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxuICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjaGVja0ZvckludGVycnVwdGlvbihpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbyk7XG4gICAgfTtcblxuICAgIHZhcnMub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gICAgICBnZXRUd2Vlbi50d2VlbiAmJiBfdXBkYXRlQWxsKCk7IC8vIGlmIGl0IHdhcyBpbnRlcnJ1cHRlZC9raWxsZWQsIGxpa2UgaW4gYSBjb250ZXh0LnJldmVydCgpLCBkb24ndCBmb3JjZSBhbiB1cGRhdGVBbGwoKVxuICAgIH07XG5cbiAgICB2YXJzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUuY2FsbCh0d2Vlbik7XG4gICAgfTtcblxuICAgIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4gPSBnc2FwLnRvKHNjcm9sbGVyLCB2YXJzKTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH07XG5cbiAgc2Nyb2xsZXJbcHJvcF0gPSBnZXRTY3JvbGw7XG5cbiAgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICB9O1xuXG4gIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJ3aGVlbFwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTsgLy8gV2luZG93cyBtYWNoaW5lcyBoYW5kbGUgbW91c2V3aGVlbCBzY3JvbGxpbmcgaW4gY2h1bmtzIChsaWtlIFwiMyBsaW5lcyBwZXIgc2Nyb2xsXCIpIG1lYW5pbmcgdGhlIHR5cGljYWwgc3RyYXRlZ3kgZm9yIGNhbmNlbGxpbmcgdGhlIHNjcm9sbCBpc24ndCBhcyBzZW5zaXRpdmUuIEl0J3MgbXVjaCBtb3JlIGxpa2VseSB0byBtYXRjaCBvbmUgb2YgdGhlIHByZXZpb3VzIDIgc2Nyb2xsIGV2ZW50IHBvc2l0aW9ucy4gU28gd2Uga2lsbCBhbnkgc25hcHBpbmcgYXMgc29vbiBhcyB0aGVyZSdzIGEgd2hlZWwgZXZlbnQuXG5cblxuICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggJiYgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInRvdWNobW92ZVwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTtcbiAgcmV0dXJuIGdldFR3ZWVuO1xufTtcblxuZXhwb3J0IHZhciBTY3JvbGxUcmlnZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pIHtcbiAgICBfY29yZUluaXR0ZWQgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3Rlcihnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKVwiKTtcblxuICAgIF9jb250ZXh0KHRoaXMpO1xuXG4gICAgdGhpcy5pbml0KHZhcnMsIGFuaW1hdGlvbik7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2Nyb2xsVHJpZ2dlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHZhcnMsIGFuaW1hdGlvbikge1xuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLnZhcnMgJiYgdGhpcy5raWxsKHRydWUsIHRydWUpOyAvLyBpbiBjYXNlIGl0J3MgYmVpbmcgaW5pdHRlZCBhZ2FpblxuXG4gICAgaWYgKCFfZW5hYmxlZCkge1xuICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnJlZnJlc2ggPSB0aGlzLmtpbGwgPSBfcGFzc1Rocm91Z2g7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFycyA9IF9zZXREZWZhdWx0cyhfaXNTdHJpbmcodmFycykgfHwgX2lzTnVtYmVyKHZhcnMpIHx8IHZhcnMubm9kZVR5cGUgPyB7XG4gICAgICB0cmlnZ2VyOiB2YXJzXG4gICAgfSA6IHZhcnMsIF9kZWZhdWx0cyk7XG5cbiAgICB2YXIgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBvblVwZGF0ZSA9IF92YXJzLm9uVXBkYXRlLFxuICAgICAgICB0b2dnbGVDbGFzcyA9IF92YXJzLnRvZ2dsZUNsYXNzLFxuICAgICAgICBpZCA9IF92YXJzLmlkLFxuICAgICAgICBvblRvZ2dsZSA9IF92YXJzLm9uVG9nZ2xlLFxuICAgICAgICBvblJlZnJlc2ggPSBfdmFycy5vblJlZnJlc2gsXG4gICAgICAgIHNjcnViID0gX3ZhcnMuc2NydWIsXG4gICAgICAgIHRyaWdnZXIgPSBfdmFycy50cmlnZ2VyLFxuICAgICAgICBwaW4gPSBfdmFycy5waW4sXG4gICAgICAgIHBpblNwYWNpbmcgPSBfdmFycy5waW5TcGFjaW5nLFxuICAgICAgICBpbnZhbGlkYXRlT25SZWZyZXNoID0gX3ZhcnMuaW52YWxpZGF0ZU9uUmVmcmVzaCxcbiAgICAgICAgYW50aWNpcGF0ZVBpbiA9IF92YXJzLmFudGljaXBhdGVQaW4sXG4gICAgICAgIG9uU2NydWJDb21wbGV0ZSA9IF92YXJzLm9uU2NydWJDb21wbGV0ZSxcbiAgICAgICAgb25TbmFwQ29tcGxldGUgPSBfdmFycy5vblNuYXBDb21wbGV0ZSxcbiAgICAgICAgb25jZSA9IF92YXJzLm9uY2UsXG4gICAgICAgIHNuYXAgPSBfdmFycy5zbmFwLFxuICAgICAgICBwaW5SZXBhcmVudCA9IF92YXJzLnBpblJlcGFyZW50LFxuICAgICAgICBwaW5TcGFjZXIgPSBfdmFycy5waW5TcGFjZXIsXG4gICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiA9IF92YXJzLmNvbnRhaW5lckFuaW1hdGlvbixcbiAgICAgICAgZmFzdFNjcm9sbEVuZCA9IF92YXJzLmZhc3RTY3JvbGxFbmQsXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyA9IF92YXJzLnByZXZlbnRPdmVybGFwcyxcbiAgICAgICAgZGlyZWN0aW9uID0gdmFycy5ob3Jpem9udGFsIHx8IHZhcnMuY29udGFpbmVyQW5pbWF0aW9uICYmIHZhcnMuaG9yaXpvbnRhbCAhPT0gZmFsc2UgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbiAgICAgICAgaXNUb2dnbGUgPSAhc2NydWIgJiYgc2NydWIgIT09IDAsXG4gICAgICAgIHNjcm9sbGVyID0gX2dldFRhcmdldCh2YXJzLnNjcm9sbGVyIHx8IF93aW4pLFxuICAgICAgICBzY3JvbGxlckNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHNjcm9sbGVyKSxcbiAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKSxcbiAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IChcInBpblR5cGVcIiBpbiB2YXJzID8gdmFycy5waW5UeXBlIDogX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJwaW5UeXBlXCIpIHx8IGlzVmlld3BvcnQgJiYgXCJmaXhlZFwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgICBjYWxsYmFja3MgPSBbdmFycy5vbkVudGVyLCB2YXJzLm9uTGVhdmUsIHZhcnMub25FbnRlckJhY2ssIHZhcnMub25MZWF2ZUJhY2tdLFxuICAgICAgICB0b2dnbGVBY3Rpb25zID0gaXNUb2dnbGUgJiYgdmFycy50b2dnbGVBY3Rpb25zLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgbWFya2VycyA9IFwibWFya2Vyc1wiIGluIHZhcnMgPyB2YXJzLm1hcmtlcnMgOiBfZGVmYXVsdHMubWFya2VycyxcbiAgICAgICAgYm9yZGVyV2lkdGggPSBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgb25SZWZyZXNoSW5pdCA9IHZhcnMub25SZWZyZXNoSW5pdCAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmFycy5vblJlZnJlc2hJbml0KHNlbGYpO1xuICAgIH0sXG4gICAgICAgIGdldFNjcm9sbGVyU2l6ZSA9IF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSxcbiAgICAgICAgZ2V0U2Nyb2xsZXJPZmZzZXRzID0gX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSxcbiAgICAgICAgbGFzdFNuYXAgPSAwLFxuICAgICAgICBsYXN0UmVmcmVzaCA9IDAsXG4gICAgICAgIHByZXZQcm9ncmVzcyA9IDAsXG4gICAgICAgIHNjcm9sbEZ1bmMgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgdHdlZW5UbyxcbiAgICAgICAgcGluQ2FjaGUsXG4gICAgICAgIHNuYXBGdW5jLFxuICAgICAgICBzY3JvbGwxLFxuICAgICAgICBzY3JvbGwyLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBtYXJrZXJTdGFydCxcbiAgICAgICAgbWFya2VyRW5kLFxuICAgICAgICBtYXJrZXJTdGFydFRyaWdnZXIsXG4gICAgICAgIG1hcmtlckVuZFRyaWdnZXIsXG4gICAgICAgIG1hcmtlclZhcnMsXG4gICAgICAgIGV4ZWN1dGluZ09uUmVmcmVzaCxcbiAgICAgICAgY2hhbmdlLFxuICAgICAgICBwaW5PcmlnaW5hbFN0YXRlLFxuICAgICAgICBwaW5BY3RpdmVTdGF0ZSxcbiAgICAgICAgcGluU3RhdGUsXG4gICAgICAgIHNwYWNlcixcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBwaW5HZXR0ZXIsXG4gICAgICAgIHBpblNldHRlcixcbiAgICAgICAgcGluU3RhcnQsXG4gICAgICAgIHBpbkNoYW5nZSxcbiAgICAgICAgc3BhY2luZ1N0YXJ0LFxuICAgICAgICBzcGFjZXJTdGF0ZSxcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIsXG4gICAgICAgIHBpbk1vdmVzLFxuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIsXG4gICAgICAgIGNzLFxuICAgICAgICBzbmFwMSxcbiAgICAgICAgc25hcDIsXG4gICAgICAgIHNjcnViVHdlZW4sXG4gICAgICAgIHNjcnViU21vb3RoLFxuICAgICAgICBzbmFwRHVyQ2xhbXAsXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbCxcbiAgICAgICAgcHJldlNjcm9sbCxcbiAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyxcbiAgICAgICAgY2FNYXJrZXJTZXR0ZXIsXG4gICAgICAgIGN1c3RvbVJldmVydFJldHVybjsgLy8gZm9yIHRoZSBzYWtlIG9mIGVmZmljaWVuY3ksIF9zdGFydENsYW1wL19lbmRDbGFtcCBzZXJ2ZSBsaWtlIGEgdHJ1dGh5IHZhbHVlIGluZGljYXRpbmcgdGhhdCBjbGFtcGluZyB3YXMgZW5hYmxlZCBvbiB0aGUgc3RhcnQvZW5kLCBhbmQgQUxTTyBzdG9yZSB0aGUgYWN0dWFsIHByZS1jbGFtcGVkIG51bWVyaWMgdmFsdWUuIFdlIHRhcCBpbnRvIHRoYXQgaW4gU2Nyb2xsU21vb3RoZXIgZm9yIHNwZWVkIGVmZmVjdHMuIFNvIGZvciBleGFtcGxlLCBpZiBzdGFydD1cImNsYW1wKHRvcCBib3R0b20pXCIgcmVzdWx0cyBpbiBhIHN0YXJ0IG9mIC0xMDAgbmF0dXJhbGx5LCBpdCB3b3VsZCBnZXQgY2xhbXBlZCB0byAwIGJ1dCAtMTAwIHdvdWxkIGJlIHN0b3JlZCBpbiBfc3RhcnRDbGFtcC5cblxuXG4gICAgc2VsZi5fc3RhcnRDbGFtcCA9IHNlbGYuX2VuZENsYW1wID0gZmFsc2U7XG4gICAgc2VsZi5fZGlyID0gZGlyZWN0aW9uO1xuICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgIHNlbGYuc2Nyb2xsID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUuYmluZChjb250YWluZXJBbmltYXRpb24pIDogc2Nyb2xsRnVuYztcbiAgICBzY3JvbGwxID0gc2Nyb2xsRnVuYygpO1xuICAgIHNlbGYudmFycyA9IHZhcnM7XG4gICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uIHx8IHZhcnMuYW5pbWF0aW9uO1xuXG4gICAgaWYgKFwicmVmcmVzaFByaW9yaXR5XCIgaW4gdmFycykge1xuICAgICAgX3NvcnQgPSAxO1xuICAgICAgdmFycy5yZWZyZXNoUHJpb3JpdHkgPT09IC05OTk5ICYmIChfcHJpbWFyeSA9IHNlbGYpOyAvLyB1c2VkIGJ5IFNjcm9sbFNtb290aGVyXG4gICAgfVxuXG4gICAgc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgfHwge1xuICAgICAgdG9wOiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfdmVydGljYWwpLFxuICAgICAgbGVmdDogX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgX2hvcml6b250YWwpXG4gICAgfTtcbiAgICBzZWxmLnR3ZWVuVG8gPSB0d2VlblRvID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbFtkaXJlY3Rpb24ucF07XG5cbiAgICBzZWxmLnNjcnViRHVyYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHNjcnViU21vb3RoID0gX2lzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZTtcblxuICAgICAgaWYgKCFzY3J1YlNtb290aCkge1xuICAgICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkua2lsbCgpO1xuICAgICAgICBzY3J1YlR3ZWVuID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLmR1cmF0aW9uKHZhbHVlKSA6IHNjcnViVHdlZW4gPSBnc2FwLnRvKGFuaW1hdGlvbiwge1xuICAgICAgICAgIGVhc2U6IFwiZXhwb1wiLFxuICAgICAgICAgIHRvdGFsUHJvZ3Jlc3M6IFwiKz0wXCIsXG4gICAgICAgICAgaW5oZXJpdDogZmFsc2UsXG4gICAgICAgICAgZHVyYXRpb246IHNjcnViU21vb3RoLFxuICAgICAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG9uU2NydWJDb21wbGV0ZSAmJiBvblNjcnViQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgYW5pbWF0aW9uLnZhcnMubGF6eSA9IGZhbHNlO1xuICAgICAgYW5pbWF0aW9uLl9pbml0dGVkICYmICFzZWxmLmlzUmV2ZXJ0ZWQgfHwgYW5pbWF0aW9uLnZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiB2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgYW5pbWF0aW9uLmR1cmF0aW9uKCkgJiYgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTsgLy8gc3BlY2lhbCBjYXNlOiBpZiB0aGlzIFNjcm9sbFRyaWdnZXIgZ2V0cyByZS1pbml0dGVkLCBhIGZyb20oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciBjb3VsZCBnZXQgaW5pdHRlZCBpbml0aWFsbHkgYW5kIHRoZW4gcmV2ZXJ0ZWQgb24gdGhlIHJlLWluaXQgd2hpY2ggbWVhbnMgaXQnbGwgbmVlZCB0byBnZXQgcmVuZGVyZWQgYWdhaW4gaGVyZSB0byBwcm9wZXJseSBkaXNwbGF5IHRoaW5ncy4gT3RoZXJ3aXNlLCBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMzY3Nzctc2Nyb2xsc21vb3RoZXItc3BsaXR0ZXh0LW5leHRqcy8gYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL2VZUHlQcGQ/ZWRpdG9ycz0wMDEwXG5cbiAgICAgIHNlbGYuYW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhdXNlKCk7XG4gICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IHNlbGY7XG4gICAgICBzZWxmLnNjcnViRHVyYXRpb24oc2NydWIpO1xuICAgICAgc25hcDEgPSAwO1xuICAgICAgaWQgfHwgKGlkID0gYW5pbWF0aW9uLnZhcnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChzbmFwKSB7XG4gICAgICAvLyBUT0RPOiBwb3RlbnRpYWwgaWRlYTogdXNlIGxlZ2l0aW1hdGUgQ1NTIHNjcm9sbCBzbmFwcGluZyBieSBwdXNoaW5nIGludmlzaWJsZSBlbGVtZW50cyBpbnRvIHRoZSBET00gdGhhdCBzZXJ2ZSBhcyBzbmFwIHBvc2l0aW9ucywgYW5kIHRvZ2dsZSB0aGUgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudC5zdHlsZS5zY3JvbGxTbmFwVHlwZSBvblRvZ2dsZS4gU2VlIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqTHJnV00gZm9yIGEgcXVpY2sgcHJvb2Ygb2YgY29uY2VwdC5cbiAgICAgIGlmICghX2lzT2JqZWN0KHNuYXApIHx8IHNuYXAucHVzaCkge1xuICAgICAgICBzbmFwID0ge1xuICAgICAgICAgIHNuYXBUbzogc25hcFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBcInNjcm9sbEJlaGF2aW9yXCIgaW4gX2JvZHkuc3R5bGUgJiYgZ3NhcC5zZXQoaXNWaWV3cG9ydCA/IFtfYm9keSwgX2RvY0VsXSA6IHNjcm9sbGVyLCB7XG4gICAgICAgIHNjcm9sbEJlaGF2aW9yOiBcImF1dG9cIlxuICAgICAgfSk7IC8vIHNtb290aCBzY3JvbGxpbmcgZG9lc24ndCB3b3JrIHdpdGggc25hcC5cblxuICAgICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBfaXNGdW5jdGlvbihvKSAmJiBvLnRhcmdldCA9PT0gKGlzVmlld3BvcnQgPyBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsIDogc2Nyb2xsZXIpICYmIChvLnNtb290aCA9IGZhbHNlKTtcbiAgICAgIH0pOyAvLyBub3RlOiBzZXQgc21vb3RoIHRvIGZhbHNlIG9uIGJvdGggdGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbCBnZXR0ZXJzL3NldHRlcnNcblxuXG4gICAgICBzbmFwRnVuYyA9IF9pc0Z1bmN0aW9uKHNuYXAuc25hcFRvKSA/IHNuYXAuc25hcFRvIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzXCIgPyBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikgOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNEaXJlY3Rpb25hbFwiID8gX2dldExhYmVsQXREaXJlY3Rpb24oYW5pbWF0aW9uKSA6IHNuYXAuZGlyZWN0aW9uYWwgIT09IGZhbHNlID8gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgICAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChzbmFwLnNuYXBUbykodmFsdWUsIF9nZXRUaW1lKCkgLSBsYXN0UmVmcmVzaCA8IDUwMCA/IDAgOiBzdC5kaXJlY3Rpb24pO1xuICAgICAgfSA6IGdzYXAudXRpbHMuc25hcChzbmFwLnNuYXBUbyk7XG4gICAgICBzbmFwRHVyQ2xhbXAgPSBzbmFwLmR1cmF0aW9uIHx8IHtcbiAgICAgICAgbWluOiAwLjEsXG4gICAgICAgIG1heDogMlxuICAgICAgfTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IF9pc09iamVjdChzbmFwRHVyQ2xhbXApID8gX2NsYW1wKHNuYXBEdXJDbGFtcC5taW4sIHNuYXBEdXJDbGFtcC5tYXgpIDogX2NsYW1wKHNuYXBEdXJDbGFtcCwgc25hcER1ckNsYW1wKTtcbiAgICAgIHNuYXBEZWxheWVkQ2FsbCA9IGdzYXAuZGVsYXllZENhbGwoc25hcC5kZWxheSB8fCBzY3J1YlNtb290aCAvIDIgfHwgMC4xLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzY3JvbGwgPSBzY3JvbGxGdW5jKCksXG4gICAgICAgICAgICByZWZyZXNoZWRSZWNlbnRseSA9IF9nZXRUaW1lKCkgLSBsYXN0UmVmcmVzaCA8IDUwMCxcbiAgICAgICAgICAgIHR3ZWVuID0gdHdlZW5Uby50d2VlbjtcblxuICAgICAgICBpZiAoKHJlZnJlc2hlZFJlY2VudGx5IHx8IE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPCAxMCkgJiYgIXR3ZWVuICYmICFfcG9pbnRlcklzRG93biAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgdmFyIHByb2dyZXNzID0gKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogcHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIHZlbG9jaXR5ID0gcmVmcmVzaGVkUmVjZW50bHkgPyAwIDogKHRvdGFsUHJvZ3Jlc3MgLSBzbmFwMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDAsXG4gICAgICAgICAgICAgIGNoYW5nZTEgPSBnc2FwLnV0aWxzLmNsYW1wKC1wcm9ncmVzcywgMSAtIHByb2dyZXNzLCBfYWJzKHZlbG9jaXR5IC8gMikgKiB2ZWxvY2l0eSAvIDAuMTg1KSxcbiAgICAgICAgICAgICAgbmF0dXJhbEVuZCA9IHByb2dyZXNzICsgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UgPyAwIDogY2hhbmdlMSksXG4gICAgICAgICAgICAgIGVuZFZhbHVlLFxuICAgICAgICAgICAgICBlbmRTY3JvbGwsXG4gICAgICAgICAgICAgIF9zbmFwID0gc25hcCxcbiAgICAgICAgICAgICAgb25TdGFydCA9IF9zbmFwLm9uU3RhcnQsXG4gICAgICAgICAgICAgIF9vbkludGVycnVwdCA9IF9zbmFwLm9uSW50ZXJydXB0LFxuICAgICAgICAgICAgICBfb25Db21wbGV0ZSA9IF9zbmFwLm9uQ29tcGxldGU7XG4gICAgICAgICAgZW5kVmFsdWUgPSBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKTtcbiAgICAgICAgICBfaXNOdW1iZXIoZW5kVmFsdWUpIHx8IChlbmRWYWx1ZSA9IG5hdHVyYWxFbmQpOyAvLyBpbiBjYXNlIHRoZSBmdW5jdGlvbiBkaWRuJ3QgcmV0dXJuIGEgbnVtYmVyLCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIG5hdHVyYWxFbmRcblxuICAgICAgICAgIGVuZFNjcm9sbCA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQoc3RhcnQgKyBlbmRWYWx1ZSAqIGNoYW5nZSkpO1xuXG4gICAgICAgICAgaWYgKHNjcm9sbCA8PSBlbmQgJiYgc2Nyb2xsID49IHN0YXJ0ICYmIGVuZFNjcm9sbCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgICBpZiAodHdlZW4gJiYgIXR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmRhdGEgPD0gX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYW4gb3ZlcmxhcHBpbmcgc25hcCEgU28gd2UgbXVzdCBmaWd1cmUgb3V0IHdoaWNoIG9uZSBpcyBjbG9zZXIgYW5kIGxldCB0aGF0IHR3ZWVuIGxpdmUuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGVuZFZhbHVlIC0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR3ZWVuVG8oZW5kU2Nyb2xsLCB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBzbmFwRHVyQ2xhbXAoX2FicyhNYXRoLm1heChfYWJzKG5hdHVyYWxFbmQgLSB0b3RhbFByb2dyZXNzKSwgX2FicyhlbmRWYWx1ZSAtIHRvdGFsUHJvZ3Jlc3MpKSAqIDAuMTg1IC8gdmVsb2NpdHkgLyAwLjA1IHx8IDApKSxcbiAgICAgICAgICAgICAgZWFzZTogc25hcC5lYXNlIHx8IFwicG93ZXIzXCIsXG4gICAgICAgICAgICAgIGRhdGE6IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSxcbiAgICAgICAgICAgICAgLy8gcmVjb3JkIHRoZSBkaXN0YW5jZSBzbyB0aGF0IGlmIGFub3RoZXIgc25hcCB0d2VlbiBvY2N1cnMgKGNvbmZsaWN0KSB3ZSBjYW4gcHJpb3JpdGl6ZSB0aGUgY2xvc2VzdCBzbmFwLlxuICAgICAgICAgICAgICBvbkludGVycnVwdDogZnVuY3Rpb24gb25JbnRlcnJ1cHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpICYmIF9vbkludGVycnVwdCAmJiBfb25JbnRlcnJ1cHQoc2VsZik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24gJiYgIWlzVG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgc2Nyb2xsYmFyIGlzIGxpbWl0ZWQsIHNvIHdlIHNob3VsZCBjb3JyZWN0IHRoZSBzY3J1YmJlZCBhbmltYXRpb24ncyBwbGF5aGVhZCBhdCB0aGUgZW5kIHRvIG1hdGNoIEVYQUNUTFkgd2hlcmUgaXQgd2FzIHN1cHBvc2VkIHRvIHNuYXBcbiAgICAgICAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGVuZFZhbHVlLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKSA6IGFuaW1hdGlvbi5wcm9ncmVzcyhlbmRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc25hcDEgPSBzbmFwMiA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICBvblNuYXBDb21wbGV0ZSAmJiBvblNuYXBDb21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgICBfb25Db21wbGV0ZSAmJiBfb25Db21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgc2Nyb2xsLCBjaGFuZ2UxICogY2hhbmdlLCBlbmRTY3JvbGwgLSBzY3JvbGwgLSBjaGFuZ2UxICogY2hhbmdlKTtcbiAgICAgICAgICAgIG9uU3RhcnQgJiYgb25TdGFydChzZWxmLCB0d2VlblRvLnR3ZWVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5pc0FjdGl2ZSAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgaWQgJiYgKF9pZHNbaWRdID0gc2VsZik7XG4gICAgdHJpZ2dlciA9IHNlbGYudHJpZ2dlciA9IF9nZXRUYXJnZXQodHJpZ2dlciB8fCBwaW4gIT09IHRydWUgJiYgcGluKTsgLy8gaWYgYSB0cmlnZ2VyIGhhcyBzb21lIGtpbmQgb2Ygc2Nyb2xsLXJlbGF0ZWQgZWZmZWN0IGFwcGxpZWQgdGhhdCBjb3VsZCBjb250YW1pbmF0ZSB0aGUgXCJ5XCIgb3IgXCJ4XCIgcG9zaXRpb24gKGxpa2UgYSBTY3JvbGxTbW9vdGhlciBlZmZlY3QpLCB3ZSBuZWVkZWQgYSB3YXkgdG8gdGVtcG9yYXJpbHkgcmV2ZXJ0IGl0LCBzbyB3ZSB1c2UgdGhlIHN0UmV2ZXJ0IHByb3BlcnR5IG9mIHRoZSBnc0NhY2hlLiBJdCBjYW4gcmV0dXJuIGFub3RoZXIgZnVuY3Rpb24gdGhhdCB3ZSdsbCBjYWxsIGF0IHRoZSBlbmQgc28gaXQgY2FuIHJldHVybiB0byBpdHMgbm9ybWFsIHN0YXRlLlxuXG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIChjdXN0b21SZXZlcnRSZXR1cm4gPSBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZikpO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIHBpbi5wYXJlbnROb2RlICYmIHBpbi5wYXJlbnROb2RlLnN0eWxlICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC4gV2Ugc2hvdWxkIGNoZWNrIHRoYXQgcGluLnBhcmVudE5vZGUgaXMgYW4gZWxlbWVudCAobm90IHNoYWRvdyBkb20gd2luZG93KVxuXG4gICAgICBzZWxmLnBpbiA9IHBpbjtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3BhY2VyID0gc3BhY2VyID0gcGluQ2FjaGUuc3BhY2VyO1xuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgcGluR2V0dGVyID0gZ3NhcC5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgcGluU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihwaW4sIGRpcmVjdGlvbi5hLCBfcHgpOyAvLyBwaW4uZmlyc3RDaGlsZCAmJiAhX21heFNjcm9sbChwaW4sIGRpcmVjdGlvbikgJiYgKHBpbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpOyAvLyBwcm90ZWN0cyBmcm9tIGNvbGxhcHNpbmcgbWFyZ2lucywgYnV0IGNhbiBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGFzIGRlbW9uc3RyYXRlZCBoZXJlOiBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xZTQyYzdhNzNiZmE0MDlkMmNmMWUxODRlN2E0MjQ4ZCBzbyBpdCB3YXMgcmVtb3ZlZCBpbiBmYXZvciBvZiBqdXN0IHRlbGxpbmcgcGVvcGxlIHRvIHNldCB1cCB0aGVpciBDU1MgdG8gYXZvaWQgdGhlIGNvbGxhcHNpbmcgbWFyZ2lucyAob3ZlcmZsb3c6IGhpZGRlbiB8IGF1dG8gaXMganVzdCBvbmUgb3B0aW9uLiBBbm90aGVyIGlzIGJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudCkuXG5cbiAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2Vycykge1xuICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgIG1hcmtlckVuZFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwLCBtYXJrZXJTdGFydFRyaWdnZXIpO1xuICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgICB2YXIgY29udGVudCA9IF9nZXRUYXJnZXQoX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJjb250ZW50XCIpIHx8IHNjcm9sbGVyKTtcblxuICAgICAgbWFya2VyU3RhcnQgPSB0aGlzLm1hcmtlclN0YXJ0ID0gX2NyZWF0ZU1hcmtlcihcInN0YXJ0XCIsIGlkLCBjb250ZW50LCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCwgMCwgY29udGFpbmVyQW5pbWF0aW9uKTtcbiAgICAgIG1hcmtlckVuZCA9IHRoaXMubWFya2VyRW5kID0gX2NyZWF0ZU1hcmtlcihcImVuZFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGRpcmVjdGlvbi5hLCBfcHgpKTtcblxuICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcik7XG5cbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICB2YXIgb2xkT25VcGRhdGUgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZSxcbiAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSgwLCAwLCAxKTtcbiAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkoY29udGFpbmVyQW5pbWF0aW9uLCBvbGRQYXJhbXMgfHwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5wcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgLSAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSArIDFdO1xuICAgIH07XG5cbiAgICBzZWxmLnJldmVydCA9IGZ1bmN0aW9uIChyZXZlcnQsIHRlbXApIHtcbiAgICAgIGlmICghdGVtcCkge1xuICAgICAgICByZXR1cm4gc2VsZi5raWxsKHRydWUpO1xuICAgICAgfSAvLyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGdzYXAuY29udGV4dCgpIGFuZCBnc2FwLm1hdGNoTWVkaWEoKSB3aGljaCBjYWxsIHJldmVydCgpXG5cblxuICAgICAgdmFyIHIgPSByZXZlcnQgIT09IGZhbHNlIHx8ICFzZWxmLmVuYWJsZWQsXG4gICAgICAgICAgcHJldlJlZnJlc2hpbmcgPSBfcmVmcmVzaGluZztcblxuICAgICAgaWYgKHIgIT09IHNlbGYuaXNSZXZlcnRlZCkge1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHByZXZTY3JvbGwgPSBNYXRoLm1heChzY3JvbGxGdW5jKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTsgLy8gcmVjb3JkIHRoZSBzY3JvbGwgc28gd2UgY2FuIHJldmVydCBsYXRlciAocmVwb3NpdGlvbmluZy9waW5uaW5nIHRoaW5ncyBjYW4gYWZmZWN0IHNjcm9sbCBwb3NpdGlvbikuIEluIHRoZSBzdGF0aWMgcmVmcmVzaCgpIG1ldGhvZCwgd2UgZmlyc3QgcmVjb3JkIGFsbCB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBhcyBhIHJlZmVyZW5jZS5cblxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocikge1xuICAgICAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcbiAgICAgICAgICBzZWxmLnVwZGF0ZShyKTsgLy8gbWFrZSBzdXJlIHRoZSBwaW4gaXMgYmFjayBpbiBpdHMgb3JpZ2luYWwgcG9zaXRpb24gc28gdGhhdCBhbGwgdGhlIG1lYXN1cmVtZW50cyBhcmUgY29ycmVjdC4gZG8gdGhpcyBCRUZPUkUgc3dhcHBpbmcgdGhlIHBpbiBvdXRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4gJiYgKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkpIHtcbiAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pLCBzcGFjZXJTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgciB8fCBzZWxmLnVwZGF0ZShyKTsgLy8gd2hlbiB3ZSdyZSByZXN0b3JpbmcsIHRoZSB1cGRhdGUgc2hvdWxkIHJ1biBBRlRFUiBzd2FwcGluZyB0aGUgcGluIGludG8gaXRzIHBpbi1zcGFjZXIuXG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZzsgLy8gcmVzdG9yZS4gV2Ugc2V0IGl0IHRvIHRydWUgZHVyaW5nIHRoZSB1cGRhdGUoKSBzbyB0aGF0IHRoaW5ncyBmaXJlIHByb3Blcmx5IGluIHRoZXJlLlxuXG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IHI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYucmVmcmVzaCA9IGZ1bmN0aW9uIChzb2Z0LCBmb3JjZSwgcG9zaXRpb24sIHBpbk9mZnNldCkge1xuICAgICAgLy8gcG9zaXRpb24gaXMgdHlwaWNhbGx5IG9ubHkgZGVmaW5lZCBpZiBpdCdzIGNvbWluZyBmcm9tIHNldFBvc2l0aW9ucygpIC0gaXQncyBhIHdheSB0byBza2lwIHRoZSBub3JtYWwgcGFyc2luZy4gcGluT2Zmc2V0IGlzIGFsc28gb25seSBmcm9tIHNldFBvc2l0aW9ucygpIGFuZCBpcyBtb3N0bHkgcmVsYXRlZCB0byBmYW5jeSBzdHVmZiB3ZSBuZWVkIHRvIGRvIGluIFNjcm9sbFNtb290aGVyIHdpdGggZWZmZWN0c1xuICAgICAgaWYgKChfcmVmcmVzaGluZyB8fCAhc2VsZi5lbmFibGVkKSAmJiAhZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluICYmIHNvZnQgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgIV9yZWZyZXNoaW5nQWxsICYmIG9uUmVmcmVzaEluaXQgJiYgb25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcblxuICAgICAgaWYgKHR3ZWVuVG8udHdlZW4gJiYgIXBvc2l0aW9uKSB7XG4gICAgICAgIC8vIHdlIHNraXAgdGhpcyBpZiBhIHBvc2l0aW9uIGlzIHBhc3NlZCBpbiBiZWNhdXNlIHR5cGljYWxseSB0aGF0J3MgZnJvbSAuc2V0UG9zaXRpb25zKCkgYW5kIGl0J3MgYmVzdCB0byBhbGxvdyBpbi1wcm9ncmVzcyBzbmFwcGluZyB0byBjb250aW51ZS5cbiAgICAgICAgdHdlZW5Uby50d2Vlbi5raWxsKCk7XG4gICAgICAgIHR3ZWVuVG8udHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcblxuICAgICAgaWYgKGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi5yZXZlcnQoe1xuICAgICAgICAgIGtpbGw6IGZhbHNlXG4gICAgICAgIH0pLmludmFsaWRhdGUoKTtcbiAgICAgICAgYW5pbWF0aW9uLmdldENoaWxkcmVuICYmIGFuaW1hdGlvbi5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmIHQucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICB9KTsgLy8gYW55IGZyb20oKSBvciBmcm9tVG8oKSB0d2VlbnMgaW5zaWRlIGEgdGltZWxpbmUgc2hvdWxkIHJlbmRlciBpbW1lZGlhdGVseSAod2VsbCwgdW5sZXNzIHRoZXkgaGF2ZSBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlKVxuICAgICAgfVxuXG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICBzZWxmLl9zdWJQaW5PZmZzZXQgPSBmYWxzZTsgLy8gd2UnbGwgc2V0IHRoaXMgdG8gdHJ1ZSBpbiB0aGUgc3ViLXBpbnMgaWYgd2UgZmluZCBhbnlcblxuICAgICAgdmFyIHNpemUgPSBnZXRTY3JvbGxlclNpemUoKSxcbiAgICAgICAgICBzY3JvbGxlckJvdW5kcyA9IGdldFNjcm9sbGVyT2Zmc2V0cygpLFxuICAgICAgICAgIG1heCA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpIDogX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgICBpc0ZpcnN0UmVmcmVzaCA9IGNoYW5nZSA8PSAwLjAxIHx8ICFjaGFuZ2UsXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBvdGhlclBpbk9mZnNldCA9IHBpbk9mZnNldCB8fCAwLFxuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc09iamVjdChwb3NpdGlvbikgPyBwb3NpdGlvbi5lbmQgOiB2YXJzLmVuZCxcbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdmFycy5lbmRUcmlnZ2VyIHx8IHRyaWdnZXIsXG4gICAgICAgICAgcGFyc2VkU3RhcnQgPSBfaXNPYmplY3QocG9zaXRpb24pID8gcG9zaXRpb24uc3RhcnQgOiB2YXJzLnN0YXJ0IHx8ICh2YXJzLnN0YXJ0ID09PSAwIHx8ICF0cmlnZ2VyID8gMCA6IHBpbiA/IFwiMCAwXCIgOiBcIjAgMTAwJVwiKSxcbiAgICAgICAgICBwaW5uZWRDb250YWluZXIgPSBzZWxmLnBpbm5lZENvbnRhaW5lciA9IHZhcnMucGlubmVkQ29udGFpbmVyICYmIF9nZXRUYXJnZXQodmFycy5waW5uZWRDb250YWluZXIsIHNlbGYpLFxuICAgICAgICAgIHRyaWdnZXJJbmRleCA9IHRyaWdnZXIgJiYgTWF0aC5tYXgoMCwgX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikpIHx8IDAsXG4gICAgICAgICAgaSA9IHRyaWdnZXJJbmRleCxcbiAgICAgICAgICBjcyxcbiAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgIGlzVmVydGljYWwsXG4gICAgICAgICAgb3ZlcnJpZGUsXG4gICAgICAgICAgY3VyVHJpZ2dlcixcbiAgICAgICAgICBjdXJQaW4sXG4gICAgICAgICAgb3Bwb3NpdGVTY3JvbGwsXG4gICAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgICByZXZlcnRlZFBpbnMsXG4gICAgICAgICAgZm9yY2VkT3ZlcmZsb3csXG4gICAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQsXG4gICAgICAgICAgbWFya2VyRW5kT2Zmc2V0O1xuXG4gICAgICBpZiAobWFya2VycyAmJiBfaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIC8vIGlmIHdlIGFsdGVyIHRoZSBzdGFydC9lbmQgcG9zaXRpb25zIHdpdGggLnNldFBvc2l0aW9ucygpLCBpdCBnZW5lcmFsbHkgZmVlZHMgaW4gYWJzb2x1dGUgTlVNQkVSUyB3aGljaCBkb24ndCBjb252ZXkgaW5mb3JtYXRpb24gYWJvdXQgd2hlcmUgdG8gbGluZSB1cCB0aGUgbWFya2Vycywgc28gdG8ga2VlcCBpdCBpbnR1aXRpdmUsIHdlIHJlY29yZCBob3cgZmFyIHRoZSB0cmlnZ2VyIHBvc2l0aW9ucyBzaGlmdCBhZnRlciBhcHBseWluZyB0aGUgbmV3IG51bWJlcnMgYW5kIHRoZW4gb2Zmc2V0IGJ5IHRoYXQgbXVjaCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLiBXZSBkbyB0aGUgc2FtZSB0byB0aGUgYXNzb2NpYXRlZCB0cmlnZ2VyIG1hcmtlcnMgdG9vIG9mIGNvdXJzZS5cbiAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQgPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgICBtYXJrZXJFbmRPZmZzZXQgPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgLy8gdXNlciBtaWdodCB0cnkgdG8gcGluIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UsIHNvIHdlIG11c3QgZmluZCBhbnkgcHJpb3IgdHJpZ2dlcnMgd2l0aCB0aGUgc2FtZSBwaW4sIHJldmVydCB0aGVtLCBhbmQgZGV0ZXJtaW5lIGhvdyBsb25nIHRoZXkncmUgcGlubmluZyBzbyB0aGF0IHdlIGNhbiBvZmZzZXQgdGhpbmdzIGFwcHJvcHJpYXRlbHkuIE1ha2Ugc3VyZSB3ZSByZXZlcnQgZnJvbSBsYXN0IHRvIGZpcnN0IHNvIHRoYXQgdGhpbmdzIFwicmV3aW5kXCIgcHJvcGVybHkuXG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clRyaWdnZXIuZW5kIHx8IGN1clRyaWdnZXIucmVmcmVzaCgwLCAxKSB8fCAoX3JlZnJlc2hpbmcgPSBzZWxmKTsgLy8gaWYgaXQncyBhIHRpbWVsaW5lLWJhc2VkIHRyaWdnZXIgdGhhdCBoYXNuJ3QgYmVlbiBmdWxseSBpbml0aWFsaXplZCB5ZXQgYmVjYXVzZSBpdCdzIHdhaXRpbmcgZm9yIDEgdGljaywganVzdCBmb3JjZSB0aGUgcmVmcmVzaCgpIGhlcmUsIG90aGVyd2lzZSBpZiBpdCBjb250YWlucyBhIHBpbiB0aGF0J3Mgc3VwcG9zZWQgdG8gYWZmZWN0IG90aGVyIFNjcm9sbFRyaWdnZXJzIGZ1cnRoZXIgZG93biB0aGUgcGFnZSwgdGhleSB3b24ndCBiZSBhZGp1c3RlZCBwcm9wZXJseS5cblxuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW4gfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmICFjdXJUcmlnZ2VyLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgICByZXZlcnRlZFBpbnMgfHwgKHJldmVydGVkUGlucyA9IFtdKTtcbiAgICAgICAgICByZXZlcnRlZFBpbnMudW5zaGlmdChjdXJUcmlnZ2VyKTsgLy8gd2UnbGwgcmV2ZXJ0IGZyb20gZmlyc3QgdG8gbGFzdCB0byBtYWtlIHN1cmUgdGhpbmdzIHJlYWNoIHRoZWlyIGVuZCBzdGF0ZSBwcm9wZXJseVxuXG4gICAgICAgICAgY3VyVHJpZ2dlci5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VyVHJpZ2dlciAhPT0gX3RyaWdnZXJzW2ldKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBpdCBnb3QgcmVtb3ZlZC5cbiAgICAgICAgICB0cmlnZ2VySW5kZXgtLTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkU3RhcnQpICYmIChwYXJzZWRTdGFydCA9IHBhcnNlZFN0YXJ0KHNlbGYpKTtcbiAgICAgIHBhcnNlZFN0YXJ0ID0gX3BhcnNlQ2xhbXAocGFyc2VkU3RhcnQsIFwic3RhcnRcIiwgc2VsZik7XG4gICAgICBzdGFydCA9IF9wYXJzZVBvc2l0aW9uKHBhcnNlZFN0YXJ0LCB0cmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSwgbWFya2VyU3RhcnQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fc3RhcnRDbGFtcCAmJiBcIl9zdGFydENsYW1wXCIpIHx8IChwaW4gPyAtMC4wMDEgOiAwKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZEVuZCkgJiYgKHBhcnNlZEVuZCA9IHBhcnNlZEVuZChzZWxmKSk7XG5cbiAgICAgIGlmIChfaXNTdHJpbmcocGFyc2VkRW5kKSAmJiAhcGFyc2VkRW5kLmluZGV4T2YoXCIrPVwiKSkge1xuICAgICAgICBpZiAofnBhcnNlZEVuZC5pbmRleE9mKFwiIFwiKSkge1xuICAgICAgICAgIHBhcnNlZEVuZCA9IChfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQuc3BsaXQoXCIgXCIpWzBdIDogXCJcIikgKyBwYXJzZWRFbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gX29mZnNldFRvUHgocGFyc2VkRW5kLnN1YnN0cigyKSwgc2l6ZSk7XG4gICAgICAgICAgcGFyc2VkRW5kID0gX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0IDogKGNvbnRhaW5lckFuaW1hdGlvbiA/IGdzYXAudXRpbHMubWFwUmFuZ2UoMCwgY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCksIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLnN0YXJ0LCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5lbmQsIHN0YXJ0KSA6IHN0YXJ0KSArIG9mZnNldDsgLy8gX3BhcnNlUG9zaXRpb24gd29uJ3QgZmFjdG9yIGluIHRoZSBvZmZzZXQgaWYgdGhlIHN0YXJ0IGlzIGEgbnVtYmVyLCBzbyBkbyBpdCBoZXJlLlxuXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGFyc2VkRW5kID0gX3BhcnNlQ2xhbXAocGFyc2VkRW5kLCBcImVuZFwiLCBzZWxmKTtcbiAgICAgIGVuZCA9IE1hdGgubWF4KHN0YXJ0LCBfcGFyc2VQb3NpdGlvbihwYXJzZWRFbmQgfHwgKHBhcnNlZEVuZFRyaWdnZXIgPyBcIjEwMCUgMFwiIDogbWF4KSwgcGFyc2VkRW5kVHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCkgKyBvZmZzZXQsIG1hcmtlckVuZCwgbWFya2VyRW5kVHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fZW5kQ2xhbXAgJiYgXCJfZW5kQ2xhbXBcIikpIHx8IC0wLjAwMTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBpID0gdHJpZ2dlckluZGV4O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPD0gc3RhcnQgJiYgIWNvbnRhaW5lckFuaW1hdGlvbiAmJiBjdXJUcmlnZ2VyLmVuZCA+IDApIHtcbiAgICAgICAgICBjcyA9IGN1clRyaWdnZXIuZW5kIC0gKHNlbGYuX3N0YXJ0Q2xhbXAgPyBNYXRoLm1heCgwLCBjdXJUcmlnZ2VyLnN0YXJ0KSA6IGN1clRyaWdnZXIuc3RhcnQpO1xuXG4gICAgICAgICAgaWYgKChjdXJQaW4gPT09IHRyaWdnZXIgJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPCBzdGFydCB8fCBjdXJQaW4gPT09IHBpbm5lZENvbnRhaW5lcikgJiYgaXNOYU4ocGFyc2VkU3RhcnQpKSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0YXJ0IHZhbHVlcyBzaG91bGRuJ3QgYmUgb2Zmc2V0IGF0IGFsbCAtIHRyZWF0IHRoZW0gYXMgYWJzb2x1dGVcbiAgICAgICAgICAgIG9mZnNldCArPSBjcyAqICgxIC0gY3VyVHJpZ2dlci5wcm9ncmVzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyUGluID09PSBwaW4gJiYgKG90aGVyUGluT2Zmc2V0ICs9IGNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydCArPSBvZmZzZXQ7XG4gICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgICAgc2VsZi5fc3RhcnRDbGFtcCAmJiAoc2VsZi5fc3RhcnRDbGFtcCArPSBvZmZzZXQpO1xuXG4gICAgICBpZiAoc2VsZi5fZW5kQ2xhbXAgJiYgIV9yZWZyZXNoaW5nQWxsKSB7XG4gICAgICAgIHNlbGYuX2VuZENsYW1wID0gZW5kIHx8IC0wLjAwMTtcbiAgICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgY2hhbmdlID0gZW5kIC0gc3RhcnQgfHwgKHN0YXJ0IC09IDAuMDEpICYmIDAuMDAxO1xuXG4gICAgICBpZiAoaXNGaXJzdFJlZnJlc2gpIHtcbiAgICAgICAgLy8gb24gdGhlIHZlcnkgZmlyc3QgcmVmcmVzaCgpLCB0aGUgcHJldlByb2dyZXNzIGNvdWxkbid0IGhhdmUgYmVlbiBhY2N1cmF0ZSB5ZXQgYmVjYXVzZSB0aGUgc3RhcnQvZW5kIHdlcmUgbmV2ZXIgY2FsY3VsYXRlZCwgc28gd2Ugc2V0IGl0IGhlcmUuIEJlZm9yZSAzLjExLjUsIGl0IGNvdWxkIGxlYWQgdG8gYW4gaW5hY2N1cmF0ZSBzY3JvbGwgcG9zaXRpb24gcmVzdG9yYXRpb24gd2l0aCBzbmFwcGluZy5cbiAgICAgICAgcHJldlByb2dyZXNzID0gZ3NhcC51dGlscy5jbGFtcCgwLCAxLCBnc2FwLnV0aWxzLm5vcm1hbGl6ZShzdGFydCwgZW5kLCBwcmV2U2Nyb2xsKSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3BpblB1c2ggPSBvdGhlclBpbk9mZnNldDtcblxuICAgICAgaWYgKG1hcmtlclN0YXJ0ICYmIG9mZnNldCkge1xuICAgICAgICAvLyBvZmZzZXQgdGhlIG1hcmtlcnMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGNzID0ge307XG4gICAgICAgIGNzW2RpcmVjdGlvbi5hXSA9IFwiKz1cIiArIG9mZnNldDtcbiAgICAgICAgcGlubmVkQ29udGFpbmVyICYmIChjc1tkaXJlY3Rpb24ucF0gPSBcIi09XCIgKyBzY3JvbGxGdW5jKCkpO1xuICAgICAgICBnc2FwLnNldChbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbiAmJiAhKF9jbGFtcGluZ01heCAmJiBzZWxmLmVuZCA+PSBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pKSkge1xuICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKHBpbik7XG4gICAgICAgIGlzVmVydGljYWwgPSBkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbDtcbiAgICAgICAgc2Nyb2xsID0gc2Nyb2xsRnVuYygpOyAvLyByZWNhbGN1bGF0ZSBiZWNhdXNlIHRoZSB0cmlnZ2VycyBjYW4gYWZmZWN0IHRoZSBzY3JvbGxcblxuICAgICAgICBwaW5TdGFydCA9IHBhcnNlRmxvYXQocGluR2V0dGVyKGRpcmVjdGlvbi5hKSkgKyBvdGhlclBpbk9mZnNldDtcblxuICAgICAgICBpZiAoIW1heCAmJiBlbmQgPiAxKSB7XG4gICAgICAgICAgLy8gbWFrZXMgc3VyZSB0aGUgc2Nyb2xsZXIgaGFzIGEgc2Nyb2xsYmFyLCBvdGhlcndpc2UgaWYgc29tZXRoaW5nIGhhcyB3aWR0aDogMTAwJSwgZm9yIGV4YW1wbGUsIGl0IHdvdWxkIGJlIHRvbyBiaWcgKGV4Y2x1ZGUgdGhlIHNjcm9sbGJhcikuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNTE4Mi1zY3JvbGx0cmlnZ2VyLXdpZHRoLW9mLXBhZ2UtaW5jcmVhc2Utd2hlcmUtbWFya2Vycy1hcmUtc2V0LXRvLWZhbHNlL1xuICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0gKGlzVmlld3BvcnQgPyBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsIDogc2Nyb2xsZXIpLnN0eWxlO1xuICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0ge1xuICAgICAgICAgICAgc3R5bGU6IGZvcmNlZE92ZXJmbG93LFxuICAgICAgICAgICAgdmFsdWU6IGZvcmNlZE92ZXJmbG93W1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChpc1ZpZXdwb3J0ICYmIF9nZXRDb21wdXRlZFN0eWxlKF9ib2R5KVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSAhPT0gXCJzY3JvbGxcIikge1xuICAgICAgICAgICAgLy8gYXZvaWQgYW4gZXh0cmEgc2Nyb2xsYmFyIGlmIEJPVEggPGh0bWw+IGFuZCA8Ym9keT4gaGF2ZSBvdmVyZmxvdyBzZXQgdG8gXCJzY3JvbGxcIlxuICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3cuc3R5bGVbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gPSBcInNjcm9sbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgICBwaW5TdGF0ZSA9IF9nZXRTdGF0ZShwaW4pOyAvLyB0cmFuc2Zvcm1zIHdpbGwgaW50ZXJmZXJlIHdpdGggdGhlIHRvcC9sZWZ0L3JpZ2h0L2JvdHRvbSBwbGFjZW1lbnQsIHNvIHJlbW92ZSB0aGVtIHRlbXBvcmFyaWx5LiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBmYWN0b3JzIGluIHRyYW5zZm9ybXMuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpO1xuICAgICAgICBvcHBvc2l0ZVNjcm9sbCA9IHVzZUZpeGVkUG9zaXRpb24gJiYgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGlzVmVydGljYWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCkoKTtcblxuICAgICAgICBpZiAocGluU3BhY2luZykge1xuICAgICAgICAgIHNwYWNlclN0YXRlID0gW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyLCBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCArIF9weF07XG4gICAgICAgICAgc3BhY2VyU3RhdGUudCA9IHNwYWNlcjtcbiAgICAgICAgICBpID0gcGluU3BhY2luZyA9PT0gX3BhZGRpbmcgPyBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbikgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCA6IDA7XG5cbiAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgc3BhY2VyU3RhdGUucHVzaChkaXJlY3Rpb24uZCwgaSArIF9weCk7IC8vIGZvciBib3gtc2l6aW5nOiBib3JkZXItYm94IChtdXN0IGluY2x1ZGUgcGFkZGluZykuXG5cbiAgICAgICAgICAgIHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgIT09IFwiYXV0b1wiICYmIChzcGFjZXIuc3R5bGUuZmxleEJhc2lzID0gaSArIF9weCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgICAgICAgIGlmIChwaW5uZWRDb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIGluIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpLCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIHRoZSBwaW5Db250YWluZXIncyBzaXplIGJlY2F1c2UgdGhpcyBwaW5TcGFjaW5nIG1heSBzdHJldGNoIGl0IG91dCwgYnV0IHdlIGNhbid0IGp1c3QgYWRkIHRoZSBleGFjdCBkaXN0YW5jZSBiZWNhdXNlIGRlcGVuZGluZyBvbiBsYXlvdXQsIGl0IG1heSBub3QgcHVzaCB0aGluZ3MgZG93biBvciBpdCBtYXkgb25seSBkbyBzbyBwYXJ0aWFsbHkuXG4gICAgICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICBpZiAodC5waW4gPT09IHBpbm5lZENvbnRhaW5lciAmJiB0LnZhcnMucGluU3BhY2luZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0Ll9zdWJQaW5PZmZzZXQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaSA9IF9nZXRTaXplKHBpbiwgZGlyZWN0aW9uKTtcbiAgICAgICAgICBpICYmIHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgIT09IFwiYXV0b1wiICYmIChzcGFjZXIuc3R5bGUuZmxleEJhc2lzID0gaSArIF9weCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgIG92ZXJyaWRlID0ge1xuICAgICAgICAgICAgdG9wOiBib3VuZHMudG9wICsgKGlzVmVydGljYWwgPyBzY3JvbGwgLSBzdGFydCA6IG9wcG9zaXRlU2Nyb2xsKSArIF9weCxcbiAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgKGlzVmVydGljYWwgPyBvcHBvc2l0ZVNjcm9sbCA6IHNjcm9sbCAtIHN0YXJ0KSArIF9weCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgICBvdmVycmlkZVtfd2lkdGhdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9XaWR0aF0gPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoKSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfaGVpZ2h0XSA9IG92ZXJyaWRlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IE1hdGguY2VpbChib3VuZHMuaGVpZ2h0KSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfbWFyZ2luXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfVG9wXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfUmlnaHRdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Cb3R0b21dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9MZWZ0XSA9IFwiMFwiO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Ub3BdID0gY3NbX3BhZGRpbmcgKyBfVG9wXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9SaWdodF0gPSBjc1tfcGFkZGluZyArIF9SaWdodF07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfQm90dG9tXSA9IGNzW19wYWRkaW5nICsgX0JvdHRvbV07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfTGVmdF0gPSBjc1tfcGFkZGluZyArIF9MZWZ0XTtcbiAgICAgICAgICBwaW5BY3RpdmVTdGF0ZSA9IF9jb3B5U3RhdGUocGluT3JpZ2luYWxTdGF0ZSwgb3ZlcnJpZGUsIHBpblJlcGFyZW50KTtcbiAgICAgICAgICBfcmVmcmVzaGluZ0FsbCAmJiBzY3JvbGxGdW5jKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gbWlnaHQgYmUgYWZmZWN0aW5nIHRoZSB0cmFuc2Zvcm0sIHNvIHdlIG11c3QganVtcCB0byB0aGUgZW5kLCBjaGVjayB0aGUgdmFsdWUsIGFuZCBjb21wZW5zYXRlIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIHdoZW4gaXQgYmVjb21lcyB1bnBpbm5lZCwgdGhlIHBpblNldHRlcigpIHdpbGwgZ2V0IHNldCB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHdoYXRldmVyIHRoZSBhbmltYXRpb24gZGlkLlxuICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7IC8vIGlmIG5vdCwgd2UgbXVzdCBpbnZhbGlkYXRlKCkgYWZ0ZXIgdGhpcyBzdGVwLCBvdGhlcndpc2UgaXQgY291bGQgbG9jayBpbiBzdGFydGluZyB2YWx1ZXMgcHJlbWF0dXJlbHkuXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDEpO1xuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgcGluTW92ZXMgPSBNYXRoLmFicyhjaGFuZ2UgLSBwaW5DaGFuZ2UpID4gMTtcbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHBpbk1vdmVzICYmIHBpbkFjdGl2ZVN0YXRlLnNwbGljZShwaW5BY3RpdmVTdGF0ZS5sZW5ndGggLSAyLCAyKTsgLy8gdHJhbnNmb3JtIGlzIHRoZSBsYXN0IHByb3BlcnR5L3ZhbHVlIHNldCBpbiB0aGUgc3RhdGUgQXJyYXkuIFNpbmNlIHRoZSBhbmltYXRpb24gaXMgY29udHJvbGxpbmcgdGhhdCwgd2Ugc2hvdWxkIG9taXQgaXQuXG5cbiAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgfHwgYW5pbWF0aW9uLmludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgYW5pbWF0aW9uLnBhcmVudCB8fCBhbmltYXRpb24udG90YWxUaW1lKGFuaW1hdGlvbi50b3RhbFRpbWUoKSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgYSB0b2dnbGVBY3Rpb24gY2FsbGVkIHBsYXkoKSBhbmQgdGhlbiByZWZyZXNoKCkgaGFwcGVucyBhbmQgd2hlbiB3ZSByZW5kZXIoMSkgYWJvdmUsIGl0IHdvdWxkIGNhdXNlIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgYW5kIGdldCByZW1vdmVkIGZyb20gaXRzIHBhcmVudCwgc28gdGhpcyBtYWtlcyBzdXJlIGl0IGdldHMgcHV0IGJhY2sgaW4uXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpbkNoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcmNlZE92ZXJmbG93ICYmIChmb3JjZWRPdmVyZmxvdy52YWx1ZSA/IGZvcmNlZE92ZXJmbG93LnN0eWxlW1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldID0gZm9yY2VkT3ZlcmZsb3cudmFsdWUgOiBmb3JjZWRPdmVyZmxvdy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm92ZXJmbG93LVwiICsgZGlyZWN0aW9uLmEpKTtcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAmJiBzY3JvbGxGdW5jKCkgJiYgIWNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAvLyBpdCBtYXkgYmUgSU5TSURFIGEgcGlubmVkIGVsZW1lbnQsIHNvIHdhbGsgdXAgdGhlIHRyZWUgYW5kIGxvb2sgZm9yIGFueSBlbGVtZW50cyB3aXRoIF9waW5PZmZzZXQgdG8gY29tcGVuc2F0ZSBiZWNhdXNlIGFueXRoaW5nIHdpdGggcGluU3BhY2luZyB0aGF0J3MgYWxyZWFkeSBzY3JvbGxlZCB3b3VsZCB0aHJvdyBvZmYgdGhlIG1lYXN1cmVtZW50cyBpbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBib3VuZHMgPSB0cmlnZ2VyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgd2hpbGUgKGJvdW5kcyAmJiBib3VuZHMgIT09IF9ib2R5KSB7XG4gICAgICAgICAgaWYgKGJvdW5kcy5fcGluT2Zmc2V0KSB7XG4gICAgICAgICAgICBzdGFydCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICAgIGVuZCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3VuZHMgPSBib3VuZHMucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXZlcnRlZFBpbnMgJiYgcmV2ZXJ0ZWRQaW5zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5zdGFydCA9IHN0YXJ0O1xuICAgICAgc2VsZi5lbmQgPSBlbmQ7XG4gICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IF9yZWZyZXNoaW5nQWxsID8gcHJldlNjcm9sbCA6IHNjcm9sbEZ1bmMoKTsgLy8gcmVzZXQgdmVsb2NpdHlcblxuICAgICAgaWYgKCFjb250YWluZXJBbmltYXRpb24gJiYgIV9yZWZyZXNoaW5nQWxsKSB7XG4gICAgICAgIHNjcm9sbDEgPCBwcmV2U2Nyb2xsICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgIHNlbGYuc2Nyb2xsLnJlYyA9IDA7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgIGxhc3RSZWZyZXNoID0gX2dldFRpbWUoKTtcblxuICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICBsYXN0U25hcCA9IC0xOyAvLyBqdXN0IHNvIHNuYXBwaW5nIGdldHMgcmUtZW5hYmxlZCwgY2xlYXIgb3V0IGFueSByZWNvcmRlZCBsYXN0IHZhbHVlXG4gICAgICAgIC8vIHNlbGYuaXNBY3RpdmUgJiYgc2Nyb2xsRnVuYyhzdGFydCArIGNoYW5nZSAqIHByZXZQcm9ncmVzcyk7IC8vIHByZXZpb3VzbHkgdGhpcyBsaW5lIHdhcyBoZXJlIHRvIGVuc3VyZSB0aGF0IHdoZW4gc25hcHBpbmcga2lja3MgaW4sIGl0J3MgZnJvbSB0aGUgcHJldmlvdXMgcHJvZ3Jlc3MgYnV0IGluIHNvbWUgY2FzZXMgdGhhdCdzIG5vdCBkZXNpcmFibGUsIGxpa2UgYW4gYWxsLXBhZ2UgU2Nyb2xsVHJpZ2dlciB3aGVuIG5ldyBjb250ZW50IGdldHMgYWRkZWQgdG8gdGhlIHBhZ2UsIHRoYXQnZCB0b3RhbGx5IGNoYW5nZSB0aGUgcHJvZ3Jlc3MuXG5cbiAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIF9yZWZyZXNoaW5nID0gMDtcbiAgICAgIGFuaW1hdGlvbiAmJiBpc1RvZ2dsZSAmJiAoYW5pbWF0aW9uLl9pbml0dGVkIHx8IHByZXZBbmltUHJvZ3Jlc3MpICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpICE9PSBwcmV2QW5pbVByb2dyZXNzICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhwcmV2QW5pbVByb2dyZXNzIHx8IDAsIHRydWUpLnJlbmRlcihhbmltYXRpb24udGltZSgpLCB0cnVlLCB0cnVlKTsgLy8gbXVzdCBmb3JjZSBhIHJlLXJlbmRlciBiZWNhdXNlIGlmIHNhdmVTdHlsZXMoKSB3YXMgdXNlZCBvbiB0aGUgdGFyZ2V0KHMpLCB0aGUgc3R5bGVzIGNvdWxkIGhhdmUgYmVlbiB3aXBlZCBvdXQgZHVyaW5nIHRoZSByZWZyZXNoKCkuXG5cbiAgICAgIGlmIChpc0ZpcnN0UmVmcmVzaCB8fCBwcmV2UHJvZ3Jlc3MgIT09IHNlbGYucHJvZ3Jlc3MgfHwgY29udGFpbmVyQW5pbWF0aW9uIHx8IGludmFsaWRhdGVPblJlZnJlc2ggfHwgYW5pbWF0aW9uICYmICFhbmltYXRpb24uX2luaXR0ZWQpIHtcbiAgICAgICAgLy8gZW5zdXJlcyB0aGF0IHRoZSBkaXJlY3Rpb24gaXMgc2V0IHByb3Blcmx5ICh3aGVuIHJlZnJlc2hpbmcsIHByb2dyZXNzIGlzIHNldCBiYWNrIHRvIDAgaW5pdGlhbGx5LCB0aGVuIGJhY2sgYWdhaW4gdG8gd2hlcmV2ZXIgaXQgbmVlZHMgdG8gYmUpIGFuZCB0aGF0IGNhbGxiYWNrcyBhcmUgdHJpZ2dlcmVkLlxuICAgICAgICBhbmltYXRpb24gJiYgIWlzVG9nZ2xlICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgcHJldlByb2dyZXNzIHx8IGFuaW1hdGlvbi52YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UpICYmIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBzdGFydCA8IC0wLjAwMSAmJiAhcHJldlByb2dyZXNzID8gZ3NhcC51dGlscy5ub3JtYWxpemUoc3RhcnQsIGVuZCwgMCkgOiBwcmV2UHJvZ3Jlc3MsIHRydWUpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2hlcmUgYW5pbWF0aW9uIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQgYXJlbid0IHRyaWdnZXJlZC5cblxuICAgICAgICBzZWxmLnByb2dyZXNzID0gaXNGaXJzdFJlZnJlc2ggfHwgKHNjcm9sbDEgLSBzdGFydCkgLyBjaGFuZ2UgPT09IHByZXZQcm9ncmVzcyA/IDAgOiBwcmV2UHJvZ3Jlc3M7XG4gICAgICB9XG5cbiAgICAgIHBpbiAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuX3Bpbk9mZnNldCA9IE1hdGgucm91bmQoc2VsZi5wcm9ncmVzcyAqIHBpbkNoYW5nZSkpO1xuICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKTtcblxuICAgICAgaWYgKCFpc05hTihtYXJrZXJTdGFydE9mZnNldCkpIHtcbiAgICAgICAgLy8gbnVtYmVycyB3ZXJlIHBhc3NlZCBpbiBmb3IgdGhlIHBvc2l0aW9uIHdoaWNoIGFyZSBhYnNvbHV0ZSwgc28gaW5zdGVhZCBvZiBqdXN0IHB1dHRpbmcgdGhlIG1hcmtlcnMgYXQgdGhlIHZlcnkgYm90dG9tIG9mIHRoZSB2aWV3cG9ydCwgd2UgZmlndXJlIG91dCBob3cgZmFyIHRoZXkgc2hpZnRlZCBkb3duIChpdCdzIHNhZmUgdG8gYXNzdW1lIHRoZXkgd2VyZSBvcmlnaW5hbGx5IHBvc2l0aW9uZWQgaW4gY2xvc2VyIHJlbGF0aW9uIHRvIHRoZSB0cmlnZ2VyIGVsZW1lbnQgd2l0aCB2YWx1ZXMgbGlrZSBcInRvcFwiLCBcImNlbnRlclwiLCBhIHBlcmNlbnRhZ2Ugb3Igd2hhdGV2ZXIsIHNvIHdlIG9mZnNldCB0aGF0IG11Y2ggaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiB0byBiYXNpY2FsbHkgcmV2ZXJ0IHRoZW0gdG8gdGhlIHJlbGF0aXZlIHBvc2l0aW9uIHRoeSB3ZXJlIGF0IHByZXZpb3VzbHkuXG4gICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0IC09IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgIG1hcmtlckVuZE9mZnNldCAtPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyU3RhcnQsIGRpcmVjdGlvbiwgbWFya2VyU3RhcnRPZmZzZXQgLSAocGluT2Zmc2V0IHx8IDApKTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLCBtYXJrZXJFbmRPZmZzZXQpO1xuXG4gICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJFbmQsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG4gICAgICB9XG5cbiAgICAgIGlzRmlyc3RSZWZyZXNoICYmICFfcmVmcmVzaGluZ0FsbCAmJiBzZWxmLnVwZGF0ZSgpOyAvLyBlZGdlIGNhc2UgLSB3aGVuIHlvdSByZWxvYWQgYSBwYWdlIHdoZW4gaXQncyBhbHJlYWR5IHNjcm9sbGVkIGRvd24sIHNvbWUgYnJvd3NlcnMgZmlyZSBhIFwic2Nyb2xsXCIgZXZlbnQgYmVmb3JlIERPTUNvbnRlbnRMb2FkZWQsIHRyaWdnZXJpbmcgYW4gdXBkYXRlQWxsKCkuIElmIHdlIGRvbid0IHVwZGF0ZSB0aGUgc2VsZi5wcm9ncmVzcyBhcyBwYXJ0IG9mIHJlZnJlc2goKSwgdGhlbiB3aGVuIGl0IGhhcHBlbnMgbmV4dCwgaXQgbWF5IHJlY29yZCBwcmV2UHJvZ3Jlc3MgYXMgMCB3aGVuIGl0IHJlYWxseSBzaG91bGRuJ3QsIHBvdGVudGlhbGx5IGNhdXNpbmcgYSBjYWxsYmFjayBpbiBhbiBhbmltYXRpb24gdG8gZmlyZSBhZ2Fpbi5cblxuICAgICAgaWYgKG9uUmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgIWV4ZWN1dGluZ09uUmVmcmVzaCkge1xuICAgICAgICAvLyB3aGVuIHJlZnJlc2hpbmcgYWxsLCB3ZSBkbyBleHRyYSB3b3JrIHRvIGNvcnJlY3QgcGlubmVkQ29udGFpbmVyIHNpemVzIGFuZCBlbnN1cmUgdGhpbmdzIGRvbid0IGV4Y2VlZCB0aGUgbWF4U2Nyb2xsLCBzbyB3ZSBzaG91bGQgZG8gYWxsIHRoZSByZWZyZXNoZXMgYXQgdGhlIGVuZCBhZnRlciBhbGwgdGhhdCB3b3JrIHNvIHRoYXQgdGhlIHN0YXJ0L2VuZCB2YWx1ZXMgYXJlIGNvcnJlY3RlZC5cbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgb25SZWZyZXNoKHNlbGYpO1xuICAgICAgICBleGVjdXRpbmdPblJlZnJlc2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoc2Nyb2xsRnVuYygpIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6ICFhbmltYXRpb24ucGF1c2VkKCkgPyBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLnJldmVyc2VkKCkpIDogaXNUb2dnbGUgfHwgX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHNlbGYuZGlyZWN0aW9uIDwgMCwgMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYubGFiZWxUb1Njcm9sbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgcmV0dXJuIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ubGFiZWxzICYmIChzdGFydCB8fCBzZWxmLnJlZnJlc2goKSB8fCBzdGFydCkgKyBhbmltYXRpb24ubGFiZWxzW2xhYmVsXSAvIGFuaW1hdGlvbi5kdXJhdGlvbigpICogY2hhbmdlIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHJhaWxpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSxcbiAgICAgICAgICBhID0gc2VsZi5kaXJlY3Rpb24gPiAwID8gX3RyaWdnZXJzLnNsaWNlKDAsIGkpLnJldmVyc2UoKSA6IF90cmlnZ2Vycy5zbGljZShpICsgMSk7XG5cbiAgICAgIHJldHVybiAoX2lzU3RyaW5nKG5hbWUpID8gYS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQudmFycy5wcmV2ZW50T3ZlcmxhcHMgPT09IG5hbWU7XG4gICAgICB9KSA6IGEpLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gc2VsZi5kaXJlY3Rpb24gPiAwID8gdC5lbmQgPD0gc3RhcnQgOiB0LnN0YXJ0ID49IGVuZDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVjb3JkVmVsb2NpdHksIGZvcmNlRmFrZSkge1xuICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiAhZm9yY2VGYWtlICYmICFyZXNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzY3JvbGwgPSBfcmVmcmVzaGluZ0FsbCA9PT0gdHJ1ZSA/IHByZXZTY3JvbGwgOiBzZWxmLnNjcm9sbCgpLFxuICAgICAgICAgIHAgPSByZXNldCA/IDAgOiAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgIGNsaXBwZWQgPSBwIDwgMCA/IDAgOiBwID4gMSA/IDEgOiBwIHx8IDAsXG4gICAgICAgICAgcHJldlByb2dyZXNzID0gc2VsZi5wcm9ncmVzcyxcbiAgICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgICB3YXNBY3RpdmUsXG4gICAgICAgICAgdG9nZ2xlU3RhdGUsXG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIHN0YXRlQ2hhbmdlZCxcbiAgICAgICAgICB0b2dnbGVkLFxuICAgICAgICAgIGlzQXRNYXgsXG4gICAgICAgICAgaXNUYWtpbmdBY3Rpb247XG5cbiAgICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgICBzY3JvbGwyID0gc2Nyb2xsMTtcbiAgICAgICAgc2Nyb2xsMSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbEZ1bmMoKSA6IHNjcm9sbDtcblxuICAgICAgICBpZiAoc25hcCkge1xuICAgICAgICAgIHNuYXAyID0gc25hcDE7XG4gICAgICAgICAgc25hcDEgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IGNsaXBwZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gYW50aWNpcGF0ZSB0aGUgcGlubmluZyBhIGZldyB0aWNrcyBhaGVhZCBvZiB0aW1lIGJhc2VkIG9uIHZlbG9jaXR5IHRvIGF2b2lkIGEgdmlzdWFsIGdsaXRjaCBkdWUgdG8gdGhlIGZhY3QgdGhhdCBtb3N0IGJyb3dzZXJzIGRvIHNjcm9sbGluZyBvbiBhIHNlcGFyYXRlIHRocmVhZCAobm90IHN5bmNlZCB3aXRoIHJlcXVlc3RBbmltYXRpb25GcmFtZSkuXG5cblxuICAgICAgaWYgKGFudGljaXBhdGVQaW4gJiYgcGluICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIGlmICghY2xpcHBlZCAmJiBzdGFydCA8IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4pIHtcbiAgICAgICAgICBjbGlwcGVkID0gMC4wMDAxO1xuICAgICAgICB9IGVsc2UgaWYgKGNsaXBwZWQgPT09IDEgJiYgZW5kID4gc2Nyb2xsICsgKHNjcm9sbCAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogYW50aWNpcGF0ZVBpbikge1xuICAgICAgICAgIGNsaXBwZWQgPSAwLjk5OTk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNsaXBwZWQgIT09IHByZXZQcm9ncmVzcyAmJiBzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgaXNBY3RpdmUgPSBzZWxmLmlzQWN0aXZlID0gISFjbGlwcGVkICYmIGNsaXBwZWQgPCAxO1xuICAgICAgICB3YXNBY3RpdmUgPSAhIXByZXZQcm9ncmVzcyAmJiBwcmV2UHJvZ3Jlc3MgPCAxO1xuICAgICAgICB0b2dnbGVkID0gaXNBY3RpdmUgIT09IHdhc0FjdGl2ZTtcbiAgICAgICAgc3RhdGVDaGFuZ2VkID0gdG9nZ2xlZCB8fCAhIWNsaXBwZWQgIT09ICEhcHJldlByb2dyZXNzOyAvLyBjb3VsZCBnbyBmcm9tIHN0YXJ0IGFsbCB0aGUgd2F5IHRvIGVuZCwgdGh1cyBpdCBkaWRuJ3QgdG9nZ2xlIGJ1dCBpdCBkaWQgY2hhbmdlIHN0YXRlIGluIGEgc2Vuc2UgKG1heSBuZWVkIHRvIGZpcmUgYSBjYWxsYmFjaylcblxuICAgICAgICBzZWxmLmRpcmVjdGlvbiA9IGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgPyAxIDogLTE7XG4gICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBjbGlwcGVkO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkICYmICFwcmV2UHJvZ3Jlc3MgPyAwIDogY2xpcHBlZCA9PT0gMSA/IDEgOiBwcmV2UHJvZ3Jlc3MgPT09IDEgPyAyIDogMzsgLy8gMCA9IGVudGVyLCAxID0gbGVhdmUsIDIgPSBlbnRlckJhY2ssIDMgPSBsZWF2ZUJhY2sgKHdlIHByaW9yaXRpemUgdGhlIEZJUlNUIGVuY291bnRlciwgdGh1cyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0IHBhc3QgdGhlIG9uRW50ZXIgYW5kIG9uTGVhdmUgaW4gb25lIHRpY2ssIGl0J2QgcHJpb3JpdGl6ZSBvbkVudGVyLlxuXG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSAhdG9nZ2xlZCAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gIT09IFwibm9uZVwiICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSB8fCB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlXTsgLy8gaWYgaXQgZGlkbid0IHRvZ2dsZSwgdGhhdCBtZWFucyBpdCBzaG90IHJpZ2h0IHBhc3QgYW5kIHNpbmNlIHdlIHByaW9yaXRpemUgdGhlIFwiZW50ZXJcIiBhY3Rpb24sIHdlIHNob3VsZCBzd2l0Y2ggdG8gdGhlIFwibGVhdmVcIiBpbiB0aGlzIGNhc2UgKGJ1dCBvbmx5IGlmIG9uZSBpcyBkZWZpbmVkKVxuXG4gICAgICAgICAgICBpc1Rha2luZ0FjdGlvbiA9IGFuaW1hdGlvbiAmJiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIgfHwgYWN0aW9uID09PSBcInJlc2V0XCIgfHwgYWN0aW9uIGluIGFuaW1hdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldmVudE92ZXJsYXBzICYmICh0b2dnbGVkIHx8IGlzVGFraW5nQWN0aW9uKSAmJiAoaXNUYWtpbmdBY3Rpb24gfHwgc2NydWIgfHwgIWFuaW1hdGlvbikgJiYgKF9pc0Z1bmN0aW9uKHByZXZlbnRPdmVybGFwcykgPyBwcmV2ZW50T3ZlcmxhcHMoc2VsZikgOiBzZWxmLmdldFRyYWlsaW5nKHByZXZlbnRPdmVybGFwcykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LmVuZEFuaW1hdGlvbigpO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKCFpc1RvZ2dsZSkge1xuICAgICAgICAgIGlmIChzY3J1YlR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXApIHtcbiAgICAgICAgICAgIHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQgIT09IHNjcnViVHdlZW4uX3RpbWUgJiYgc2NydWJUd2Vlbi5yZW5kZXIoc2NydWJUd2Vlbi5fZHAuX3RpbWUgLSBzY3J1YlR3ZWVuLl9zdGFydCk7IC8vIGlmIHRoZXJlJ3MgYSBzY3J1YiBvbiBib3RoIHRoZSBjb250YWluZXIgYW5pbWF0aW9uIGFuZCB0aGlzIG9uZSAob3IgYSBTY3JvbGxTbW9vdGhlciksIHRoZSB1cGRhdGUgb3JkZXIgd291bGQgY2F1c2UgdGhpcyBvbmUgbm90IHRvIGhhdmUgcmVuZGVyZWQgeWV0LCBzbyBpdCB3b3VsZG4ndCBtYWtlIGFueSBwcm9ncmVzcyBiZWZvcmUgd2UgLnJlc3RhcnQoKSBpdCBoZWFkaW5nIHRvd2FyZCB0aGUgbmV3IHByb2dyZXNzIHNvIGl0J2QgYXBwZWFyIHN0dWNrIHRodXMgd2UgZm9yY2UgYSByZW5kZXIgaGVyZS5cblxuICAgICAgICAgICAgaWYgKHNjcnViVHdlZW4ucmVzZXRUbykge1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGNsaXBwZWQsIGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVnYWN5IHN1cHBvcnQgKGNvdXJ0ZXN5KSwgYmVmb3JlIDMuMTAuMFxuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnZhcnMudG90YWxQcm9ncmVzcyA9IGNsaXBwZWQ7XG4gICAgICAgICAgICAgIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY2xpcHBlZCwgISEoX3JlZnJlc2hpbmcgJiYgKGxhc3RSZWZyZXNoIHx8IHJlc2V0KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICByZXNldCAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuc3R5bGVbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdID0gc3BhY2luZ1N0YXJ0KTtcblxuICAgICAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgcGluU2V0dGVyKF9yb3VuZChwaW5TdGFydCArIHBpbkNoYW5nZSAqIGNsaXBwZWQpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgaXNBdE1heCA9ICFyZXNldCAmJiBjbGlwcGVkID4gcHJldlByb2dyZXNzICYmIGVuZCArIDEgPiBzY3JvbGwgJiYgc2Nyb2xsICsgMSA+PSBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pOyAvLyBpZiBpdCdzIGF0IHRoZSBWRVJZIGVuZCBvZiB0aGUgcGFnZSwgZG9uJ3Qgc3dpdGNoIGF3YXkgZnJvbSBwb3NpdGlvbjogZml4ZWQgYmVjYXVzZSBpdCdzIHBvaW50bGVzcyBhbmQgaXQgY291bGQgY2F1c2UgYSBicmllZiBmbGFzaCB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgYmFjayB1cCAod2hlbiBpdCBnZXRzIHBpbm5lZCBhZ2FpbilcblxuICAgICAgICAgICAgaWYgKHBpblJlcGFyZW50KSB7XG4gICAgICAgICAgICAgIGlmICghcmVzZXQgJiYgKGlzQWN0aXZlIHx8IGlzQXRNYXgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgX29mZnNldCA9IHNjcm9sbCAtIHN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgX2JvZHksIGJvdW5kcy50b3AgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfb2Zmc2V0IDogMCkgKyBfcHgsIGJvdW5kcy5sZWZ0ICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gMCA6IF9vZmZzZXQpICsgX3B4KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBzcGFjZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9zZXRTdGF0ZShpc0FjdGl2ZSB8fCBpc0F0TWF4ID8gcGluQWN0aXZlU3RhdGUgOiBwaW5TdGF0ZSk7XG5cbiAgICAgICAgICAgIHBpbk1vdmVzICYmIGNsaXBwZWQgPCAxICYmIGlzQWN0aXZlIHx8IHBpblNldHRlcihwaW5TdGFydCArIChjbGlwcGVkID09PSAxICYmICFpc0F0TWF4ID8gcGluQ2hhbmdlIDogMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNuYXAgJiYgIXR3ZWVuVG8udHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCAmJiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MgJiYgKHRvZ2dsZWQgfHwgb25jZSAmJiBjbGlwcGVkICYmIChjbGlwcGVkIDwgMSB8fCAhX2xpbWl0Q2FsbGJhY2tzKSkgJiYgX3RvQXJyYXkodG9nZ2xlQ2xhc3MudGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0W2lzQWN0aXZlIHx8IG9uY2UgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odG9nZ2xlQ2xhc3MuY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7IC8vIGNsYXNzZXMgY291bGQgYWZmZWN0IHBvc2l0aW9uaW5nLCBzbyBkbyBpdCBldmVuIGlmIHJlc2V0IG9yIHJlZnJlc2hpbmcgaXMgdHJ1ZS5cblxuICAgICAgICBvblVwZGF0ZSAmJiAhaXNUb2dnbGUgJiYgIXJlc2V0ICYmIG9uVXBkYXRlKHNlbGYpO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBpZiAoaXNUYWtpbmdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBhdXNlKCkudG90YWxQcm9ncmVzcygxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzZXRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpLnBhdXNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc3RhcnRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblthY3Rpb25dKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRvZ2dsZWQgfHwgIV9saW1pdENhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gb24gc3RhcnR1cCwgdGhlIHBhZ2UgY291bGQgYmUgc2Nyb2xsZWQgYW5kIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBjYWxsYmFja3MgdGhhdCBkaWRuJ3QgdG9nZ2xlLiBGb3IgZXhhbXBsZSBvbkVudGVyIHNob3VsZG4ndCBmaXJlIGlmIHRoZSBTY3JvbGxUcmlnZ2VyIGlzbid0IGFjdHVhbGx5IGVudGVyZWQuXG4gICAgICAgICAgICBvblRvZ2dsZSAmJiB0b2dnbGVkICYmIF9jYWxsYmFjayhzZWxmLCBvblRvZ2dsZSk7XG4gICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgIG9uY2UgJiYgKGNsaXBwZWQgPT09IDEgPyBzZWxmLmtpbGwoZmFsc2UsIDEpIDogY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSA9IDApOyAvLyBhIGNhbGxiYWNrIHNob3VsZG4ndCBiZSBjYWxsZWQgYWdhaW4gaWYgb25jZSBpcyB0cnVlLlxuXG4gICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0byBnbyBjb21wbGV0ZWx5IHBhc3QsIGxpa2UgZnJvbSBiZWZvcmUgdGhlIHN0YXJ0IHRvIGFmdGVyIHRoZSBlbmQgKG9yIHZpY2UtdmVyc2EpIGluIHdoaWNoIGNhc2UgQk9USCBjYWxsYmFja3Mgc2hvdWxkIGJlIGZpcmVkIGluIHRoYXQgb3JkZXJcbiAgICAgICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkID09PSAxID8gMSA6IDM7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmYXN0U2Nyb2xsRW5kICYmICFpc0FjdGl2ZSAmJiBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpID4gKF9pc051bWJlcihmYXN0U2Nyb2xsRW5kKSA/IGZhc3RTY3JvbGxFbmQgOiAyNTAwKSkge1xuICAgICAgICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkgOiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYWN0aW9uID09PSBcInJldmVyc2VcIiA/IDEgOiAhY2xpcHBlZCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzVG9nZ2xlICYmIG9uVXBkYXRlICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSBhYnNvbHV0ZWx5LXBvc2l0aW9uZWQgbWFya2VycyAob25seSBpZiB0aGUgc2Nyb2xsZXIgaXNuJ3QgdGhlIHZpZXdwb3J0KVxuXG5cbiAgICAgIGlmIChtYXJrZXJFbmRTZXR0ZXIpIHtcbiAgICAgICAgdmFyIG4gPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSA6IHNjcm9sbDtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIobiArIChtYXJrZXJTdGFydFRyaWdnZXIuX2lzRmxpcHBlZCA/IDEgOiAwKSk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlcihuKTtcbiAgICAgIH1cblxuICAgICAgY2FNYXJrZXJTZXR0ZXIgJiYgY2FNYXJrZXJTZXR0ZXIoLXNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApKTtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgIGlzVmlld3BvcnQgfHwgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChyZXNldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLnByb2dyZXNzID0gcHJldlByb2dyZXNzID0gMDtcbiAgICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCAhPT0gZmFsc2UgJiYgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHdlZW4gPSBmdW5jdGlvbiAoc25hcCkge1xuICAgICAgcmV0dXJuIHNuYXAgJiYgdHdlZW5UbyA/IHR3ZWVuVG8udHdlZW4gOiBzY3J1YlR3ZWVuO1xuICAgIH07XG5cbiAgICBzZWxmLnNldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIChuZXdTdGFydCwgbmV3RW5kLCBrZWVwQ2xhbXAsIHBpbk9mZnNldCkge1xuICAgICAgLy8gZG9lc24ndCBwZXJzaXN0IGFmdGVyIHJlZnJlc2goKSEgSW50ZW5kZWQgdG8gYmUgYSB3YXkgdG8gb3ZlcnJpZGUgdmFsdWVzIHRoYXQgd2VyZSBzZXQgZHVyaW5nIHJlZnJlc2goKSwgbGlrZSB5b3UgY291bGQgc2V0IGl0IGluIG9uUmVmcmVzaCgpXG4gICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcmF0aW9zIGludG8gc2Nyb2xsIHBvc2l0aW9ucy4gUmVtZW1iZXIsIHN0YXJ0L2VuZCB2YWx1ZXMgb24gU2Nyb2xsVHJpZ2dlcnMgdGhhdCBoYXZlIGEgY29udGFpbmVyQW5pbWF0aW9uIHJlZmVyIHRvIHRoZSB0aW1lIChpbiBzZWNvbmRzKSwgTk9UIHNjcm9sbCBwb3NpdGlvbnMuXG4gICAgICAgIHZhciBzdCA9IGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICAgICAgZHVyYXRpb24gPSBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSxcbiAgICAgICAgICAgIF9jaGFuZ2UgPSBzdC5lbmQgLSBzdC5zdGFydDtcblxuICAgICAgICBuZXdTdGFydCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld1N0YXJ0IC8gZHVyYXRpb247XG4gICAgICAgIG5ld0VuZCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld0VuZCAvIGR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJlZnJlc2goZmFsc2UsIGZhbHNlLCB7XG4gICAgICAgIHN0YXJ0OiBfa2VlcENsYW1wKG5ld1N0YXJ0LCBrZWVwQ2xhbXAgJiYgISFzZWxmLl9zdGFydENsYW1wKSxcbiAgICAgICAgZW5kOiBfa2VlcENsYW1wKG5ld0VuZCwga2VlcENsYW1wICYmICEhc2VsZi5fZW5kQ2xhbXApXG4gICAgICB9LCBwaW5PZmZzZXQpO1xuICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICB9O1xuXG4gICAgc2VsZi5hZGp1c3RQaW5TcGFjaW5nID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgaWYgKHNwYWNlclN0YXRlICYmIGFtb3VudCkge1xuICAgICAgICB2YXIgaSA9IHNwYWNlclN0YXRlLmluZGV4T2YoZGlyZWN0aW9uLmQpICsgMTtcbiAgICAgICAgc3BhY2VyU3RhdGVbaV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlW2ldKSArIGFtb3VudCArIF9weDtcbiAgICAgICAgc3BhY2VyU3RhdGVbMV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlWzFdKSArIGFtb3VudCArIF9weDtcblxuICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAocmVzZXQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHJlc2V0ICE9PSBmYWxzZSAmJiBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgcHJldlNjcm9sbCA9IDA7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICAgIHR3ZWVuVG8udHdlZW4gJiYgdHdlZW5Uby50d2Vlbi5raWxsKCkgJiYgKHR3ZWVuVG8udHdlZW4gPSAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWaWV3cG9ydCkge1xuICAgICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChfdHJpZ2dlcnNbaV0uc2Nyb2xsZXIgPT09IHNjcm9sbGVyICYmIF90cmlnZ2Vyc1tpXSAhPT0gc2VsZikge1xuICAgICAgICAgICAgICByZXR1cm47IC8vZG9uJ3QgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgaWYgdGhlcmUgYXJlIHN0aWxsIG90aGVyIHRyaWdnZXJzIHJlZmVyZW5jaW5nIGl0LlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICAgIGlzVmlld3BvcnQgfHwgX3JlbW92ZUxpc3RlbmVyKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYua2lsbCA9IGZ1bmN0aW9uIChyZXZlcnQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBzZWxmLmRpc2FibGUocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbik7XG4gICAgICBzY3J1YlR3ZWVuICYmICFhbGxvd0FuaW1hdGlvbiAmJiBzY3J1YlR3ZWVuLmtpbGwoKTtcbiAgICAgIGlkICYmIGRlbGV0ZSBfaWRzW2lkXTtcblxuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKTtcblxuICAgICAgaSA+PSAwICYmIF90cmlnZ2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICBpID09PSBfaSAmJiBfZGlyZWN0aW9uID4gMCAmJiBfaS0tOyAvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgcmVmcmVzaCgpIG9yIHVwZGF0ZSgpLCBzcGxpY2luZyB3b3VsZCBjYXVzZSBza2lwcyBpbiB0aGUgaW5kZXgsIHNvIGFkanVzdC4uLlxuICAgICAgLy8gaWYgbm8gb3RoZXIgU2Nyb2xsVHJpZ2dlciBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgc2Nyb2xsZXIgYXJlIGZvdW5kLCB3aXBlIG91dCBhbnkgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9uLiBPdGhlcndpc2UsIGluIGEgc2luZ2xlIHBhZ2UgYXBwbGljYXRpb24sIGZvciBleGFtcGxlLCBpdCBjb3VsZCBtYWludGFpbiBzY3JvbGwgcG9zaXRpb24gd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LlxuXG4gICAgICBpID0gMDtcblxuICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Nyb2xsZXIgPT09IHNlbGYuc2Nyb2xsZXIgJiYgKGkgPSAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBpIHx8IF9yZWZyZXNoaW5nQWxsIHx8IChzZWxmLnNjcm9sbC5yZWMgPSAwKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IG51bGw7XG4gICAgICAgIHJldmVydCAmJiBhbmltYXRpb24ucmV2ZXJ0KHtcbiAgICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgYW5pbWF0aW9uLmtpbGwoKTtcbiAgICAgIH1cblxuICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5wYXJlbnROb2RlICYmIG0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKTtcbiAgICAgIH0pO1xuICAgICAgX3ByaW1hcnkgPT09IHNlbGYgJiYgKF9wcmltYXJ5ID0gMCk7XG5cbiAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5waW4gPT09IHBpbiAmJiBpKys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGkgfHwgKHBpbkNhY2hlLnNwYWNlciA9IDApOyAvLyBpZiB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgU2Nyb2xsVHJpZ2dlcnMgd2l0aCB0aGUgc2FtZSBwaW4sIHJlbW92ZSB0aGUgc3BhY2VyLCBvdGhlcndpc2UgaXQgY291bGQgYmUgY29udGFtaW5hdGVkIHdpdGggb2xkL3N0YWxlIHZhbHVlcyBpZiB0aGUgdXNlciByZS1jcmVhdGVzIGEgU2Nyb2xsVHJpZ2dlciBmb3IgdGhlIHNhbWUgZWxlbWVudC5cbiAgICAgIH1cblxuICAgICAgdmFycy5vbktpbGwgJiYgdmFycy5vbktpbGwoc2VsZik7XG4gICAgfTtcblxuICAgIF90cmlnZ2Vycy5wdXNoKHNlbGYpO1xuXG4gICAgc2VsZi5lbmFibGUoZmFsc2UsIGZhbHNlKTtcbiAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAmJiBhbmltYXRpb24uYWRkICYmICFjaGFuZ2UpIHtcbiAgICAgIC8vIGlmIHRoZSBhbmltYXRpb24gaXMgYSB0aW1lbGluZSwgaXQgbWF5IG5vdCBoYXZlIGJlZW4gcG9wdWxhdGVkIHlldCwgc28gaXQgd291bGRuJ3QgcmVuZGVyIGF0IHRoZSBwcm9wZXIgcGxhY2Ugb24gdGhlIGZpcnN0IHJlZnJlc2goKSwgdGh1cyB3ZSBzaG91bGQgc2NoZWR1bGUgb25lIGZvciB0aGUgbmV4dCB0aWNrLiBJZiBcImNoYW5nZVwiIGlzIGRlZmluZWQsIHdlIGtub3cgaXQgbXVzdCBiZSByZS1lbmFibGluZywgdGh1cyB3ZSBjYW4gcmVmcmVzaCgpIHJpZ2h0IGF3YXkuXG4gICAgICB2YXIgdXBkYXRlRnVuYyA9IHNlbGYudXBkYXRlOyAvLyBzb21lIGJyb3dzZXJzIG1heSBmaXJlIGEgc2Nyb2xsIGV2ZW50IEJFRk9SRSBhIHRpY2sgZWxhcHNlcyBhbmQvb3IgdGhlIERPTUNvbnRlbnRMb2FkZWQgZmlyZXMuIFNvIHRoZXJlJ3MgYSBjaGFuY2UgdXBkYXRlKCkgd2lsbCBiZSBjYWxsZWQgQkVGT1JFIGEgcmVmcmVzaCgpIGhhcyBoYXBwZW5lZCBvbiBhIFRpbWVsaW5lLWF0dGFjaGVkIFNjcm9sbFRyaWdnZXIgd2hpY2ggbWVhbnMgdGhlIHN0YXJ0L2VuZCB3b24ndCBiZSBjYWxjdWxhdGVkIHlldC4gV2UgZG9uJ3Qgd2FudCB0byBhZGQgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIHRoZSB1cGRhdGUoKSBtZXRob2QgKGxpa2UgY2hlY2sgdG8gc2VlIGlmIGVuZCBpcyBkZWZpbmVkIGFuZCBpZiBub3QsIGZvcmNlIGEgcmVmcmVzaCgpKSBiZWNhdXNlIHRoYXQncyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyBoaXQgYSBMT1QgKHBlcmZvcm1hbmNlKS4gU28gd2Ugc3dhcCBvdXQgdGhlIHJlYWwgdXBkYXRlKCkgbWV0aG9kIGZvciB0aGlzIG9uZSB0aGF0J2xsIHJlLWF0dGFjaCBpdCB0aGUgZmlyc3QgdGltZSBpdCBnZXRzIGNhbGxlZCBhbmQgb2YgY291cnNlIGZvcmNlcyBhIHJlZnJlc2goKS5cblxuICAgICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudXBkYXRlID0gdXBkYXRlRnVuYztcbiAgICAgICAgX3Njcm9sbGVycy5jYWNoZSsrOyAvLyBvdGhlcndpc2UgYSBjYWNoZWQgc2Nyb2xsIHBvc2l0aW9uIG1heSBnZXQgdXNlZCBpbiB0aGUgcmVmcmVzaCgpIGluIGEgdmVyeSByYXJlIHNjZW5hcmlvLCBsaWtlIGlmIFNjcm9sbFRyaWdnZXJzIGFyZSBjcmVhdGVkIGluc2lkZSBhIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgYW5kIHRoZSBxdWV1ZWQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgZmlyZXMgYmVmb3JlaGFuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vY29tbXVuaXR5L2ZvcnVtcy90b3BpYy80MTI2Ny1zY3JvbGx0cmlnZ2VyLWJyZWFrcy1vbi1yZWZyZXNoLXdoZW4tdXNpbmctZG9tY29udGVudGxvYWRlZC9cblxuICAgICAgICBzdGFydCB8fCBlbmQgfHwgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9O1xuXG4gICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDEsIHNlbGYudXBkYXRlKTtcbiAgICAgIGNoYW5nZSA9IDAuMDE7XG4gICAgICBzdGFydCA9IGVuZCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVmcmVzaCgpO1xuICAgIH1cblxuICAgIHBpbiAmJiBfcXVldWVSZWZyZXNoQWxsKCk7IC8vIHBpbm5pbmcgY291bGQgYWZmZWN0IHRoZSBwb3NpdGlvbnMgb2Ygb3RoZXIgdGhpbmdzLCBzbyBtYWtlIHN1cmUgd2UgcXVldWUgYSBmdWxsIHJlZnJlc2goKVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICAgIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG4gICAgICBfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50ICYmIFNjcm9sbFRyaWdnZXIuZW5hYmxlKCk7XG4gICAgICBfY29yZUluaXR0ZWQgPSBfZW5hYmxlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvcmVJbml0dGVkO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMgPSBmdW5jdGlvbiBkZWZhdWx0cyhjb25maWcpIHtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBmb3IgKHZhciBwIGluIGNvbmZpZykge1xuICAgICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9kZWZhdWx0cztcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKHJlc2V0LCBraWxsKSB7XG4gICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyW2tpbGwgPyBcImtpbGxcIiA6IFwiZGlzYWJsZVwiXShyZXNldCk7XG4gICAgfSk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfYm9keSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgX3Jlc2l6ZURlbGF5LmtpbGwoKTtcblxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX3JlbW92ZUxpc3RlbmVyKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcblxuICAgIGlmIChnc2FwKSB7XG4gICAgICBfdG9BcnJheSA9IGdzYXAudXRpbHMudG9BcnJheTtcbiAgICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG4gICAgICBfY29udGV4dCA9IGdzYXAuY29yZS5jb250ZXh0IHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSBnc2FwLmNvcmUuc3VwcHJlc3NPdmVyd3JpdGVzIHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIF9zY3JvbGxSZXN0b3JhdGlvbiA9IF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiB8fCBcImF1dG9cIjtcbiAgICAgIF9sYXN0U2Nyb2xsID0gX3dpbi5wYWdlWU9mZnNldCB8fCAwO1xuICAgICAgZ3NhcC5jb3JlLmdsb2JhbHMoXCJTY3JvbGxUcmlnZ2VyXCIsIFNjcm9sbFRyaWdnZXIpOyAvLyBtdXN0IHJlZ2lzdGVyIHRoZSBnbG9iYWwgbWFudWFsbHkgYmVjYXVzZSBpbiBJbnRlcm5ldCBFeHBsb3JlciwgZnVuY3Rpb25zIChjbGFzc2VzKSBkb24ndCBoYXZlIGEgXCJuYW1lXCIgcHJvcGVydHkuXG5cbiAgICAgIGlmIChfYm9keSkge1xuICAgICAgICBfZW5hYmxlZCA9IDE7XG4gICAgICAgIF9kaXYxMDB2aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IC8vIHRvIHNvbHZlIG1vYmlsZSBicm93c2VyIGFkZHJlc3MgYmFyIHNob3cvaGlkZSByZXNpemluZywgd2Ugc2hvdWxkbid0IHJlbHkgb24gd2luZG93LmlubmVySGVpZ2h0LiBJbnN0ZWFkLCB1c2UgYSA8ZGl2PiB3aXRoIGl0cyBoZWlnaHQgc2V0IHRvIDEwMHZoIGFuZCBtZWFzdXJlIHRoYXQgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHNjcm9sbGluZyBpcyBiYXNlZCBvbiBhbnl3YXkgYW5kIGl0J3Mgbm90IGFmZmVjdGVkIGJ5IGFkZHJlc3MgYmFyIHNob3dpbmcvaGlkaW5nLlxuXG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgICAgICAgX3JhZkJ1Z0ZpeCgpO1xuXG4gICAgICAgIE9ic2VydmVyLnJlZ2lzdGVyKGdzYXApOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgICAgICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoO1xuICAgICAgICBfZml4SU9TQnVnID0gT2JzZXJ2ZXIuaXNUb3VjaCAmJiAvKGlQYWR8aVBob25lfGlQb2R8TWFjKS9nLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIHNpbmNlIDIwMTcsIGlPUyBoYXMgaGFkIGEgYnVnIHRoYXQgY2F1c2VzIGV2ZW50LmNsaWVudFgvWSB0byBiZSBpbmFjY3VyYXRlIHdoZW4gYSBzY3JvbGwgb2NjdXJzLCB0aHVzIHdlIG11c3QgYWx0ZXJuYXRlIGlnbm9yaW5nIGV2ZXJ5IG90aGVyIHRvdWNobW92ZSBldmVudCB0byB3b3JrIGFyb3VuZCBpdC4gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODE5NTQgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0V4YnJQTmEvMDg3Y2VmMTk3ZGMzNTQ0NWEwOTUxZTg5MzVjNDE1MDNcblxuICAgICAgICBfaWdub3JlTW9iaWxlUmVzaXplID0gT2JzZXJ2ZXIuaXNUb3VjaCA9PT0gMTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpOyAvLyBtb3N0bHkgZm9yIDNyZCBwYXJ0eSBzbW9vdGggc2Nyb2xsaW5nIGxpYnJhcmllcy5cblxuXG4gICAgICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuXG4gICAgICAgIGlmIChnc2FwLm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLm1hdGNoTWVkaWEgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICAgICAgdmFyIG1tID0gZ3NhcC5tYXRjaE1lZGlhKCksXG4gICAgICAgICAgICAgICAgcDtcblxuICAgICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgICAgbW0uYWRkKHAsIHZhcnNbcF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0QWxsKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVJldmVydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JldmVydFJlY29yZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfcmVmcmVzaEFsbCgwLCAxKTtcblxuICAgICAgICAgICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLm1hdGNoTWVkaWEoKS5hZGQoXCIob3JpZW50YXRpb246IHBvcnRyYWl0KVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB3aGVuIG9yaWVudGF0aW9uIGNoYW5nZXMsIHdlIHNob3VsZCB0YWtlIG5ldyBiYXNlIG1lYXN1cmVtZW50cyBmb3IgdGhlIGlnbm9yZU1vYmlsZVJlc2l6ZSBmZWF0dXJlLlxuICAgICAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBfc2V0QmFzZURpbWVuc2lvbnM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiUmVxdWlyZXMgR1NBUCAzLjExLjAgb3IgbGF0ZXJcIik7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gc29tZSBicm93c2VycyAobGlrZSBDaHJvbWUpLCB0aGUgd2luZG93IHN0b3BzIGRpc3BhdGNoaW5nIHNjcm9sbCBldmVudHMgb24gdGhlIHdpbmRvdyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0LCBidXQgaXQncyBjb25zaXN0ZW50IG9uIHRoZSBkb2N1bWVudCFcblxuXG4gICAgICAgIHZhciBib2R5SGFzU3R5bGUgPSBfYm9keS5oYXNBdHRyaWJ1dGUoXCJzdHlsZVwiKSxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IF9ib2R5LnN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyID0gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlLFxuICAgICAgICAgICAgQW5pbWF0aW9uUHJvdG8gPSBnc2FwLmNvcmUuQW5pbWF0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgQW5pbWF0aW9uUHJvdG8ucmV2ZXJ0IHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25Qcm90bywgXCJyZXZlcnRcIiwge1xuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWUoLTAuMDEsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChBbmltYXRpb24ucmV2ZXJ0KCkgd2FzIGFkZGVkIGFmdGVyIDMuMTAuNClcblxuICAgICAgICBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBcInNvbGlkXCI7IC8vIHdvcmtzIGFyb3VuZCBhbiBpc3N1ZSB3aGVyZSBhIG1hcmdpbiBvZiBhIGNoaWxkIGVsZW1lbnQgY291bGQgdGhyb3cgb2ZmIHRoZSBib3VuZHMgb2YgdGhlIF9ib2R5LCBtYWtpbmcgaXQgc2VlbSBsaWtlIHRoZXJlJ3MgYSBtYXJnaW4gd2hlbiB0aGVyZSBhY3R1YWxseSBpc24ndC4gVGhlIGJvcmRlciBlbnN1cmVzIHRoYXQgdGhlIGJvdW5kcyBhcmUgYWNjdXJhdGUuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhfYm9keSk7XG4gICAgICAgIF92ZXJ0aWNhbC5tID0gTWF0aC5yb3VuZChib3VuZHMudG9wICsgX3ZlcnRpY2FsLnNjKCkpIHx8IDA7IC8vIGFjY29tbW9kYXRlIHRoZSBvZmZzZXQgb2YgdGhlIDxib2R5PiBjYXVzZWQgYnkgbWFyZ2lucyBhbmQvb3IgcGFkZGluZ1xuXG4gICAgICAgIF9ob3Jpem9udGFsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy5sZWZ0ICsgX2hvcml6b250YWwuc2MoKSkgfHwgMDtcbiAgICAgICAgYm9yZGVyID8gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gYm9yZGVyIDogYm9keVN0eWxlLnJlbW92ZVByb3BlcnR5KFwiYm9yZGVyLXRvcC1zdHlsZVwiKTtcblxuICAgICAgICBpZiAoIWJvZHlIYXNTdHlsZSkge1xuICAgICAgICAgIC8vIFNTUiBmcmFtZXdvcmtzIGxpa2UgTmV4dC5qcyBjb21wbGFpbiBpZiB0aGlzIGF0dHJpYnV0ZSBnZXRzIGFkZGVkLlxuICAgICAgICAgIF9ib2R5LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiXCIpOyAvLyBpdCdzIG5vdCBlbm91Z2ggdG8ganVzdCByZW1vdmVBdHRyaWJ1dGUoKSAtIHdlIG11c3QgZmlyc3Qgc2V0IGl0IHRvIGVtcHR5LCBvdGhlcndpc2UgTmV4dC5qcyBjb21wbGFpbnMuXG5cblxuICAgICAgICAgIF9ib2R5LnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgICAgICB9IC8vIFRPRE86ICg/KSBtYXliZSBtb3ZlIHRvIGxldmVyYWdpbmcgdGhlIHZlbG9jaXR5IG1lY2hhbmlzbSBpbiBPYnNlcnZlciBhbmQgc2tpcCBpbnRlcnZhbHMuXG5cblxuICAgICAgICBfc3luY0ludGVydmFsID0gc2V0SW50ZXJ2YWwoX3N5bmMsIDI1MCk7XG4gICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC41LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTsgLy8gc29tZSBvbGRlciBBbmRyb2lkIGRldmljZXMgaW50ZXJtaXR0ZW50bHkgc3RvcCBkaXNwYXRjaGluZyBcInRvdWNobW92ZVwiIGV2ZW50cyBpZiB3ZSBkb24ndCBsaXN0ZW4gZm9yIFwidG91Y2hjYW5jZWxcIiBvbiB0aGUgZG9jdW1lbnQuXG5cblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgICAgIF90cmFuc2Zvcm1Qcm9wID0gZ3NhcC51dGlscy5jaGVja1ByZWZpeChcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfc3RhdGVQcm9wcy5wdXNoKF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgICBfY29yZUluaXR0ZWQgPSBfZ2V0VGltZSgpO1xuICAgICAgICBfcmVzaXplRGVsYXkgPSBnc2FwLmRlbGF5ZWRDYWxsKDAuMiwgX3JlZnJlc2hBbGwpLnBhdXNlKCk7XG4gICAgICAgIF9hdXRvUmVmcmVzaCA9IFtfZG9jLCBcInZpc2liaWxpdHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB3ID0gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICBoID0gX3dpbi5pbm5lckhlaWdodDtcblxuICAgICAgICAgIGlmIChfZG9jLmhpZGRlbikge1xuICAgICAgICAgICAgX3ByZXZXaWR0aCA9IHc7XG4gICAgICAgICAgICBfcHJldkhlaWdodCA9IGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChfcHJldldpZHRoICE9PSB3IHx8IF9wcmV2SGVpZ2h0ICE9PSBoKSB7XG4gICAgICAgICAgICBfb25SZXNpemUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9kb2MsIFwiRE9NQ29udGVudExvYWRlZFwiLCBfcmVmcmVzaEFsbCwgX3dpbiwgXCJsb2FkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcInJlc2l6ZVwiLCBfb25SZXNpemVdO1xuXG4gICAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyKTtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyLmVuYWJsZSgwLCAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuY29uZmlnID0gZnVuY3Rpb24gY29uZmlnKHZhcnMpIHtcbiAgICBcImxpbWl0Q2FsbGJhY2tzXCIgaW4gdmFycyAmJiAoX2xpbWl0Q2FsbGJhY2tzID0gISF2YXJzLmxpbWl0Q2FsbGJhY2tzKTtcbiAgICB2YXIgbXMgPSB2YXJzLnN5bmNJbnRlcnZhbDtcbiAgICBtcyAmJiBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpIHx8IChfc3luY0ludGVydmFsID0gbXMpICYmIHNldEludGVydmFsKF9zeW5jLCBtcyk7XG4gICAgXCJpZ25vcmVNb2JpbGVSZXNpemVcIiBpbiB2YXJzICYmIChfaWdub3JlTW9iaWxlUmVzaXplID0gU2Nyb2xsVHJpZ2dlci5pc1RvdWNoID09PSAxICYmIHZhcnMuaWdub3JlTW9iaWxlUmVzaXplKTtcblxuICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpIHx8IF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgIHZhciB0ID0gX2dldFRhcmdldCh0YXJnZXQpLFxuICAgICAgICBpID0gX3Njcm9sbGVycy5pbmRleE9mKHQpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodCk7XG5cbiAgICBpZiAofmkpIHtcbiAgICAgIF9zY3JvbGxlcnMuc3BsaWNlKGksIGlzVmlld3BvcnQgPyA2IDogMik7XG4gICAgfVxuXG4gICAgaWYgKHZhcnMpIHtcbiAgICAgIGlzVmlld3BvcnQgPyBfcHJveGllcy51bnNoaWZ0KF93aW4sIHZhcnMsIF9ib2R5LCB2YXJzLCBfZG9jRWwsIHZhcnMpIDogX3Byb3hpZXMudW5zaGlmdCh0LCB2YXJzKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWEgPSBmdW5jdGlvbiBjbGVhck1hdGNoTWVkaWEocXVlcnkpIHtcbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQuX2N0eCAmJiB0Ll9jdHgucXVlcnkgPT09IHF1ZXJ5ICYmIHQuX2N0eC5raWxsKHRydWUsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuaXNJblZpZXdwb3J0ID0gZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQsIHJhdGlvLCBob3Jpem9udGFsKSB7XG4gICAgdmFyIGJvdW5kcyA9IChfaXNTdHJpbmcoZWxlbWVudCkgPyBfZ2V0VGFyZ2V0KGVsZW1lbnQpIDogZWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIG9mZnNldCA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0gKiByYXRpbyB8fCAwO1xuICAgIHJldHVybiBob3Jpem9udGFsID8gYm91bmRzLnJpZ2h0IC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMubGVmdCArIG9mZnNldCA8IF93aW4uaW5uZXJXaWR0aCA6IGJvdW5kcy5ib3R0b20gLSBvZmZzZXQgPiAwICYmIGJvdW5kcy50b3AgKyBvZmZzZXQgPCBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucG9zaXRpb25JblZpZXdwb3J0ID0gZnVuY3Rpb24gcG9zaXRpb25JblZpZXdwb3J0KGVsZW1lbnQsIHJlZmVyZW5jZVBvaW50LCBob3Jpem9udGFsKSB7XG4gICAgX2lzU3RyaW5nKGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2dldFRhcmdldChlbGVtZW50KSk7XG4gICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIHNpemUgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdLFxuICAgICAgICBvZmZzZXQgPSByZWZlcmVuY2VQb2ludCA9PSBudWxsID8gc2l6ZSAvIDIgOiByZWZlcmVuY2VQb2ludCBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbcmVmZXJlbmNlUG9pbnRdICogc2l6ZSA6IH5yZWZlcmVuY2VQb2ludC5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyAoYm91bmRzLmxlZnQgKyBvZmZzZXQpIC8gX3dpbi5pbm5lcldpZHRoIDogKGJvdW5kcy50b3AgKyBvZmZzZXQpIC8gX3dpbi5pbm5lckhlaWdodDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmtpbGxBbGwgPSBmdW5jdGlvbiBraWxsQWxsKGFsbG93TGlzdGVuZXJzKSB7XG4gICAgX3RyaWdnZXJzLnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIiAmJiB0LmtpbGwoKTtcbiAgICB9KTtcblxuICAgIGlmIChhbGxvd0xpc3RlbmVycyAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnMua2lsbEFsbCB8fCBbXTtcbiAgICAgIF9saXN0ZW5lcnMgPSB7fTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG59KCk7XG5TY3JvbGxUcmlnZ2VyLnZlcnNpb24gPSBcIjMuMTMuMFwiO1xuXG5TY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMgPSBmdW5jdGlvbiAodGFyZ2V0cykge1xuICByZXR1cm4gdGFyZ2V0cyA/IF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIC8vIHNhdmVkIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gYSBjb25zZWN1dGl2ZSBhbHRlcm5hdGluZyBBcnJheSwgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgdHJhbnNmb3JtIGF0dHJpYnV0ZSwgY2FjaGUsIG1hdGNoTWVkaWEsIC4uLl1cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5zdHlsZSkge1xuICAgICAgdmFyIGkgPSBfc2F2ZWRTdHlsZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpID49IDAgJiYgX3NhdmVkU3R5bGVzLnNwbGljZShpLCA1KTtcblxuICAgICAgX3NhdmVkU3R5bGVzLnB1c2godGFyZ2V0LCB0YXJnZXQuc3R5bGUuY3NzVGV4dCwgdGFyZ2V0LmdldEJCb3ggJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCksIF9jb250ZXh0KCkpO1xuICAgIH1cbiAgfSkgOiBfc2F2ZWRTdHlsZXM7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICByZXR1cm4gX3JldmVydEFsbCghc29mdCwgbWVkaWEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycywgYW5pbWF0aW9uKSB7XG4gIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgcmV0dXJuIHNhZmUgPyBfb25SZXNpemUodHJ1ZSkgOiAoX2NvcmVJbml0dGVkIHx8IFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIoKSkgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICByZXR1cm4gKytfc2Nyb2xsZXJzLmNhY2hlICYmIF91cGRhdGVBbGwoZm9yY2UgPT09IHRydWUgPyAyIDogMCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNsZWFyU2Nyb2xsTWVtb3J5ID0gX2NsZWFyU2Nyb2xsTWVtb3J5O1xuXG5TY3JvbGxUcmlnZ2VyLm1heFNjcm9sbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfbWF4U2Nyb2xsKGVsZW1lbnQsIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX2dldFNjcm9sbEZ1bmMoX2dldFRhcmdldChlbGVtZW50KSwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gX2lkc1tpZF07XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF90cmlnZ2Vycy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC52YXJzLmlkICE9PSBcIlNjcm9sbFNtb290aGVyXCI7XG4gIH0pO1xufTsgLy8gaXQncyBjb21tb24gZm9yIHBlb3BsZSB0byBTY3JvbGxUcmlnZ2VyLmdldEFsbCh0ID0+IHQua2lsbCgpKSBvbiBwYWdlIHJvdXRlcywgZm9yIGV4YW1wbGUsIGFuZCB3ZSBkb24ndCB3YW50IGl0IHRvIHJ1aW4gc21vb3RoIHNjcm9sbGluZyBieSBraWxsaW5nIHRoZSBtYWluIFNjcm9sbFNtb290aGVyIG9uZS5cblxuXG5TY3JvbGxUcmlnZ2VyLmlzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFfbGFzdFNjcm9sbFRpbWU7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNuYXBEaXJlY3Rpb25hbCA9IF9zbmFwRGlyZWN0aW9uYWw7XG5cblNjcm9sbFRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5iYXRjaCA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIHZhcnNDb3B5ID0ge30sXG4gICAgICBpbnRlcnZhbCA9IHZhcnMuaW50ZXJ2YWwgfHwgMC4wMTYsXG4gICAgICBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXggfHwgMWU5LFxuICAgICAgcHJveHlDYWxsYmFjayA9IGZ1bmN0aW9uIHByb3h5Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXSxcbiAgICAgICAgdHJpZ2dlcnMgPSBbXSxcbiAgICAgICAgZGVsYXkgPSBnc2FwLmRlbGF5ZWRDYWxsKGludGVydmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhlbGVtZW50cywgdHJpZ2dlcnMpO1xuICAgICAgZWxlbWVudHMgPSBbXTtcbiAgICAgIHRyaWdnZXJzID0gW107XG4gICAgfSkucGF1c2UoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGYpIHtcbiAgICAgIGVsZW1lbnRzLmxlbmd0aCB8fCBkZWxheS5yZXN0YXJ0KHRydWUpO1xuICAgICAgZWxlbWVudHMucHVzaChzZWxmLnRyaWdnZXIpO1xuICAgICAgdHJpZ2dlcnMucHVzaChzZWxmKTtcbiAgICAgIGJhdGNoTWF4IDw9IGVsZW1lbnRzLmxlbmd0aCAmJiBkZWxheS5wcm9ncmVzcygxKTtcbiAgICB9O1xuICB9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIHZhcnNDb3B5W3BdID0gcC5zdWJzdHIoMCwgMikgPT09IFwib25cIiAmJiBfaXNGdW5jdGlvbih2YXJzW3BdKSAmJiBwICE9PSBcIm9uUmVmcmVzaEluaXRcIiA/IHByb3h5Q2FsbGJhY2socCwgdmFyc1twXSkgOiB2YXJzW3BdO1xuICB9XG5cbiAgaWYgKF9pc0Z1bmN0aW9uKGJhdGNoTWF4KSkge1xuICAgIGJhdGNoTWF4ID0gYmF0Y2hNYXgoKTtcblxuICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCgpO1xuICAgIH0pO1xuICB9XG5cbiAgX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgZm9yIChwIGluIHZhcnNDb3B5KSB7XG4gICAgICBjb25maWdbcF0gPSB2YXJzQ29weVtwXTtcbiAgICB9XG5cbiAgICBjb25maWcudHJpZ2dlciA9IHRhcmdldDtcbiAgICByZXN1bHQucHVzaChTY3JvbGxUcmlnZ2VyLmNyZWF0ZShjb25maWcpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07IC8vIHRvIHJlZHVjZSBmaWxlIHNpemUuIGNsYW1wcyB0aGUgc2Nyb2xsIGFuZCBhbHNvIHJldHVybnMgYSBkdXJhdGlvbiBtdWx0aXBsaWVyIHNvIHRoYXQgaWYgdGhlIHNjcm9sbCBnZXRzIGNob3BwZWQgc2hvcnRlciwgdGhlIGR1cmF0aW9uIGdldHMgY3VydGFpbGVkIGFzIHdlbGwgKG90aGVyd2lzZSBpZiB5b3UncmUgdmVyeSBjbG9zZSB0byB0aGUgdG9wIG9mIHRoZSBwYWdlLCBmb3IgZXhhbXBsZSwgYW5kIHN3aXBlIHVwIHJlYWxseSBmYXN0LCBpdCdsbCBzdWRkZW5seSBzbG93IGRvd24gYW5kIHRha2UgYSBsb25nIHRpbWUgdG8gcmVhY2ggdGhlIHRvcCkuXG5cblxudmFyIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllciA9IGZ1bmN0aW9uIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jLCBjdXJyZW50LCBlbmQsIG1heCkge1xuICBjdXJyZW50ID4gbWF4ID8gc2Nyb2xsRnVuYyhtYXgpIDogY3VycmVudCA8IDAgJiYgc2Nyb2xsRnVuYygwKTtcbiAgcmV0dXJuIGVuZCA+IG1heCA/IChtYXggLSBjdXJyZW50KSAvIChlbmQgLSBjdXJyZW50KSA6IGVuZCA8IDAgPyBjdXJyZW50IC8gKGN1cnJlbnQgLSBlbmQpIDogMTtcbn0sXG4gICAgX2FsbG93TmF0aXZlUGFubmluZyA9IGZ1bmN0aW9uIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRvdWNoLWFjdGlvblwiKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuc3R5bGUudG91Y2hBY3Rpb24gPSBkaXJlY3Rpb24gPT09IHRydWUgPyBcImF1dG9cIiA6IGRpcmVjdGlvbiA/IFwicGFuLVwiICsgZGlyZWN0aW9uICsgKE9ic2VydmVyLmlzVG91Y2ggPyBcIiBwaW5jaC16b29tXCIgOiBcIlwiKSA6IFwibm9uZVwiOyAvLyBub3RlOiBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBpdCBwaW5jaC16b29tIHByb3Blcmx5LCBhdCBsZWFzdCBpbiBhZGRpdGlvbiB0byBhIHBhbi14IG9yIHBhbi15LlxuICB9XG5cbiAgdGFyZ2V0ID09PSBfZG9jRWwgJiYgX2FsbG93TmF0aXZlUGFubmluZyhfYm9keSwgZGlyZWN0aW9uKTtcbn0sXG4gICAgX292ZXJmbG93ID0ge1xuICBhdXRvOiAxLFxuICBzY3JvbGw6IDFcbn0sXG4gICAgX25lc3RlZFNjcm9sbCA9IGZ1bmN0aW9uIF9uZXN0ZWRTY3JvbGwoX3JlZjUpIHtcbiAgdmFyIGV2ZW50ID0gX3JlZjUuZXZlbnQsXG4gICAgICB0YXJnZXQgPSBfcmVmNS50YXJnZXQsXG4gICAgICBheGlzID0gX3JlZjUuYXhpcztcblxuICB2YXIgbm9kZSA9IChldmVudC5jaGFuZ2VkVG91Y2hlcyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQpLnRhcmdldCxcbiAgICAgIGNhY2hlID0gbm9kZS5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUobm9kZSksXG4gICAgICB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgIGNzO1xuXG4gIGlmICghY2FjaGUuX2lzU2Nyb2xsVCB8fCB0aW1lIC0gY2FjaGUuX2lzU2Nyb2xsVCA+IDIwMDApIHtcbiAgICAvLyBjYWNoZSBmb3IgMiBzZWNvbmRzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuXG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gX2JvZHkgJiYgKG5vZGUuc2Nyb2xsSGVpZ2h0IDw9IG5vZGUuY2xpZW50SGVpZ2h0ICYmIG5vZGUuc2Nyb2xsV2lkdGggPD0gbm9kZS5jbGllbnRXaWR0aCB8fCAhKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSkpKSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIGNhY2hlLl9pc1Njcm9sbCA9IG5vZGUgJiYgbm9kZSAhPT0gdGFyZ2V0ICYmICFfaXNWaWV3cG9ydChub2RlKSAmJiAoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKTtcbiAgICBjYWNoZS5faXNTY3JvbGxUID0gdGltZTtcbiAgfVxuXG4gIGlmIChjYWNoZS5faXNTY3JvbGwgfHwgYXhpcyA9PT0gXCJ4XCIpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgfVxufSxcbiAgICAvLyBjYXB0dXJlIGV2ZW50cyBvbiBzY3JvbGxhYmxlIGVsZW1lbnRzIElOU0lERSB0aGUgPGJvZHk+IGFuZCBhbGxvdyB0aG9zZSBieSBjYWxsaW5nIHN0b3BQcm9wYWdhdGlvbigpIHdoZW4gd2UgZmluZCBhIHNjcm9sbGFibGUgYW5jZXN0b3Jcbl9pbnB1dE9ic2VydmVyID0gZnVuY3Rpb24gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB0eXBlLCBpbnB1dHMsIG5lc3RlZCkge1xuICByZXR1cm4gT2JzZXJ2ZXIuY3JlYXRlKHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBjYXB0dXJlOiB0cnVlLFxuICAgIGRlYm91bmNlOiBmYWxzZSxcbiAgICBsb2NrQXhpczogdHJ1ZSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIG9uV2hlZWw6IG5lc3RlZCA9IG5lc3RlZCAmJiBfbmVzdGVkU2Nyb2xsLFxuICAgIG9uUHJlc3M6IG5lc3RlZCxcbiAgICBvbkRyYWc6IG5lc3RlZCxcbiAgICBvblNjcm9sbDogbmVzdGVkLFxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgIHJldHVybiBpbnB1dHMgJiYgX2FkZExpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uIG9uRGlzYWJsZSgpIHtcbiAgICAgIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgT2JzZXJ2ZXIuZXZlbnRUeXBlc1swXSwgX2NhcHR1cmVJbnB1dHMsIHRydWUpO1xuICAgIH1cbiAgfSk7XG59LFxuICAgIF9pbnB1dEV4cCA9IC8oaW5wdXR8bGFiZWx8c2VsZWN0fHRleHRhcmVhKS9pLFxuICAgIF9pbnB1dElzRm9jdXNlZCxcbiAgICBfY2FwdHVyZUlucHV0cyA9IGZ1bmN0aW9uIF9jYXB0dXJlSW5wdXRzKGUpIHtcbiAgdmFyIGlzSW5wdXQgPSBfaW5wdXRFeHAudGVzdChlLnRhcmdldC50YWdOYW1lKTtcblxuICBpZiAoaXNJbnB1dCB8fCBfaW5wdXRJc0ZvY3VzZWQpIHtcbiAgICBlLl9nc2FwQWxsb3cgPSB0cnVlO1xuICAgIF9pbnB1dElzRm9jdXNlZCA9IGlzSW5wdXQ7XG4gIH1cbn0sXG4gICAgX2dldFNjcm9sbE5vcm1hbGl6ZXIgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKSB7XG4gIF9pc09iamVjdCh2YXJzKSB8fCAodmFycyA9IHt9KTtcbiAgdmFycy5wcmV2ZW50RGVmYXVsdCA9IHZhcnMuaXNOb3JtYWxpemVyID0gdmFycy5hbGxvd0NsaWNrcyA9IHRydWU7XG4gIHZhcnMudHlwZSB8fCAodmFycy50eXBlID0gXCJ3aGVlbCx0b3VjaFwiKTtcbiAgdmFycy5kZWJvdW5jZSA9ICEhdmFycy5kZWJvdW5jZTtcbiAgdmFycy5pZCA9IHZhcnMuaWQgfHwgXCJub3JtYWxpemVyXCI7XG5cbiAgdmFyIF92YXJzMiA9IHZhcnMsXG4gICAgICBub3JtYWxpemVTY3JvbGxYID0gX3ZhcnMyLm5vcm1hbGl6ZVNjcm9sbFgsXG4gICAgICBtb21lbnR1bSA9IF92YXJzMi5tb21lbnR1bSxcbiAgICAgIGFsbG93TmVzdGVkU2Nyb2xsID0gX3ZhcnMyLmFsbG93TmVzdGVkU2Nyb2xsLFxuICAgICAgb25SZWxlYXNlID0gX3ZhcnMyLm9uUmVsZWFzZSxcbiAgICAgIHNlbGYsXG4gICAgICBtYXhZLFxuICAgICAgdGFyZ2V0ID0gX2dldFRhcmdldCh2YXJzLnRhcmdldCkgfHwgX2RvY0VsLFxuICAgICAgc21vb3RoZXIgPSBnc2FwLmNvcmUuZ2xvYmFscygpLlNjcm9sbFNtb290aGVyLFxuICAgICAgc21vb3RoZXJJbnN0YW5jZSA9IHNtb290aGVyICYmIHNtb290aGVyLmdldCgpLFxuICAgICAgY29udGVudCA9IF9maXhJT1NCdWcgJiYgKHZhcnMuY29udGVudCAmJiBfZ2V0VGFyZ2V0KHZhcnMuY29udGVudCkgfHwgc21vb3RoZXJJbnN0YW5jZSAmJiB2YXJzLmNvbnRlbnQgIT09IGZhbHNlICYmICFzbW9vdGhlckluc3RhbmNlLnNtb290aCgpICYmIHNtb290aGVySW5zdGFuY2UuY29udGVudCgpKSxcbiAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgc2Nyb2xsRnVuY1ggPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF9ob3Jpem9udGFsKSxcbiAgICAgIHNjYWxlID0gMSxcbiAgICAgIGluaXRpYWxTY2FsZSA9IChPYnNlcnZlci5pc1RvdWNoICYmIF93aW4udmlzdWFsVmlld3BvcnQgPyBfd2luLnZpc3VhbFZpZXdwb3J0LnNjYWxlICogX3dpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IF93aW4ub3V0ZXJXaWR0aCkgLyBfd2luLmlubmVyV2lkdGgsXG4gICAgICB3aGVlbFJlZnJlc2ggPSAwLFxuICAgICAgcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24gPSBfaXNGdW5jdGlvbihtb21lbnR1bSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudHVtKHNlbGYpO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnR1bSB8fCAyLjg7XG4gIH0sXG4gICAgICBsYXN0UmVmcmVzaElELFxuICAgICAgc2tpcFRvdWNoTW92ZSxcbiAgICAgIGlucHV0T2JzZXJ2ZXIgPSBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHZhcnMudHlwZSwgdHJ1ZSwgYWxsb3dOZXN0ZWRTY3JvbGwpLFxuICAgICAgcmVzdW1lVG91Y2hNb3ZlID0gZnVuY3Rpb24gcmVzdW1lVG91Y2hNb3ZlKCkge1xuICAgIHJldHVybiBza2lwVG91Y2hNb3ZlID0gZmFsc2U7XG4gIH0sXG4gICAgICBzY3JvbGxDbGFtcFggPSBfcGFzc1Rocm91Z2gsXG4gICAgICBzY3JvbGxDbGFtcFkgPSBfcGFzc1Rocm91Z2gsXG4gICAgICB1cGRhdGVDbGFtcHMgPSBmdW5jdGlvbiB1cGRhdGVDbGFtcHMoKSB7XG4gICAgbWF4WSA9IF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpO1xuICAgIHNjcm9sbENsYW1wWSA9IF9jbGFtcChfZml4SU9TQnVnID8gMSA6IDAsIG1heFkpO1xuICAgIG5vcm1hbGl6ZVNjcm9sbFggJiYgKHNjcm9sbENsYW1wWCA9IF9jbGFtcCgwLCBfbWF4U2Nyb2xsKHRhcmdldCwgX2hvcml6b250YWwpKSk7XG4gICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gIH0sXG4gICAgICByZW1vdmVDb250ZW50T2Zmc2V0ID0gZnVuY3Rpb24gcmVtb3ZlQ29udGVudE9mZnNldCgpIHtcbiAgICBjb250ZW50Ll9nc2FwLnkgPSBfcm91bmQocGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSArIFwicHhcIjtcbiAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyBwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBcIiwgMCwgMSlcIjtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgPSBzY3JvbGxGdW5jWS5jYWNoZUlEID0gMDtcbiAgfSxcbiAgICAgIGlnbm9yZURyYWcgPSBmdW5jdGlvbiBpZ25vcmVEcmFnKCkge1xuICAgIGlmIChza2lwVG91Y2hNb3ZlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lVG91Y2hNb3ZlKTtcblxuICAgICAgdmFyIG9mZnNldCA9IF9yb3VuZChzZWxmLmRlbHRhWSAvIDIpLFxuICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbENsYW1wWShzY3JvbGxGdW5jWS52IC0gb2Zmc2V0KTtcblxuICAgICAgaWYgKGNvbnRlbnQgJiYgc2Nyb2xsICE9PSBzY3JvbGxGdW5jWS52ICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSB7XG4gICAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbCAtIHNjcm9sbEZ1bmNZLnY7XG5cbiAgICAgICAgdmFyIHkgPSBfcm91bmQoKHBhcnNlRmxvYXQoY29udGVudCAmJiBjb250ZW50Ll9nc2FwLnkpIHx8IDApIC0gc2Nyb2xsRnVuY1kub2Zmc2V0KTtcblxuICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyB5ICsgXCIsIDAsIDEpXCI7XG4gICAgICAgIGNvbnRlbnQuX2dzYXAueSA9IHkgKyBcInB4XCI7XG4gICAgICAgIHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuXG4gICAgICAgIF91cGRhdGVBbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcbiAgICBza2lwVG91Y2hNb3ZlID0gdHJ1ZTtcbiAgfSxcbiAgICAgIHR3ZWVuLFxuICAgICAgc3RhcnRTY3JvbGxYLFxuICAgICAgc3RhcnRTY3JvbGxZLFxuICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICBvblJlc2l6ZSA9IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgIC8vIGlmIHRoZSB3aW5kb3cgcmVzaXplcywgbGlrZSBvbiBhbiBpUGhvbmUgd2hpY2ggQXBwbGUgRk9SQ0VTIHRoZSBhZGRyZXNzIGJhciB0byBzaG93L2hpZGUgZXZlbiBpZiB3ZSBldmVudC5wcmV2ZW50RGVmYXVsdCgpLCBpdCBtYXkgYmUgc2Nyb2xsaW5nIHRvbyBmYXIgbm93IHRoYXQgdGhlIGFkZHJlc3MgYmFyIGlzIHNob3dpbmcsIHNvIHdlIG11c3QgZHluYW1pY2FsbHkgYWRqdXN0IHRoZSBtb21lbnR1bSB0d2Vlbi5cbiAgICB1cGRhdGVDbGFtcHMoKTtcblxuICAgIGlmICh0d2Vlbi5pc0FjdGl2ZSgpICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+IG1heFkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZKCkgPiBtYXhZID8gdHdlZW4ucHJvZ3Jlc3MoMSkgJiYgc2Nyb2xsRnVuY1kobWF4WSkgOiB0d2Vlbi5yZXNldFRvKFwic2Nyb2xsWVwiLCBtYXhZKTtcbiAgICB9XG4gIH07XG5cbiAgY29udGVudCAmJiBnc2FwLnNldChjb250ZW50LCB7XG4gICAgeTogXCIrPTBcIlxuICB9KTsgLy8gdG8gZW5zdXJlIHRoZXJlJ3MgYSBjYWNoZSAoZWxlbWVudC5fZ3NhcClcblxuICB2YXJzLmlnbm9yZUNoZWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gX2ZpeElPU0J1ZyAmJiBlLnR5cGUgPT09IFwidG91Y2htb3ZlXCIgJiYgaWdub3JlRHJhZyhlKSB8fCBzY2FsZSA+IDEuMDUgJiYgZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIiB8fCBzZWxmLmlzR2VzdHVyaW5nIHx8IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMTtcbiAgfTtcblxuICB2YXJzLm9uUHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICAgIHZhciBwcmV2U2NhbGUgPSBzY2FsZTtcbiAgICBzY2FsZSA9IF9yb3VuZCgoX3dpbi52aXN1YWxWaWV3cG9ydCAmJiBfd2luLnZpc3VhbFZpZXdwb3J0LnNjYWxlIHx8IDEpIC8gaW5pdGlhbFNjYWxlKTtcbiAgICB0d2Vlbi5wYXVzZSgpO1xuICAgIHByZXZTY2FsZSAhPT0gc2NhbGUgJiYgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHNjYWxlID4gMS4wMSA/IHRydWUgOiBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG4gICAgc3RhcnRTY3JvbGxYID0gc2Nyb2xsRnVuY1goKTtcbiAgICBzdGFydFNjcm9sbFkgPSBzY3JvbGxGdW5jWSgpO1xuICAgIHVwZGF0ZUNsYW1wcygpO1xuICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICB9O1xuXG4gIHZhcnMub25SZWxlYXNlID0gdmFycy5vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIChzZWxmLCB3YXNEcmFnZ2luZykge1xuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG5cbiAgICBpZiAoIXdhc0RyYWdnaW5nKSB7XG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfc2Nyb2xsZXJzLmNhY2hlKys7IC8vIG1ha2Ugc3VyZSB3ZSdyZSBwdWxsaW5nIHRoZSBub24tY2FjaGVkIHZhbHVlXG4gICAgICAvLyBhbHRlcm5hdGUgYWxnb3JpdGhtOiBkdXJYID0gTWF0aC5taW4oNiwgTWF0aC5hYnMoc2VsZi52ZWxvY2l0eVggLyA4MDApKSxcdGR1ciA9IE1hdGgubWF4KGR1clgsIE1hdGgubWluKDYsIE1hdGguYWJzKHNlbGYudmVsb2NpdHlZIC8gODAwKSkpOyBkdXIgPSBkdXIgKiAoMC40ICsgKDEgLSBfcG93ZXI0SW4oZHVyIC8gNikpICogMC42KSkgKiAobW9tZW50dW1TcGVlZCB8fCAxKVxuXG4gICAgICB2YXIgZHVyID0gcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24oKSxcbiAgICAgICAgICBjdXJyZW50U2Nyb2xsLFxuICAgICAgICAgIGVuZFNjcm9sbDtcblxuICAgICAgaWYgKG5vcm1hbGl6ZVNjcm9sbFgpIHtcbiAgICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlYIC8gMC4yMjc7IC8vIHRoZSBjb25zdGFudCAuMjI3IGlzIGZyb20gcG93ZXI0KDAuMDUpLiB2ZWxvY2l0eSBpcyBpbnZlcnRlZCBiZWNhdXNlIHNjcm9sbGluZyBnb2VzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG5cbiAgICAgICAgZHVyICo9IF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jWCwgY3VycmVudFNjcm9sbCwgZW5kU2Nyb2xsLCBfbWF4U2Nyb2xsKHRhcmdldCwgX2hvcml6b250YWwpKTtcbiAgICAgICAgdHdlZW4udmFycy5zY3JvbGxYID0gc2Nyb2xsQ2xhbXBYKGVuZFNjcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRTY3JvbGwgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVkgLyAwLjIyNzsgLy8gdGhlIGNvbnN0YW50IC4yMjcgaXMgZnJvbSBwb3dlcjQoMC4wNSlcblxuICAgICAgZHVyICo9IF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jWSwgY3VycmVudFNjcm9sbCwgZW5kU2Nyb2xsLCBfbWF4U2Nyb2xsKHRhcmdldCwgX3ZlcnRpY2FsKSk7XG4gICAgICB0d2Vlbi52YXJzLnNjcm9sbFkgPSBzY3JvbGxDbGFtcFkoZW5kU2Nyb2xsKTtcbiAgICAgIHR3ZWVuLmludmFsaWRhdGUoKS5kdXJhdGlvbihkdXIpLnBsYXkoMC4wMSk7XG5cbiAgICAgIGlmIChfZml4SU9TQnVnICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+PSBtYXhZIHx8IGN1cnJlbnRTY3JvbGwgPj0gbWF4WSAtIDEpIHtcbiAgICAgICAgLy8gaU9TIGJ1ZzogaXQnbGwgc2hvdyB0aGUgYWRkcmVzcyBiYXIgYnV0IE5PVCBmaXJlIHRoZSB3aW5kb3cgXCJyZXNpemVcIiBldmVudCB1bnRpbCB0aGUgYW5pbWF0aW9uIGlzIGRvbmUgYnV0IHdlIG11c3QgcHJvdGVjdCBhZ2FpbnN0IG92ZXJzaG9vdCBzbyB3ZSBsZXZlcmFnZSBhbiBvblVwZGF0ZSB0byBkbyBzby5cbiAgICAgICAgZ3NhcC50byh7fSwge1xuICAgICAgICAgIG9uVXBkYXRlOiBvblJlc2l6ZSxcbiAgICAgICAgICBkdXJhdGlvbjogZHVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZik7XG4gIH07XG5cbiAgdmFycy5vbldoZWVsID0gZnVuY3Rpb24gKCkge1xuICAgIHR3ZWVuLl90cyAmJiB0d2Vlbi5wYXVzZSgpO1xuXG4gICAgaWYgKF9nZXRUaW1lKCkgLSB3aGVlbFJlZnJlc2ggPiAxMDAwKSB7XG4gICAgICAvLyBhZnRlciAxIHNlY29uZCwgcmVmcmVzaCB0aGUgY2xhbXBzIG90aGVyd2lzZSB0aGF0J2xsIG9ubHkgaGFwcGVuIHdoZW4gU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCkgaXMgY2FsbGVkIG9yIGZvciB0b3VjaC1zY3JvbGxpbmcuXG4gICAgICBsYXN0UmVmcmVzaElEID0gMDtcbiAgICAgIHdoZWVsUmVmcmVzaCA9IF9nZXRUaW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhcnMub25DaGFuZ2UgPSBmdW5jdGlvbiAoc2VsZiwgZHgsIGR5LCB4QXJyYXksIHlBcnJheSkge1xuICAgIF9yZWZyZXNoSUQgIT09IGxhc3RSZWZyZXNoSUQgJiYgdXBkYXRlQ2xhbXBzKCk7XG4gICAgZHggJiYgbm9ybWFsaXplU2Nyb2xsWCAmJiBzY3JvbGxGdW5jWChzY3JvbGxDbGFtcFgoeEFycmF5WzJdID09PSBkeCA/IHN0YXJ0U2Nyb2xsWCArIChzZWxmLnN0YXJ0WCAtIHNlbGYueCkgOiBzY3JvbGxGdW5jWCgpICsgZHggLSB4QXJyYXlbMV0pKTsgLy8gZm9yIG1vcmUgcHJlY2lzaW9uLCB3ZSB0cmFjayBwb2ludGVyL3RvdWNoIG1vdmVtZW50IGZyb20gdGhlIHN0YXJ0LCBvdGhlcndpc2UgaXQnbGwgZHJpZnQuXG5cbiAgICBpZiAoZHkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgICB2YXIgaXNUb3VjaCA9IHlBcnJheVsyXSA9PT0gZHksXG4gICAgICAgICAgeSA9IGlzVG91Y2ggPyBzdGFydFNjcm9sbFkgKyBzZWxmLnN0YXJ0WSAtIHNlbGYueSA6IHNjcm9sbEZ1bmNZKCkgKyBkeSAtIHlBcnJheVsxXSxcbiAgICAgICAgICB5Q2xhbXBlZCA9IHNjcm9sbENsYW1wWSh5KTtcbiAgICAgIGlzVG91Y2ggJiYgeSAhPT0geUNsYW1wZWQgJiYgKHN0YXJ0U2Nyb2xsWSArPSB5Q2xhbXBlZCAtIHkpO1xuICAgICAgc2Nyb2xsRnVuY1koeUNsYW1wZWQpO1xuICAgIH1cblxuICAgIChkeSB8fCBkeCkgJiYgX3VwZGF0ZUFsbCgpO1xuICB9O1xuXG4gIHZhcnMub25FbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcblxuICAgIFNjcm9sbFRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuXG4gICAgX2FkZExpc3RlbmVyKF93aW4sIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgIGlmIChzY3JvbGxGdW5jWS5zbW9vdGgpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwiYXV0b1wiO1xuICAgICAgc2Nyb2xsRnVuY1kuc21vb3RoID0gc2Nyb2xsRnVuY1guc21vb3RoID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaW5wdXRPYnNlcnZlci5lbmFibGUoKTtcbiAgfTtcblxuICB2YXJzLm9uRGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgdHJ1ZSk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJyZXNpemVcIiwgb25SZXNpemUpO1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLCBvblJlc2l6ZSk7XG4gICAgaW5wdXRPYnNlcnZlci5raWxsKCk7XG4gIH07XG5cbiAgdmFycy5sb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMgIT09IGZhbHNlO1xuICBzZWxmID0gbmV3IE9ic2VydmVyKHZhcnMpO1xuICBzZWxmLmlPUyA9IF9maXhJT1NCdWc7IC8vIHVzZWQgaW4gdGhlIE9ic2VydmVyIGdldENhY2hlZFNjcm9sbCgpIGZ1bmN0aW9uIHRvIHdvcmsgYXJvdW5kIGFuIGlPUyBidWcgdGhhdCB3cmVha3MgaGF2b2Mgd2l0aCBUb3VjaEV2ZW50LmNsaWVudFkgaWYgd2UgYWxsb3cgc2Nyb2xsIHRvIGdvIGFsbCB0aGUgd2F5IGJhY2sgdG8gMC5cblxuICBfZml4SU9TQnVnICYmICFzY3JvbGxGdW5jWSgpICYmIHNjcm9sbEZ1bmNZKDEpOyAvLyBpT1MgYnVnIGNhdXNlcyBldmVudC5jbGllbnRZIHZhbHVlcyB0byBmcmVhayBvdXQgKHdpbGRseSBpbmFjY3VyYXRlKSBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIGV4YWN0bHkgMC5cblxuICBfZml4SU9TQnVnICYmIGdzYXAudGlja2VyLmFkZChfcGFzc1Rocm91Z2gpOyAvLyBwcmV2ZW50IHRoZSB0aWNrZXIgZnJvbSBzbGVlcGluZ1xuXG4gIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGM7XG4gIHR3ZWVuID0gZ3NhcC50byhzZWxmLCB7XG4gICAgZWFzZTogXCJwb3dlcjRcIixcbiAgICBwYXVzZWQ6IHRydWUsXG4gICAgaW5oZXJpdDogZmFsc2UsXG4gICAgc2Nyb2xsWDogbm9ybWFsaXplU2Nyb2xsWCA/IFwiKz0wLjFcIiA6IFwiKz0wXCIsXG4gICAgc2Nyb2xsWTogXCIrPTAuMVwiLFxuICAgIG1vZGlmaWVyczoge1xuICAgICAgc2Nyb2xsWTogX2ludGVycnVwdGlvblRyYWNrZXIoc2Nyb2xsRnVuY1ksIHNjcm9sbEZ1bmNZKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHR3ZWVuLnBhdXNlKCk7XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25VcGRhdGU6IF91cGRhdGVBbGwsXG4gICAgb25Db21wbGV0ZTogb25TdG9wRGVsYXllZENhbGwudmFycy5vbkNvbXBsZXRlXG4gIH0pOyAvLyB3ZSBuZWVkIHRoZSBtb2RpZmllciB0byBzZW5zZSBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIGFsdGVyZWQgb3V0c2lkZSBvZiB0aGUgbW9tZW50dW0gdHdlZW4gKGxpa2Ugd2l0aCBhIHNjcm9sbFRvIHR3ZWVuKSBzbyB3ZSBjYW4gcGF1c2UoKSBpdCB0byBwcmV2ZW50IGNvbmZsaWN0cy5cblxuICByZXR1cm4gc2VsZjtcbn07XG5cblNjcm9sbFRyaWdnZXIuc29ydCA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIGlmIChfaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybiBfdHJpZ2dlcnMuc29ydChmdW5jKTtcbiAgfVxuXG4gIHZhciBzY3JvbGwgPSBfd2luLnBhZ2VZT2Zmc2V0IHx8IDA7XG4gIFNjcm9sbFRyaWdnZXIuZ2V0QWxsKCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0Ll9zb3J0WSA9IHQudHJpZ2dlciA/IHNjcm9sbCArIHQudHJpZ2dlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgOiB0LnN0YXJ0ICsgX3dpbi5pbm5lckhlaWdodDtcbiAgfSk7XG4gIHJldHVybiBfdHJpZ2dlcnMuc29ydChmdW5jIHx8IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChhLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNiArIChhLnZhcnMuY29udGFpbmVyQW5pbWF0aW9uID8gMWU2IDogYS5fc29ydFkpIC0gKChiLnZhcnMuY29udGFpbmVyQW5pbWF0aW9uID8gMWU2IDogYi5fc29ydFkpICsgKGIudmFycy5yZWZyZXNoUHJpb3JpdHkgfHwgMCkgKiAtMWU2KTtcbiAgfSk7IC8vIGFueXRoaW5nIHdpdGggYSBjb250YWluZXJBbmltYXRpb24gc2hvdWxkIHJlZnJlc2ggbGFzdC5cbn07XG5cblNjcm9sbFRyaWdnZXIub2JzZXJ2ZSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2ZXIodmFycyk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIGlmICh0eXBlb2YgdmFycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBfbm9ybWFsaXplcjtcbiAgfVxuXG4gIGlmICh2YXJzID09PSB0cnVlICYmIF9ub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyLmVuYWJsZSgpO1xuICB9XG5cbiAgaWYgKHZhcnMgPT09IGZhbHNlKSB7XG4gICAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICAgIF9ub3JtYWxpemVyID0gdmFycztcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbm9ybWFsaXplciA9IHZhcnMgaW5zdGFuY2VvZiBPYnNlcnZlciA/IHZhcnMgOiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKTtcbiAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIudGFyZ2V0ID09PSBub3JtYWxpemVyLnRhcmdldCAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gIF9pc1ZpZXdwb3J0KG5vcm1hbGl6ZXIudGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBub3JtYWxpemVyKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZXI7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNvcmUgPSB7XG4gIC8vIHNtYWxsZXIgZmlsZSBzaXplIHdheSB0byBsZXZlcmFnZSBpbiBTY3JvbGxTbW9vdGhlciBhbmQgT2JzZXJ2ZXJcbiAgX2dldFZlbG9jaXR5UHJvcDogX2dldFZlbG9jaXR5UHJvcCxcbiAgX2lucHV0T2JzZXJ2ZXI6IF9pbnB1dE9ic2VydmVyLFxuICBfc2Nyb2xsZXJzOiBfc2Nyb2xsZXJzLFxuICBfcHJveGllczogX3Byb3hpZXMsXG4gIGJyaWRnZToge1xuICAgIC8vIHdoZW4gbm9ybWFsaXplU2Nyb2xsIHNldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiAoc3MgPSBzZXRTY3JvbGwpXG4gICAgc3M6IGZ1bmN0aW9uIHNzKCkge1xuICAgICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgIC8vIGEgd2F5IHRvIGdldCB0aGUgX3JlZnJlc2hpbmcgdmFsdWUgaW4gT2JzZXJ2ZXJcbiAgICByZWY6IGZ1bmN0aW9uIHJlZigpIHtcbiAgICAgIHJldHVybiBfcmVmcmVzaGluZztcbiAgICB9XG4gIH1cbn07XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5leHBvcnQgeyBTY3JvbGxUcmlnZ2VyIGFzIGRlZmF1bHQgfTsiLCIvKiFcbiAqIFNwbGl0VGV4dCAzLjEzLjBcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2UuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlXG4gKi9cblxubGV0IGdzYXAsIF9mb250cywgX2NvcmVJbml0dGVkLCBfaW5pdElmTmVjZXNzYXJ5ID0gKCkgPT4gX2NvcmVJbml0dGVkIHx8IFNwbGl0VGV4dC5yZWdpc3Rlcih3aW5kb3cuZ3NhcCksIF9jaGFyU2VnbWVudGVyID0gdHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgSW50bC5TZWdtZW50ZXIoKSA6IDAsIF90b0FycmF5ID0gKHIpID0+IHR5cGVvZiByID09PSBcInN0cmluZ1wiID8gX3RvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChyKSkgOiBcImxlbmd0aFwiIGluIHIgPyBBcnJheS5mcm9tKHIpIDogW3JdLCBfZWxlbWVudHMgPSAodGFyZ2V0cykgPT4gX3RvQXJyYXkodGFyZ2V0cykuZmlsdGVyKChlKSA9PiBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpLCBfZW1wdHlBcnJheSA9IFtdLCBfY29udGV4dCA9IGZ1bmN0aW9uKCkge1xufSwgX3NwYWNlc1JlZ0V4ID0gL1xccysvZywgX2Vtb2ppU2FmZVJlZ0V4ID0gbmV3IFJlZ0V4cChcIlxcXFxwe1JJfVxcXFxwe1JJfXxcXFxccHtFbW9qaX0oXFxcXHB7RU1vZH18XFxcXHV7RkUwRn1cXFxcdXsyMEUzfT98W1xcXFx1e0UwMDIwfS1cXFxcdXtFMDA3RX1dK1xcXFx1e0UwMDdGfSk/KFxcXFx1ezIwMER9XFxcXHB7RW1vaml9KFxcXFxwe0VNb2R9fFxcXFx1e0ZFMEZ9XFxcXHV7MjBFM30/fFtcXFxcdXtFMDAyMH0tXFxcXHV7RTAwN0V9XStcXFxcdXtFMDA3Rn0pPykqfC5cIiwgXCJndVwiKSwgX2VtcHR5Qm91bmRzID0geyBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSwgX3N0cmV0Y2hUb0ZpdFNwZWNpYWxDaGFycyA9IChjb2xsZWN0aW9uLCBzcGVjaWFsQ2hhcnNSZWdFeCkgPT4ge1xuICBpZiAoc3BlY2lhbENoYXJzUmVnRXgpIHtcbiAgICBsZXQgY2hhcnNGb3VuZCA9IG5ldyBTZXQoY29sbGVjdGlvbi5qb2luKFwiXCIpLm1hdGNoKHNwZWNpYWxDaGFyc1JlZ0V4KSB8fCBfZW1wdHlBcnJheSksIGkgPSBjb2xsZWN0aW9uLmxlbmd0aCwgc2xvdHMsIHdvcmQsIGNoYXIsIGNvbWJpbmVkO1xuICAgIGlmIChjaGFyc0ZvdW5kLnNpemUpIHtcbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICB3b3JkID0gY29sbGVjdGlvbltpXTtcbiAgICAgICAgZm9yIChjaGFyIG9mIGNoYXJzRm91bmQpIHtcbiAgICAgICAgICBpZiAoY2hhci5zdGFydHNXaXRoKHdvcmQpICYmIGNoYXIubGVuZ3RoID4gd29yZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNsb3RzID0gMDtcbiAgICAgICAgICAgIGNvbWJpbmVkID0gd29yZDtcbiAgICAgICAgICAgIHdoaWxlIChjaGFyLnN0YXJ0c1dpdGgoY29tYmluZWQgKz0gY29sbGVjdGlvbltpICsgKytzbG90c10pICYmIGNvbWJpbmVkLmxlbmd0aCA8IGNoYXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2xvdHMgJiYgY29tYmluZWQubGVuZ3RoID09PSBjaGFyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb2xsZWN0aW9uW2ldID0gY2hhcjtcbiAgICAgICAgICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaSArIDEsIHNsb3RzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uO1xufSwgX2Rpc2FsbG93SW5saW5lID0gKGVsZW1lbnQpID0+IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgKGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpLCBfaW5zZXJ0Tm9kZUJlZm9yZSA9IChuZXdDaGlsZCwgcGFyZW50LCBleGlzdGluZ0NoaWxkKSA9PiBwYXJlbnQuaW5zZXJ0QmVmb3JlKHR5cGVvZiBuZXdDaGlsZCA9PT0gXCJzdHJpbmdcIiA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld0NoaWxkKSA6IG5ld0NoaWxkLCBleGlzdGluZ0NoaWxkKSwgX2dldFdyYXBwZXIgPSAodHlwZSwgY29uZmlnLCBjb2xsZWN0aW9uKSA9PiB7XG4gIGxldCBjbGFzc05hbWUgPSBjb25maWdbdHlwZSArIFwic0NsYXNzXCJdIHx8IFwiXCIsIHsgdGFnID0gXCJkaXZcIiwgYXJpYSA9IFwiYXV0b1wiLCBwcm9wSW5kZXggPSBmYWxzZSB9ID0gY29uZmlnLCBkaXNwbGF5ID0gdHlwZSA9PT0gXCJsaW5lXCIgPyBcImJsb2NrXCIgOiBcImlubGluZS1ibG9ja1wiLCBpbmNyZW1lbnRDbGFzcyA9IGNsYXNzTmFtZS5pbmRleE9mKFwiKytcIikgPiAtMSwgd3JhcHBlciA9ICh0ZXh0KSA9PiB7XG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpLCBpID0gY29sbGVjdGlvbi5sZW5ndGggKyAxO1xuICAgIGNsYXNzTmFtZSAmJiAoZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgKGluY3JlbWVudENsYXNzID8gXCIgXCIgKyBjbGFzc05hbWUgKyBpIDogXCJcIikpO1xuICAgIHByb3BJbmRleCAmJiBlbC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tXCIgKyB0eXBlLCBpICsgXCJcIik7XG4gICAgYXJpYSAhPT0gXCJub25lXCIgJiYgZWwuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIGlmICh0YWcgIT09IFwic3BhblwiKSB7XG4gICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuICAgIH1cbiAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgY29sbGVjdGlvbi5wdXNoKGVsKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGluY3JlbWVudENsYXNzICYmIChjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIisrXCIsIFwiXCIpKTtcbiAgd3JhcHBlci5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgcmV0dXJuIHdyYXBwZXI7XG59LCBfZ2V0TGluZVdyYXBwZXIgPSAoZWxlbWVudCwgbm9kZXMsIGNvbmZpZywgY29sbGVjdGlvbikgPT4ge1xuICBsZXQgbGluZVdyYXBwZXIgPSBfZ2V0V3JhcHBlcihcImxpbmVcIiwgY29uZmlnLCBjb2xsZWN0aW9uKSwgdGV4dEFsaWduID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudGV4dEFsaWduIHx8IFwibGVmdFwiO1xuICByZXR1cm4gKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSA9PiB7XG4gICAgbGV0IG5ld0xpbmUgPSBsaW5lV3JhcHBlcihcIlwiKTtcbiAgICBuZXdMaW5lLnN0eWxlLnRleHRBbGlnbiA9IHRleHRBbGlnbjtcbiAgICBlbGVtZW50Lmluc2VydEJlZm9yZShuZXdMaW5lLCBub2Rlc1tzdGFydEluZGV4XSk7XG4gICAgZm9yICg7IHN0YXJ0SW5kZXggPCBlbmRJbmRleDsgc3RhcnRJbmRleCsrKSB7XG4gICAgICBuZXdMaW5lLmFwcGVuZENoaWxkKG5vZGVzW3N0YXJ0SW5kZXhdKTtcbiAgICB9XG4gICAgbmV3TGluZS5ub3JtYWxpemUoKTtcbiAgfTtcbn0sIF9zcGxpdFdvcmRzQW5kQ2hhcnNSZWN1cnNpdmVseSA9IChlbGVtZW50LCBjb25maWcsIHdvcmRXcmFwcGVyLCBjaGFyV3JhcHBlciwgcHJlcEZvckNoYXJzT25seSwgZGVlcFNsaWNlLCBpZ25vcmUsIGNoYXJTcGxpdFJlZ0V4LCBzcGVjaWFsQ2hhcnNSZWdFeCwgaXNOZXN0ZWQpID0+IHtcbiAgdmFyIF9hO1xuICBsZXQgbm9kZXMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2RlcyksIGkgPSAwLCB7IHdvcmREZWxpbWl0ZXIsIHJlZHVjZVdoaXRlU3BhY2UgPSB0cnVlLCBwcmVwYXJlVGV4dCB9ID0gY29uZmlnLCBlbGVtZW50Qm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbGFzdEJvdW5kcyA9IGVsZW1lbnRCb3VuZHMsIGlzUHJlZm9ybWF0dGVkID0gIXJlZHVjZVdoaXRlU3BhY2UgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkud2hpdGVTcGFjZS5zdWJzdHJpbmcoMCwgMykgPT09IFwicHJlXCIsIGlnbm9yZWRQcmV2aW91c1NpYmxpbmcgPSAwLCB3b3Jkc0NvbGxlY3Rpb24gPSB3b3JkV3JhcHBlci5jb2xsZWN0aW9uLCB3b3JkRGVsaW1Jc05vdFNwYWNlLCB3b3JkRGVsaW1TdHJpbmcsIHdvcmREZWxpbVNwbGl0dGVyLCBjdXJOb2RlLCB3b3JkcywgY3VyV29yZEVsLCBzdGFydHNXaXRoU3BhY2UsIGVuZHNXaXRoU3BhY2UsIGosIGJvdW5kcywgY3VyV29yZENoYXJzLCBjbG9uZWROb2RlLCBjdXJTdWJOb2RlLCB0ZW1wU3ViTm9kZSwgY3VyVGV4dENvbnRlbnQsIHdvcmRUZXh0LCBsYXN0V29yZFRleHQsIGs7XG4gIGlmICh0eXBlb2Ygd29yZERlbGltaXRlciA9PT0gXCJvYmplY3RcIikge1xuICAgIHdvcmREZWxpbVNwbGl0dGVyID0gd29yZERlbGltaXRlci5kZWxpbWl0ZXIgfHwgd29yZERlbGltaXRlcjtcbiAgICB3b3JkRGVsaW1TdHJpbmcgPSB3b3JkRGVsaW1pdGVyLnJlcGxhY2VXaXRoIHx8IFwiXCI7XG4gIH0gZWxzZSB7XG4gICAgd29yZERlbGltU3RyaW5nID0gd29yZERlbGltaXRlciA9PT0gXCJcIiA/IFwiXCIgOiB3b3JkRGVsaW1pdGVyIHx8IFwiIFwiO1xuICB9XG4gIHdvcmREZWxpbUlzTm90U3BhY2UgPSB3b3JkRGVsaW1TdHJpbmcgIT09IFwiIFwiO1xuICBmb3IgKDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3VyTm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChjdXJOb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICBjdXJUZXh0Q29udGVudCA9IGN1ck5vZGUudGV4dENvbnRlbnQgfHwgXCJcIjtcbiAgICAgIGlmIChyZWR1Y2VXaGl0ZVNwYWNlKSB7XG4gICAgICAgIGN1clRleHRDb250ZW50ID0gY3VyVGV4dENvbnRlbnQucmVwbGFjZShfc3BhY2VzUmVnRXgsIFwiIFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQcmVmb3JtYXR0ZWQpIHtcbiAgICAgICAgY3VyVGV4dENvbnRlbnQgPSBjdXJUZXh0Q29udGVudC5yZXBsYWNlKC9cXG4vZywgd29yZERlbGltU3RyaW5nICsgXCJcXG5cIik7XG4gICAgICB9XG4gICAgICBwcmVwYXJlVGV4dCAmJiAoY3VyVGV4dENvbnRlbnQgPSBwcmVwYXJlVGV4dChjdXJUZXh0Q29udGVudCwgZWxlbWVudCkpO1xuICAgICAgY3VyTm9kZS50ZXh0Q29udGVudCA9IGN1clRleHRDb250ZW50O1xuICAgICAgd29yZHMgPSB3b3JkRGVsaW1TdHJpbmcgfHwgd29yZERlbGltU3BsaXR0ZXIgPyBjdXJUZXh0Q29udGVudC5zcGxpdCh3b3JkRGVsaW1TcGxpdHRlciB8fCB3b3JkRGVsaW1TdHJpbmcpIDogY3VyVGV4dENvbnRlbnQubWF0Y2goY2hhclNwbGl0UmVnRXgpIHx8IF9lbXB0eUFycmF5O1xuICAgICAgbGFzdFdvcmRUZXh0ID0gd29yZHNbd29yZHMubGVuZ3RoIC0gMV07XG4gICAgICBlbmRzV2l0aFNwYWNlID0gd29yZERlbGltSXNOb3RTcGFjZSA/IGxhc3RXb3JkVGV4dC5zbGljZSgtMSkgPT09IFwiIFwiIDogIWxhc3RXb3JkVGV4dDtcbiAgICAgIGxhc3RXb3JkVGV4dCB8fCB3b3Jkcy5wb3AoKTtcbiAgICAgIGxhc3RCb3VuZHMgPSBlbGVtZW50Qm91bmRzO1xuICAgICAgc3RhcnRzV2l0aFNwYWNlID0gd29yZERlbGltSXNOb3RTcGFjZSA/IHdvcmRzWzBdLmNoYXJBdCgwKSA9PT0gXCIgXCIgOiAhd29yZHNbMF07XG4gICAgICBzdGFydHNXaXRoU3BhY2UgJiYgX2luc2VydE5vZGVCZWZvcmUoXCIgXCIsIGVsZW1lbnQsIGN1ck5vZGUpO1xuICAgICAgd29yZHNbMF0gfHwgd29yZHMuc2hpZnQoKTtcbiAgICAgIF9zdHJldGNoVG9GaXRTcGVjaWFsQ2hhcnMod29yZHMsIHNwZWNpYWxDaGFyc1JlZ0V4KTtcbiAgICAgIGRlZXBTbGljZSAmJiBpc05lc3RlZCB8fCAoY3VyTm9kZS50ZXh0Q29udGVudCA9IFwiXCIpO1xuICAgICAgZm9yIChqID0gMTsgaiA8PSB3b3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICB3b3JkVGV4dCA9IHdvcmRzW2ogLSAxXTtcbiAgICAgICAgaWYgKCFyZWR1Y2VXaGl0ZVNwYWNlICYmIGlzUHJlZm9ybWF0dGVkICYmIHdvcmRUZXh0LmNoYXJBdCgwKSA9PT0gXCJcXG5cIikge1xuICAgICAgICAgIChfYSA9IGN1ck5vZGUucHJldmlvdXNTaWJsaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2EucmVtb3ZlKCk7XG4gICAgICAgICAgX2luc2VydE5vZGVCZWZvcmUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpLCBlbGVtZW50LCBjdXJOb2RlKTtcbiAgICAgICAgICB3b3JkVGV4dCA9IHdvcmRUZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVkdWNlV2hpdGVTcGFjZSAmJiB3b3JkVGV4dCA9PT0gXCJcIikge1xuICAgICAgICAgIF9pbnNlcnROb2RlQmVmb3JlKHdvcmREZWxpbVN0cmluZywgZWxlbWVudCwgY3VyTm9kZSk7XG4gICAgICAgIH0gZWxzZSBpZiAod29yZFRleHQgPT09IFwiIFwiKSB7XG4gICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpLCBjdXJOb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3b3JkRGVsaW1Jc05vdFNwYWNlICYmIHdvcmRUZXh0LmNoYXJBdCgwKSA9PT0gXCIgXCIgJiYgX2luc2VydE5vZGVCZWZvcmUoXCIgXCIsIGVsZW1lbnQsIGN1ck5vZGUpO1xuICAgICAgICAgIGlmIChpZ25vcmVkUHJldmlvdXNTaWJsaW5nICYmIGogPT09IDEgJiYgIXN0YXJ0c1dpdGhTcGFjZSAmJiB3b3Jkc0NvbGxlY3Rpb24uaW5kZXhPZihpZ25vcmVkUHJldmlvdXNTaWJsaW5nLnBhcmVudE5vZGUpID4gLTEpIHtcbiAgICAgICAgICAgIGN1cldvcmRFbCA9IHdvcmRzQ29sbGVjdGlvblt3b3Jkc0NvbGxlY3Rpb24ubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBjdXJXb3JkRWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2hhcldyYXBwZXIgPyBcIlwiIDogd29yZFRleHQpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VyV29yZEVsID0gd29yZFdyYXBwZXIoY2hhcldyYXBwZXIgPyBcIlwiIDogd29yZFRleHQpO1xuICAgICAgICAgICAgX2luc2VydE5vZGVCZWZvcmUoY3VyV29yZEVsLCBlbGVtZW50LCBjdXJOb2RlKTtcbiAgICAgICAgICAgIGlnbm9yZWRQcmV2aW91c1NpYmxpbmcgJiYgaiA9PT0gMSAmJiAhc3RhcnRzV2l0aFNwYWNlICYmIGN1cldvcmRFbC5pbnNlcnRCZWZvcmUoaWdub3JlZFByZXZpb3VzU2libGluZywgY3VyV29yZEVsLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhcldyYXBwZXIpIHtcbiAgICAgICAgICAgIGN1cldvcmRDaGFycyA9IF9jaGFyU2VnbWVudGVyID8gX3N0cmV0Y2hUb0ZpdFNwZWNpYWxDaGFycyhbLi4uX2NoYXJTZWdtZW50ZXIuc2VnbWVudCh3b3JkVGV4dCldLm1hcCgocykgPT4gcy5zZWdtZW50KSwgc3BlY2lhbENoYXJzUmVnRXgpIDogd29yZFRleHQubWF0Y2goY2hhclNwbGl0UmVnRXgpIHx8IF9lbXB0eUFycmF5O1xuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGN1cldvcmRDaGFycy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICBjdXJXb3JkRWwuYXBwZW5kQ2hpbGQoY3VyV29yZENoYXJzW2tdID09PSBcIiBcIiA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiKSA6IGNoYXJXcmFwcGVyKGN1cldvcmRDaGFyc1trXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGVlcFNsaWNlICYmIGlzTmVzdGVkKSB7XG4gICAgICAgICAgICBjdXJUZXh0Q29udGVudCA9IGN1ck5vZGUudGV4dENvbnRlbnQgPSBjdXJUZXh0Q29udGVudC5zdWJzdHJpbmcod29yZFRleHQubGVuZ3RoICsgMSwgY3VyVGV4dENvbnRlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGJvdW5kcyA9IGN1cldvcmRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGlmIChib3VuZHMudG9wID4gbGFzdEJvdW5kcy50b3AgJiYgYm91bmRzLmxlZnQgPD0gbGFzdEJvdW5kcy5sZWZ0KSB7XG4gICAgICAgICAgICAgIGNsb25lZE5vZGUgPSBlbGVtZW50LmNsb25lTm9kZSgpO1xuICAgICAgICAgICAgICBjdXJTdWJOb2RlID0gZWxlbWVudC5jaGlsZE5vZGVzWzBdO1xuICAgICAgICAgICAgICB3aGlsZSAoY3VyU3ViTm9kZSAmJiBjdXJTdWJOb2RlICE9PSBjdXJXb3JkRWwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wU3ViTm9kZSA9IGN1clN1Yk5vZGU7XG4gICAgICAgICAgICAgICAgY3VyU3ViTm9kZSA9IGN1clN1Yk5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgY2xvbmVkTm9kZS5hcHBlbmRDaGlsZCh0ZW1wU3ViTm9kZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjbG9uZWROb2RlLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgcHJlcEZvckNoYXJzT25seSAmJiBfZGlzYWxsb3dJbmxpbmUoY2xvbmVkTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0Qm91bmRzID0gYm91bmRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaiA8IHdvcmRzLmxlbmd0aCB8fCBlbmRzV2l0aFNwYWNlKSB7XG4gICAgICAgICAgICBfaW5zZXJ0Tm9kZUJlZm9yZShqID49IHdvcmRzLmxlbmd0aCA/IFwiIFwiIDogd29yZERlbGltSXNOb3RTcGFjZSAmJiB3b3JkVGV4dC5zbGljZSgtMSkgPT09IFwiIFwiID8gXCIgXCIgKyB3b3JkRGVsaW1TdHJpbmcgOiB3b3JkRGVsaW1TdHJpbmcsIGVsZW1lbnQsIGN1ck5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChjdXJOb2RlKTtcbiAgICAgIGlnbm9yZWRQcmV2aW91c1NpYmxpbmcgPSAwO1xuICAgIH0gZWxzZSBpZiAoY3VyTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgaWYgKGlnbm9yZSAmJiBpZ25vcmUuaW5kZXhPZihjdXJOb2RlKSA+IC0xKSB7XG4gICAgICAgIHdvcmRzQ29sbGVjdGlvbi5pbmRleE9mKGN1ck5vZGUucHJldmlvdXNTaWJsaW5nKSA+IC0xICYmIHdvcmRzQ29sbGVjdGlvblt3b3Jkc0NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0uYXBwZW5kQ2hpbGQoY3VyTm9kZSk7XG4gICAgICAgIGlnbm9yZWRQcmV2aW91c1NpYmxpbmcgPSBjdXJOb2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3NwbGl0V29yZHNBbmRDaGFyc1JlY3Vyc2l2ZWx5KGN1ck5vZGUsIGNvbmZpZywgd29yZFdyYXBwZXIsIGNoYXJXcmFwcGVyLCBwcmVwRm9yQ2hhcnNPbmx5LCBkZWVwU2xpY2UsIGlnbm9yZSwgY2hhclNwbGl0UmVnRXgsIHNwZWNpYWxDaGFyc1JlZ0V4LCB0cnVlKTtcbiAgICAgICAgaWdub3JlZFByZXZpb3VzU2libGluZyA9IDA7XG4gICAgICB9XG4gICAgICBwcmVwRm9yQ2hhcnNPbmx5ICYmIF9kaXNhbGxvd0lubGluZShjdXJOb2RlKTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBfU3BsaXRUZXh0ID0gY2xhc3MgX1NwbGl0VGV4dCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzLCBjb25maWcpIHtcbiAgICB0aGlzLmlzU3BsaXQgPSBmYWxzZTtcbiAgICBfaW5pdElmTmVjZXNzYXJ5KCk7XG4gICAgdGhpcy5lbGVtZW50cyA9IF9lbGVtZW50cyhlbGVtZW50cyk7XG4gICAgdGhpcy5jaGFycyA9IFtdO1xuICAgIHRoaXMud29yZHMgPSBbXTtcbiAgICB0aGlzLmxpbmVzID0gW107XG4gICAgdGhpcy5tYXNrcyA9IFtdO1xuICAgIHRoaXMudmFycyA9IGNvbmZpZztcbiAgICB0aGlzLl9zcGxpdCA9ICgpID0+IHRoaXMuaXNTcGxpdCAmJiB0aGlzLnNwbGl0KHRoaXMudmFycyk7XG4gICAgbGV0IG9yaWcgPSBbXSwgdGltZXJJZCwgY2hlY2tXaWR0aHMgPSAoKSA9PiB7XG4gICAgICBsZXQgaSA9IG9yaWcubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvID0gb3JpZ1tpXTtcbiAgICAgICAgbGV0IHcgPSBvLmVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIGlmICh3ICE9PSBvLndpZHRoKSB7XG4gICAgICAgICAgby53aWR0aCA9IHc7XG4gICAgICAgICAgdGhpcy5fc3BsaXQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX2RhdGEgPSB7IG9yaWcsIG9iczogdHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiICYmIG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dChjaGVja1dpZHRocywgMjAwKTtcbiAgICB9KSB9O1xuICAgIF9jb250ZXh0KHRoaXMpO1xuICAgIHRoaXMuc3BsaXQoY29uZmlnKTtcbiAgfVxuICBzcGxpdChjb25maWcpIHtcbiAgICB0aGlzLmlzU3BsaXQgJiYgdGhpcy5yZXZlcnQoKTtcbiAgICB0aGlzLnZhcnMgPSBjb25maWcgPSBjb25maWcgfHwgdGhpcy52YXJzIHx8IHt9O1xuICAgIGxldCB7IHR5cGUgPSBcImNoYXJzLHdvcmRzLGxpbmVzXCIsIGFyaWEgPSBcImF1dG9cIiwgZGVlcFNsaWNlID0gdHJ1ZSwgc21hcnRXcmFwLCBvblNwbGl0LCBhdXRvU3BsaXQgPSBmYWxzZSwgc3BlY2lhbENoYXJzLCBtYXNrIH0gPSB0aGlzLnZhcnMsIHNwbGl0TGluZXMgPSB0eXBlLmluZGV4T2YoXCJsaW5lc1wiKSA+IC0xLCBzcGxpdENoYXJhY3RlcnMgPSB0eXBlLmluZGV4T2YoXCJjaGFyc1wiKSA+IC0xLCBzcGxpdFdvcmRzID0gdHlwZS5pbmRleE9mKFwid29yZHNcIikgPiAtMSwgb25seVNwbGl0Q2hhcmFjdGVycyA9IHNwbGl0Q2hhcmFjdGVycyAmJiAhc3BsaXRXb3JkcyAmJiAhc3BsaXRMaW5lcywgc3BlY2lhbENoYXJzUmVnRXggPSBzcGVjaWFsQ2hhcnMgJiYgKFwicHVzaFwiIGluIHNwZWNpYWxDaGFycyA/IG5ldyBSZWdFeHAoXCIoPzpcIiArIHNwZWNpYWxDaGFycy5qb2luKFwifFwiKSArIFwiKVwiLCBcImd1XCIpIDogc3BlY2lhbENoYXJzKSwgZmluYWxDaGFyU3BsaXRSZWdFeCA9IHNwZWNpYWxDaGFyc1JlZ0V4ID8gbmV3IFJlZ0V4cChzcGVjaWFsQ2hhcnNSZWdFeC5zb3VyY2UgKyBcInxcIiArIF9lbW9qaVNhZmVSZWdFeC5zb3VyY2UsIFwiZ3VcIikgOiBfZW1vamlTYWZlUmVnRXgsIGlnbm9yZSA9ICEhY29uZmlnLmlnbm9yZSAmJiBfZWxlbWVudHMoY29uZmlnLmlnbm9yZSksIHsgb3JpZywgYW5pbVRpbWUsIG9icyB9ID0gdGhpcy5fZGF0YSwgb25TcGxpdFJlc3VsdDtcbiAgICBpZiAoc3BsaXRDaGFyYWN0ZXJzIHx8IHNwbGl0V29yZHMgfHwgc3BsaXRMaW5lcykge1xuICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBvcmlnW2luZGV4XSA9IHtcbiAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgIGh0bWw6IGVsZW1lbnQuaW5uZXJIVE1MLFxuICAgICAgICAgIGFyaWFMOiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiksXG4gICAgICAgICAgYXJpYUg6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIilcbiAgICAgICAgfTtcbiAgICAgICAgYXJpYSA9PT0gXCJhdXRvXCIgPyBlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgKGVsZW1lbnQudGV4dENvbnRlbnQgfHwgXCJcIikudHJpbSgpKSA6IGFyaWEgPT09IFwiaGlkZGVuXCIgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgIGxldCBjaGFycyA9IFtdLCB3b3JkcyA9IFtdLCBsaW5lcyA9IFtdLCBjaGFyV3JhcHBlciA9IHNwbGl0Q2hhcmFjdGVycyA/IF9nZXRXcmFwcGVyKFwiY2hhclwiLCBjb25maWcsIGNoYXJzKSA6IG51bGwsIHdvcmRXcmFwcGVyID0gX2dldFdyYXBwZXIoXCJ3b3JkXCIsIGNvbmZpZywgd29yZHMpLCBpLCBjdXJXb3JkLCBzbWFydFdyYXBTcGFuLCBuZXh0U2libGluZztcbiAgICAgICAgX3NwbGl0V29yZHNBbmRDaGFyc1JlY3Vyc2l2ZWx5KGVsZW1lbnQsIGNvbmZpZywgd29yZFdyYXBwZXIsIGNoYXJXcmFwcGVyLCBvbmx5U3BsaXRDaGFyYWN0ZXJzLCBkZWVwU2xpY2UgJiYgKHNwbGl0TGluZXMgfHwgb25seVNwbGl0Q2hhcmFjdGVycyksIGlnbm9yZSwgZmluYWxDaGFyU3BsaXRSZWdFeCwgc3BlY2lhbENoYXJzUmVnRXgsIGZhbHNlKTtcbiAgICAgICAgaWYgKHNwbGl0TGluZXMpIHtcbiAgICAgICAgICBsZXQgbm9kZXMgPSBfdG9BcnJheShlbGVtZW50LmNoaWxkTm9kZXMpLCB3cmFwTGluZSA9IF9nZXRMaW5lV3JhcHBlcihlbGVtZW50LCBub2RlcywgY29uZmlnLCBsaW5lcyksIGN1ck5vZGUsIHRvUmVtb3ZlID0gW10sIGxpbmVTdGFydEluZGV4ID0gMCwgYWxsQm91bmRzID0gbm9kZXMubWFwKChuKSA9PiBuLm5vZGVUeXBlID09PSAxID8gbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IF9lbXB0eUJvdW5kcyksIGxhc3RCb3VuZHMgPSBfZW1wdHlCb3VuZHM7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJOb2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAoY3VyTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICBpZiAoY3VyTm9kZS5ub2RlTmFtZSA9PT0gXCJCUlwiKSB7XG4gICAgICAgICAgICAgICAgdG9SZW1vdmUucHVzaChjdXJOb2RlKTtcbiAgICAgICAgICAgICAgICB3cmFwTGluZShsaW5lU3RhcnRJbmRleCwgaSArIDEpO1xuICAgICAgICAgICAgICAgIGxpbmVTdGFydEluZGV4ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgbGFzdEJvdW5kcyA9IGFsbEJvdW5kc1tsaW5lU3RhcnRJbmRleF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgJiYgYWxsQm91bmRzW2ldLnRvcCA+IGxhc3RCb3VuZHMudG9wICYmIGFsbEJvdW5kc1tpXS5sZWZ0IDw9IGxhc3RCb3VuZHMubGVmdCkge1xuICAgICAgICAgICAgICAgICAgd3JhcExpbmUobGluZVN0YXJ0SW5kZXgsIGkpO1xuICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0Qm91bmRzID0gYWxsQm91bmRzW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmVTdGFydEluZGV4IDwgaSAmJiB3cmFwTGluZShsaW5lU3RhcnRJbmRleCwgaSk7XG4gICAgICAgICAgdG9SZW1vdmUuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSBlbC5wYXJlbnROb2RlKSA9PSBudWxsID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3BsaXRXb3Jkcykge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VyV29yZCA9IHdvcmRzW2ldO1xuICAgICAgICAgICAgaWYgKHNwbGl0Q2hhcmFjdGVycyB8fCAhY3VyV29yZC5uZXh0U2libGluZyB8fCBjdXJXb3JkLm5leHRTaWJsaW5nLm5vZGVUeXBlICE9PSAzKSB7XG4gICAgICAgICAgICAgIGlmIChzbWFydFdyYXAgJiYgIXNwbGl0TGluZXMpIHtcbiAgICAgICAgICAgICAgICBzbWFydFdyYXBTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgc21hcnRXcmFwU3Bhbi5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VyV29yZC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICBzbWFydFdyYXBTcGFuLmFwcGVuZENoaWxkKGN1cldvcmQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cldvcmQucmVwbGFjZVdpdGgoc21hcnRXcmFwU3Bhbik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VyV29yZC5yZXBsYWNlV2l0aCguLi5jdXJXb3JkLmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXh0U2libGluZyA9IGN1cldvcmQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgIGlmIChuZXh0U2libGluZyAmJiBuZXh0U2libGluZy5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIG5leHRTaWJsaW5nLnRleHRDb250ZW50ID0gKGN1cldvcmQudGV4dENvbnRlbnQgfHwgXCJcIikgKyAobmV4dFNpYmxpbmcudGV4dENvbnRlbnQgfHwgXCJcIik7XG4gICAgICAgICAgICAgICAgY3VyV29yZC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3b3Jkcy5sZW5ndGggPSAwO1xuICAgICAgICAgIGVsZW1lbnQubm9ybWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saW5lcy5wdXNoKC4uLmxpbmVzKTtcbiAgICAgICAgdGhpcy53b3Jkcy5wdXNoKC4uLndvcmRzKTtcbiAgICAgICAgdGhpcy5jaGFycy5wdXNoKC4uLmNoYXJzKTtcbiAgICAgIH0pO1xuICAgICAgbWFzayAmJiB0aGlzW21hc2tdICYmIHRoaXMubWFza3MucHVzaCguLi50aGlzW21hc2tdLm1hcCgoZWwpID0+IHtcbiAgICAgICAgbGV0IG1hc2tFbCA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgICBlbC5yZXBsYWNlV2l0aChtYXNrRWwpO1xuICAgICAgICBtYXNrRWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICBlbC5jbGFzc05hbWUgJiYgKG1hc2tFbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZSgvKFxcYlxcdytcXGIpL2csIFwiJDEtbWFza1wiKSk7XG4gICAgICAgIG1hc2tFbC5zdHlsZS5vdmVyZmxvdyA9IFwiY2xpcFwiO1xuICAgICAgICByZXR1cm4gbWFza0VsO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICB0aGlzLmlzU3BsaXQgPSB0cnVlO1xuICAgIF9mb250cyAmJiAoYXV0b1NwbGl0ID8gX2ZvbnRzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkaW5nZG9uZVwiLCB0aGlzLl9zcGxpdCkgOiBfZm9udHMuc3RhdHVzID09PSBcImxvYWRpbmdcIiAmJiBjb25zb2xlLndhcm4oXCJTcGxpdFRleHQgY2FsbGVkIGJlZm9yZSBmb250cyBsb2FkZWRcIikpO1xuICAgIGlmICgob25TcGxpdFJlc3VsdCA9IG9uU3BsaXQgJiYgb25TcGxpdCh0aGlzKSkgJiYgb25TcGxpdFJlc3VsdC50b3RhbFRpbWUpIHtcbiAgICAgIHRoaXMuX2RhdGEuYW5pbSA9IGFuaW1UaW1lID8gb25TcGxpdFJlc3VsdC50b3RhbFRpbWUoYW5pbVRpbWUpIDogb25TcGxpdFJlc3VsdDtcbiAgICB9XG4gICAgc3BsaXRMaW5lcyAmJiBhdXRvU3BsaXQgJiYgdGhpcy5lbGVtZW50cy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgb3JpZ1tpbmRleF0ud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgb2JzICYmIG9icy5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldmVydCgpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGxldCB7IG9yaWcsIGFuaW0sIG9icyB9ID0gdGhpcy5fZGF0YTtcbiAgICBvYnMgJiYgb2JzLmRpc2Nvbm5lY3QoKTtcbiAgICBvcmlnLmZvckVhY2goKHsgZWxlbWVudCwgaHRtbCwgYXJpYUwsIGFyaWFIIH0pID0+IHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIGFyaWFMID8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGFyaWFMKSA6IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKTtcbiAgICAgIGFyaWFIID8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBhcmlhSCkgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hhcnMubGVuZ3RoID0gdGhpcy53b3Jkcy5sZW5ndGggPSB0aGlzLmxpbmVzLmxlbmd0aCA9IG9yaWcubGVuZ3RoID0gdGhpcy5tYXNrcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuaXNTcGxpdCA9IGZhbHNlO1xuICAgIF9mb250cyA9PSBudWxsID8gdm9pZCAwIDogX2ZvbnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkaW5nZG9uZVwiLCB0aGlzLl9zcGxpdCk7XG4gICAgaWYgKGFuaW0pIHtcbiAgICAgIHRoaXMuX2RhdGEuYW5pbVRpbWUgPSBhbmltLnRvdGFsVGltZSgpO1xuICAgICAgYW5pbS5yZXZlcnQoKTtcbiAgICB9XG4gICAgKF9iID0gKF9hID0gdGhpcy52YXJzKS5vblJldmVydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUoZWxlbWVudHMsIGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgX1NwbGl0VGV4dChlbGVtZW50cywgY29uZmlnKTtcbiAgfVxuICBzdGF0aWMgcmVnaXN0ZXIoY29yZSkge1xuICAgIGdzYXAgPSBnc2FwIHx8IGNvcmUgfHwgd2luZG93LmdzYXA7XG4gICAgaWYgKGdzYXApIHtcbiAgICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBfY29udGV4dDtcbiAgICB9XG4gICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgd2luZG93LmlubmVyV2lkdGggPiAwKSB7XG4gICAgICBfZm9udHMgPSBkb2N1bWVudC5mb250cztcbiAgICAgIF9jb3JlSW5pdHRlZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuX1NwbGl0VGV4dC52ZXJzaW9uID0gXCIzLjEzLjBcIjtcbmxldCBTcGxpdFRleHQgPSBfU3BsaXRUZXh0O1xuXG5leHBvcnQgeyBTcGxpdFRleHQsIFNwbGl0VGV4dCBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjEzLjBcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI1LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2VcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfY29uZmlnID0ge1xuICBhdXRvU2xlZXA6IDEyMCxcbiAgZm9yY2UzRDogXCJhdXRvXCIsXG4gIG51bGxUYXJnZXRXYXJuOiAxLFxuICB1bml0czoge1xuICAgIGxpbmVIZWlnaHQ6IFwiXCJcbiAgfVxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIGR1cmF0aW9uOiAuNSxcbiAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgZGVsYXk6IDBcbn0sXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF9jb250ZXh0LFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX3RpbnlOdW0gPSAxIC8gX2JpZ051bSxcbiAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICBfZ3NJRCA9IDAsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9zaW4gPSBNYXRoLnNpbixcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xufSxcbiAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vIG5vdGU6IElFMTAgaGFzIEFycmF5QnVmZmVyLCBidXQgTk9UIEFycmF5QnVmZmVyLmlzVmlldygpLlxuX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgIC8vb25seSBudW1iZXJzIChpbmNsdWRpbmcgbmVnYXRpdmVzIGFuZCBkZWNpbWFscykgYnV0IE5PVCByZWxhdGl2ZSB2YWx1ZXMuXG5fbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgIC8vZHVwbGljYXRlIHNvIHRoYXQgd2hpbGUgd2UncmUgbG9vcGluZyB0aHJvdWdoIG1hdGNoZXMgZnJvbSBleGVjKCksIGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGxhc3RJbmRleCBvZiBfbnVtRXhwIHdoaWNoIHdlIHVzZSB0byBzZWFyY2ggZm9yIGNvbG9ycyB0b28uXG5fcmVsRXhwID0gL1srLV09LT9bLlxcZF0rLyxcbiAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgLy8gcHJldmlvdXNseSAvWyNcXC0rLl0qXFxiW2EtelxcZFxcLT0rJS5dKy9naSBidXQgZGlkbid0IGNhdGNoIHNwZWNpYWwgY2hhcmFjdGVycy5cbl91bml0RXhwID0gL15bK1xcLT1lXFxzXFxkXSpcXGQrWy5cXGRdKihbYS16XSp8JSlcXHMqJC9pLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9zdGFydEF0UmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAgaXNTdGFydDogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZ05vS2lsbCA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9pc1JldmVydFdvcnRoeSA9IGZ1bmN0aW9uIF9pc1JldmVydFdvcnRoeShhbmltYXRpb24pIHtcbiAgcmV0dXJuICEhKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQgfHwgYW5pbWF0aW9uLmFkZCk7XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgISEoX3JldmVydGluZyAmJiB0aW1lIDwgMCAmJiBfaXNSZXZlcnRXb3J0aHkoYW5pbWF0aW9uKSkpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMoZXhjbHVkZUR1cmF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBkZWZhdWx0cykge1xuICAgIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHAgaW4gb2JqIHx8IHAgPT09IFwiZHVyYXRpb25cIiAmJiBleGNsdWRlRHVyYXRpb24gfHwgcCA9PT0gXCJlYXNlXCIgfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG4gIH07XG59LFxuICAgIF9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZShiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIGJhc2VbcF0gPSB0b01lcmdlW3BdO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9tZXJnZURlZXAgPSBmdW5jdGlvbiBfbWVyZ2VEZWVwKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgcCAhPT0gXCJfX3Byb3RvX19cIiAmJiBwICE9PSBcImNvbnN0cnVjdG9yXCIgJiYgcCAhPT0gXCJwcm90b3R5cGVcIiAmJiAoYmFzZVtwXSA9IF9pc09iamVjdCh0b01lcmdlW3BdKSA/IF9tZXJnZURlZXAoYmFzZVtwXSB8fCAoYmFzZVtwXSA9IHt9KSwgdG9NZXJnZVtwXSkgOiB0b01lcmdlW3BdKTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfY29weUV4Y2x1ZGluZyA9IGZ1bmN0aW9uIF9jb3B5RXhjbHVkaW5nKG9iaiwgZXhjbHVkaW5nKSB7XG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBvYmopIHtcbiAgICBwIGluIGV4Y2x1ZGluZyB8fCAoY29weVtwXSA9IG9ialtwXSk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2luaGVyaXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9pbmhlcml0RGVmYXVsdHModmFycykge1xuICB2YXIgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgZnVuYyA9IHZhcnMua2V5ZnJhbWVzID8gX3NldEtleWZyYW1lRGVmYXVsdHMoX2lzQXJyYXkodmFycy5rZXlmcmFtZXMpKSA6IF9zZXREZWZhdWx0cztcblxuICBpZiAoX2lzTm90RmFsc2UodmFycy5pbmhlcml0KSkge1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCB8fCBwYXJlbnQuX2RwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJzO1xufSxcbiAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gIHZhciBpID0gYTEubGVuZ3RoLFxuICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgcmV0dXJuIGkgPCAwO1xufSxcbiAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBwYXJlbnRbbGFzdFByb3BdLFxuICAgICAgdDtcblxuICBpZiAoc29ydEJ5KSB7XG4gICAgdCA9IGNoaWxkW3NvcnRCeV07XG5cbiAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIGNoaWxkLl9uZXh0ID0gcHJldi5fbmV4dDtcbiAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQuX25leHQgPSBwYXJlbnRbZmlyc3RQcm9wXTtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgaWYgKGNoaWxkLl9uZXh0KSB7XG4gICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBjaGlsZC5fcHJldiA9IHByZXY7XG4gIGNoaWxkLnBhcmVudCA9IGNoaWxkLl9kcCA9IHBhcmVudDtcbiAgcmV0dXJuIGNoaWxkO1xufSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IG5leHQ7XG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQuX3ByZXYgPSBwcmV2O1xuICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gIH1cblxuICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDsgLy8gZG9uJ3QgZGVsZXRlIHRoZSBfZHAganVzdCBzbyB3ZSBjYW4gcmV2ZXJ0IGlmIG5lY2Vzc2FyeS4gQnV0IHBhcmVudCBzaG91bGQgYmUgbnVsbCB0byBpbmRpY2F0ZSB0aGUgaXRlbSBpc24ndCBpbiBhIGxpbmtlZCBsaXN0LlxufSxcbiAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gIGNoaWxkLnBhcmVudCAmJiAoIW9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUgfHwgY2hpbGQucGFyZW50LmF1dG9SZW1vdmVDaGlsZHJlbikgJiYgY2hpbGQucGFyZW50LnJlbW92ZSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgLyBjeWNsZUR1cmF0aW9uKSk7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCAhY2hpbGQuX2R1ciAmJiBjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnQgPCB0aW1lbGluZS5fdGltZSAmJiAoY2hpbGQuX2R1ciB8fCAhY2hpbGQuYWRkKSkge1xuICAgIC8vIGluIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgb3IgaWYgaXQncyBiZWluZyBpbnNlcnRlZCBpbnRvIGEgdGltZWxpbmUgQkVGT1JFIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBjdXJyZW50bHkuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuIFNwZWNpYWwgY2FzZTogaWYgaXQncyBhIHRpbWVsaW5lIChoYXMgLmFkZCgpIG1ldGhvZCkgYW5kIG5vIGR1cmF0aW9uLCB3ZSBjYW4gc2tpcCByZW5kZXJpbmcgYmVjYXVzZSB0aGUgdXNlciBtYXkgYmUgcG9wdWxhdGluZyBpdCBBRlRFUiBhZGRpbmcgaXQgdG8gYSBwYXJlbnQgdGltZWxpbmUgKHVuY29udmVudGlvbmFsLCBidXQgcG9zc2libGUsIGFuZCB3ZSB3b3VsZG4ndCB3YW50IGl0IHRvIGdldCByZW1vdmVkIGlmIHRoZSBwYXJlbnQncyBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSkuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gKE1hdGgucmFuZG9tKCkgKiBpKSB8IDAsIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQgPCBsICYmIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZSA9IFtdLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBpZiAoIWNvbmZpZykgcmV0dXJuO1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vIFVNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICBpZiAoX3dpbmRvd0V4aXN0cygpIHx8IGNvbmZpZy5oZWFkbGVzcykge1xuICAgIC8vIGVkZ2UgY2FzZTogc29tZSBidWlsZCB0b29scyBtYXkgcGFzcyBpbiBhIG51bGwvdW5kZWZpbmVkIHZhbHVlXG4gICAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgICB9IDogY29uZmlnLFxuICAgICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICAgIGluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICAgIGFkZDogX2FkZFByb3BUd2VlbixcbiAgICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICAgIHJhd1ZhcnM6IDBcbiAgICB9LFxuICAgICAgICBzdGF0aWNzID0ge1xuICAgICAgdGFyZ2V0VGVzdDogMCxcbiAgICAgIGdldDogMCxcbiAgICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgcmVnaXN0ZXI6IDBcbiAgICB9O1xuXG4gICAgX3dha2UoKTtcblxuICAgIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpOyAvL2luc3RhbmNlIG1ldGhvZHNcblxuXG4gICAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjsgLy9mb3IgdGhlIGdsb2JhbCBuYW1lLiBcIm1vdGlvblBhdGhcIiBzaG91bGQgYmVjb21lIE1vdGlvblBhdGhQbHVnaW5cbiAgICB9XG5cbiAgICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbiAgfSBlbHNlIHtcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5wdXNoKGNvbmZpZyk7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ09MT1JTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fMjU1ID0gMjU1LFxuICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgYXF1YTogWzAsIF8yNTUsIF8yNTVdLFxuICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBibGFjazogWzAsIDAsIDBdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICBibHVlOiBbMCwgMCwgXzI1NV0sXG4gIG5hdnk6IFswLCAwLCAxMjhdLFxuICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIHJlZDogW18yNTUsIDAsIDBdLFxuICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gIHRyYW5zcGFyZW50OiBbXzI1NSwgXzI1NSwgXzI1NSwgMF1cbn0sXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGlkZWEgdG8gcmVwbGFjZSB0aGUgaGFyZC1jb2RlZCBjb2xvciBuYW1lIHZhbHVlcyAtIHB1dCB0aGlzIGluIHRoZSB0aWNrZXIud2FrZSgpIHdoZXJlIHdlIHNldCB0aGUgX2RvYzpcbi8vIGxldCBjdHggPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuLy8gX2ZvckVhY2hOYW1lKFwiYXF1YSxsaW1lLHNpbHZlcixibGFjayxtYXJvb24sdGVhbCxibHVlLG5hdnksd2hpdGUsb2xpdmUseWVsbG93LG9yYW5nZSxncmF5LHB1cnBsZSxncmVlbixyZWQscGluayxjeWFuXCIsIGNvbG9yID0+IHtjdHguZmlsbFN0eWxlID0gY29sb3I7IF9jb2xvckxvb2t1cFtjb2xvcl0gPSBzcGxpdENvbG9yKGN0eC5maWxsU3R5bGUpfSk7XG5faHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCArPSBoIDwgMCA/IDEgOiBoID4gMSA/IC0xIDogMDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgIC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjAgb3IgIzlGMEYgKGNvdWxkIGhhdmUgYWxwaGEpXG4gICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgZyA9IHYuY2hhckF0KDIpO1xuICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIC8vIGhleCB3aXRoIGFscGhhLCBsaWtlICNmZDVlNTNmZlxuICAgICAgICBhID0gcGFyc2VJbnQodi5zdWJzdHIoMSwgNiksIDE2KTtcbiAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLixcbiAgcDtcblxuICBmb3IgKHAgaW4gX2NvbG9yTG9va3VwKSB7XG4gICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChzICsgXCIpXCIsIFwiZ2lcIik7XG59KCksXG4gICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbiBfY29sb3JTdHJpbmdGaWx0ZXIoYSkge1xuICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgdG9IU0w7XG4gIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgYVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpOyAvLyBtYWtlIHN1cmUgdGhlIG9yZGVyIG9mIG51bWJlcnMvY29sb3JzIG1hdGNoIHdpdGggdGhlIEVORCB2YWx1ZS5cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJQ0tFUlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX3RpY2tlckFjdGl2ZSxcbiAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgIF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICBfbmV4dFRpbWUgPSBfZ2FwLFxuICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgX2lkLFxuICAgICAgX3JlcSxcbiAgICAgIF9yYWYsXG4gICAgICBfc2VsZixcbiAgICAgIF9kZWx0YSxcbiAgICAgIF9pLFxuICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgdmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG4gICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgIG92ZXJsYXAsXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICB0aW1lLFxuICAgICAgICBmcmFtZTtcblxuICAgIChlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCB8fCBlbGFwc2VkIDwgMCkgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5mb3JFYWNoKF9jcmVhdGVQbHVnaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JhZiA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBjYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IEluZmluaXR5OyAvLyB6ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnIHx8IDMzLCBfbGFnVGhyZXNob2xkKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICBjYWxsYmFjayh0LCBkLCBmLCB2KTtcblxuICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgIF9zZWxmLnJlbW92ZShjYWxsYmFjayk7XG5cbiAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICB+KGkgPSBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spKSAmJiBfbGlzdGVuZXJzLnNwbGljZShpLCAxKSAmJiBfaSA+PSBpICYmIF9pLS07XG4gICAgfSxcbiAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBfc2VsZjtcbn0oKSxcbiAgICBfd2FrZSA9IGZ1bmN0aW9uIF93YWtlKCkge1xuICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG59LFxuICAgIC8vYWxzbyBlbnN1cmVzIHRoZSBjb3JlIGNsYXNzZXMgYXJlIGluaXRpYWxpemVkLlxuXG4vKlxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIEVBU0lOR1xuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuX2Vhc2VNYXAgPSB7fSxcbiAgICBfY3VzdG9tRWFzZUV4cCA9IC9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLFxuICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gIC8vdGFrZXMgYSBzdHJpbmcgbGlrZSBcInt3aWdnbGVzOjEwLCB0eXBlOmFudGljaXBhdGV9KVwiIGFuZCB0dXJucyBpdCBpbnRvIGEgcmVhbCBvYmplY3QuIE5vdGljZSBpdCBlbmRzIGluIFwiKVwiIGFuZCBpbmNsdWRlcyB0aGUge30gd3JhcHBlcnMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGVhc2UgY29uZmlncyBhbmQgcHJpb3JpdGl6ZWQgb3B0aW1pemF0aW9uIHJhdGhlciB0aGFuIHJldXNhYmlsaXR5LlxuICB2YXIgb2JqID0ge30sXG4gICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICBrZXkgPSBzcGxpdFswXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsLFxuICAgICAgcGFyc2VkVmFsO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFsID0gc3BsaXRbaV07XG4gICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgIHBhcnNlZFZhbCA9IHZhbC5zdWJzdHIoMCwgaW5kZXgpO1xuICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF92YWx1ZUluUGFyZW50aGVzZXMgPSBmdW5jdGlvbiBfdmFsdWVJblBhcmVudGhlc2VzKHZhbHVlKSB7XG4gIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgIG5lc3RlZCA9IHZhbHVlLmluZGV4T2YoXCIoXCIsIG9wZW4pO1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xufSxcbiAgICBfY29uZmlnRWFzZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBfY29uZmlnRWFzZUZyb21TdHJpbmcobmFtZSkge1xuICAvL25hbWUgY2FuIGJlIGEgc3RyaW5nIGxpa2UgXCJlbGFzdGljLm91dCgxLDAuNSlcIiwgYW5kIHBhc3MgaW4gX2Vhc2VNYXAgYXMgb2JqIGFuZCBpdCdsbCBwYXJzZSBpdCBvdXQgYW5kIGNhbGwgdGhlIGFjdHVhbCBmdW5jdGlvbiBsaWtlIF9lYXNlTWFwLkVsYXN0aWMuZWFzZU91dC5jb25maWcoMSwwLjUpLiBJdCB3aWxsIGFsc28gcGFyc2UgY3VzdG9tIGVhc2Ugc3RyaW5ncyBhcyBsb25nIGFzIEN1c3RvbUVhc2UgaXMgbG9hZGVkIGFuZCByZWdpc3RlcmVkIChpbnRlcm5hbGx5IGFzIF9lYXNlTWFwLl9DRSkuXG4gIHZhciBzcGxpdCA9IChuYW1lICsgXCJcIikuc3BsaXQoXCIoXCIpLFxuICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG59LFxuICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2UoMSAtIHApO1xuICB9O1xufSxcbiAgICAvLyBhbGxvdyB5b3lvRWFzZSB0byBiZSBzZXQgaW4gY2hpbGRyZW4gYW5kIGhhdmUgdGhvc2UgYWZmZWN0ZWQgd2hlbiB0aGUgcGFyZW50L2FuY2VzdG9yIHRpbWVsaW5lIHlveW9zLlxuX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgZWFzZTtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLCBpc1lveW8pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLnRpbWVsaW5lLCBpc1lveW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICBjaGlsZC5fZWFzZSA9IGNoaWxkLl95RWFzZTtcbiAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgfVxufSxcbiAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICByZXR1cm4gIWVhc2UgPyBkZWZhdWx0RWFzZSA6IChfaXNGdW5jdGlvbihlYXNlKSA/IGVhc2UgOiBfZWFzZU1hcFtlYXNlXSB8fCBfY29uZmlnRWFzZUZyb21TdHJpbmcoZWFzZSkpIHx8IGRlZmF1bHRFYXNlO1xufSxcbiAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICBpZiAoZWFzZU91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgIH07XG4gIH1cblxuICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlSW5PdXQgPSBmdW5jdGlvbiBlYXNlSW5PdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgIH07XG4gIH1cblxuICB2YXIgZWFzZSA9IHtcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gIH0sXG4gICAgICBsb3dlcmNhc2VOYW1lO1xuXG4gIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGVhc2VPdXQ7XG5cbiAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gKDEgLSBlYXNlT3V0KDEgLSBwICogMikpIC8gMiA6IC41ICsgZWFzZU91dCgocCAtIC41KSAqIDIpIC8gMjtcbiAgfTtcbn0sXG4gICAgX2NvbmZpZ0VsYXN0aWMgPSBmdW5jdGlvbiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgIHAzID0gcDIgLyBfMlBJICogKE1hdGguYXNpbigxIC8gcDEpIHx8IDApLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIHAyID0gXzJQSSAvIHAyOyAvL3ByZWNhbGN1bGF0ZSB0byBvcHRpbWl6ZVxuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgcmV0dXJuIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgfVxuXG4gIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPyAtLXAgKiBwICogKChvdmVyc2hvb3QgKyAxKSAqIHAgKyBvdmVyc2hvb3QpICsgMSA6IDA7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn07IC8vIGEgY2hlYXBlciAoa2IgYW5kIGNwdSkgYnV0IG1vcmUgbWlsZCB3YXkgdG8gZ2V0IGEgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIGJ5IGZlZWRpbmcgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2UgPSByYXRpbyA9PiB7XG4vLyBcdGxldCB5ID0gMC41ICsgcmF0aW8gLyAyO1xuLy8gXHRyZXR1cm4gcCA9PiAoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbi8vIH0sXG4vLyBhIHN0cm9uZ2VyIChidXQgbW9yZSBleHBlbnNpdmUga2IvY3B1KSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgdGhhdCBsZXRzIHlvdSBmZWVkIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlU3Ryb25nID0gcmF0aW8gPT4ge1xuLy8gXHRyYXRpbyA9IC41ICsgcmF0aW8gLyAyO1xuLy8gXHRsZXQgbyA9IDEgLyAzICogKHJhdGlvIDwgLjUgPyByYXRpbyA6IDEgLSByYXRpbyksXG4vLyBcdFx0YiA9IHJhdGlvIC0gbyxcbi8vIFx0XHRjID0gcmF0aW8gKyBvO1xuLy8gXHRyZXR1cm4gcCA9PiBwID09PSAxID8gcCA6IDMgKiBiICogKDEgLSBwKSAqICgxIC0gcCkgKiBwICsgMyAqIGMgKiAoMSAtIHApICogcCAqIHAgKyBwICogcCAqIHA7XG4vLyB9O1xuXG5cbl9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICBfaW5zZXJ0RWFzZShuYW1lICsgXCIsUG93ZXJcIiArIChwb3dlciAtIDEpLCBpID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICB9KTtcbn0pO1xuXG5fZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuKGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBuMSA9IDEgLyBjLFxuICAgICAgbjIgPSAyICogbjEsXG4gICAgICBuMyA9IDIuNSAqIG4xLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gIH07XG5cbiAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9LCBlYXNlT3V0KTtcbn0pKDcuNTYyNSwgMi43NSk7XG5cbl9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSAqIHAgKyBwICogcCAqIHAgKiBwICogcCAqIHAgKiAoMSAtIHApO1xufSk7IC8vIHByZXZpb3VzbHkgMiAqKiAoMTAgKiAocCAtIDEpKSBidXQgdGhhdCBkb2Vzbid0IGVuZCB1cCB3aXRoIHRoZSB2YWx1ZSBxdWl0ZSBhdCB0aGUgcmlnaHQgc3BvdCBzbyB3ZSBkbyBhIGJsZW5kZWQgZWFzZSB0byBlbnN1cmUgaXQgbGFuZHMgd2hlcmUgaXQgc2hvdWxkIHBlcmZlY3RseS5cblxuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhd1RpbWUoKSA+PSAwICYmIHRoaXMuX2luaXR0ZWQgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLU1hdGguYWJzKHRoaXMuX2RlbGF5KSwgdGhpcy50b3RhbER1cmF0aW9uKCksIHRUaW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH0gLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIC0gaWYgYW4gYW5pbWF0aW9uIGlzIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCB0aGVuIC5yZXN0YXJ0KCkgb3IgLnBsYXkoKSBvciAucmVzdW1lKCkgaXMgY2FsbGVkLCBwZXJoYXBzIHdlIHNob3VsZCBmb3JjZSBpdCBiYWNrIGludG8gdGhlIGdsb2JhbFRpbWVsaW5lIGJ1dCBiZSBjYXJlZnVsIGJlY2F1c2Ugd2hhdCBpZiBpdCdzIGFscmVhZHkgYXQgaXRzIGVuZD8gV2UgZG9uJ3Qgd2FudCBpdCB0byBqdXN0IHBlcnNpc3QgZm9yZXZlciBhbmQgbm90IGdldCByZWxlYXNlZCBmb3IgR0MuXG4gICAgLy8gIXRoaXMucGFyZW50ICYmICF2YWx1ZSAmJiB0aGlzLl90VGltZSA8IHRoaXMuX3REdXIgJiYgdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIF9nbG9iYWxUaW1lbGluZS5hZGQodGhpcyk7XG5cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICBpZiAoX2lzUmV2ZXJ0V29ydGh5KHRoaXMpKSB7XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChNYXRoLmFicyhhbmltYXRpb24uX3RzKSB8fCAxKTtcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLl9zYXQgPyB0aGlzLl9zYXQuZ2xvYmFsVGltZShyYXdUaW1lKSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIGNvbnRleHQucmV2ZXJ0KCkpLiBcIl9zYXRcIiBzdGFuZHMgZm9yIF9zdGFydEF0VHdlZW4sIHJlZmVycmluZyB0byB0aGUgcGFyZW50IHR3ZWVuIHRoYXQgY3JlYXRlZCB0aGUgX3N0YXJ0QXQuIFdlIG11c3QgZGlzY2VybiBpZiB0aGF0IHR3ZWVuIGhhZCBpbW1lZGlhdGVSZW5kZXIgc28gdGhhdCB3ZSBjYW4ga25vdyB3aGV0aGVyIG9yIG5vdCB0byBwcmlvcml0aXplIGl0IGluIHJldmVydCgpLlxuICB9O1xuXG4gIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVwZWF0ID0gdmFsdWUgPT09IEluZmluaXR5ID8gLTIgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXBlYXQgPT09IC0yID8gSW5maW5pdHkgOiB0aGlzLl9yZXBlYXQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG5cbiAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fckRlbGF5O1xuICB9O1xuXG4gIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5feW95bztcbiAgfTtcblxuICBfcHJvdG8uc2VlayA9IGZ1bmN0aW9uIHNlZWsocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdGFydCA9IGZ1bmN0aW9uIHJlc3RhcnQoaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICAgIHRoaXMuX2R1ciB8fCAodGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBlbnN1cmVzIG9uQ29tcGxldGUgZmlyZXMgb24gYSB6ZXJvLWR1cmF0aW9uIGFuaW1hdGlvbiB0aGF0IGdldHMgcmVzdGFydGVkLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2SXRlcmF0aW9uID0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pOyAvLyBmdWxsIGRlY2ltYWwgdmVyc2lvbiBvZiBpdGVyYXRpb25zLCBub3QgdGhlIHByZXZpb3VzIGl0ZXJhdGlvbiAod2UncmUgcmV1c2luZyBwcmV2SXRlcmF0aW9uIHZhcmlhYmxlIGZvciBlZmZpY2llbmN5KVxuXG4gICAgICAgICAgaXRlcmF0aW9uID0gfn5wcmV2SXRlcmF0aW9uO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIXByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGltZSA+PSBwcmV2VGltZSAmJiB0b3RhbFRpbWUgPj0gMCkge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCB0aW1lID49IGNoaWxkLl9zdGFydCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gZmxhZyB6VGltZSBhcyBuZWdhdGl2ZSBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIF9pc1JldmVydFdvcnRoeShjaGlsZCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgY2hpbGQucGFyZW50ID09PSB0aGlzICYmIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBjaGlsZCk7XG5cbiAgICBpZiAoY2hpbGQgPT09IHRoaXMuX3JlY2VudCkge1xuICAgICAgdGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fZm9yY2luZyA9IDE7XG5cbiAgICBpZiAoIXRoaXMuX2RwICYmIHRoaXMuX3RzKSB7XG4gICAgICAvL3NwZWNpYWwgY2FzZSBmb3IgdGhlIGdsb2JhbCB0aW1lbGluZSAob3IgYW55IG90aGVyIHRoYXQgaGFzIG5vIHBhcmVudCBvciBkZXRhY2hlZCBwYXJlbnQpLlxuICAgICAgdGhpcy5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKF90aWNrZXIudGltZSAtICh0aGlzLl90cyA+IDAgPyBfdG90YWxUaW1lMiAvIHRoaXMuX3RzIDogKHRoaXMudG90YWxEdXJhdGlvbigpIC0gX3RvdGFsVGltZTIpIC8gLXRoaXMuX3RzKSk7XG4gICAgfVxuXG4gICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkTGFiZWwgPSBmdW5jdGlvbiBhZGRMYWJlbChsYWJlbCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrIHx8IF9lbXB0eUZ1bmMsIHBhcmFtcyk7XG4gICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCB0LCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID09PSBwb3NpdGlvbiAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIikge1xuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgaXNHbG9iYWxUaW1lID0gX2lzTnVtYmVyKG9ubHlBY3RpdmUpLFxuICAgICAgICAvLyBhIG51bWJlciBpcyBpbnRlcnByZXRlZCBhcyBhIGdsb2JhbCB0aW1lLiBJZiB0aGUgYW5pbWF0aW9uIHNwYW5zXG4gICAgY2hpbGRyZW47XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgLy8gbm90ZTogaWYgdGhpcyBpcyBmb3Igb3ZlcndyaXRpbmcsIGl0IHNob3VsZCBvbmx5IGJlIGZvciB0d2VlbnMgdGhhdCBhcmVuJ3QgcGF1c2VkIGFuZCBhcmUgaW5pdHRlZC5cbiAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgLSB0YXJnZXRzKCkgb24gdGltZWxpbmVzXG4gIC8vIHRhcmdldHMoKSB7XG4gIC8vIFx0bGV0IHJlc3VsdCA9IFtdO1xuICAvLyBcdHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2godCA9PiByZXN1bHQucHVzaCguLi50LnRhcmdldHMoKSkpO1xuICAvLyBcdHJldHVybiByZXN1bHQuZmlsdGVyKCh2LCBpKSA9PiByZXN1bHQuaW5kZXhPZih2KSA9PT0gaSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgIHZhciB0bCA9IHRoaXMsXG4gICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHN0YXJ0QXQgPSBfdmFycy5zdGFydEF0LFxuICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIGluaXR0ZWQsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICBlYXNlOiB2YXJzLmVhc2UgfHwgXCJub25lXCIsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICB0aW1lOiBlbmRUaW1lLFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoc29mdCk7XG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBfQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMi5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKGluY2x1ZGVMYWJlbHMpIHtcbiAgICBpZiAoaW5jbHVkZUxhYmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICBpbmNsdWRlTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuICAgICAgdGhpcy5yZW1vdmUoY2hpbGQpO1xuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX2RwICYmICh0aGlzLl90aW1lID0gdGhpcy5fdFRpbWUgPSB0aGlzLl9wVGltZSA9IDApO1xuICAgIGluY2x1ZGVMYWJlbHMgJiYgKHRoaXMubGFiZWxzID0ge30pO1xuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBjaGlsZCA9IHNlbGYuX2xhc3QsXG4gICAgICAgIHByZXZTdGFydCA9IF9iaWdOdW0sXG4gICAgICAgIHByZXYsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHNlbGYudGltZVNjYWxlKChzZWxmLl9yZXBlYXQgPCAwID8gc2VsZi5kdXJhdGlvbigpIDogc2VsZi50b3RhbER1cmF0aW9uKCkpIC8gKHNlbGYucmV2ZXJzZWQoKSA/IC12YWx1ZSA6IHZhbHVlKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2RpcnR5KSB7XG4gICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHByZXYgPSBjaGlsZC5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBpbiBjYXNlIHRoZSB0d2VlbiBjaGFuZ2VzIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZS4uLlxuXG4gICAgICAgIGNoaWxkLl9kaXJ0eSAmJiBjaGlsZC50b3RhbER1cmF0aW9uKCk7IC8vY291bGQgY2hhbmdlIHRoZSB0d2Vlbi5fc3RhcnRUaW1lLCBzbyBtYWtlIHN1cmUgdGhlIGFuaW1hdGlvbidzIGNhY2hlIGlzIGNsZWFuIGJlZm9yZSBhbmFseXppbmcgaXQuXG5cbiAgICAgICAgc3RhcnQgPSBjaGlsZC5fc3RhcnQ7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gcHJldlN0YXJ0ICYmIHNlbGYuX3NvcnQgJiYgY2hpbGQuX3RzICYmICFzZWxmLl9sb2NrKSB7XG4gICAgICAgICAgLy9pbiBjYXNlIG9uZSBvZiB0aGUgdHdlZW5zIHNoaWZ0ZWQgb3V0IG9mIG9yZGVyLCBpdCBuZWVkcyB0byBiZSByZS1pbnNlcnRlZCBpbnRvIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgIHNlbGYuX2xvY2sgPSAxOyAvL3ByZXZlbnQgZW5kbGVzcyByZWN1cnNpdmUgY2FsbHMgLSB0aGVyZSBhcmUgbWV0aG9kcyB0aGF0IGdldCB0cmlnZ2VyZWQgdGhhdCBjaGVjayBkdXJhdGlvbi90b3RhbER1cmF0aW9uIHdoZW4gd2UgYWRkKCkuXG5cbiAgICAgICAgICBfYWRkVG9UaW1lbGluZShzZWxmLCBjaGlsZCwgc3RhcnQgLSBjaGlsZC5fZGVsYXksIDEpLl9sb2NrID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2U3RhcnQgPSBzdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA8IDAgJiYgY2hpbGQuX3RzKSB7XG4gICAgICAgICAgLy9jaGlsZHJlbiBhcmVuJ3QgYWxsb3dlZCB0byBoYXZlIG5lZ2F0aXZlIHN0YXJ0VGltZXMgdW5sZXNzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHNvIGFkanVzdCBoZXJlIGlmIG9uZSBpcyBmb3VuZC5cbiAgICAgICAgICBtYXggLT0gc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoIXBhcmVudCAmJiAhc2VsZi5fZHAgfHwgcGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZykge1xuICAgICAgICAgICAgc2VsZi5fc3RhcnQgKz0gc3RhcnQgLyBzZWxmLl90cztcbiAgICAgICAgICAgIHNlbGYuX3RpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICBzZWxmLl90VGltZSAtPSBzdGFydDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNoaWZ0Q2hpbGRyZW4oLXN0YXJ0LCBmYWxzZSwgLTFlOTk5KTtcbiAgICAgICAgICBwcmV2U3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuX2VuZCA+IG1heCAmJiBjaGlsZC5fdHMgJiYgKG1heCA9IGNoaWxkLl9lbmQpO1xuICAgICAgICBjaGlsZCA9IHByZXY7XG4gICAgICB9XG5cbiAgICAgIF9zZXREdXJhdGlvbihzZWxmLCBzZWxmID09PSBfZ2xvYmFsVGltZWxpbmUgJiYgc2VsZi5fdGltZSA+IG1heCA/IHNlbGYuX3RpbWUgOiBtYXgsIDEsIDEpO1xuXG4gICAgICBzZWxmLl9kaXJ0eSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuX3REdXI7XG4gIH07XG5cbiAgVGltZWxpbmUudXBkYXRlUm9vdCA9IGZ1bmN0aW9uIHVwZGF0ZVJvb3QodGltZSkge1xuICAgIGlmIChfZ2xvYmFsVGltZWxpbmUuX3RzKSB7XG4gICAgICBfbGF6eVNhZmVSZW5kZXIoX2dsb2JhbFRpbWVsaW5lLCBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lLCBfZ2xvYmFsVGltZWxpbmUpKTtcblxuICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lID0gX3RpY2tlci5mcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoX3RpY2tlci5mcmFtZSA+PSBfbmV4dEdDRnJhbWUpIHtcbiAgICAgIF9uZXh0R0NGcmFtZSArPSBfY29uZmlnLmF1dG9TbGVlcCB8fCAxMjA7XG4gICAgICB2YXIgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuICAgICAgaWYgKCFjaGlsZCB8fCAhY2hpbGQuX3RzKSBpZiAoX2NvbmZpZy5hdXRvU2xlZXAgJiYgX3RpY2tlci5fbGlzdGVuZXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkICYmICFjaGlsZC5fdHMpIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgfHwgX3RpY2tlci5zbGVlcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVGltZWxpbmU7XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUaW1lbGluZS5wcm90b3R5cGUsIHtcbiAgX2xvY2s6IDAsXG4gIF9oYXNQYXVzZTogMCxcbiAgX2ZvcmNpbmc6IDBcbn0pO1xuXG52YXIgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pIHtcbiAgLy9ub3RlOiB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBudWxsLCBzZXR0ZXIpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydE51bXMsXG4gICAgICBjb2xvcixcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBoYXNSYW5kb20sXG4gICAgICBhO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChoYXNSYW5kb20gPSB+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgfVxuXG4gIGlmIChzdHJpbmdGaWx0ZXIpIHtcbiAgICBhID0gW3N0YXJ0LCBlbmRdO1xuICAgIHN0cmluZ0ZpbHRlcihhLCB0YXJnZXQsIHByb3ApOyAvL3Bhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuXG5cbiAgICBzdGFydCA9IGFbMF07XG4gICAgZW5kID0gYVsxXTtcbiAgfVxuXG4gIHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9jb21wbGV4U3RyaW5nTnVtRXhwKSB8fCBbXTtcblxuICB3aGlsZSAocmVzdWx0ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAuZXhlYyhlbmQpKSB7XG4gICAgZW5kTnVtID0gcmVzdWx0WzBdO1xuICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcbiAgICAgIGNvbG9yID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZW5kTnVtICE9PSBzdGFydE51bXNbbWF0Y2hJbmRleCsrXSkge1xuICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1ttYXRjaEluZGV4IC0gMV0pIHx8IDA7IC8vdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuICAgICAgcHQuX3B0ID0ge1xuICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICBjOiBlbmROdW0uY2hhckF0KDEpID09PSBcIj1cIiA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmROdW0pIC0gc3RhcnROdW0gOiBwYXJzZUZsb2F0KGVuZE51bSkgLSBzdGFydE51bSxcbiAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgIH07XG4gICAgICBpbmRleCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG5cbiAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgaWYgKF9yZWxFeHAudGVzdChlbmQpIHx8IGhhc1JhbmRvbSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFByb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIGluZGV4LCB0YXJnZXRzLCBtb2RpZmllciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0sIG9wdGlvbmFsKSB7XG4gIF9pc0Z1bmN0aW9uKGVuZCkgJiYgKGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQsIHRhcmdldHMpKTtcbiAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXSxcbiAgICAgIHBhcnNlZFN0YXJ0ID0gc3RhcnQgIT09IFwiZ2V0XCIgPyBzdGFydCA6ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogZnVuY1BhcmFtID8gdGFyZ2V0W3Byb3AuaW5kZXhPZihcInNldFwiKSB8fCAhX2lzRnVuY3Rpb24odGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0oZnVuY1BhcmFtKSA6IHRhcmdldFtwcm9wXSgpLFxuICAgICAgc2V0dGVyID0gIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBfc2V0dGVyUGxhaW4gOiBmdW5jUGFyYW0gPyBfc2V0dGVyRnVuY1dpdGhQYXJhbSA6IF9zZXR0ZXJGdW5jLFxuICAgICAgcHQ7XG5cbiAgaWYgKF9pc1N0cmluZyhlbmQpKSB7XG4gICAgaWYgKH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgfVxuXG4gICAgaWYgKGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG4gICAgICBwdCA9IF9wYXJzZVJlbGF0aXZlKHBhcnNlZFN0YXJ0LCBlbmQpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIW9wdGlvbmFsIHx8IHBhcnNlZFN0YXJ0ICE9PSBlbmQgfHwgX2ZvcmNlQWxsUHJvcFR3ZWVucykge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5fZm9yY2VBbGxQcm9wVHdlZW5zLFxuICAgIF9pbml0VHdlZW4gPSBmdW5jdGlvbiBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSkge1xuICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgc3RhcnRBdCA9IHZhcnMuc3RhcnRBdCxcbiAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgIG9uVXBkYXRlID0gdmFycy5vblVwZGF0ZSxcbiAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgeW95b0Vhc2UgPSB2YXJzLnlveW9FYXNlLFxuICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgZHVyID0gdHdlZW4uX2R1cixcbiAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwYXJlbnQgPSB0d2Vlbi5wYXJlbnQsXG4gICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgdGwgPSB0d2Vlbi50aW1lbGluZSxcbiAgICAgIGNsZWFuVmFycyxcbiAgICAgIGksXG4gICAgICBwLFxuICAgICAgcHQsXG4gICAgICB0YXJnZXQsXG4gICAgICBoYXNQcmlvcml0eSxcbiAgICAgIGdzRGF0YSxcbiAgICAgIGhhcm5lc3MsXG4gICAgICBwbHVnaW4sXG4gICAgICBwdExvb2t1cCxcbiAgICAgIGluZGV4LFxuICAgICAgaGFybmVzc1ZhcnMsXG4gICAgICBvdmVyd3JpdHRlbjtcbiAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICB0d2Vlbi5fZWFzZSA9IF9wYXJzZUVhc2UoZWFzZSwgX2RlZmF1bHRzLmVhc2UpO1xuICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vdGhlcmUgbXVzdCBoYXZlIGJlZW4gYSBwYXJlbnQgdGltZWxpbmUgd2l0aCB5b3lvOnRydWUgdGhhdCBpcyBjdXJyZW50bHkgaW4gaXRzIHlveW8gcGhhc2UsIHNvIGZsaXAgdGhlIGVhc2VzLlxuICAgIHlveW9FYXNlID0gdHdlZW4uX3lFYXNlO1xuICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gIH1cblxuICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzOyAvL25lc3RlZCB0aW1lbGluZXMgc2hvdWxkIG5ldmVyIHJ1biBiYWNrd2FyZHMgLSB0aGUgYmFja3dhcmRzLW5lc3MgaXMgaW4gdGhlIGNoaWxkIHR3ZWVucy5cblxuICBpZiAoIXRsIHx8IGtleWZyYW1lcyAmJiAhdmFycy5zdGFnZ2VyKSB7XG4gICAgLy9pZiB0aGVyZSdzIGFuIGludGVybmFsIHRpbWVsaW5lLCBza2lwIGFsbCB0aGUgcGFyc2luZyBiZWNhdXNlIHdlIHBhc3NlZCB0aGF0IHRhc2sgZG93biB0aGUgY2hhaW4uXG4gICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTsgLy9zb21lb25lIG1heSBuZWVkIHRvIHNwZWNpZnkgQ1NTLXNwZWNpZmljIHZhbHVlcyBBTkQgbm9uLUNTUyB2YWx1ZXMsIGxpa2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIFwieFwiIHByb3BlcnR5IHBsdXMgaXQncyBhIHN0YW5kYXJkIERPTSBlbGVtZW50LiBXZSBhbGxvdyBwZW9wbGUgdG8gZGlzdGluZ3Vpc2ggYnkgd3JhcHBpbmcgcGx1Z2luLXNwZWNpZmljIHN0dWZmIGluIGEgY3NzOnt9IG9iamVjdCBmb3IgZXhhbXBsZS5cblxuICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgcHJldlN0YXJ0QXQuX3pUaW1lIDwgMCAmJiBwcmV2U3RhcnRBdC5wcm9ncmVzcygxKTsgLy8gaW4gY2FzZSBpdCdzIGEgbGF6eSBzdGFydEF0IHRoYXQgaGFzbid0IHJlbmRlcmVkIHlldC5cblxuICAgICAgdGltZSA8IDAgJiYgcnVuQmFja3dhcmRzICYmIGltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCA/IHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkgOiBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWdOb0tpbGwgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgIHN0YXJ0QXQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiAwLFxuICAgICAgICBvblVwZGF0ZTogb25VcGRhdGUgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lISBMaWtlIHdoZW4gcmV2ZXJ0KCkgaXMgY2FsbGVkIGFuZCB0b3RhbFRpbWUoKSBnZXRzIHNldC5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKS4gX3NhdCBzdGFuZHMgZm9yIF9zdGFydEF0VHdlZW5cblxuICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpOyAvLyByYXJlIGVkZ2UgY2FzZSwgbGlrZSBpZiBhIHJlbmRlciBpcyBmb3JjZWQgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiBvZiBhIG5vbi1pbml0dGVkIHR3ZWVuLlxuXG4gICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwICYmIHRUaW1lIDw9IDApIHtcbiAgICAgICAgICAvLyBjaGVjayB0VGltZSBoZXJlIGJlY2F1c2UgaW4gdGhlIGNhc2Ugb2YgYSB5b3lvIHR3ZWVuIHdob3NlIHBsYXloZWFkIGdldHMgcHVzaGVkIHRvIHRoZSBlbmQgbGlrZSB0d2Vlbi5wcm9ncmVzcygxKSwgd2Ugc2hvdWxkIGFsbG93IGl0IHRocm91Z2ggc28gdGhhdCB0aGUgb25Db21wbGV0ZSBnZXRzIGZpcmVkIHByb3Blcmx5LlxuICAgICAgICAgIHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAgIHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVuQmFja3dhcmRzICYmIGR1cikge1xuICAgICAgLy9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuICAgICAgaWYgKCFwcmV2U3RhcnRBdCkge1xuICAgICAgICB0aW1lICYmIChpbW1lZGlhdGVSZW5kZXIgPSBmYWxzZSk7IC8vaW4gcmFyZSBjYXNlcyAobGlrZSBpZiBhIGZyb20oKSB0d2VlbiBydW5zIGFuZCB0aGVuIGlzIGludmFsaWRhdGUoKS1lZCksIGltbWVkaWF0ZVJlbmRlciBjb3VsZCBiZSB0cnVlIGJ1dCB0aGUgaW5pdGlhbCBmb3JjZWQtcmVuZGVyIGdldHMgc2tpcHBlZCwgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIHRoZSByZW5kZXIgaW4gdGhpcyBjb250ZXh0IHdoZW4gdGhlIF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwXG5cbiAgICAgICAgcCA9IF9zZXREZWZhdWx0cyh7XG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICBkYXRhOiBcImlzRnJvbVN0YXJ0XCIsXG4gICAgICAgICAgLy93ZSB0YWcgdGhlIHR3ZWVuIHdpdGggYXMgXCJpc0Zyb21TdGFydFwiIHNvIHRoYXQgaWYgW2luc2lkZSBhIHBsdWdpbl0gd2UgbmVlZCB0byBvbmx5IGRvIHNvbWV0aGluZyBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2Vlbiwgd2UgaGF2ZSBhIHdheSBvZiBpZGVudGlmeWluZyB0aGlzIHR3ZWVuIGFzIG1lcmVseSB0aGUgb25lIHRoYXQncyBzZXR0aW5nIHRoZSBiZWdpbm5pbmcgdmFsdWVzIGZvciBhIFwiZnJvbSgpXCIgdHdlZW4uIEZvciBleGFtcGxlLCBjbGVhclByb3BzIGluIENTU1BsdWdpbiBzaG91bGQgb25seSBnZXQgYXBwbGllZCBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2VlbiBhbmQgd2l0aG91dCB0aGlzIHRhZywgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4uXG4gICAgICAgICAgbGF6eTogaW1tZWRpYXRlUmVuZGVyICYmICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG4gICAgICAgICAgc3RhZ2dlcjogMCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCAvL2Vuc3VyZXMgdGhhdCBuZXN0ZWQgdHdlZW5zIHRoYXQgaGFkIGEgc3RhZ2dlciBhcmUgaGFuZGxlZCBwcm9wZXJseSwgbGlrZSBnc2FwLmZyb20oXCIuY2xhc3NcIiwge3k6IGdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKSwgc3RhZ2dlcjogMC41fSlcblxuICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICBoYXJuZXNzVmFycyAmJiAocFtoYXJuZXNzLnByb3BdID0gaGFybmVzc1ZhcnMpOyAvLyBpbiBjYXNlIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSAuZnJvbSguLi4sIHtjc3M6e319KVxuXG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lIVxuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjsgLy8gdXNlZCBpbiBnbG9iYWxUaW1lKClcblxuICAgICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpO1xuICAgICAgICB0d2Vlbi5felRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmICghaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgX2luaXRUd2Vlbih0d2Vlbi5fc3RhcnRBdCwgX3RpbnlOdW0sIF90aW55TnVtKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0d2Vlbi5fcHQgPSB0d2Vlbi5fcHRDYWNoZSA9IDA7XG4gICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICBfbGF6eUxvb2t1cFtnc0RhdGEuaWRdICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXG4gICAgICBpbmRleCA9IGZ1bGxUYXJnZXRzID09PSB0YXJnZXRzID8gaSA6IGZ1bGxUYXJnZXRzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGNsZWFuVmFycykge1xuICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICBpZiAoYXV0b092ZXJ3cml0ZSAmJiB0d2Vlbi5fcHQpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpOyAvLyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG5cbiAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7IC8vIGlmIHRoZXJlJ3MgYSAwJSBrZXlmcmFtZSwgaXQnbGwgcmVuZGVyIGluIHRoZSBcImJlZm9yZVwiIHN0YXRlIGZvciBhbnkgc3RhZ2dlcmVkL2RlbGF5ZWQgYW5pbWF0aW9ucyB0aHVzIHdoZW4gdGhlIGZvbGxvd2luZyB0d2VlbiBpbml0aWFsaXplcywgaXQnbGwgdXNlIHRoZSBcImJlZm9yZVwiIHN0YXRlIGluc3RlYWQgb2YgdGhlIFwiYWZ0ZXJcIiBzdGF0ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZXMuXG59LFxuICAgIF91cGRhdGVQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3VwZGF0ZVByb3BUd2VlbnModHdlZW4sIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pIHtcbiAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgcHQsXG4gICAgICByb290UFQsXG4gICAgICBsb29rdXAsXG4gICAgICBpO1xuXG4gIGlmICghcHRDYWNoZSkge1xuICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgaSA9IHR3ZWVuLl90YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHB0ICYmIHB0LmQgJiYgcHQuZC5fcHQpIHtcbiAgICAgICAgLy8gaXQncyBhIHBsdWdpbiwgc28gZmluZCB0aGUgbmVzdGVkIFByb3BUd2VlblxuICAgICAgICBwdCA9IHB0LmQuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAvLyBcImZwXCIgaXMgZnVuY3Rpb25QYXJhbSBmb3IgdGhpbmdzIGxpa2Ugc2V0dGluZyBDU1MgdmFyaWFibGVzIHdoaWNoIHJlcXVpcmUgLnNldFByb3BlcnR5KFwiLS12YXItbmFtZVwiLCB2YWx1ZSlcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcHQpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHByb3BlcnR5LCBzbyB3ZSBtdXN0IEZPUkNFIG9uZSB0byBiZSBjcmVhdGVkIGFuZCBkaXRjaCBvdXQgb2YgdGhpc1xuICAgICAgICAvLyBpZiB0aGUgdHdlZW4gaGFzIG90aGVyIHByb3BlcnRpZXMgdGhhdCBhbHJlYWR5IHJlbmRlcmVkIGF0IG5ldyBwb3NpdGlvbnMsIHdlJ2Qgbm9ybWFsbHkgaGF2ZSB0byByZXdpbmQgdG8gcHV0IHRoZW0gYmFjayBsaWtlIHR3ZWVuLnJlbmRlcigwLCB0cnVlKSBiZWZvcmUgZm9yY2luZyBhbiBfaW5pdFR3ZWVuKCksIGJ1dCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBlZGdlIGNhc2UgbGlrZSB0d2VlbmluZyBhIHRpbWVsaW5lJ3MgcHJvZ3Jlc3Mgd291bGQgdHJpZ2dlciBvblVwZGF0ZXMgdG8gZmlyZSB3aGljaCBjb3VsZCBtb3ZlIG90aGVyIHRoaW5ncyBhcm91bmQuIEl0J3MgYmV0dGVyIHRvIGp1c3QgaW5mb3JtIHVzZXJzIHRoYXQgLnJlc2V0VG8oKSBzaG91bGQgT05MWSBiZSB1c2VkIGZvciB0d2VlbnMgdGhhdCBhbHJlYWR5IGhhdmUgdGhhdCBwcm9wZXJ0eS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBnc2FwLnRvKC4uLnsgeTogMCB9KSBhbmQgdGhlbiB0d2Vlbi5yZXN0VG8oXCJ4XCIsIDIwMCkgZm9yIGV4YW1wbGUuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxOyAvLyBvdGhlcndpc2UsIHdoZW4gd2UgX2FkZFByb3BUd2VlbigpIGFuZCBpdCBmaW5kcyBubyBjaGFuZ2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMsIGl0IHNraXBzIGNyZWF0aW5nIGEgUHJvcFR3ZWVuIChmb3IgZWZmaWNpZW5jeS4uLndoeSB0d2VlbiB3aGVuIHRoZXJlJ3Mgbm8gZGlmZmVyZW5jZT8pIGJ1dCBpbiB0aGlzIGNhc2Ugd2UgTkVFRCB0aGF0IFByb3BUd2VlbiBjcmVhdGVkIHNvIHdlIGNhbiBlZGl0IGl0LlxuXG4gICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMDtcbiAgICAgICAgcmV0dXJuIHNraXBSZWN1cnNpb24gPyBfd2Fybihwcm9wZXJ0eSArIFwiIG5vdCBlbGlnaWJsZSBmb3IgcmVzZXRcIikgOiAxOyAvLyBpZiBzb21lb25lIHRyaWVzIHRvIGRvIGEgcXVpY2tUbygpIG9uIGEgc3BlY2lhbCBwcm9wZXJ0eSBsaWtlIGJvcmRlclJhZGl1cyB3aGljaCBtdXN0IGdldCBzcGxpdCBpbnRvIDQgZGlmZmVyZW50IHByb3BlcnRpZXMsIHRoYXQncyBub3QgZWxpZ2libGUgZm9yIC5yZXNldFRvKCkuXG4gICAgICB9XG5cbiAgICAgIHB0Q2FjaGUucHVzaChwdCk7XG4gICAgfVxuICB9XG5cbiAgaSA9IHB0Q2FjaGUubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgIHB0ID0gcm9vdFBULl9wdCB8fCByb290UFQ7IC8vIGNvbXBsZXggdmFsdWVzIG1heSBoYXZlIG5lc3RlZCBQcm9wVHdlZW5zLiBXZSBvbmx5IGFjY29tbW9kYXRlIHRoZSBGSVJTVCB2YWx1ZS5cblxuICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgcHQuYyA9IHZhbHVlIC0gcHQucztcbiAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpOyAvLyBtYWlubHkgZm9yIENTU1BsdWdpbiAoZW5kIHZhbHVlKVxuXG4gICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTsgLy8gKGJlZ2lubmluZyB2YWx1ZSlcbiAgfVxufSxcbiAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgcHJvcGVydHlBbGlhc2VzID0gaGFybmVzcyAmJiBoYXJuZXNzLmFsaWFzZXMsXG4gICAgICBjb3B5LFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBhbGlhc2VzO1xuXG4gIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICBmb3IgKHAgaW4gcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICBpID0gYWxpYXNlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vIHBhcnNlcyBtdWx0aXBsZSBmb3JtYXRzLCBsaWtlIHtcIjAlXCI6IHt4OiAxMDB9LCB7XCI1MCVcIjoge3g6IC0yMH19IGFuZCB7IHg6IHtcIjAlXCI6IDEwMCwgXCI1MCVcIjogLTIwfSB9LCBhbmQgYW4gXCJlYXNlXCIgY2FuIGJlIHNldCBvbiBhbnkgb2JqZWN0LiBXZSBwb3B1bGF0ZSBhbiBcImFsbFByb3BzXCIgb2JqZWN0IHdpdGggYW4gQXJyYXkgZm9yIGVhY2ggcHJvcGVydHksIGxpa2Uge3g6IFt7fSwge31dLCB5Olt7fSwge31dfSB3aXRoIGRhdGEgZm9yIGVhY2ggcHJvcGVydHkgdHdlZW4uIFRoZSBvYmplY3RzIGhhdmUgYSBcInRcIiAodGltZSksIFwidlwiLCAodmFsdWUpLCBhbmQgXCJlXCIgKGVhc2UpIHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBwaWVjZSB0b2dldGhlciBhIHRpbWVsaW5lIGxhdGVyLlxuX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICBwLFxuICAgICAgYTtcblxuICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgIGEgPSBhbGxQcm9wc1twcm9wXSB8fCAoYWxsUHJvcHNbcHJvcF0gPSBbXSk7IC8vIHQgPSB0aW1lIChvdXQgb2YgMTAwKSwgdiA9IHZhbHVlLCBlID0gZWFzZVxuXG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgdDogaSAvIChvYmoubGVuZ3RoIC0gMSkgKiAxMDAsXG4gICAgICAgIHY6IHZhbHVlLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgdDogcGFyc2VGbG9hdChwcm9wKSxcbiAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuX2ZvckVhY2hOYW1lKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dzYXAuY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fSxcbiAgICAgICAgdGFyZ2V0czogcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHBhcnNlZFRhcmdldHNcbiAgICAgIH0pOyAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSB0YXJnZXRzIGJlY2F1c2UgZm9yIHN0YWdnZXJzIGFuZCBrZXlmcmFtZXMsIHdlIGVuZCB1cCBjcmVhdGluZyBhbiBpbmRpdmlkdWFsIHR3ZWVuIGZvciBlYWNoIGJ1dCBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgbmVlZCB0byBrbm93IHRoZSBpbmRleCBhbmQgdGhlIHdob2xlIEFycmF5IG9mIHRhcmdldHMuXG5cbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciAmJiBkaXN0cmlidXRlKHN0YWdnZXIpO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3N0YWdnZXJQcm9wc1RvU2tpcCk7XG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyA/IHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgOiAwKTtcbiAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9pbmhlcml0RGVmYXVsdHMoX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGwuX2Vhc2UgPSBfcGFyc2VFYXNlKGtleWZyYW1lcy5lYXNlIHx8IHZhcnMuZWFzZSB8fCBcIm5vbmVcIik7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBrZixcbiAgICAgICAgICAgIHY7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRsLmR1cmF0aW9uKCk7IC8vIHRvIGVuc3VyZSB0bC5fZHVyIGlzIGNhY2hlZCBiZWNhdXNlIHdlIHRhcCBpbnRvIGl0IGZvciBwZXJmb3JtYW5jZSBwdXJwb3NlcyBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEudCAtIGIudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICBlYXNlOiBrZi5lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHZbcF0gPSBrZi52O1xuICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC0gdGwuZHVyYXRpb24oKVxuICAgICAgICAgIH0pOyAvLyBpbiBjYXNlIGtleWZyYW1lcyBkaWRuJ3QgZ28gdG8gMTAwJVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lKSAmJiBfaXNOb3RGYWxzZShpbW1lZGlhdGVSZW5kZXIpICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMykpICYmIHBhcmVudC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblxuICAgICAgX3RoaXMzLnJlbmRlcihNYXRoLm1heCgwLCAtZGVsYXkpIHx8IDApOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblxuICAgIH1cblxuICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICBpc05lZ2F0aXZlID0gdG90YWxUaW1lIDwgMCxcbiAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPiB0RHVyIC0gX3RpbnlOdW0gJiYgIWlzTmVnYXRpdmUgPyB0RHVyIDogdG90YWxUaW1lIDwgX3RpbnlOdW0gPyAwIDogdG90YWxUaW1lLFxuICAgICAgICB0aW1lLFxuICAgICAgICBwdCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICBpc1lveW8sXG4gICAgICAgIHJhdGlvLFxuICAgICAgICB0aW1lbGluZSxcbiAgICAgICAgeW95b0Vhc2U7XG5cbiAgICBpZiAoIWR1cikge1xuICAgICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICB9IGVsc2UgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCAhdG90YWxUaW1lIHx8IGZvcmNlIHx8ICF0aGlzLl9pbml0dGVkICYmIHRoaXMuX3RUaW1lIHx8IHRoaXMuX3N0YXJ0QXQgJiYgdGhpcy5felRpbWUgPCAwICE9PSBpc05lZ2F0aXZlIHx8IHRoaXMuX2xhenkpIHtcbiAgICAgIC8vIHRoaXMgc2Vuc2VzIGlmIHdlJ3JlIGNyb3NzaW5nIG92ZXIgdGhlIHN0YXJ0IHRpbWUsIGluIHdoaWNoIGNhc2Ugd2UgbXVzdCByZWNvcmQgX3pUaW1lIGFuZCBmb3JjZSB0aGUgcmVuZGVyLCBidXQgd2UgZG8gaXQgaW4gdGhpcyBsZW5ndGh5IGNvbmRpdGlvbmFsIHdheSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAodXN1YWxseSB3ZSBjYW4gc2tpcCB0aGUgY2FsY3VsYXRpb25zKTogdGhpcy5faW5pdHRlZCAmJiAodGhpcy5felRpbWUgPCAwKSAhPT0gKHRvdGFsVGltZSA8IDApXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICB0aW1lbGluZSA9IHRoaXMudGltZWxpbmU7XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIGlzTmVnYXRpdmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2SXRlcmF0aW9uID0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pOyAvLyBmdWxsIGRlY2ltYWwgdmVyc2lvbiBvZiBpdGVyYXRpb25zLCBub3QgdGhlIHByZXZpb3VzIGl0ZXJhdGlvbiAod2UncmUgcmV1c2luZyBwcmV2SXRlcmF0aW9uIHZhcmlhYmxlIGZvciBlZmZpY2llbmN5KVxuXG4gICAgICAgICAgaXRlcmF0aW9uID0gfn5wcmV2SXRlcmF0aW9uO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRpbWUgPiBkdXIpIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNZb3lvID0gdGhpcy5feW95byAmJiBpdGVyYXRpb24gJiAxO1xuXG4gICAgICAgIGlmIChpc1lveW8pIHtcbiAgICAgICAgICB5b3lvRWFzZSA9IHRoaXMuX3lFYXNlO1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRpbWUgPT09IHByZXZUaW1lICYmICFmb3JjZSAmJiB0aGlzLl9pbml0dGVkICYmIGl0ZXJhdGlvbiA9PT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jayAmJiB0aW1lICE9PSBjeWNsZUR1cmF0aW9uICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMuX3RpbWUgd2lsbCA9PT0gY3ljbGVEdXJhdGlvbiB3aGVuIHdlIHJlbmRlciBhdCBFWEFDVExZIHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLiBXaXRob3V0IHRoaXMgY29uZGl0aW9uLCBpdCdkIG9mdGVuIGRvIHRoZSByZXBlYXRSZWZyZXNoIHJlbmRlciBUV0lDRSAoYWdhaW4gb24gdGhlIHZlcnkgbmV4dCB0aWNrKS5cbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiAhKGZvcmNlICYmIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy4gQnV0IHdlIGFsc28gZG9uJ3Qgd2FudCB0byBkdW1wIGlmIHdlJ3JlIGRvaW5nIGEgcmVwZWF0UmVmcmVzaCByZW5kZXIhXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIXByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgc2tpcFJlY3Vyc2lvbikge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgMSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcy5zY3JvbGxUcmlnZ2VyICYmIHRoaXMuc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2NvbnRleHRJRCA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICByZXR1cm4gYy5hZGQobnVsbCwgZnVuYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaWQgPSBfY29udGV4dElEKys7IC8vIHRvIHdvcmsgYXJvdW5kIGlzc3VlcyB0aGF0IGZyYW1ld29ya3MgbGlrZSBWdWUgY2F1c2UgYnkgbWFraW5nIHRoaW5ncyBpbnRvIFByb3hpZXMgd2hpY2ggbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGRvIHNvbWV0aGluZyBsaWtlIF9tZWRpYS5pbmRleE9mKHRoaXMpIGJlY2F1c2UgXCJ0aGlzXCIgd291bGQgbm8gbG9uZ2VyIHJlZmVyIHRvIHRoZSBDb250ZXh0IGluc3RhbmNlIGl0c2VsZiAtIGl0J2QgcmVmZXIgdG8gYSBQcm94eSEgV2UgbmVlZGVkIGEgd2F5IHRvIGlkZW50aWZ5IHRoZSBjb250ZXh0IHVuaXF1ZWx5XG5cbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiBpZiB3ZSBuZWVkIHRoZSBhYmlsaXR5IHRvIGFkZCgpIGFuIGFuaW1hdGlvbiB0byBhIGNvbnRleHQgYW5kIGZvciB3aGF0ZXZlciByZWFzb24gY2Fubm90IGNyZWF0ZSB0aGF0IGFuaW1hdGlvbiBpbnNpZGUgb2YgYSBjb250ZXh0LmFkZCgoKSA9PiB7Li4ufSkgZnVuY3Rpb24uXG4gICAgLy8gaWYgKG5hbWUgJiYgX2lzRnVuY3Rpb24obmFtZS5yZXZlcnQpKSB7XG4gICAgLy8gXHR0aGlzLmRhdGEucHVzaChuYW1lKTtcbiAgICAvLyBcdHJldHVybiAobmFtZS5fY3R4ID0gdGhpcyk7XG4gICAgLy8gfVxuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICByZXR1cm4gc2VsZi5hZGQobnVsbCwgZnVuYyk7XG4gICAgfSkgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0d2VlbnMgPSBfdGhpczQuZ2V0VHdlZW5zKCksXG4gICAgICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodC5kYXRhID09PSBcImlzRmxpcFwiKSB7XG4gICAgICAgICAgICB0LnJldmVydCgpO1xuICAgICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR3ZWVucy5zcGxpY2UodHdlZW5zLmluZGV4T2YodHdlZW4pLCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuXG4gICAgICAgIHR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZzogdC5fZHVyIHx8IHQuX2RlbGF5IHx8IHQuX3NhdCAmJiAhdC5fc2F0LnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gdC5nbG9iYWxUaW1lKDApIDogLUluZmluaXR5LFxuICAgICAgICAgICAgdDogdFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC1JbmZpbml0eTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgIH0pOyAvLyBub3RlOiBhbGwgb2YgdGhlIF9zdGFydEF0IHR3ZWVucyBzaG91bGQgYmUgcmV2ZXJ0ZWQgaW4gcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBsb29wIGJhY2t3YXJkcyBzbyB0aGF0LCBmb3IgZXhhbXBsZSwgU3BsaXRUZXh0cyB0aGF0IHdlcmUgY3JlYXRlZCBsYXRlciBvbiB0aGUgc2FtZSBlbGVtZW50IGdldCByZXZlcnRlZCBmaXJzdFxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgICAgICAgIGlmICh0LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgICAgICAgICAgdC5zY3JvbGxUcmlnZ2VyICYmIHQuc2Nyb2xsVHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgICAgICAgICAgdC5raWxsKCk7IC8vIGRvbid0IHJldmVydCgpIHRoZSB0aW1lbGluZSBiZWNhdXNlIHRoYXQncyBkdXBsaWNhdGluZyBlZmZvcnRzIHNpbmNlIHdlIGFscmVhZHkgcmV2ZXJ0ZWQgYWxsIHRoZSB0d2VlbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgISh0IGluc3RhbmNlb2YgVHdlZW4pICYmIHQucmV2ZXJ0ICYmIHQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0Ll9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzNC5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHByZXZpb3VzbHksIHdlIGNoZWNrZWQgX21lZGlhLmluZGV4T2YodGhpcyksIGJ1dCBzb21lIGZyYW1ld29ya3MgbGlrZSBWdWUgZW5mb3JjZSBQcm94eSBvYmplY3RzIHRoYXQgbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGdldCB0aGUgcHJvcGVyIHJlc3VsdCB0aGF0IHdheSwgc28gd2UgbXVzdCB1c2UgYSB1bmlxdWUgSUQgbnVtYmVyIGluc3RlYWQuXG4gICAgICAgIF9tZWRpYVtpXS5pZCA9PT0gdGhpcy5pZCAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBraWxsV2l0aENsZWFudXAoKSB7XG4gIC8vIFx0dGhpcy5raWxsKCk7XG4gIC8vIFx0dGhpcy5fci5mb3JFYWNoKGYgPT4gZihmYWxzZSwgdGhpcykpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICBfY29udGV4dCAmJiBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgX2lzT2JqZWN0KGNvbmRpdGlvbnMpIHx8IChjb25kaXRpb25zID0ge1xuICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgIH0pO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoMCwgc2NvcGUgfHwgdGhpcy5zY29wZSksXG4gICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgbXEsXG4gICAgICAgIHAsXG4gICAgICAgIGFjdGl2ZTtcbiAgICBfY29udGV4dCAmJiAhY29udGV4dC5zZWxlY3RvciAmJiAoY29udGV4dC5zZWxlY3RvciA9IF9jb250ZXh0LnNlbGVjdG9yKTsgLy8gaW4gY2FzZSBhIGNvbnRleHQgaXMgY3JlYXRlZCBpbnNpZGUgYSBjb250ZXh0LiBMaWtlIGEgZ3NhcC5tYXRjaE1lZGlhKCkgdGhhdCdzIGluc2lkZSBhIHNjb3BlZCBnc2FwLmNvbnRleHQoKVxuXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0LCBmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGNvbnRleHQuYWRkKG51bGwsIGYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHJlZnJlc2goKSB7XG4gIC8vIFx0bGV0IHRpbWUgPSBfbGFzdE1lZGlhVGltZSxcbiAgLy8gXHRcdG1lZGlhID0gX21lZGlhO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gLTE7XG4gIC8vIFx0X21lZGlhID0gdGhpcy5jb250ZXh0cztcbiAgLy8gXHRfb25NZWRpYUNoYW5nZSgpO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gdGltZTtcbiAgLy8gXHRfbWVkaWEgPSBtZWRpYTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF0Y2hNZWRpYTtcbn0oKTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBxdWlja1RvOiBmdW5jdGlvbiBxdWlja1RvKHRhcmdldCwgcHJvcGVydHksIHZhcnMpIHtcbiAgICB2YXIgX3NldERlZmF1bHRzMjtcblxuICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfc2V0RGVmYXVsdHMoKF9zZXREZWZhdWx0czIgPSB7fSwgX3NldERlZmF1bHRzMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9zZXREZWZhdWx0czIucGF1c2VkID0gdHJ1ZSwgX3NldERlZmF1bHRzMi5zdGFnZ2VyID0gMCwgX3NldERlZmF1bHRzMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmModmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgfTtcblxuICAgIGZ1bmMudHdlZW4gPSB0d2VlbjtcbiAgICByZXR1cm4gZnVuYztcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHJldHVybiBmdW5jID8gbmV3IENvbnRleHQoZnVuYywgc2NvcGUpIDogX2NvbnRleHQ7XG4gIH0sXG4gIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoTWVkaWEoc2NvcGUpO1xuICB9LFxuICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgIGNvbmRbcF0gPSBmYWxzZTtcbiAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgcmV2ZXJ0aW5nOiBmdW5jdGlvbiByZXZlcnRpbmcoKSB7XG4gICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICB9LFxuICAgIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQodG9BZGQpIHtcbiAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgIHRvQWRkLl9jdHggPSBfY29udGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgIH0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBoZWFkbGVzczogMSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0LCB2O1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgcHQub3AgPSBwO1xuICAgICAgcHQuYiA9IHY7IC8vIHJlY29yZCB0aGUgYmVnaW5uaW5nIHZhbHVlIHNvIHdlIGNhbiByZXZlcnQoKVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgX3JldmVydGluZyA/IHB0LnNldChwdC50LCBwdC5wLCBwdC5iLCBwdCkgOiBwdC5yKHJhdGlvLCBwdC5kKTsgLy8gaWYgcmV2ZXJ0aW5nLCBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbCAocHQuYilcblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBoZWFkbGVzczogMSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMy4wXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIi8qIVxuICogcGF0aHMgMy4xMy4wXG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX3N2Z1BhdGhFeHAgPSAvW2FjaGxtcXN0dnpdfCgtP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuICAgIF9udW1iZXJzRXhwID0gLyg/OigtKT9cXGQqXFwuP1xcZCooPzplW1xcLStdP1xcZCspPylbMC05XS9pZyxcbiAgICBfc2NpZW50aWZpYyA9IC9bXFwrXFwtXT9cXGQqXFwuP1xcZCtlW1xcK1xcLV0/XFxkKy9pZyxcbiAgICBfc2VsZWN0b3JFeHAgPSAvKF5bI1xcLl1bYS16XXxbYS15XVthLXpdKS9pLFxuICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfbGFyZ2VOdW0gPSAxZTgsXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX3RlbXAgPSB7fSxcbiAgICBfdGVtcDIgPSB7fSxcbiAgICBfcm91bmRpbmdOdW0gPSAxZTUsXG4gICAgX3dyYXBQcm9ncmVzcyA9IGZ1bmN0aW9uIF93cmFwUHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQoKHByb2dyZXNzICsgX2xhcmdlTnVtKSAlIDEgKiBfcm91bmRpbmdOdW0pIC8gX3JvdW5kaW5nTnVtIHx8IChwcm9ncmVzcyA8IDAgPyAwIDogMSk7XG59LFxuICAgIC8vaWYgcHJvZ3Jlc3MgbGFuZHMgb24gMSwgdGhlICUgd2lsbCBtYWtlIGl0IDAgd2hpY2ggaXMgd2h5IHdlIHx8IDEsIGJ1dCBub3QgaWYgaXQncyBuZWdhdGl2ZSBiZWNhdXNlIGl0IG1ha2VzIG1vcmUgc2Vuc2UgZm9yIG1vdGlvbiB0byBlbmQgYXQgMCBpbiB0aGF0IGNhc2UuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBfcm91bmRpbmdOdW0pIC8gX3JvdW5kaW5nTnVtIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWUxMCkgLyAxZTEwIHx8IDA7XG59LFxuICAgIF9zcGxpdFNlZ21lbnQgPSBmdW5jdGlvbiBfc3BsaXRTZWdtZW50KHJhd1BhdGgsIHNlZ0luZGV4LCBpLCB0KSB7XG4gIHZhciBzZWdtZW50ID0gcmF3UGF0aFtzZWdJbmRleF0sXG4gICAgICBzaGlmdCA9IHQgPT09IDEgPyA2IDogc3ViZGl2aWRlU2VnbWVudChzZWdtZW50LCBpLCB0KTtcblxuICBpZiAoKHNoaWZ0IHx8ICF0KSAmJiBzaGlmdCArIGkgKyAyIDwgc2VnbWVudC5sZW5ndGgpIHtcbiAgICByYXdQYXRoLnNwbGljZShzZWdJbmRleCwgMCwgc2VnbWVudC5zbGljZSgwLCBpICsgc2hpZnQgKyAyKSk7XG4gICAgc2VnbWVudC5zcGxpY2UoMCwgaSArIHNoaWZ0KTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfZ2V0U2FtcGxlSW5kZXggPSBmdW5jdGlvbiBfZ2V0U2FtcGxlSW5kZXgoc2FtcGxlcywgbGVuZ3RoLCBwcm9ncmVzcykge1xuICAvLyBzbGlnaHRseSBzbG93ZXIgd2F5IHRoYW4gZG9pbmcgdGhpcyAod2hlbiB0aGVyZSdzIG5vIGxvb2t1cCk6IHNlZ21lbnQubG9va3VwW3Byb2dyZXNzIDwgMSA/IH5+KGxlbmd0aCAvIHNlZ21lbnQubWluTGVuZ3RoKSA6IHNlZ21lbnQubG9va3VwLmxlbmd0aCAtIDFdIHx8IDA7XG4gIHZhciBsID0gc2FtcGxlcy5sZW5ndGgsXG4gICAgICBpID0gfn4ocHJvZ3Jlc3MgKiBsKTtcblxuICBpZiAoc2FtcGxlc1tpXSA+IGxlbmd0aCkge1xuICAgIHdoaWxlICgtLWkgJiYgc2FtcGxlc1tpXSA+IGxlbmd0aCkge31cblxuICAgIGkgPCAwICYmIChpID0gMCk7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHNhbXBsZXNbKytpXSA8IGxlbmd0aCAmJiBpIDwgbCkge31cbiAgfVxuXG4gIHJldHVybiBpIDwgbCA/IGkgOiBsIC0gMTtcbn0sXG4gICAgX3JldmVyc2VSYXdQYXRoID0gZnVuY3Rpb24gX3JldmVyc2VSYXdQYXRoKHJhd1BhdGgsIHNraXBPdXRlcikge1xuICB2YXIgaSA9IHJhd1BhdGgubGVuZ3RoO1xuICBza2lwT3V0ZXIgfHwgcmF3UGF0aC5yZXZlcnNlKCk7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJhd1BhdGhbaV0ucmV2ZXJzZWQgfHwgcmV2ZXJzZVNlZ21lbnQocmF3UGF0aFtpXSk7XG4gIH1cbn0sXG4gICAgX2NvcHlNZXRhRGF0YSA9IGZ1bmN0aW9uIF9jb3B5TWV0YURhdGEoc291cmNlLCBjb3B5KSB7XG4gIGNvcHkudG90YWxMZW5ndGggPSBzb3VyY2UudG90YWxMZW5ndGg7XG5cbiAgaWYgKHNvdXJjZS5zYW1wbGVzKSB7XG4gICAgLy9zZWdtZW50XG4gICAgY29weS5zYW1wbGVzID0gc291cmNlLnNhbXBsZXMuc2xpY2UoMCk7XG4gICAgY29weS5sb29rdXAgPSBzb3VyY2UubG9va3VwLnNsaWNlKDApO1xuICAgIGNvcHkubWluTGVuZ3RoID0gc291cmNlLm1pbkxlbmd0aDtcbiAgICBjb3B5LnJlc29sdXRpb24gPSBzb3VyY2UucmVzb2x1dGlvbjtcbiAgfSBlbHNlIGlmIChzb3VyY2UudG90YWxQb2ludHMpIHtcbiAgICAvL3Jhd1BhdGhcbiAgICBjb3B5LnRvdGFsUG9pbnRzID0gc291cmNlLnRvdGFsUG9pbnRzO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vcHVzaGVzIGEgbmV3IHNlZ21lbnQgaW50byBhIHJhd1BhdGgsIGJ1dCBpZiBpdHMgc3RhcnRpbmcgdmFsdWVzIG1hdGNoIHRoZSBlbmRpbmcgdmFsdWVzIG9mIHRoZSBsYXN0IHNlZ21lbnQsIGl0J2xsIG1lcmdlIGl0IGludG8gdGhhdCBzYW1lIHNlZ21lbnQgKHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlZ21lbnRzKVxuX2FwcGVuZE9yTWVyZ2UgPSBmdW5jdGlvbiBfYXBwZW5kT3JNZXJnZShyYXdQYXRoLCBzZWdtZW50KSB7XG4gIHZhciBpbmRleCA9IHJhd1BhdGgubGVuZ3RoLFxuICAgICAgcHJldlNlZyA9IHJhd1BhdGhbaW5kZXggLSAxXSB8fCBbXSxcbiAgICAgIGwgPSBwcmV2U2VnLmxlbmd0aDtcblxuICBpZiAoaW5kZXggJiYgc2VnbWVudFswXSA9PT0gcHJldlNlZ1tsIC0gMl0gJiYgc2VnbWVudFsxXSA9PT0gcHJldlNlZ1tsIC0gMV0pIHtcbiAgICBzZWdtZW50ID0gcHJldlNlZy5jb25jYXQoc2VnbWVudC5zbGljZSgyKSk7XG4gICAgaW5kZXgtLTtcbiAgfVxuXG4gIHJhd1BhdGhbaW5kZXhdID0gc2VnbWVudDtcbn0sXG4gICAgX2Jlc3REaXN0YW5jZTtcbi8qIFRFUk1JTk9MT0dZXG4gLSBSYXdQYXRoIC0gYW4gYXJyYXkgb2YgYXJyYXlzLCBvbmUgZm9yIGVhY2ggU2VnbWVudC4gQSBzaW5nbGUgUmF3UGF0aCBjb3VsZCBoYXZlIG11bHRpcGxlIFwiTVwiIGNvbW1hbmRzLCBkZWZpbmluZyBTZWdtZW50cyAocGF0aHMgYXJlbid0IGFsd2F5cyBjb25uZWN0ZWQpLlxuIC0gU2VnbWVudCAtIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBzZXF1ZW5jZSBvZiBDdWJpYyBCZXppZXIgY29vcmRpbmF0ZXMgaW4gYWx0ZXJuYXRpbmcgeCwgeSwgeCwgeSBmb3JtYXQuIFN0YXJ0aW5nIGFuY2hvciwgdGhlbiBjb250cm9sIHBvaW50IDEsIGNvbnRyb2wgcG9pbnQgMiwgYW5kIGVuZGluZyBhbmNob3IsIHRoZW4gdGhlIG5leHQgY29udHJvbCBwb2ludCAxLCBjb250cm9sIHBvaW50IDIsIGFuY2hvciwgZXRjLiBVc2VzIGxlc3MgbWVtb3J5IHRoYW4gYW4gYXJyYXkgd2l0aCBhIGJ1bmNoIG9mIHt4LCB5fSBwb2ludHMuXG4gLSBCZXppZXIgLSBhIHNpbmdsZSBjdWJpYyBCZXppZXIgd2l0aCBhIHN0YXJ0aW5nIGFuY2hvciwgdHdvIGNvbnRyb2wgcG9pbnRzLCBhbmQgYW4gZW5kaW5nIGFuY2hvci5cbiAtIHRoZSB2YXJpYWJsZSBcInRcIiBpcyB0eXBpY2FsbHkgdGhlIHBvc2l0aW9uIGFsb25nIGFuIGluZGl2aWR1YWwgQmV6aWVyIHBhdGggKHRpbWUpIGFuZCBpdCdzIE5PVCBsaW5lYXIsIG1lYW5pbmcgaXQgY291bGQgYWNjZWxlcmF0ZS9kZWNlbGVyYXRlIGJhc2VkIG9uIHRoZSBjb250cm9sIHBvaW50cyB3aGVyZWFzIHRoZSBcInBcIiBvciBcInByb2dyZXNzXCIgdmFsdWUgaXMgbGluZWFybHkgbWFwcGVkIHRvIHRoZSB3aG9sZSBwYXRoLCBzbyBpdCBzaG91bGRuJ3QgcmVhbGx5IGFjY2VsZXJhdGUvZGVjZWxlcmF0ZSBiYXNlZCBvbiBjb250cm9sIHBvaW50cy4gU28gYSBwcm9ncmVzcyBvZiAwLjIgd291bGQgYmUgYWxtb3N0IGV4YWN0bHkgMjAlIGFsb25nIHRoZSBwYXRoLiBcInRcIiBpcyBPTkxZIGluIGFuIGluZGl2aWR1YWwgQmV6aWVyIHBpZWNlLlxuICovXG4vL2FjY2VwdHMgYmFzaWMgc2VsZWN0b3IgdGV4dCwgYSBwYXRoIGluc3RhbmNlLCBhIFJhd1BhdGggaW5zdGFuY2UsIG9yIGEgU2VnbWVudCBhbmQgcmV0dXJucyBhIFJhd1BhdGggKG1ha2VzIGl0IGVhc3kgdG8gaG9tb2dlbml6ZSB0aGluZ3MpLiBJZiBhbiBlbGVtZW50IG9yIHNlbGVjdG9yIHRleHQgaXMgcGFzc2VkIGluLCBpdCdsbCBhbHNvIGNhY2hlIHRoZSB2YWx1ZSBzbyB0aGF0IGlmIGl0J3MgcXVlcmllZCBhZ2FpbiwgaXQnbGwganVzdCB0YWtlIHRoZSBwYXRoIGRhdGEgZnJvbSB0aGVyZSBpbnN0ZWFkIG9mIHBhcnNpbmcgaXQgYWxsIG92ZXIgYWdhaW4gKGFzIGxvbmcgYXMgdGhlIHBhdGggZGF0YSBpdHNlbGYgaGFzbid0IGNoYW5nZWQgLSBpdCdsbCBjaGVjaykuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhd1BhdGgodmFsdWUpIHtcbiAgdmFsdWUgPSBfaXNTdHJpbmcodmFsdWUpICYmIF9zZWxlY3RvckV4cC50ZXN0KHZhbHVlKSA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpIHx8IHZhbHVlIDogdmFsdWU7XG4gIHZhciBlID0gdmFsdWUuZ2V0QXR0cmlidXRlID8gdmFsdWUgOiAwLFxuICAgICAgcmF3UGF0aDtcblxuICBpZiAoZSAmJiAodmFsdWUgPSB2YWx1ZS5nZXRBdHRyaWJ1dGUoXCJkXCIpKSkge1xuICAgIC8vaW1wbGVtZW50cyBjYWNoaW5nXG4gICAgaWYgKCFlLl9nc1BhdGgpIHtcbiAgICAgIGUuX2dzUGF0aCA9IHt9O1xuICAgIH1cblxuICAgIHJhd1BhdGggPSBlLl9nc1BhdGhbdmFsdWVdO1xuICAgIHJldHVybiByYXdQYXRoICYmICFyYXdQYXRoLl9kaXJ0eSA/IHJhd1BhdGggOiBlLl9nc1BhdGhbdmFsdWVdID0gc3RyaW5nVG9SYXdQYXRoKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiAhdmFsdWUgPyBjb25zb2xlLndhcm4oXCJFeHBlY3RpbmcgYSA8cGF0aD4gZWxlbWVudCBvciBhbiBTVkcgcGF0aCBkYXRhIHN0cmluZ1wiKSA6IF9pc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb1Jhd1BhdGgodmFsdWUpIDogX2lzTnVtYmVyKHZhbHVlWzBdKSA/IFt2YWx1ZV0gOiB2YWx1ZTtcbn0gLy9jb3BpZXMgYSBSYXdQYXRoIFdJVEhPVVQgdGhlIGxlbmd0aCBtZXRhIGRhdGEgKGZvciBzcGVlZClcblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlSYXdQYXRoKHJhd1BhdGgpIHtcbiAgdmFyIGEgPSBbXSxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgcmF3UGF0aC5sZW5ndGg7IGkrKykge1xuICAgIGFbaV0gPSBfY29weU1ldGFEYXRhKHJhd1BhdGhbaV0sIHJhd1BhdGhbaV0uc2xpY2UoMCkpO1xuICB9XG5cbiAgcmV0dXJuIF9jb3B5TWV0YURhdGEocmF3UGF0aCwgYSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJzZVNlZ21lbnQoc2VnbWVudCkge1xuICB2YXIgaSA9IDAsXG4gICAgICB5O1xuICBzZWdtZW50LnJldmVyc2UoKTsgLy90aGlzIHdpbGwgaW52ZXJ0IHRoZSBvcmRlciB5LCB4LCB5LCB4IHNvIHdlIG11c3QgZmxpcCBpdCBiYWNrLlxuXG4gIGZvciAoOyBpIDwgc2VnbWVudC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHkgPSBzZWdtZW50W2ldO1xuICAgIHNlZ21lbnRbaV0gPSBzZWdtZW50W2kgKyAxXTtcbiAgICBzZWdtZW50W2kgKyAxXSA9IHk7XG4gIH1cblxuICBzZWdtZW50LnJldmVyc2VkID0gIXNlZ21lbnQucmV2ZXJzZWQ7XG59XG5cbnZhciBfY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIF9jcmVhdGVQYXRoKGUsIGlnbm9yZSkge1xuICB2YXIgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKSxcbiAgICAgIGF0dHIgPSBbXS5zbGljZS5jYWxsKGUuYXR0cmlidXRlcyksXG4gICAgICBpID0gYXR0ci5sZW5ndGgsXG4gICAgICBuYW1lO1xuICBpZ25vcmUgPSBcIixcIiArIGlnbm9yZSArIFwiLFwiO1xuXG4gIHdoaWxlICgtLWkgPiAtMSkge1xuICAgIG5hbWUgPSBhdHRyW2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7IC8vaW4gTWljcm9zb2Z0IEVkZ2UsIGlmIHlvdSBkb24ndCBzZXQgdGhlIGF0dHJpYnV0ZSB3aXRoIGEgbG93ZXJjYXNlIG5hbWUsIGl0IGRvZXNuJ3QgcmVuZGVyIGNvcnJlY3RseSEgU3VwZXIgd2VpcmQuXG5cbiAgICBpZiAoaWdub3JlLmluZGV4T2YoXCIsXCIgKyBuYW1lICsgXCIsXCIpIDwgMCkge1xuICAgICAgcGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBuYW1lLCBhdHRyW2ldLm5vZGVWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59LFxuICAgIF90eXBlQXR0cnMgPSB7XG4gIHJlY3Q6IFwicngscnkseCx5LHdpZHRoLGhlaWdodFwiLFxuICBjaXJjbGU6IFwicixjeCxjeVwiLFxuICBlbGxpcHNlOiBcInJ4LHJ5LGN4LGN5XCIsXG4gIGxpbmU6IFwieDEseDIseTEseTJcIlxufSxcbiAgICBfYXR0clRvT2JqID0gZnVuY3Rpb24gX2F0dHJUb09iaihlLCBhdHRycykge1xuICB2YXIgcHJvcHMgPSBhdHRycyA/IGF0dHJzLnNwbGl0KFwiLFwiKSA6IFtdLFxuICAgICAgb2JqID0ge30sXG4gICAgICBpID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgtLWkgPiAtMSkge1xuICAgIG9ialtwcm9wc1tpXV0gPSArZS5nZXRBdHRyaWJ1dGUocHJvcHNbaV0pIHx8IDA7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTsgLy9jb252ZXJ0cyBhbiBTVkcgc2hhcGUgbGlrZSA8Y2lyY2xlPiwgPHJlY3Q+LCA8cG9seWdvbj4sIDxwb2x5bGluZT4sIDxlbGxpcHNlPiwgZXRjLiB0byBhIDxwYXRoPiwgc3dhcHBpbmcgaXQgaW4gYW5kIGNvcHlpbmcgdGhlIGF0dHJpYnV0ZXMgdG8gbWF0Y2guXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1BhdGgoZWxlbWVudCwgc3dhcCkge1xuICB2YXIgdHlwZSA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgY2lyYyA9IDAuNTUyMjg0NzQ5ODMxLFxuICAgICAgZGF0YSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgcixcbiAgICAgIHJ5LFxuICAgICAgcGF0aCxcbiAgICAgIHJjaXJjLFxuICAgICAgcnljaXJjLFxuICAgICAgcG9pbnRzLFxuICAgICAgdyxcbiAgICAgIGgsXG4gICAgICB4MixcbiAgICAgIHgzLFxuICAgICAgeDQsXG4gICAgICB4NSxcbiAgICAgIHg2LFxuICAgICAgeTIsXG4gICAgICB5MyxcbiAgICAgIHk0LFxuICAgICAgeTUsXG4gICAgICB5NixcbiAgICAgIGF0dHI7XG5cbiAgaWYgKHR5cGUgPT09IFwicGF0aFwiIHx8ICFlbGVtZW50LmdldEJCb3gpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHBhdGggPSBfY3JlYXRlUGF0aChlbGVtZW50LCBcIngseSx3aWR0aCxoZWlnaHQsY3gsY3kscngscnkscix4MSx4Mix5MSx5Mixwb2ludHNcIik7XG4gIGF0dHIgPSBfYXR0clRvT2JqKGVsZW1lbnQsIF90eXBlQXR0cnNbdHlwZV0pO1xuXG4gIGlmICh0eXBlID09PSBcInJlY3RcIikge1xuICAgIHIgPSBhdHRyLnJ4O1xuICAgIHJ5ID0gYXR0ci5yeSB8fCByO1xuICAgIHggPSBhdHRyLng7XG4gICAgeSA9IGF0dHIueTtcbiAgICB3ID0gYXR0ci53aWR0aCAtIHIgKiAyO1xuICAgIGggPSBhdHRyLmhlaWdodCAtIHJ5ICogMjtcblxuICAgIGlmIChyIHx8IHJ5KSB7XG4gICAgICAvL2lmIHRoZXJlIGFyZSByb3VuZGVkIGNvcm5lcnMsIHJlbmRlciBjdWJpYyBiZXppZXJzXG4gICAgICB4MiA9IHggKyByICogKDEgLSBjaXJjKTtcbiAgICAgIHgzID0geCArIHI7XG4gICAgICB4NCA9IHgzICsgdztcbiAgICAgIHg1ID0geDQgKyByICogY2lyYztcbiAgICAgIHg2ID0geDQgKyByO1xuICAgICAgeTIgPSB5ICsgcnkgKiAoMSAtIGNpcmMpO1xuICAgICAgeTMgPSB5ICsgcnk7XG4gICAgICB5NCA9IHkzICsgaDtcbiAgICAgIHk1ID0geTQgKyByeSAqIGNpcmM7XG4gICAgICB5NiA9IHk0ICsgcnk7XG4gICAgICBkYXRhID0gXCJNXCIgKyB4NiArIFwiLFwiICsgeTMgKyBcIiBWXCIgKyB5NCArIFwiIENcIiArIFt4NiwgeTUsIHg1LCB5NiwgeDQsIHk2LCB4NCAtICh4NCAtIHgzKSAvIDMsIHk2LCB4MyArICh4NCAtIHgzKSAvIDMsIHk2LCB4MywgeTYsIHgyLCB5NiwgeCwgeTUsIHgsIHk0LCB4LCB5NCAtICh5NCAtIHkzKSAvIDMsIHgsIHkzICsgKHk0IC0geTMpIC8gMywgeCwgeTMsIHgsIHkyLCB4MiwgeSwgeDMsIHksIHgzICsgKHg0IC0geDMpIC8gMywgeSwgeDQgLSAoeDQgLSB4MykgLyAzLCB5LCB4NCwgeSwgeDUsIHksIHg2LCB5MiwgeDYsIHkzXS5qb2luKFwiLFwiKSArIFwielwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gXCJNXCIgKyAoeCArIHcpICsgXCIsXCIgKyB5ICsgXCIgdlwiICsgaCArIFwiIGhcIiArIC13ICsgXCIgdlwiICsgLWggKyBcIiBoXCIgKyB3ICsgXCJ6XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiY2lyY2xlXCIgfHwgdHlwZSA9PT0gXCJlbGxpcHNlXCIpIHtcbiAgICBpZiAodHlwZSA9PT0gXCJjaXJjbGVcIikge1xuICAgICAgciA9IHJ5ID0gYXR0ci5yO1xuICAgICAgcnljaXJjID0gciAqIGNpcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSBhdHRyLnJ4O1xuICAgICAgcnkgPSBhdHRyLnJ5O1xuICAgICAgcnljaXJjID0gcnkgKiBjaXJjO1xuICAgIH1cblxuICAgIHggPSBhdHRyLmN4O1xuICAgIHkgPSBhdHRyLmN5O1xuICAgIHJjaXJjID0gciAqIGNpcmM7XG4gICAgZGF0YSA9IFwiTVwiICsgKHggKyByKSArIFwiLFwiICsgeSArIFwiIENcIiArIFt4ICsgciwgeSArIHJ5Y2lyYywgeCArIHJjaXJjLCB5ICsgcnksIHgsIHkgKyByeSwgeCAtIHJjaXJjLCB5ICsgcnksIHggLSByLCB5ICsgcnljaXJjLCB4IC0gciwgeSwgeCAtIHIsIHkgLSByeWNpcmMsIHggLSByY2lyYywgeSAtIHJ5LCB4LCB5IC0gcnksIHggKyByY2lyYywgeSAtIHJ5LCB4ICsgciwgeSAtIHJ5Y2lyYywgeCArIHIsIHldLmpvaW4oXCIsXCIpICsgXCJ6XCI7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJsaW5lXCIpIHtcbiAgICBkYXRhID0gXCJNXCIgKyBhdHRyLngxICsgXCIsXCIgKyBhdHRyLnkxICsgXCIgTFwiICsgYXR0ci54MiArIFwiLFwiICsgYXR0ci55MjsgLy9wcmV2aW91c2x5LCB3ZSBqdXN0IGNvbnZlcnRlZCB0byBcIk14LHkgTHgseVwiIGJ1dCBTYWZhcmkgaGFzIGJ1Z3MgdGhhdCBjYXVzZSB0aGF0IG5vdCB0byByZW5kZXIgcHJvcGVybHkgd2hlbiB1c2luZyBhIHN0cm9rZS1kYXNoYXJyYXkgdGhhdCdzIG5vdCBmdWxseSB2aXNpYmxlISBVc2luZyBhIGN1YmljIGJlemllciBmaXhlcyB0aGF0IGlzc3VlLlxuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwicG9seWxpbmVcIiB8fCB0eXBlID09PSBcInBvbHlnb25cIikge1xuICAgIHBvaW50cyA9IChlbGVtZW50LmdldEF0dHJpYnV0ZShcInBvaW50c1wiKSArIFwiXCIpLm1hdGNoKF9udW1iZXJzRXhwKSB8fCBbXTtcbiAgICB4ID0gcG9pbnRzLnNoaWZ0KCk7XG4gICAgeSA9IHBvaW50cy5zaGlmdCgpO1xuICAgIGRhdGEgPSBcIk1cIiArIHggKyBcIixcIiArIHkgKyBcIiBMXCIgKyBwb2ludHMuam9pbihcIixcIik7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJwb2x5Z29uXCIpIHtcbiAgICAgIGRhdGEgKz0gXCIsXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCJ6XCI7XG4gICAgfVxuICB9XG5cbiAgcGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIHJhd1BhdGhUb1N0cmluZyhwYXRoLl9nc1Jhd1BhdGggPSBzdHJpbmdUb1Jhd1BhdGgoZGF0YSkpKTtcblxuICBpZiAoc3dhcCAmJiBlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBhdGgsIGVsZW1lbnQpO1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufSAvL3JldHVybnMgdGhlIHJvdGF0aW9uIChpbiBkZWdyZWVzKSBhdCBhIHBhcnRpY3VsYXIgcHJvZ3Jlc3Mgb24gYSByYXdQYXRoICh0aGUgc2xvcGUgb2YgdGhlIHRhbmdlbnQpXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3RhdGlvbkF0UHJvZ3Jlc3MocmF3UGF0aCwgcHJvZ3Jlc3MpIHtcbiAgdmFyIGQgPSBnZXRQcm9ncmVzc0RhdGEocmF3UGF0aCwgcHJvZ3Jlc3MgPj0gMSA/IDEgLSAxZS05IDogcHJvZ3Jlc3MgPyBwcm9ncmVzcyA6IDFlLTkpO1xuICByZXR1cm4gZ2V0Um90YXRpb25BdEJlemllclQoZC5zZWdtZW50LCBkLmksIGQudCk7XG59XG5cbmZ1bmN0aW9uIGdldFJvdGF0aW9uQXRCZXppZXJUKHNlZ21lbnQsIGksIHQpIHtcbiAgdmFyIGEgPSBzZWdtZW50W2ldLFxuICAgICAgYiA9IHNlZ21lbnRbaSArIDJdLFxuICAgICAgYyA9IHNlZ21lbnRbaSArIDRdLFxuICAgICAgeDtcbiAgYSArPSAoYiAtIGEpICogdDtcbiAgYiArPSAoYyAtIGIpICogdDtcbiAgYSArPSAoYiAtIGEpICogdDtcbiAgeCA9IGIgKyAoYyArIChzZWdtZW50W2kgKyA2XSAtIGMpICogdCAtIGIpICogdCAtIGE7XG4gIGEgPSBzZWdtZW50W2kgKyAxXTtcbiAgYiA9IHNlZ21lbnRbaSArIDNdO1xuICBjID0gc2VnbWVudFtpICsgNV07XG4gIGEgKz0gKGIgLSBhKSAqIHQ7XG4gIGIgKz0gKGMgLSBiKSAqIHQ7XG4gIGEgKz0gKGIgLSBhKSAqIHQ7XG4gIHJldHVybiBfcm91bmQoX2F0YW4yKGIgKyAoYyArIChzZWdtZW50W2kgKyA3XSAtIGMpICogdCAtIGIpICogdCAtIGEsIHgpICogX1JBRDJERUcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2xpY2VSYXdQYXRoKHJhd1BhdGgsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gX2lzVW5kZWZpbmVkKGVuZCkgPyAxIDogX3JvdW5kUHJlY2lzZShlbmQpIHx8IDA7IC8vIHdlIG11c3Qgcm91bmQgdG8gYXZvaWQgaXNzdWVzIGxpa2UgNC4xNSAvIDggPSAwLjgzMDAwMDAwMDAwMDAwMDEgaW5zdGVhZCBvZiAwLjgzIG9yIDIuOCAvIDUgPSAwLjU1OTk5OTk5OTk5OTk5OTkgaW5zdGVhZCBvZiAwLjU2IGFuZCBpZiBzb21lb25lIGlzIGRvaW5nIGEgbG9vcCBsaWtlIHN0YXJ0OiAyLjggLyAwLjUsIGVuZDogMi44IC8gMC41ICsgMS5cblxuICBzdGFydCA9IF9yb3VuZFByZWNpc2Uoc3RhcnQpIHx8IDA7XG4gIHZhciBsb29wcyA9IE1hdGgubWF4KDAsIH5+KF9hYnMoZW5kIC0gc3RhcnQpIC0gMWUtOCkpLFxuICAgICAgcGF0aCA9IGNvcHlSYXdQYXRoKHJhd1BhdGgpO1xuXG4gIGlmIChzdGFydCA+IGVuZCkge1xuICAgIHN0YXJ0ID0gMSAtIHN0YXJ0O1xuICAgIGVuZCA9IDEgLSBlbmQ7XG5cbiAgICBfcmV2ZXJzZVJhd1BhdGgocGF0aCk7XG5cbiAgICBwYXRoLnRvdGFsTGVuZ3RoID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kIDwgMCkge1xuICAgIHZhciBvZmZzZXQgPSBNYXRoLmFicyh+fk1hdGgubWluKHN0YXJ0LCBlbmQpKSArIDE7XG4gICAgc3RhcnQgKz0gb2Zmc2V0O1xuICAgIGVuZCArPSBvZmZzZXQ7XG4gIH1cblxuICBwYXRoLnRvdGFsTGVuZ3RoIHx8IGNhY2hlUmF3UGF0aE1lYXN1cmVtZW50cyhwYXRoKTtcbiAgdmFyIHdyYXAgPSBlbmQgPiAxLFxuICAgICAgcyA9IGdldFByb2dyZXNzRGF0YShwYXRoLCBzdGFydCwgX3RlbXAsIHRydWUpLFxuICAgICAgZSA9IGdldFByb2dyZXNzRGF0YShwYXRoLCBlbmQsIF90ZW1wMiksXG4gICAgICBlU2VnID0gZS5zZWdtZW50LFxuICAgICAgc1NlZyA9IHMuc2VnbWVudCxcbiAgICAgIGVTZWdJbmRleCA9IGUuc2VnSW5kZXgsXG4gICAgICBzU2VnSW5kZXggPSBzLnNlZ0luZGV4LFxuICAgICAgZWkgPSBlLmksXG4gICAgICBzaSA9IHMuaSxcbiAgICAgIHNhbWVTZWdtZW50ID0gc1NlZ0luZGV4ID09PSBlU2VnSW5kZXgsXG4gICAgICBzYW1lQmV6aWVyID0gZWkgPT09IHNpICYmIHNhbWVTZWdtZW50LFxuICAgICAgd3JhcHNCZWhpbmQsXG4gICAgICBzU2hpZnQsXG4gICAgICBlU2hpZnQsXG4gICAgICBpLFxuICAgICAgY29weSxcbiAgICAgIHRvdGFsU2VnbWVudHMsXG4gICAgICBsLFxuICAgICAgajtcblxuICBpZiAod3JhcCB8fCBsb29wcykge1xuICAgIHdyYXBzQmVoaW5kID0gZVNlZ0luZGV4IDwgc1NlZ0luZGV4IHx8IHNhbWVTZWdtZW50ICYmIGVpIDwgc2kgfHwgc2FtZUJlemllciAmJiBlLnQgPCBzLnQ7XG5cbiAgICBpZiAoX3NwbGl0U2VnbWVudChwYXRoLCBzU2VnSW5kZXgsIHNpLCBzLnQpKSB7XG4gICAgICBzU2VnSW5kZXgrKztcblxuICAgICAgaWYgKCF3cmFwc0JlaGluZCkge1xuICAgICAgICBlU2VnSW5kZXgrKztcblxuICAgICAgICBpZiAoc2FtZUJlemllcikge1xuICAgICAgICAgIGUudCA9IChlLnQgLSBzLnQpIC8gKDEgLSBzLnQpO1xuICAgICAgICAgIGVpID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lU2VnbWVudCkge1xuICAgICAgICAgIGVpIC09IHNpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE1hdGguYWJzKDEgLSAoZW5kIC0gc3RhcnQpKSA8IDFlLTUpIHtcbiAgICAgIGVTZWdJbmRleCA9IHNTZWdJbmRleCAtIDE7XG4gICAgfSBlbHNlIGlmICghZS50ICYmIGVTZWdJbmRleCkge1xuICAgICAgZVNlZ0luZGV4LS07XG4gICAgfSBlbHNlIGlmIChfc3BsaXRTZWdtZW50KHBhdGgsIGVTZWdJbmRleCwgZWksIGUudCkgJiYgd3JhcHNCZWhpbmQpIHtcbiAgICAgIHNTZWdJbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChzLnQgPT09IDEpIHtcbiAgICAgIHNTZWdJbmRleCA9IChzU2VnSW5kZXggKyAxKSAlIHBhdGgubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvcHkgPSBbXTtcbiAgICB0b3RhbFNlZ21lbnRzID0gcGF0aC5sZW5ndGg7XG4gICAgbCA9IDEgKyB0b3RhbFNlZ21lbnRzICogbG9vcHM7XG4gICAgaiA9IHNTZWdJbmRleDtcbiAgICBsICs9ICh0b3RhbFNlZ21lbnRzIC0gc1NlZ0luZGV4ICsgZVNlZ0luZGV4KSAlIHRvdGFsU2VnbWVudHM7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBfYXBwZW5kT3JNZXJnZShjb3B5LCBwYXRoW2orKyAlIHRvdGFsU2VnbWVudHNdKTtcbiAgICB9XG5cbiAgICBwYXRoID0gY29weTtcbiAgfSBlbHNlIHtcbiAgICBlU2hpZnQgPSBlLnQgPT09IDEgPyA2IDogc3ViZGl2aWRlU2VnbWVudChlU2VnLCBlaSwgZS50KTtcblxuICAgIGlmIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICBzU2hpZnQgPSBzdWJkaXZpZGVTZWdtZW50KHNTZWcsIHNpLCBzYW1lQmV6aWVyID8gcy50IC8gZS50IDogcy50KTtcbiAgICAgIHNhbWVTZWdtZW50ICYmIChlU2hpZnQgKz0gc1NoaWZ0KTtcbiAgICAgIGVTZWcuc3BsaWNlKGVpICsgZVNoaWZ0ICsgMik7XG4gICAgICAoc1NoaWZ0IHx8IHNpKSAmJiBzU2VnLnNwbGljZSgwLCBzaSArIHNTaGlmdCk7XG4gICAgICBpID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy9jaG9wIG9mZiBhbnkgZXh0cmEgc2VnbWVudHNcbiAgICAgICAgKGkgPCBzU2VnSW5kZXggfHwgaSA+IGVTZWdJbmRleCkgJiYgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVTZWcuYW5nbGUgPSBnZXRSb3RhdGlvbkF0QmV6aWVyVChlU2VnLCBlaSArIGVTaGlmdCwgMCk7IC8vcmVjb3JkIHRoZSB2YWx1ZSBiZWZvcmUgd2UgY2hvcCBiZWNhdXNlIGl0J2xsIGJlIGltcG9zc2libGUgdG8gZGV0ZXJtaW5lIHRoZSBhbmdsZSBhZnRlciBpdHMgbGVuZ3RoIGlzIDAhXG5cbiAgICAgIGVpICs9IGVTaGlmdDtcbiAgICAgIHMgPSBlU2VnW2VpXTtcbiAgICAgIGUgPSBlU2VnW2VpICsgMV07XG4gICAgICBlU2VnLmxlbmd0aCA9IGVTZWcudG90YWxMZW5ndGggPSAwO1xuICAgICAgZVNlZy50b3RhbFBvaW50cyA9IHBhdGgudG90YWxQb2ludHMgPSA4O1xuICAgICAgZVNlZy5wdXNoKHMsIGUsIHMsIGUsIHMsIGUsIHMsIGUpO1xuICAgIH1cbiAgfVxuXG4gIHBhdGgudG90YWxMZW5ndGggPSAwO1xuICByZXR1cm4gcGF0aDtcbn0gLy9tZWFzdXJlcyBhIFNlZ21lbnQgYWNjb3JkaW5nIHRvIGl0cyByZXNvbHV0aW9uIChzbyBpZiBzZWdtZW50LnJlc29sdXRpb24gaXMgNiwgZm9yIGV4YW1wbGUsIGl0J2xsIHRha2UgNiBzYW1wbGVzIGVxdWFsbHkgYWNyb3NzIGVhY2ggQmV6aWVyKSBhbmQgY3JlYXRlL3BvcHVsYXRlIGEgXCJzYW1wbGVzXCIgQXJyYXkgdGhhdCBoYXMgdGhlIGxlbmd0aCB1cCB0byBlYWNoIG9mIHRob3NlIHNhbXBsZSBwb2ludHMgKGFsd2F5cyBpbmNyZWFzaW5nIGZyb20gdGhlIHN0YXJ0KSBhcyB3ZWxsIGFzIGEgXCJsb29rdXBcIiBhcnJheSB0aGF0J3MgYnJva2VuIHVwIGFjY29yZGluZyB0byB0aGUgc21hbGxlc3QgZGlzdGFuY2UgYmV0d2VlbiAyIHNhbXBsZXMuIFRoaXMgZ2l2ZXMgdXMgYSB2ZXJ5IGZhc3Qgd2F5IG9mIGxvb2tpbmcgdXAgYSBwcm9ncmVzcyBwb3NpdGlvbiByYXRoZXIgdGhhbiBsb29waW5nIHRocm91Z2ggYWxsIHRoZSBwb2ludHMvQmV6aWVycy4gWW91IGNhbiBvcHRpb25hbGx5IGhhdmUgaXQgb25seSBtZWFzdXJlIGEgc3Vic2V0LCBzdGFydGluZyBhdCBzdGFydEluZGV4IGFuZCBnb2luZyBmb3IgYSBzcGVjaWZpYyBudW1iZXIgb2YgYmV6aWVycyAocmVtZW1iZXIsIHRoZXJlIGFyZSAzIHgveSBwYWlycyBlYWNoLCBmb3IgYSB0b3RhbCBvZiA2IGVsZW1lbnRzIGZvciBlYWNoIEJlemllcikuIEl0IHdpbGwgYWxzbyBwb3B1bGF0ZSBhIFwidG90YWxMZW5ndGhcIiBwcm9wZXJ0eSwgYnV0IHRoYXQncyBub3QgZ2VuZXJhbGx5IHN1cGVyIGFjY3VyYXRlIGJlY2F1c2UgYnkgZGVmYXVsdCBpdCdsbCBvbmx5IHRha2UgNiBzYW1wbGVzIHBlciBCZXppZXIuIEJ1dCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgaXQncyBwZXJmZWN0bHkgYWRlcXVhdGUgZm9yIG1lYXN1cmluZyBwcm9ncmVzcyB2YWx1ZXMgYWxvbmcgdGhlIHBhdGguIElmIHlvdSBuZWVkIGEgbW9yZSBhY2N1cmF0ZSB0b3RhbExlbmd0aCwgZWl0aGVyIGluY3JlYXNlIHRoZSByZXNvbHV0aW9uIG9yIHVzZSB0aGUgbW9yZSBhZHZhbmNlZCBiZXppZXJUb1BvaW50cygpIG1ldGhvZCB3aGljaCBrZWVwcyBhZGRpbmcgcG9pbnRzIHVudGlsIHRoZXkgZG9uJ3QgZGV2aWF0ZSBieSBtb3JlIHRoYW4gYSBjZXJ0YWluIHByZWNpc2lvbiB2YWx1ZS5cblxuZnVuY3Rpb24gbWVhc3VyZVNlZ21lbnQoc2VnbWVudCwgc3RhcnRJbmRleCwgYmV6aWVyUXR5KSB7XG4gIHN0YXJ0SW5kZXggPSBzdGFydEluZGV4IHx8IDA7XG5cbiAgaWYgKCFzZWdtZW50LnNhbXBsZXMpIHtcbiAgICBzZWdtZW50LnNhbXBsZXMgPSBbXTtcbiAgICBzZWdtZW50Lmxvb2t1cCA9IFtdO1xuICB9XG5cbiAgdmFyIHJlc29sdXRpb24gPSB+fnNlZ21lbnQucmVzb2x1dGlvbiB8fCAxMixcbiAgICAgIGluYyA9IDEgLyByZXNvbHV0aW9uLFxuICAgICAgZW5kSW5kZXggPSBiZXppZXJRdHkgPyBzdGFydEluZGV4ICsgYmV6aWVyUXR5ICogNiArIDEgOiBzZWdtZW50Lmxlbmd0aCxcbiAgICAgIHgxID0gc2VnbWVudFtzdGFydEluZGV4XSxcbiAgICAgIHkxID0gc2VnbWVudFtzdGFydEluZGV4ICsgMV0sXG4gICAgICBzYW1wbGVzSW5kZXggPSBzdGFydEluZGV4ID8gc3RhcnRJbmRleCAvIDYgKiByZXNvbHV0aW9uIDogMCxcbiAgICAgIHNhbXBsZXMgPSBzZWdtZW50LnNhbXBsZXMsXG4gICAgICBsb29rdXAgPSBzZWdtZW50Lmxvb2t1cCxcbiAgICAgIG1pbiA9IChzdGFydEluZGV4ID8gc2VnbWVudC5taW5MZW5ndGggOiBfbGFyZ2VOdW0pIHx8IF9sYXJnZU51bSxcbiAgICAgIHByZXZMZW5ndGggPSBzYW1wbGVzW3NhbXBsZXNJbmRleCArIGJlemllclF0eSAqIHJlc29sdXRpb24gLSAxXSxcbiAgICAgIGxlbmd0aCA9IHN0YXJ0SW5kZXggPyBzYW1wbGVzW3NhbXBsZXNJbmRleCAtIDFdIDogMCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgeDQsXG4gICAgICB4MyxcbiAgICAgIHgyLFxuICAgICAgeGQsXG4gICAgICB4ZDEsXG4gICAgICB5NCxcbiAgICAgIHkzLFxuICAgICAgeTIsXG4gICAgICB5ZCxcbiAgICAgIHlkMSxcbiAgICAgIGludixcbiAgICAgIHQsXG4gICAgICBsZW5ndGhJbmRleCxcbiAgICAgIGwsXG4gICAgICBzZWdMZW5ndGg7XG4gIHNhbXBsZXMubGVuZ3RoID0gbG9va3VwLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChqID0gc3RhcnRJbmRleCArIDI7IGogPCBlbmRJbmRleDsgaiArPSA2KSB7XG4gICAgeDQgPSBzZWdtZW50W2ogKyA0XSAtIHgxO1xuICAgIHgzID0gc2VnbWVudFtqICsgMl0gLSB4MTtcbiAgICB4MiA9IHNlZ21lbnRbal0gLSB4MTtcbiAgICB5NCA9IHNlZ21lbnRbaiArIDVdIC0geTE7XG4gICAgeTMgPSBzZWdtZW50W2ogKyAzXSAtIHkxO1xuICAgIHkyID0gc2VnbWVudFtqICsgMV0gLSB5MTtcbiAgICB4ZCA9IHhkMSA9IHlkID0geWQxID0gMDtcblxuICAgIGlmIChfYWJzKHg0KSA8IC4wMSAmJiBfYWJzKHk0KSA8IC4wMSAmJiBfYWJzKHgyKSArIF9hYnMoeTIpIDwgLjAxKSB7XG4gICAgICAvL2R1bXAgcG9pbnRzIHRoYXQgYXJlIHN1ZmZpY2llbnRseSBjbG9zZSAoYmFzaWNhbGx5IHJpZ2h0IG9uIHRvcCBvZiBlYWNoIG90aGVyLCBtYWtpbmcgYSBiZXppZXIgc3VwZXIgdGlueSBvciAwIGxlbmd0aClcbiAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDgpIHtcbiAgICAgICAgc2VnbWVudC5zcGxpY2UoaiwgNik7XG4gICAgICAgIGogLT0gNjtcbiAgICAgICAgZW5kSW5kZXggLT0gNjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMTsgaSA8PSByZXNvbHV0aW9uOyBpKyspIHtcbiAgICAgICAgdCA9IGluYyAqIGk7XG4gICAgICAgIGludiA9IDEgLSB0O1xuICAgICAgICB4ZCA9IHhkMSAtICh4ZDEgPSAodCAqIHQgKiB4NCArIDMgKiBpbnYgKiAodCAqIHgzICsgaW52ICogeDIpKSAqIHQpO1xuICAgICAgICB5ZCA9IHlkMSAtICh5ZDEgPSAodCAqIHQgKiB5NCArIDMgKiBpbnYgKiAodCAqIHkzICsgaW52ICogeTIpKSAqIHQpO1xuICAgICAgICBsID0gX3NxcnQoeWQgKiB5ZCArIHhkICogeGQpO1xuXG4gICAgICAgIGlmIChsIDwgbWluKSB7XG4gICAgICAgICAgbWluID0gbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbmd0aCArPSBsO1xuICAgICAgICBzYW1wbGVzW3NhbXBsZXNJbmRleCsrXSA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4MSArPSB4NDtcbiAgICB5MSArPSB5NDtcbiAgfVxuXG4gIGlmIChwcmV2TGVuZ3RoKSB7XG4gICAgcHJldkxlbmd0aCAtPSBsZW5ndGg7XG5cbiAgICBmb3IgKDsgc2FtcGxlc0luZGV4IDwgc2FtcGxlcy5sZW5ndGg7IHNhbXBsZXNJbmRleCsrKSB7XG4gICAgICBzYW1wbGVzW3NhbXBsZXNJbmRleF0gKz0gcHJldkxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBpZiAoc2FtcGxlcy5sZW5ndGggJiYgbWluKSB7XG4gICAgc2VnbWVudC50b3RhbExlbmd0aCA9IHNlZ0xlbmd0aCA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXSB8fCAwO1xuICAgIHNlZ21lbnQubWluTGVuZ3RoID0gbWluO1xuXG4gICAgaWYgKHNlZ0xlbmd0aCAvIG1pbiA8IDk5OTkpIHtcbiAgICAgIC8vIGlmIHRoZSBsb29rdXAgd291bGQgcmVxdWlyZSB0b28gbWFueSB2YWx1ZXMgKG1lbW9yeSBwcm9ibGVtKSwgd2Ugc2tpcCB0aGlzIGFuZCBpbnN0ZWFkIHdlIHVzZSBhIGxvb3AgdG8gbG9va3VwIHZhbHVlcyBkaXJlY3RseSBpbiB0aGUgc2FtcGxlcyBBcnJheVxuICAgICAgbCA9IGxlbmd0aEluZGV4ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ0xlbmd0aDsgaSArPSBtaW4pIHtcbiAgICAgICAgbG9va3VwW2wrK10gPSBzYW1wbGVzW2xlbmd0aEluZGV4XSA8IGkgPyArK2xlbmd0aEluZGV4IDogbGVuZ3RoSW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNlZ21lbnQudG90YWxMZW5ndGggPSBzYW1wbGVzWzBdID0gMDtcbiAgfVxuXG4gIHJldHVybiBzdGFydEluZGV4ID8gbGVuZ3RoIC0gc2FtcGxlc1tzdGFydEluZGV4IC8gMiAtIDFdIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVSYXdQYXRoTWVhc3VyZW1lbnRzKHJhd1BhdGgsIHJlc29sdXRpb24pIHtcbiAgdmFyIHBhdGhMZW5ndGgsIHBvaW50cywgaTtcblxuICBmb3IgKGkgPSBwYXRoTGVuZ3RoID0gcG9pbnRzID0gMDsgaSA8IHJhd1BhdGgubGVuZ3RoOyBpKyspIHtcbiAgICByYXdQYXRoW2ldLnJlc29sdXRpb24gPSB+fnJlc29sdXRpb24gfHwgMTI7IC8vc3RlcHMgcGVyIEJlemllciBjdXJ2ZSAoYW5jaG9yLCAyIGNvbnRyb2wgcG9pbnRzLCB0byBhbmNob3IpXG5cbiAgICBwb2ludHMgKz0gcmF3UGF0aFtpXS5sZW5ndGg7XG4gICAgcGF0aExlbmd0aCArPSBtZWFzdXJlU2VnbWVudChyYXdQYXRoW2ldKTtcbiAgfVxuXG4gIHJhd1BhdGgudG90YWxQb2ludHMgPSBwb2ludHM7XG4gIHJhd1BhdGgudG90YWxMZW5ndGggPSBwYXRoTGVuZ3RoO1xuICByZXR1cm4gcmF3UGF0aDtcbn0gLy9kaXZpZGUgc2VnbWVudFtpXSBhdCBwb3NpdGlvbiB0ICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIHByb2dyZXNzIGFsb25nIHRoYXQgcGFydGljdWxhciBjdWJpYyBiZXppZXIgc2VnbWVudCB0aGF0IHN0YXJ0cyBhdCBzZWdtZW50W2ldKS4gUmV0dXJucyBob3cgbWFueSBlbGVtZW50cyB3ZXJlIHNwbGljZWQgaW50byB0aGUgc2VnbWVudCBhcnJheSAoZWl0aGVyIDAgb3IgNilcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YmRpdmlkZVNlZ21lbnQoc2VnbWVudCwgaSwgdCkge1xuICBpZiAodCA8PSAwIHx8IHQgPj0gMSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGF4ID0gc2VnbWVudFtpXSxcbiAgICAgIGF5ID0gc2VnbWVudFtpICsgMV0sXG4gICAgICBjcDF4ID0gc2VnbWVudFtpICsgMl0sXG4gICAgICBjcDF5ID0gc2VnbWVudFtpICsgM10sXG4gICAgICBjcDJ4ID0gc2VnbWVudFtpICsgNF0sXG4gICAgICBjcDJ5ID0gc2VnbWVudFtpICsgNV0sXG4gICAgICBieCA9IHNlZ21lbnRbaSArIDZdLFxuICAgICAgYnkgPSBzZWdtZW50W2kgKyA3XSxcbiAgICAgIHgxYSA9IGF4ICsgKGNwMXggLSBheCkgKiB0LFxuICAgICAgeDIgPSBjcDF4ICsgKGNwMnggLSBjcDF4KSAqIHQsXG4gICAgICB5MWEgPSBheSArIChjcDF5IC0gYXkpICogdCxcbiAgICAgIHkyID0gY3AxeSArIChjcDJ5IC0gY3AxeSkgKiB0LFxuICAgICAgeDEgPSB4MWEgKyAoeDIgLSB4MWEpICogdCxcbiAgICAgIHkxID0geTFhICsgKHkyIC0geTFhKSAqIHQsXG4gICAgICB4MmEgPSBjcDJ4ICsgKGJ4IC0gY3AyeCkgKiB0LFxuICAgICAgeTJhID0gY3AyeSArIChieSAtIGNwMnkpICogdDtcbiAgeDIgKz0gKHgyYSAtIHgyKSAqIHQ7XG4gIHkyICs9ICh5MmEgLSB5MikgKiB0O1xuICBzZWdtZW50LnNwbGljZShpICsgMiwgNCwgX3JvdW5kKHgxYSksIC8vZmlyc3QgY29udHJvbCBwb2ludFxuICBfcm91bmQoeTFhKSwgX3JvdW5kKHgxKSwgLy9zZWNvbmQgY29udHJvbCBwb2ludFxuICBfcm91bmQoeTEpLCBfcm91bmQoeDEgKyAoeDIgLSB4MSkgKiB0KSwgLy9uZXcgZmFicmljYXRlZCBhbmNob3Igb24gbGluZVxuICBfcm91bmQoeTEgKyAoeTIgLSB5MSkgKiB0KSwgX3JvdW5kKHgyKSwgLy90aGlyZCBjb250cm9sIHBvaW50XG4gIF9yb3VuZCh5MiksIF9yb3VuZCh4MmEpLCAvL2ZvdXJ0aCBjb250cm9sIHBvaW50XG4gIF9yb3VuZCh5MmEpKTtcbiAgc2VnbWVudC5zYW1wbGVzICYmIHNlZ21lbnQuc2FtcGxlcy5zcGxpY2UoaSAvIDYgKiBzZWdtZW50LnJlc29sdXRpb24gfCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIDY7XG59IC8vIHJldHVybnMgYW4gb2JqZWN0IHtwYXRoLCBzZWdtZW50LCBzZWdJbmRleCwgaSwgdH1cblxuZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NEYXRhKHJhd1BhdGgsIHByb2dyZXNzLCBkZWNvcmF0ZWUsIHB1c2hUb05leHRJZkF0RW5kKSB7XG4gIGRlY29yYXRlZSA9IGRlY29yYXRlZSB8fCB7fTtcbiAgcmF3UGF0aC50b3RhbExlbmd0aCB8fCBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMocmF3UGF0aCk7XG5cbiAgaWYgKHByb2dyZXNzIDwgMCB8fCBwcm9ncmVzcyA+IDEpIHtcbiAgICBwcm9ncmVzcyA9IF93cmFwUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICB9XG5cbiAgdmFyIHNlZ0luZGV4ID0gMCxcbiAgICAgIHNlZ21lbnQgPSByYXdQYXRoWzBdLFxuICAgICAgc2FtcGxlcyxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgICBsZW5ndGgsXG4gICAgICBtaW4sXG4gICAgICBtYXgsXG4gICAgICBpLFxuICAgICAgdDtcblxuICBpZiAoIXByb2dyZXNzKSB7XG4gICAgdCA9IGkgPSBzZWdJbmRleCA9IDA7XG4gICAgc2VnbWVudCA9IHJhd1BhdGhbMF07XG4gIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPT09IDEpIHtcbiAgICB0ID0gMTtcbiAgICBzZWdJbmRleCA9IHJhd1BhdGgubGVuZ3RoIC0gMTtcbiAgICBzZWdtZW50ID0gcmF3UGF0aFtzZWdJbmRleF07XG4gICAgaSA9IHNlZ21lbnQubGVuZ3RoIC0gODtcbiAgfSBlbHNlIHtcbiAgICBpZiAocmF3UGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAvL3NwZWVkIG9wdGltaXphdGlvbjogbW9zdCBvZiB0aGUgdGltZSwgdGhlcmUncyBvbmx5IG9uZSBzZWdtZW50IHNvIHNraXAgdGhlIHJlY3Vyc2lvbi5cbiAgICAgIGxlbmd0aCA9IHJhd1BhdGgudG90YWxMZW5ndGggKiBwcm9ncmVzcztcbiAgICAgIG1heCA9IGkgPSAwO1xuXG4gICAgICB3aGlsZSAoKG1heCArPSByYXdQYXRoW2krK10udG90YWxMZW5ndGgpIDwgbGVuZ3RoKSB7XG4gICAgICAgIHNlZ0luZGV4ID0gaTtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHJhd1BhdGhbc2VnSW5kZXhdO1xuICAgICAgbWluID0gbWF4IC0gc2VnbWVudC50b3RhbExlbmd0aDtcbiAgICAgIHByb2dyZXNzID0gKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSB8fCAwO1xuICAgIH1cblxuICAgIHNhbXBsZXMgPSBzZWdtZW50LnNhbXBsZXM7XG4gICAgcmVzb2x1dGlvbiA9IHNlZ21lbnQucmVzb2x1dGlvbjsgLy9ob3cgbWFueSBzYW1wbGVzIHBlciBjdWJpYyBiZXppZXIgY2h1bmtcblxuICAgIGxlbmd0aCA9IHNlZ21lbnQudG90YWxMZW5ndGggKiBwcm9ncmVzcztcbiAgICBpID0gc2VnbWVudC5sb29rdXAubGVuZ3RoID8gc2VnbWVudC5sb29rdXBbfn4obGVuZ3RoIC8gc2VnbWVudC5taW5MZW5ndGgpXSB8fCAwIDogX2dldFNhbXBsZUluZGV4KHNhbXBsZXMsIGxlbmd0aCwgcHJvZ3Jlc3MpO1xuICAgIG1pbiA9IGkgPyBzYW1wbGVzW2kgLSAxXSA6IDA7XG4gICAgbWF4ID0gc2FtcGxlc1tpXTtcblxuICAgIGlmIChtYXggPCBsZW5ndGgpIHtcbiAgICAgIG1pbiA9IG1heDtcbiAgICAgIG1heCA9IHNhbXBsZXNbKytpXTtcbiAgICB9XG5cbiAgICB0ID0gMSAvIHJlc29sdXRpb24gKiAoKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSArIGkgJSByZXNvbHV0aW9uKTtcbiAgICBpID0gfn4oaSAvIHJlc29sdXRpb24pICogNjtcblxuICAgIGlmIChwdXNoVG9OZXh0SWZBdEVuZCAmJiB0ID09PSAxKSB7XG4gICAgICBpZiAoaSArIDYgPCBzZWdtZW50Lmxlbmd0aCkge1xuICAgICAgICBpICs9IDY7XG4gICAgICAgIHQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzZWdJbmRleCArIDEgPCByYXdQYXRoLmxlbmd0aCkge1xuICAgICAgICBpID0gdCA9IDA7XG4gICAgICAgIHNlZ21lbnQgPSByYXdQYXRoWysrc2VnSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlY29yYXRlZS50ID0gdDtcbiAgZGVjb3JhdGVlLmkgPSBpO1xuICBkZWNvcmF0ZWUucGF0aCA9IHJhd1BhdGg7XG4gIGRlY29yYXRlZS5zZWdtZW50ID0gc2VnbWVudDtcbiAgZGVjb3JhdGVlLnNlZ0luZGV4ID0gc2VnSW5kZXg7XG4gIHJldHVybiBkZWNvcmF0ZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3NpdGlvbk9uUGF0aChyYXdQYXRoLCBwcm9ncmVzcywgaW5jbHVkZUFuZ2xlLCBwb2ludCkge1xuICB2YXIgc2VnbWVudCA9IHJhd1BhdGhbMF0sXG4gICAgICByZXN1bHQgPSBwb2ludCB8fCB7fSxcbiAgICAgIHNhbXBsZXMsXG4gICAgICByZXNvbHV0aW9uLFxuICAgICAgbGVuZ3RoLFxuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgICAgaSxcbiAgICAgIHQsXG4gICAgICBhLFxuICAgICAgaW52O1xuXG4gIGlmIChwcm9ncmVzcyA8IDAgfHwgcHJvZ3Jlc3MgPiAxKSB7XG4gICAgcHJvZ3Jlc3MgPSBfd3JhcFByb2dyZXNzKHByb2dyZXNzKTtcbiAgfVxuXG4gIHNlZ21lbnQubG9va3VwIHx8IGNhY2hlUmF3UGF0aE1lYXN1cmVtZW50cyhyYXdQYXRoKTtcblxuICBpZiAocmF3UGF0aC5sZW5ndGggPiAxKSB7XG4gICAgLy9zcGVlZCBvcHRpbWl6YXRpb246IG1vc3Qgb2YgdGhlIHRpbWUsIHRoZXJlJ3Mgb25seSBvbmUgc2VnbWVudCBzbyBza2lwIHRoZSByZWN1cnNpb24uXG4gICAgbGVuZ3RoID0gcmF3UGF0aC50b3RhbExlbmd0aCAqIHByb2dyZXNzO1xuICAgIG1heCA9IGkgPSAwO1xuXG4gICAgd2hpbGUgKChtYXggKz0gcmF3UGF0aFtpKytdLnRvdGFsTGVuZ3RoKSA8IGxlbmd0aCkge1xuICAgICAgc2VnbWVudCA9IHJhd1BhdGhbaV07XG4gICAgfVxuXG4gICAgbWluID0gbWF4IC0gc2VnbWVudC50b3RhbExlbmd0aDtcbiAgICBwcm9ncmVzcyA9IChsZW5ndGggLSBtaW4pIC8gKG1heCAtIG1pbikgfHwgMDtcbiAgfVxuXG4gIHNhbXBsZXMgPSBzZWdtZW50LnNhbXBsZXM7XG4gIHJlc29sdXRpb24gPSBzZWdtZW50LnJlc29sdXRpb247XG4gIGxlbmd0aCA9IHNlZ21lbnQudG90YWxMZW5ndGggKiBwcm9ncmVzcztcbiAgaSA9IHNlZ21lbnQubG9va3VwLmxlbmd0aCA/IHNlZ21lbnQubG9va3VwW3Byb2dyZXNzIDwgMSA/IH5+KGxlbmd0aCAvIHNlZ21lbnQubWluTGVuZ3RoKSA6IHNlZ21lbnQubG9va3VwLmxlbmd0aCAtIDFdIHx8IDAgOiBfZ2V0U2FtcGxlSW5kZXgoc2FtcGxlcywgbGVuZ3RoLCBwcm9ncmVzcyk7XG4gIG1pbiA9IGkgPyBzYW1wbGVzW2kgLSAxXSA6IDA7XG4gIG1heCA9IHNhbXBsZXNbaV07XG5cbiAgaWYgKG1heCA8IGxlbmd0aCkge1xuICAgIG1pbiA9IG1heDtcbiAgICBtYXggPSBzYW1wbGVzWysraV07XG4gIH1cblxuICB0ID0gMSAvIHJlc29sdXRpb24gKiAoKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSArIGkgJSByZXNvbHV0aW9uKSB8fCAwO1xuICBpbnYgPSAxIC0gdDtcbiAgaSA9IH5+KGkgLyByZXNvbHV0aW9uKSAqIDY7XG4gIGEgPSBzZWdtZW50W2ldO1xuICByZXN1bHQueCA9IF9yb3VuZCgodCAqIHQgKiAoc2VnbWVudFtpICsgNl0gLSBhKSArIDMgKiBpbnYgKiAodCAqIChzZWdtZW50W2kgKyA0XSAtIGEpICsgaW52ICogKHNlZ21lbnRbaSArIDJdIC0gYSkpKSAqIHQgKyBhKTtcbiAgcmVzdWx0LnkgPSBfcm91bmQoKHQgKiB0ICogKHNlZ21lbnRbaSArIDddIC0gKGEgPSBzZWdtZW50W2kgKyAxXSkpICsgMyAqIGludiAqICh0ICogKHNlZ21lbnRbaSArIDVdIC0gYSkgKyBpbnYgKiAoc2VnbWVudFtpICsgM10gLSBhKSkpICogdCArIGEpO1xuXG4gIGlmIChpbmNsdWRlQW5nbGUpIHtcbiAgICByZXN1bHQuYW5nbGUgPSBzZWdtZW50LnRvdGFsTGVuZ3RoID8gZ2V0Um90YXRpb25BdEJlemllclQoc2VnbWVudCwgaSwgdCA+PSAxID8gMSAtIDFlLTkgOiB0ID8gdCA6IDFlLTkpIDogc2VnbWVudC5hbmdsZSB8fCAwO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0gLy9hcHBsaWVzIGEgbWF0cml4IHRyYW5zZm9ybSB0byBSYXdQYXRoIChvciBhIHNlZ21lbnQgaW4gYSBSYXdQYXRoKSBhbmQgcmV0dXJucyB3aGF0ZXZlciB3YXMgcGFzc2VkIGluIChpdCB0cmFuc2Zvcm1zIHRoZSB2YWx1ZXMgaW4gdGhlIGFycmF5KHMpLCBub3QgYSBjb3B5KS5cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVJhd1BhdGgocmF3UGF0aCwgYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gIHZhciBqID0gcmF3UGF0aC5sZW5ndGgsXG4gICAgICBzZWdtZW50LFxuICAgICAgbCxcbiAgICAgIGksXG4gICAgICB4LFxuICAgICAgeTtcblxuICB3aGlsZSAoLS1qID4gLTEpIHtcbiAgICBzZWdtZW50ID0gcmF3UGF0aFtqXTtcbiAgICBsID0gc2VnbWVudC5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICB4ID0gc2VnbWVudFtpXTtcbiAgICAgIHkgPSBzZWdtZW50W2kgKyAxXTtcbiAgICAgIHNlZ21lbnRbaV0gPSB4ICogYSArIHkgKiBjICsgdHg7XG4gICAgICBzZWdtZW50W2kgKyAxXSA9IHggKiBiICsgeSAqIGQgKyB0eTtcbiAgICB9XG4gIH1cblxuICByYXdQYXRoLl9kaXJ0eSA9IDE7XG4gIHJldHVybiByYXdQYXRoO1xufSAvLyB0cmFuc2xhdGVzIFNWRyBhcmMgZGF0YSBpbnRvIGEgc2VnbWVudCAoY3ViaWMgYmV6aWVycykuIEFuZ2xlIGlzIGluIGRlZ3JlZXMuXG5cbmZ1bmN0aW9uIGFyY1RvU2VnbWVudChsYXN0WCwgbGFzdFksIHJ4LCByeSwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB4LCB5KSB7XG4gIGlmIChsYXN0WCA9PT0geCAmJiBsYXN0WSA9PT0geSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJ4ID0gX2FicyhyeCk7XG4gIHJ5ID0gX2FicyhyeSk7XG5cbiAgdmFyIGFuZ2xlUmFkID0gYW5nbGUgJSAzNjAgKiBfREVHMlJBRCxcbiAgICAgIGNvc0FuZ2xlID0gX2NvcyhhbmdsZVJhZCksXG4gICAgICBzaW5BbmdsZSA9IF9zaW4oYW5nbGVSYWQpLFxuICAgICAgUEkgPSBNYXRoLlBJLFxuICAgICAgVFdPUEkgPSBQSSAqIDIsXG4gICAgICBkeDIgPSAobGFzdFggLSB4KSAvIDIsXG4gICAgICBkeTIgPSAobGFzdFkgLSB5KSAvIDIsXG4gICAgICB4MSA9IGNvc0FuZ2xlICogZHgyICsgc2luQW5nbGUgKiBkeTIsXG4gICAgICB5MSA9IC1zaW5BbmdsZSAqIGR4MiArIGNvc0FuZ2xlICogZHkyLFxuICAgICAgeDFfc3EgPSB4MSAqIHgxLFxuICAgICAgeTFfc3EgPSB5MSAqIHkxLFxuICAgICAgcmFkaWlDaGVjayA9IHgxX3NxIC8gKHJ4ICogcngpICsgeTFfc3EgLyAocnkgKiByeSk7XG5cbiAgaWYgKHJhZGlpQ2hlY2sgPiAxKSB7XG4gICAgcnggPSBfc3FydChyYWRpaUNoZWNrKSAqIHJ4O1xuICAgIHJ5ID0gX3NxcnQocmFkaWlDaGVjaykgKiByeTtcbiAgfVxuXG4gIHZhciByeF9zcSA9IHJ4ICogcngsXG4gICAgICByeV9zcSA9IHJ5ICogcnksXG4gICAgICBzcSA9IChyeF9zcSAqIHJ5X3NxIC0gcnhfc3EgKiB5MV9zcSAtIHJ5X3NxICogeDFfc3EpIC8gKHJ4X3NxICogeTFfc3EgKyByeV9zcSAqIHgxX3NxKTtcblxuICBpZiAoc3EgPCAwKSB7XG4gICAgc3EgPSAwO1xuICB9XG5cbiAgdmFyIGNvZWYgPSAobGFyZ2VBcmNGbGFnID09PSBzd2VlcEZsYWcgPyAtMSA6IDEpICogX3NxcnQoc3EpLFxuICAgICAgY3gxID0gY29lZiAqIChyeCAqIHkxIC8gcnkpLFxuICAgICAgY3kxID0gY29lZiAqIC0ocnkgKiB4MSAvIHJ4KSxcbiAgICAgIHN4MiA9IChsYXN0WCArIHgpIC8gMixcbiAgICAgIHN5MiA9IChsYXN0WSArIHkpIC8gMixcbiAgICAgIGN4ID0gc3gyICsgKGNvc0FuZ2xlICogY3gxIC0gc2luQW5nbGUgKiBjeTEpLFxuICAgICAgY3kgPSBzeTIgKyAoc2luQW5nbGUgKiBjeDEgKyBjb3NBbmdsZSAqIGN5MSksXG4gICAgICB1eCA9ICh4MSAtIGN4MSkgLyByeCxcbiAgICAgIHV5ID0gKHkxIC0gY3kxKSAvIHJ5LFxuICAgICAgdnggPSAoLXgxIC0gY3gxKSAvIHJ4LFxuICAgICAgdnkgPSAoLXkxIC0gY3kxKSAvIHJ5LFxuICAgICAgdGVtcCA9IHV4ICogdXggKyB1eSAqIHV5LFxuICAgICAgYW5nbGVTdGFydCA9ICh1eSA8IDAgPyAtMSA6IDEpICogTWF0aC5hY29zKHV4IC8gX3NxcnQodGVtcCkpLFxuICAgICAgYW5nbGVFeHRlbnQgPSAodXggKiB2eSAtIHV5ICogdnggPCAwID8gLTEgOiAxKSAqIE1hdGguYWNvcygodXggKiB2eCArIHV5ICogdnkpIC8gX3NxcnQodGVtcCAqICh2eCAqIHZ4ICsgdnkgKiB2eSkpKTtcblxuICBpc05hTihhbmdsZUV4dGVudCkgJiYgKGFuZ2xlRXh0ZW50ID0gUEkpOyAvL3JhcmUgZWRnZSBjYXNlLiBNYXRoLmNvcygtMSkgaXMgTmFOLlxuXG4gIGlmICghc3dlZXBGbGFnICYmIGFuZ2xlRXh0ZW50ID4gMCkge1xuICAgIGFuZ2xlRXh0ZW50IC09IFRXT1BJO1xuICB9IGVsc2UgaWYgKHN3ZWVwRmxhZyAmJiBhbmdsZUV4dGVudCA8IDApIHtcbiAgICBhbmdsZUV4dGVudCArPSBUV09QSTtcbiAgfVxuXG4gIGFuZ2xlU3RhcnQgJT0gVFdPUEk7XG4gIGFuZ2xlRXh0ZW50ICU9IFRXT1BJO1xuXG4gIHZhciBzZWdtZW50cyA9IE1hdGguY2VpbChfYWJzKGFuZ2xlRXh0ZW50KSAvIChUV09QSSAvIDQpKSxcbiAgICAgIHJhd1BhdGggPSBbXSxcbiAgICAgIGFuZ2xlSW5jcmVtZW50ID0gYW5nbGVFeHRlbnQgLyBzZWdtZW50cyxcbiAgICAgIGNvbnRyb2xMZW5ndGggPSA0IC8gMyAqIF9zaW4oYW5nbGVJbmNyZW1lbnQgLyAyKSAvICgxICsgX2NvcyhhbmdsZUluY3JlbWVudCAvIDIpKSxcbiAgICAgIG1hID0gY29zQW5nbGUgKiByeCxcbiAgICAgIG1iID0gc2luQW5nbGUgKiByeCxcbiAgICAgIG1jID0gc2luQW5nbGUgKiAtcnksXG4gICAgICBtZCA9IGNvc0FuZ2xlICogcnksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG4gICAgYW5nbGUgPSBhbmdsZVN0YXJ0ICsgaSAqIGFuZ2xlSW5jcmVtZW50O1xuICAgIHgxID0gX2NvcyhhbmdsZSk7XG4gICAgeTEgPSBfc2luKGFuZ2xlKTtcbiAgICB1eCA9IF9jb3MoYW5nbGUgKz0gYW5nbGVJbmNyZW1lbnQpO1xuICAgIHV5ID0gX3NpbihhbmdsZSk7XG4gICAgcmF3UGF0aC5wdXNoKHgxIC0gY29udHJvbExlbmd0aCAqIHkxLCB5MSArIGNvbnRyb2xMZW5ndGggKiB4MSwgdXggKyBjb250cm9sTGVuZ3RoICogdXksIHV5IC0gY29udHJvbExlbmd0aCAqIHV4LCB1eCwgdXkpO1xuICB9IC8vbm93IHRyYW5zZm9ybSBhY2NvcmRpbmcgdG8gdGhlIGFjdHVhbCBzaXplIG9mIHRoZSBlbGxpcHNlL2FyYyAodGhlIGJlemllcnMgd2VyZSBub3JhbWxpemVkLCBiZXR3ZWVuIDAgYW5kIDEgb24gYSBjaXJjbGUpLlxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHJhd1BhdGgubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB4MSA9IHJhd1BhdGhbaV07XG4gICAgeTEgPSByYXdQYXRoW2kgKyAxXTtcbiAgICByYXdQYXRoW2ldID0geDEgKiBtYSArIHkxICogbWMgKyBjeDtcbiAgICByYXdQYXRoW2kgKyAxXSA9IHgxICogbWIgKyB5MSAqIG1kICsgY3k7XG4gIH1cblxuICByYXdQYXRoW2kgLSAyXSA9IHg7IC8vYWx3YXlzIHNldCB0aGUgZW5kIHRvIGV4YWN0bHkgd2hlcmUgaXQncyBzdXBwb3NlZCB0byBiZVxuXG4gIHJhd1BhdGhbaSAtIDFdID0geTtcbiAgcmV0dXJuIHJhd1BhdGg7XG59IC8vU3BpdHMgYmFjayBhIFJhd1BhdGggd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcy4gRWFjaCBzZWdtZW50IHN0YXJ0cyB3aXRoIGEgXCJtb3ZlVG9cIiBjb21tYW5kICh4IGNvb3JkaW5hdGUsIHRoZW4geSkgYW5kIHRoZW4gMiBjb250cm9sIHBvaW50cyAoeCwgeSwgeCwgeSksIHRoZW4gYW5jaG9yLiBUaGUgZ29hbCBpcyB0byBtaW5pbWl6ZSBtZW1vcnkgYW5kIG1heGltaXplIHNwZWVkLlxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb1Jhd1BhdGgoZCkge1xuICB2YXIgYSA9IChkICsgXCJcIikucmVwbGFjZShfc2NpZW50aWZpYywgZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbiA9ICttO1xuICAgIHJldHVybiBuIDwgMC4wMDAxICYmIG4gPiAtMC4wMDAxID8gMCA6IG47XG4gIH0pLm1hdGNoKF9zdmdQYXRoRXhwKSB8fCBbXSxcbiAgICAgIC8vc29tZSBhdXRob3JpbmcgcHJvZ3JhbXMgc3BpdCBvdXQgdmVyeSBzbWFsbCBudW1iZXJzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSBcIjFlLTVcIiwgc28gbWFrZSBzdXJlIHdlIHJvdW5kIHRoYXQgZG93biB0byAwIGZpcnN0LlxuICBwYXRoID0gW10sXG4gICAgICByZWxhdGl2ZVggPSAwLFxuICAgICAgcmVsYXRpdmVZID0gMCxcbiAgICAgIHR3b1RoaXJkcyA9IDIgLyAzLFxuICAgICAgZWxlbWVudHMgPSBhLmxlbmd0aCxcbiAgICAgIHBvaW50cyA9IDAsXG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkVSUk9SOiBtYWxmb3JtZWQgcGF0aDogXCIgKyBkLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNvbW1hbmQsXG4gICAgICBpc1JlbGF0aXZlLFxuICAgICAgc2VnbWVudCxcbiAgICAgIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIGRpZlgsXG4gICAgICBkaWZZLFxuICAgICAgYmV6aWVycyxcbiAgICAgIHByZXZDb21tYW5kLFxuICAgICAgZmxhZzEsXG4gICAgICBmbGFnMixcbiAgICAgIGxpbmUgPSBmdW5jdGlvbiBsaW5lKHN4LCBzeSwgZXgsIGV5KSB7XG4gICAgZGlmWCA9IChleCAtIHN4KSAvIDM7XG4gICAgZGlmWSA9IChleSAtIHN5KSAvIDM7XG4gICAgc2VnbWVudC5wdXNoKHN4ICsgZGlmWCwgc3kgKyBkaWZZLCBleCAtIGRpZlgsIGV5IC0gZGlmWSwgZXgsIGV5KTtcbiAgfTtcblxuICBpZiAoIWQgfHwgIWlzTmFOKGFbMF0pIHx8IGlzTmFOKGFbMV0pKSB7XG4gICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50czsgaSsrKSB7XG4gICAgcHJldkNvbW1hbmQgPSBjb21tYW5kO1xuXG4gICAgaWYgKGlzTmFOKGFbaV0pKSB7XG4gICAgICBjb21tYW5kID0gYVtpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgaXNSZWxhdGl2ZSA9IGNvbW1hbmQgIT09IGFbaV07IC8vbG93ZXIgY2FzZSBtZWFucyByZWxhdGl2ZVxuICAgIH0gZWxzZSB7XG4gICAgICAvL2NvbW1hbmRzIGxpa2UgXCJDXCIgY2FuIGJlIHN0cnVuZyB0b2dldGhlciB3aXRob3V0IGFueSBuZXcgY29tbWFuZCBjaGFyYWN0ZXJzIGJldHdlZW4uXG4gICAgICBpLS07XG4gICAgfVxuXG4gICAgeCA9ICthW2kgKyAxXTtcbiAgICB5ID0gK2FbaSArIDJdO1xuXG4gICAgaWYgKGlzUmVsYXRpdmUpIHtcbiAgICAgIHggKz0gcmVsYXRpdmVYO1xuICAgICAgeSArPSByZWxhdGl2ZVk7XG4gICAgfVxuXG4gICAgaWYgKCFpKSB7XG4gICAgICBzdGFydFggPSB4O1xuICAgICAgc3RhcnRZID0geTtcbiAgICB9IC8vIFwiTVwiIChtb3ZlKVxuXG5cbiAgICBpZiAoY29tbWFuZCA9PT0gXCJNXCIpIHtcbiAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA8IDgpIHtcbiAgICAgICAgICAvL2lmIHRoZSBwYXRoIGRhdGEgd2FzIGZ1bmt5IGFuZCBqdXN0IGhhZCBhIE0gd2l0aCBubyBhY3R1YWwgZHJhd2luZyBhbnl3aGVyZSwgc2tpcCBpdC5cbiAgICAgICAgICBwYXRoLmxlbmd0aCAtPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50cyArPSBzZWdtZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZWxhdGl2ZVggPSBzdGFydFggPSB4O1xuICAgICAgcmVsYXRpdmVZID0gc3RhcnRZID0geTtcbiAgICAgIHNlZ21lbnQgPSBbeCwgeV07XG4gICAgICBwYXRoLnB1c2goc2VnbWVudCk7XG4gICAgICBpICs9IDI7XG4gICAgICBjb21tYW5kID0gXCJMXCI7IC8vYW4gXCJNXCIgd2l0aCBtb3JlIHRoYW4gMiB2YWx1ZXMgZ2V0cyBpbnRlcnByZXRlZCBhcyBcImxpbmVUb1wiIGNvbW1hbmRzIChcIkxcIikuXG4gICAgICAvLyBcIkNcIiAoY3ViaWMgYmV6aWVyKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJDXCIpIHtcbiAgICAgIGlmICghc2VnbWVudCkge1xuICAgICAgICBzZWdtZW50ID0gWzAsIDBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzUmVsYXRpdmUpIHtcbiAgICAgICAgcmVsYXRpdmVYID0gcmVsYXRpdmVZID0gMDtcbiAgICAgIH0gLy9ub3RlOiBcIioxXCIgaXMganVzdCBhIGZhc3Qvc2hvcnQgd2F5IHRvIGNhc3QgdGhlIHZhbHVlIGFzIGEgTnVtYmVyLiBXQUFBWSBmYXN0ZXIgaW4gQ2hyb21lLCBzbGlnaHRseSBzbG93ZXIgaW4gRmlyZWZveC5cblxuXG4gICAgICBzZWdtZW50LnB1c2goeCwgeSwgcmVsYXRpdmVYICsgYVtpICsgM10gKiAxLCByZWxhdGl2ZVkgKyBhW2kgKyA0XSAqIDEsIHJlbGF0aXZlWCArPSBhW2kgKyA1XSAqIDEsIHJlbGF0aXZlWSArPSBhW2kgKyA2XSAqIDEpO1xuICAgICAgaSArPSA2OyAvLyBcIlNcIiAoY29udGludWF0aW9uIG9mIGN1YmljIGJlemllcilcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiU1wiKSB7XG4gICAgICBkaWZYID0gcmVsYXRpdmVYO1xuICAgICAgZGlmWSA9IHJlbGF0aXZlWTtcblxuICAgICAgaWYgKHByZXZDb21tYW5kID09PSBcIkNcIiB8fCBwcmV2Q29tbWFuZCA9PT0gXCJTXCIpIHtcbiAgICAgICAgZGlmWCArPSByZWxhdGl2ZVggLSBzZWdtZW50W3NlZ21lbnQubGVuZ3RoIC0gNF07XG4gICAgICAgIGRpZlkgKz0gcmVsYXRpdmVZIC0gc2VnbWVudFtzZWdtZW50Lmxlbmd0aCAtIDNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzUmVsYXRpdmUpIHtcbiAgICAgICAgcmVsYXRpdmVYID0gcmVsYXRpdmVZID0gMDtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudC5wdXNoKGRpZlgsIGRpZlksIHgsIHksIHJlbGF0aXZlWCArPSBhW2kgKyAzXSAqIDEsIHJlbGF0aXZlWSArPSBhW2kgKyA0XSAqIDEpO1xuICAgICAgaSArPSA0OyAvLyBcIlFcIiAocXVhZHJhdGljIGJlemllcilcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiUVwiKSB7XG4gICAgICBkaWZYID0gcmVsYXRpdmVYICsgKHggLSByZWxhdGl2ZVgpICogdHdvVGhpcmRzO1xuICAgICAgZGlmWSA9IHJlbGF0aXZlWSArICh5IC0gcmVsYXRpdmVZKSAqIHR3b1RoaXJkcztcblxuICAgICAgaWYgKCFpc1JlbGF0aXZlKSB7XG4gICAgICAgIHJlbGF0aXZlWCA9IHJlbGF0aXZlWSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJlbGF0aXZlWCArPSBhW2kgKyAzXSAqIDE7XG4gICAgICByZWxhdGl2ZVkgKz0gYVtpICsgNF0gKiAxO1xuICAgICAgc2VnbWVudC5wdXNoKGRpZlgsIGRpZlksIHJlbGF0aXZlWCArICh4IC0gcmVsYXRpdmVYKSAqIHR3b1RoaXJkcywgcmVsYXRpdmVZICsgKHkgLSByZWxhdGl2ZVkpICogdHdvVGhpcmRzLCByZWxhdGl2ZVgsIHJlbGF0aXZlWSk7XG4gICAgICBpICs9IDQ7IC8vIFwiVFwiIChjb250aW51YXRpb24gb2YgcXVhZHJhdGljIGJlemllcilcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiVFwiKSB7XG4gICAgICBkaWZYID0gcmVsYXRpdmVYIC0gc2VnbWVudFtzZWdtZW50Lmxlbmd0aCAtIDRdO1xuICAgICAgZGlmWSA9IHJlbGF0aXZlWSAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAzXTtcbiAgICAgIHNlZ21lbnQucHVzaChyZWxhdGl2ZVggKyBkaWZYLCByZWxhdGl2ZVkgKyBkaWZZLCB4ICsgKHJlbGF0aXZlWCArIGRpZlggKiAxLjUgLSB4KSAqIHR3b1RoaXJkcywgeSArIChyZWxhdGl2ZVkgKyBkaWZZICogMS41IC0geSkgKiB0d29UaGlyZHMsIHJlbGF0aXZlWCA9IHgsIHJlbGF0aXZlWSA9IHkpO1xuICAgICAgaSArPSAyOyAvLyBcIkhcIiAoaG9yaXpvbnRhbCBsaW5lKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJIXCIpIHtcbiAgICAgIGxpbmUocmVsYXRpdmVYLCByZWxhdGl2ZVksIHJlbGF0aXZlWCA9IHgsIHJlbGF0aXZlWSk7XG4gICAgICBpICs9IDE7IC8vIFwiVlwiICh2ZXJ0aWNhbCBsaW5lKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJWXCIpIHtcbiAgICAgIC8vYWRqdXN0IHZhbHVlcyBiZWNhdXNlIHRoZSBmaXJzdCAoYW5kIG9ubHkgb25lKSBpc24ndCB4IGluIHRoaXMgY2FzZSwgaXQncyB5LlxuICAgICAgbGluZShyZWxhdGl2ZVgsIHJlbGF0aXZlWSwgcmVsYXRpdmVYLCByZWxhdGl2ZVkgPSB4ICsgKGlzUmVsYXRpdmUgPyByZWxhdGl2ZVkgLSByZWxhdGl2ZVggOiAwKSk7XG4gICAgICBpICs9IDE7IC8vIFwiTFwiIChsaW5lKSBvciBcIlpcIiAoY2xvc2UpXG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIkxcIiB8fCBjb21tYW5kID09PSBcIlpcIikge1xuICAgICAgaWYgKGNvbW1hbmQgPT09IFwiWlwiKSB7XG4gICAgICAgIHggPSBzdGFydFg7XG4gICAgICAgIHkgPSBzdGFydFk7XG4gICAgICAgIHNlZ21lbnQuY2xvc2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbW1hbmQgPT09IFwiTFwiIHx8IF9hYnMocmVsYXRpdmVYIC0geCkgPiAwLjUgfHwgX2FicyhyZWxhdGl2ZVkgLSB5KSA+IDAuNSkge1xuICAgICAgICBsaW5lKHJlbGF0aXZlWCwgcmVsYXRpdmVZLCB4LCB5KTtcblxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gXCJMXCIpIHtcbiAgICAgICAgICBpICs9IDI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVsYXRpdmVYID0geDtcbiAgICAgIHJlbGF0aXZlWSA9IHk7IC8vIFwiQVwiIChhcmMpXG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIkFcIikge1xuICAgICAgZmxhZzEgPSBhW2kgKyA0XTtcbiAgICAgIGZsYWcyID0gYVtpICsgNV07XG4gICAgICBkaWZYID0gYVtpICsgNl07XG4gICAgICBkaWZZID0gYVtpICsgN107XG4gICAgICBqID0gNztcblxuICAgICAgaWYgKGZsYWcxLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gZm9yIGNhc2VzIHdoZW4gdGhlIGZsYWdzIGFyZSBtZXJnZWQsIGxpa2UgXCJhOCA4IDAgMDE4IDhcIiAodGhlIDAgYW5kIDEgZmxhZ3MgYXJlIFdJVEggdGhlIHggdmFsdWUgb2YgOCwgYnV0IGl0IGNvdWxkIGFsc28gYmUgXCJhOCA4IDAgMDEtOCA4XCIgc28gaXQgbWF5IGluY2x1ZGUgeCBvciBub3QpXG4gICAgICAgIGlmIChmbGFnMS5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgZGlmWSA9IGRpZlg7XG4gICAgICAgICAgZGlmWCA9IGZsYWcyO1xuICAgICAgICAgIGotLTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWZZID0gZmxhZzI7XG4gICAgICAgICAgZGlmWCA9IGZsYWcxLnN1YnN0cigyKTtcbiAgICAgICAgICBqIC09IDI7XG4gICAgICAgIH1cblxuICAgICAgICBmbGFnMiA9IGZsYWcxLmNoYXJBdCgxKTtcbiAgICAgICAgZmxhZzEgPSBmbGFnMS5jaGFyQXQoMCk7XG4gICAgICB9XG5cbiAgICAgIGJlemllcnMgPSBhcmNUb1NlZ21lbnQocmVsYXRpdmVYLCByZWxhdGl2ZVksICthW2kgKyAxXSwgK2FbaSArIDJdLCArYVtpICsgM10sICtmbGFnMSwgK2ZsYWcyLCAoaXNSZWxhdGl2ZSA/IHJlbGF0aXZlWCA6IDApICsgZGlmWCAqIDEsIChpc1JlbGF0aXZlID8gcmVsYXRpdmVZIDogMCkgKyBkaWZZICogMSk7XG4gICAgICBpICs9IGo7XG5cbiAgICAgIGlmIChiZXppZXJzKSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBiZXppZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudC5wdXNoKGJlemllcnNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlbGF0aXZlWCA9IHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAyXTtcbiAgICAgIHJlbGF0aXZlWSA9IHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBpID0gc2VnbWVudC5sZW5ndGg7XG5cbiAgaWYgKGkgPCA2KSB7XG4gICAgLy9pbiBjYXNlIHRoZXJlJ3Mgb2RkIFNWRyBsaWtlIGEgTTAsMCBjb21tYW5kIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgICBwYXRoLnBvcCgpO1xuICAgIGkgPSAwO1xuICB9IGVsc2UgaWYgKHNlZ21lbnRbMF0gPT09IHNlZ21lbnRbaSAtIDJdICYmIHNlZ21lbnRbMV0gPT09IHNlZ21lbnRbaSAtIDFdKSB7XG4gICAgc2VnbWVudC5jbG9zZWQgPSB0cnVlO1xuICB9XG5cbiAgcGF0aC50b3RhbFBvaW50cyA9IHBvaW50cyArIGk7XG4gIHJldHVybiBwYXRoO1xufSAvL3BvcHVsYXRlcyB0aGUgcG9pbnRzIGFycmF5IGluIGFsdGVybmF0aW5nIHgveSB2YWx1ZXMgKGxpa2UgW3gsIHksIHgsIHkuLi5dIGluc3RlYWQgb2YgaW5kaXZpZHVhbCBwb2ludCBvYmplY3RzIFt7eCwgeX0sIHt4LCB5fS4uLl0gdG8gY29uc2VydmUgbWVtb3J5IGFuZCBzdGF5IGluIGxpbmUgd2l0aCBob3cgd2UncmUgaGFuZGxpbmcgc2VnbWVudCBhcnJheXNcblxuZXhwb3J0IGZ1bmN0aW9uIGJlemllclRvUG9pbnRzKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciB4MTIgPSAoeDEgKyB4MikgLyAyLFxuICAgICAgeTEyID0gKHkxICsgeTIpIC8gMixcbiAgICAgIHgyMyA9ICh4MiArIHgzKSAvIDIsXG4gICAgICB5MjMgPSAoeTIgKyB5MykgLyAyLFxuICAgICAgeDM0ID0gKHgzICsgeDQpIC8gMixcbiAgICAgIHkzNCA9ICh5MyArIHk0KSAvIDIsXG4gICAgICB4MTIzID0gKHgxMiArIHgyMykgLyAyLFxuICAgICAgeTEyMyA9ICh5MTIgKyB5MjMpIC8gMixcbiAgICAgIHgyMzQgPSAoeDIzICsgeDM0KSAvIDIsXG4gICAgICB5MjM0ID0gKHkyMyArIHkzNCkgLyAyLFxuICAgICAgeDEyMzQgPSAoeDEyMyArIHgyMzQpIC8gMixcbiAgICAgIHkxMjM0ID0gKHkxMjMgKyB5MjM0KSAvIDIsXG4gICAgICBkeCA9IHg0IC0geDEsXG4gICAgICBkeSA9IHk0IC0geTEsXG4gICAgICBkMiA9IF9hYnMoKHgyIC0geDQpICogZHkgLSAoeTIgLSB5NCkgKiBkeCksXG4gICAgICBkMyA9IF9hYnMoKHgzIC0geDQpICogZHkgLSAoeTMgLSB5NCkgKiBkeCksXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKCFwb2ludHMpIHtcbiAgICBwb2ludHMgPSBbeDEsIHkxLCB4NCwgeTRdO1xuICAgIGluZGV4ID0gMjtcbiAgfVxuXG4gIHBvaW50cy5zcGxpY2UoaW5kZXggfHwgcG9pbnRzLmxlbmd0aCAtIDIsIDAsIHgxMjM0LCB5MTIzNCk7XG5cbiAgaWYgKChkMiArIGQzKSAqIChkMiArIGQzKSA+IHRocmVzaG9sZCAqIChkeCAqIGR4ICsgZHkgKiBkeSkpIHtcbiAgICBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuICAgIGJlemllclRvUG9pbnRzKHgxLCB5MSwgeDEyLCB5MTIsIHgxMjMsIHkxMjMsIHgxMjM0LCB5MTIzNCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4KTtcbiAgICBiZXppZXJUb1BvaW50cyh4MTIzNCwgeTEyMzQsIHgyMzQsIHkyMzQsIHgzNCwgeTM0LCB4NCwgeTQsIHRocmVzaG9sZCwgcG9pbnRzLCBpbmRleCArIDIgKyAocG9pbnRzLmxlbmd0aCAtIGxlbmd0aCkpO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn1cbi8qXG5mdW5jdGlvbiBnZXRBbmdsZUJldHdlZW5Qb2ludHMoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MikgeyAvL2FuZ2xlIGJldHdlZW4gMyBwb2ludHMgaW4gcmFkaWFuc1xuXHR2YXIgZHgxID0geDEgLSB4MCxcblx0XHRkeTEgPSB5MSAtIHkwLFxuXHRcdGR4MiA9IHgyIC0geDEsXG5cdFx0ZHkyID0geTIgLSB5MSxcblx0XHRkeDMgPSB4MiAtIHgwLFxuXHRcdGR5MyA9IHkyIC0geTAsXG5cdFx0YSA9IGR4MSAqIGR4MSArIGR5MSAqIGR5MSxcblx0XHRiID0gZHgyICogZHgyICsgZHkyICogZHkyLFxuXHRcdGMgPSBkeDMgKiBkeDMgKyBkeTMgKiBkeTM7XG5cdHJldHVybiBNYXRoLmFjb3MoIChhICsgYiAtIGMpIC8gX3NxcnQoNCAqIGEgKiBiKSApO1xufSxcbiovXG4vL3BvaW50c1RvU2VnbWVudCgpIGRvZXNuJ3QgaGFuZGxlIGZsYXQgY29vcmRpbmF0ZXMgKHdoZXJlIHkgaXMgYWx3YXlzIDApIHRoZSB3YXkgd2UgbmVlZCAodGhlIHJlc3VsdGluZyBjb250cm9sIHBvaW50cyBhcmUgYWx3YXlzIHJpZ2h0IG9uIHRvcCBvZiB0aGUgYW5jaG9ycyksIHNvIHRoaXMgZnVuY3Rpb24gYmFzaWNhbGx5IG1ha2VzIHRoZSBjb250cm9sIHBvaW50cyBnbyBkaXJlY3RseSB1cCBhbmQgZG93biwgdmFyeWluZyBpbiBsZW5ndGggYmFzZWQgb24gdGhlIGN1cnZpbmVzcyAobW9yZSBjdXJ2eSwgZnVydGhlciBjb250cm9sIHBvaW50cylcblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXRQb2ludHNUb1NlZ21lbnQocG9pbnRzLCBjdXJ2aW5lc3MpIHtcbiAgaWYgKGN1cnZpbmVzcyA9PT0gdm9pZCAwKSB7XG4gICAgY3VydmluZXNzID0gMTtcbiAgfVxuXG4gIHZhciB4ID0gcG9pbnRzWzBdLFxuICAgICAgeSA9IDAsXG4gICAgICBzZWdtZW50ID0gW3gsIHldLFxuICAgICAgaSA9IDI7XG5cbiAgZm9yICg7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBzZWdtZW50LnB1c2goeCwgeSwgcG9pbnRzW2ldLCB5ID0gKHBvaW50c1tpXSAtIHgpICogY3VydmluZXNzIC8gMiwgeCA9IHBvaW50c1tpXSwgLXkpO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnQ7XG59IC8vcG9pbnRzIGlzIGFuIGFycmF5IG9mIHgveSBwb2ludHMsIGxpa2UgW3gsIHksIHgsIHksIHgsIHldXG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludHNUb1NlZ21lbnQocG9pbnRzLCBjdXJ2aW5lc3MpIHtcbiAgLy9wb2ludHMgPSBzaW1wbGlmeVBvaW50cyhwb2ludHMsIHRvbGVyYW5jZSk7XG4gIF9hYnMocG9pbnRzWzBdIC0gcG9pbnRzWzJdKSA8IDFlLTQgJiYgX2Ficyhwb2ludHNbMV0gLSBwb2ludHNbM10pIDwgMWUtNCAmJiAocG9pbnRzID0gcG9pbnRzLnNsaWNlKDIpKTsgLy8gaWYgdGhlIGZpcnN0IHR3byBwb2ludHMgYXJlIHN1cGVyIGNsb3NlLCBkdW1wIHRoZSBmaXJzdCBvbmUuXG5cbiAgdmFyIGwgPSBwb2ludHMubGVuZ3RoIC0gMixcbiAgICAgIHggPSArcG9pbnRzWzBdLFxuICAgICAgeSA9ICtwb2ludHNbMV0sXG4gICAgICBuZXh0WCA9ICtwb2ludHNbMl0sXG4gICAgICBuZXh0WSA9ICtwb2ludHNbM10sXG4gICAgICBzZWdtZW50ID0gW3gsIHksIHgsIHldLFxuICAgICAgZHgyID0gbmV4dFggLSB4LFxuICAgICAgZHkyID0gbmV4dFkgLSB5LFxuICAgICAgY2xvc2VkID0gTWF0aC5hYnMocG9pbnRzW2xdIC0geCkgPCAwLjAwMSAmJiBNYXRoLmFicyhwb2ludHNbbCArIDFdIC0geSkgPCAwLjAwMSxcbiAgICAgIHByZXZYLFxuICAgICAgcHJldlksXG4gICAgICBpLFxuICAgICAgZHgxLFxuICAgICAgZHkxLFxuICAgICAgcjEsXG4gICAgICByMixcbiAgICAgIHIzLFxuICAgICAgdGwsXG4gICAgICBteDEsXG4gICAgICBteDIsXG4gICAgICBteG0sXG4gICAgICBteTEsXG4gICAgICBteTIsXG4gICAgICBteW07XG5cbiAgaWYgKGNsb3NlZCkge1xuICAgIC8vIGlmIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50cyBhcmUgYmFzaWNhbGx5IG9uIHRvcCBvZiBlYWNoIG90aGVyLCBjbG9zZSB0aGUgc2VnbWVudCBieSBhZGRpbmcgdGhlIDJuZCBwb2ludCB0byB0aGUgZW5kLCBhbmQgdGhlIDJuZC10by1sYXN0IHBvaW50IHRvIHRoZSBiZWdpbm5pbmcgKHdlJ2xsIHJlbW92ZSB0aGVtIGF0IHRoZSBlbmQsIGJ1dCB0aGlzIGFsbG93cyB0aGUgY3VydmF0dXJlIHRvIGxvb2sgcGVyZmVjdClcbiAgICBwb2ludHMucHVzaChuZXh0WCwgbmV4dFkpO1xuICAgIG5leHRYID0geDtcbiAgICBuZXh0WSA9IHk7XG4gICAgeCA9IHBvaW50c1tsIC0gMl07XG4gICAgeSA9IHBvaW50c1tsIC0gMV07XG4gICAgcG9pbnRzLnVuc2hpZnQoeCwgeSk7XG4gICAgbCArPSA0O1xuICB9XG5cbiAgY3VydmluZXNzID0gY3VydmluZXNzIHx8IGN1cnZpbmVzcyA9PT0gMCA/ICtjdXJ2aW5lc3MgOiAxO1xuXG4gIGZvciAoaSA9IDI7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBwcmV2WCA9IHg7XG4gICAgcHJldlkgPSB5O1xuICAgIHggPSBuZXh0WDtcbiAgICB5ID0gbmV4dFk7XG4gICAgbmV4dFggPSArcG9pbnRzW2kgKyAyXTtcbiAgICBuZXh0WSA9ICtwb2ludHNbaSArIDNdO1xuXG4gICAgaWYgKHggPT09IG5leHRYICYmIHkgPT09IG5leHRZKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBkeDEgPSBkeDI7XG4gICAgZHkxID0gZHkyO1xuICAgIGR4MiA9IG5leHRYIC0geDtcbiAgICBkeTIgPSBuZXh0WSAtIHk7XG4gICAgcjEgPSBfc3FydChkeDEgKiBkeDEgKyBkeTEgKiBkeTEpOyAvLyByMSwgcjIsIGFuZCByMyBjb3JyZWxhdGUgeCBhbmQgeSAoYW5kIHogaW4gdGhlIGZ1dHVyZSkuIEJhc2ljYWxseSAyRCBvciAzRCBoeXBvdGVudXNlXG5cbiAgICByMiA9IF9zcXJ0KGR4MiAqIGR4MiArIGR5MiAqIGR5Mik7XG4gICAgcjMgPSBfc3FydChNYXRoLnBvdyhkeDIgLyByMiArIGR4MSAvIHIxLCAyKSArIE1hdGgucG93KGR5MiAvIHIyICsgZHkxIC8gcjEsIDIpKTtcbiAgICB0bCA9IChyMSArIHIyKSAqIGN1cnZpbmVzcyAqIDAuMjUgLyByMztcbiAgICBteDEgPSB4IC0gKHggLSBwcmV2WCkgKiAocjEgPyB0bCAvIHIxIDogMCk7XG4gICAgbXgyID0geCArIChuZXh0WCAtIHgpICogKHIyID8gdGwgLyByMiA6IDApO1xuICAgIG14bSA9IHggLSAobXgxICsgKChteDIgLSBteDEpICogKHIxICogMyAvIChyMSArIHIyKSArIDAuNSkgLyA0IHx8IDApKTtcbiAgICBteTEgPSB5IC0gKHkgLSBwcmV2WSkgKiAocjEgPyB0bCAvIHIxIDogMCk7XG4gICAgbXkyID0geSArIChuZXh0WSAtIHkpICogKHIyID8gdGwgLyByMiA6IDApO1xuICAgIG15bSA9IHkgLSAobXkxICsgKChteTIgLSBteTEpICogKHIxICogMyAvIChyMSArIHIyKSArIDAuNSkgLyA0IHx8IDApKTtcblxuICAgIGlmICh4ICE9PSBwcmV2WCB8fCB5ICE9PSBwcmV2WSkge1xuICAgICAgc2VnbWVudC5wdXNoKF9yb3VuZChteDEgKyBteG0pLCAvLyBmaXJzdCBjb250cm9sIHBvaW50XG4gICAgICBfcm91bmQobXkxICsgbXltKSwgX3JvdW5kKHgpLCAvLyBhbmNob3JcbiAgICAgIF9yb3VuZCh5KSwgX3JvdW5kKG14MiArIG14bSksIC8vIHNlY29uZCBjb250cm9sIHBvaW50XG4gICAgICBfcm91bmQobXkyICsgbXltKSk7XG4gICAgfVxuICB9XG5cbiAgeCAhPT0gbmV4dFggfHwgeSAhPT0gbmV4dFkgfHwgc2VnbWVudC5sZW5ndGggPCA0ID8gc2VnbWVudC5wdXNoKF9yb3VuZChuZXh0WCksIF9yb3VuZChuZXh0WSksIF9yb3VuZChuZXh0WCksIF9yb3VuZChuZXh0WSkpIDogc2VnbWVudC5sZW5ndGggLT0gMjtcblxuICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAvLyBvbmx5IG9uZSBwb2ludCFcbiAgICBzZWdtZW50LnB1c2goeCwgeSwgeCwgeSwgeCwgeSk7XG4gIH0gZWxzZSBpZiAoY2xvc2VkKSB7XG4gICAgc2VnbWVudC5zcGxpY2UoMCwgNik7XG4gICAgc2VnbWVudC5sZW5ndGggPSBzZWdtZW50Lmxlbmd0aCAtIDY7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudDtcbn0gLy9yZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYW4geC95IGNvb3JkaW5hdGUgYW5kIGEgc2VnbWVudCBiZXR3ZWVuIHgxL3kxIGFuZCB4Mi95MlxuXG5mdW5jdGlvbiBwb2ludFRvU2VnRGlzdCh4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICB2YXIgZHggPSB4MiAtIHgxLFxuICAgICAgZHkgPSB5MiAtIHkxLFxuICAgICAgdDtcblxuICBpZiAoZHggfHwgZHkpIHtcbiAgICB0ID0gKCh4IC0geDEpICogZHggKyAoeSAtIHkxKSAqIGR5KSAvIChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBpZiAodCA+IDEpIHtcbiAgICAgIHgxID0geDI7XG4gICAgICB5MSA9IHkyO1xuICAgIH0gZWxzZSBpZiAodCA+IDApIHtcbiAgICAgIHgxICs9IGR4ICogdDtcbiAgICAgIHkxICs9IGR5ICogdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5wb3coeCAtIHgxLCAyKSArIE1hdGgucG93KHkgLSB5MSwgMik7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5U3RlcChwb2ludHMsIGZpcnN0LCBsYXN0LCB0b2xlcmFuY2UsIHNpbXBsaWZpZWQpIHtcbiAgdmFyIG1heFNxRGlzdCA9IHRvbGVyYW5jZSxcbiAgICAgIGZpcnN0WCA9IHBvaW50c1tmaXJzdF0sXG4gICAgICBmaXJzdFkgPSBwb2ludHNbZmlyc3QgKyAxXSxcbiAgICAgIGxhc3RYID0gcG9pbnRzW2xhc3RdLFxuICAgICAgbGFzdFkgPSBwb2ludHNbbGFzdCArIDFdLFxuICAgICAgaW5kZXgsXG4gICAgICBpLFxuICAgICAgZDtcblxuICBmb3IgKGkgPSBmaXJzdCArIDI7IGkgPCBsYXN0OyBpICs9IDIpIHtcbiAgICBkID0gcG9pbnRUb1NlZ0Rpc3QocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdLCBmaXJzdFgsIGZpcnN0WSwgbGFzdFgsIGxhc3RZKTtcblxuICAgIGlmIChkID4gbWF4U3FEaXN0KSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBtYXhTcURpc3QgPSBkO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXhTcURpc3QgPiB0b2xlcmFuY2UpIHtcbiAgICBpbmRleCAtIGZpcnN0ID4gMiAmJiBzaW1wbGlmeVN0ZXAocG9pbnRzLCBmaXJzdCwgaW5kZXgsIHRvbGVyYW5jZSwgc2ltcGxpZmllZCk7XG4gICAgc2ltcGxpZmllZC5wdXNoKHBvaW50c1tpbmRleF0sIHBvaW50c1tpbmRleCArIDFdKTtcbiAgICBsYXN0IC0gaW5kZXggPiAyICYmIHNpbXBsaWZ5U3RlcChwb2ludHMsIGluZGV4LCBsYXN0LCB0b2xlcmFuY2UsIHNpbXBsaWZpZWQpO1xuICB9XG59IC8vcG9pbnRzIGlzIGFuIGFycmF5IG9mIHgveSB2YWx1ZXMgbGlrZSBbeCwgeSwgeCwgeSwgeCwgeV1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxpZnlQb2ludHMocG9pbnRzLCB0b2xlcmFuY2UpIHtcbiAgdmFyIHByZXZYID0gcGFyc2VGbG9hdChwb2ludHNbMF0pLFxuICAgICAgcHJldlkgPSBwYXJzZUZsb2F0KHBvaW50c1sxXSksXG4gICAgICB0ZW1wID0gW3ByZXZYLCBwcmV2WV0sXG4gICAgICBsID0gcG9pbnRzLmxlbmd0aCAtIDIsXG4gICAgICBpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgcmVzdWx0LFxuICAgICAgbGFzdDtcbiAgdG9sZXJhbmNlID0gTWF0aC5wb3codG9sZXJhbmNlIHx8IDEsIDIpO1xuXG4gIGZvciAoaSA9IDI7IGkgPCBsOyBpICs9IDIpIHtcbiAgICB4ID0gcGFyc2VGbG9hdChwb2ludHNbaV0pO1xuICAgIHkgPSBwYXJzZUZsb2F0KHBvaW50c1tpICsgMV0pO1xuICAgIGR4ID0gcHJldlggLSB4O1xuICAgIGR5ID0gcHJldlkgLSB5O1xuXG4gICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gdG9sZXJhbmNlKSB7XG4gICAgICB0ZW1wLnB1c2goeCwgeSk7XG4gICAgICBwcmV2WCA9IHg7XG4gICAgICBwcmV2WSA9IHk7XG4gICAgfVxuICB9XG5cbiAgdGVtcC5wdXNoKHBhcnNlRmxvYXQocG9pbnRzW2xdKSwgcGFyc2VGbG9hdChwb2ludHNbbCArIDFdKSk7XG4gIGxhc3QgPSB0ZW1wLmxlbmd0aCAtIDI7XG4gIHJlc3VsdCA9IFt0ZW1wWzBdLCB0ZW1wWzFdXTtcbiAgc2ltcGxpZnlTdGVwKHRlbXAsIDAsIGxhc3QsIHRvbGVyYW5jZSwgcmVzdWx0KTtcbiAgcmVzdWx0LnB1c2godGVtcFtsYXN0XSwgdGVtcFtsYXN0ICsgMV0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcihpdGVyYXRpb25zLCBweCwgcHksIHN0YXJ0LCBlbmQsIHNsaWNlcywgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gIHZhciBpbmMgPSAoZW5kIC0gc3RhcnQpIC8gc2xpY2VzLFxuICAgICAgYmVzdCA9IDAsXG4gICAgICB0ID0gc3RhcnQsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGQsXG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgaW52O1xuICBfYmVzdERpc3RhbmNlID0gX2xhcmdlTnVtO1xuXG4gIHdoaWxlICh0IDw9IGVuZCkge1xuICAgIGludiA9IDEgLSB0O1xuICAgIHggPSBpbnYgKiBpbnYgKiBpbnYgKiB4MCArIDMgKiBpbnYgKiBpbnYgKiB0ICogeDEgKyAzICogaW52ICogdCAqIHQgKiB4MiArIHQgKiB0ICogdCAqIHgzO1xuICAgIHkgPSBpbnYgKiBpbnYgKiBpbnYgKiB5MCArIDMgKiBpbnYgKiBpbnYgKiB0ICogeTEgKyAzICogaW52ICogdCAqIHQgKiB5MiArIHQgKiB0ICogdCAqIHkzO1xuICAgIGR4ID0geCAtIHB4O1xuICAgIGR5ID0geSAtIHB5O1xuICAgIGQgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIGlmIChkIDwgX2Jlc3REaXN0YW5jZSkge1xuICAgICAgX2Jlc3REaXN0YW5jZSA9IGQ7XG4gICAgICBiZXN0ID0gdDtcbiAgICB9XG5cbiAgICB0ICs9IGluYztcbiAgfVxuXG4gIHJldHVybiBpdGVyYXRpb25zID4gMSA/IGdldENsb3Nlc3RQcm9ncmVzc09uQmV6aWVyKGl0ZXJhdGlvbnMgLSAxLCBweCwgcHksIE1hdGgubWF4KGJlc3QgLSBpbmMsIDApLCBNYXRoLm1pbihiZXN0ICsgaW5jLCAxKSwgc2xpY2VzLCB4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIDogYmVzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3Nlc3REYXRhKHJhd1BhdGgsIHgsIHksIHNsaWNlcykge1xuICAvL3JldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGNsb3Nlc3QgaiwgaSwgYW5kIHQgKGogaXMgdGhlIHNlZ21lbnQgaW5kZXgsIGkgaXMgdGhlIGluZGV4IG9mIHRoZSBwb2ludCBpbiB0aGF0IHNlZ21lbnQsIGFuZCB0IGlzIHRoZSB0aW1lL3Byb2dyZXNzIGFsb25nIHRoYXQgYmV6aWVyKVxuICB2YXIgY2xvc2VzdCA9IHtcbiAgICBqOiAwLFxuICAgIGk6IDAsXG4gICAgdDogMFxuICB9LFxuICAgICAgYmVzdERpc3RhbmNlID0gX2xhcmdlTnVtLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICB0LFxuICAgICAgc2VnbWVudDtcblxuICBmb3IgKGogPSAwOyBqIDwgcmF3UGF0aC5sZW5ndGg7IGorKykge1xuICAgIHNlZ21lbnQgPSByYXdQYXRoW2pdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpICs9IDYpIHtcbiAgICAgIHQgPSBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcigxLCB4LCB5LCAwLCAxLCBzbGljZXMgfHwgMjAsIHNlZ21lbnRbaV0sIHNlZ21lbnRbaSArIDFdLCBzZWdtZW50W2kgKyAyXSwgc2VnbWVudFtpICsgM10sIHNlZ21lbnRbaSArIDRdLCBzZWdtZW50W2kgKyA1XSwgc2VnbWVudFtpICsgNl0sIHNlZ21lbnRbaSArIDddKTtcblxuICAgICAgaWYgKGJlc3REaXN0YW5jZSA+IF9iZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgYmVzdERpc3RhbmNlID0gX2Jlc3REaXN0YW5jZTtcbiAgICAgICAgY2xvc2VzdC5qID0gajtcbiAgICAgICAgY2xvc2VzdC5pID0gaTtcbiAgICAgICAgY2xvc2VzdC50ID0gdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn0gLy9zdWJkaXZpZGUgYSBTZWdtZW50IGNsb3Nlc3QgdG8gYSBzcGVjaWZpYyB4LHkgY29vcmRpbmF0ZVxuXG5leHBvcnQgZnVuY3Rpb24gc3ViZGl2aWRlU2VnbWVudE5lYXIoeCwgeSwgc2VnbWVudCwgc2xpY2VzLCBpdGVyYXRpb25zKSB7XG4gIHZhciBsID0gc2VnbWVudC5sZW5ndGgsXG4gICAgICBiZXN0RGlzdGFuY2UgPSBfbGFyZ2VOdW0sXG4gICAgICBiZXN0VCA9IDAsXG4gICAgICBiZXN0U2VnbWVudEluZGV4ID0gMCxcbiAgICAgIHQsXG4gICAgICBpO1xuICBzbGljZXMgPSBzbGljZXMgfHwgMjA7XG4gIGl0ZXJhdGlvbnMgPSBpdGVyYXRpb25zIHx8IDM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gNikge1xuICAgIHQgPSBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcigxLCB4LCB5LCAwLCAxLCBzbGljZXMsIHNlZ21lbnRbaV0sIHNlZ21lbnRbaSArIDFdLCBzZWdtZW50W2kgKyAyXSwgc2VnbWVudFtpICsgM10sIHNlZ21lbnRbaSArIDRdLCBzZWdtZW50W2kgKyA1XSwgc2VnbWVudFtpICsgNl0sIHNlZ21lbnRbaSArIDddKTtcblxuICAgIGlmIChiZXN0RGlzdGFuY2UgPiBfYmVzdERpc3RhbmNlKSB7XG4gICAgICBiZXN0RGlzdGFuY2UgPSBfYmVzdERpc3RhbmNlO1xuICAgICAgYmVzdFQgPSB0O1xuICAgICAgYmVzdFNlZ21lbnRJbmRleCA9IGk7XG4gICAgfVxuICB9XG5cbiAgdCA9IGdldENsb3Nlc3RQcm9ncmVzc09uQmV6aWVyKGl0ZXJhdGlvbnMsIHgsIHksIGJlc3RUIC0gMC4wNSwgYmVzdFQgKyAwLjA1LCBzbGljZXMsIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleF0sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDFdLCBzZWdtZW50W2Jlc3RTZWdtZW50SW5kZXggKyAyXSwgc2VnbWVudFtiZXN0U2VnbWVudEluZGV4ICsgM10sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDRdLCBzZWdtZW50W2Jlc3RTZWdtZW50SW5kZXggKyA1XSwgc2VnbWVudFtiZXN0U2VnbWVudEluZGV4ICsgNl0sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDddKTtcbiAgc3ViZGl2aWRlU2VnbWVudChzZWdtZW50LCBiZXN0U2VnbWVudEluZGV4LCB0KTtcbiAgcmV0dXJuIGJlc3RTZWdtZW50SW5kZXggKyA2O1xufVxuLypcblRha2VzIGFueSBvZiB0aGUgZm9sbG93aW5nIGFuZCBjb252ZXJ0cyBpdCB0byBhbiBhbGwgQ3ViaWMgQmV6aWVyIFNWRyBkYXRhIHN0cmluZzpcbi0gQSA8cGF0aD4gZGF0YSBzdHJpbmcgbGlrZSBcIk0wLDAgTDIsNCB2MjAsMTUgSDEwMFwiXG4tIEEgUmF3UGF0aCwgbGlrZSBbW3gsIHksIHgsIHksIHgsIHksIHgsIHldW1t4LCB5LCB4LCB5LCB4LCB5LCB4LCB5XV1cbi0gQSBTZWdtZW50LCBsaWtlIFt4LCB5LCB4LCB5LCB4LCB5LCB4LCB5XVxuXG5Ob3RlOiBhbGwgbnVtYmVycyBhcmUgcm91bmRlZCBkb3duIHRvIHRoZSBjbG9zZXN0IDAuMDAxIHRvIG1pbmltaXplIG1lbW9yeSwgbWF4aW1pemUgc3BlZWQsIGFuZCBhdm9pZCBvZGQgbnVtYmVycyBsaWtlIDFlLTEzXG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gcmF3UGF0aFRvU3RyaW5nKHJhd1BhdGgpIHtcbiAgaWYgKF9pc051bWJlcihyYXdQYXRoWzBdKSkge1xuICAgIC8vaW4gY2FzZSBhIHNlZ21lbnQgaXMgcGFzc2VkIGluIGluc3RlYWRcbiAgICByYXdQYXRoID0gW3Jhd1BhdGhdO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBsID0gcmF3UGF0aC5sZW5ndGgsXG4gICAgICBzbCxcbiAgICAgIHMsXG4gICAgICBpLFxuICAgICAgc2VnbWVudDtcblxuICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrKSB7XG4gICAgc2VnbWVudCA9IHJhd1BhdGhbc107XG4gICAgcmVzdWx0ICs9IFwiTVwiICsgX3JvdW5kKHNlZ21lbnRbMF0pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFsxXSkgKyBcIiBDXCI7XG4gICAgc2wgPSBzZWdtZW50Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDI7IGkgPCBzbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIixcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIgXCIgKyBfcm91bmQoc2VnbWVudFtpKytdKSArIFwiLFwiICsgX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIiBcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFtpXSkgKyBcIiBcIjtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudC5jbG9zZWQpIHtcbiAgICAgIHJlc3VsdCArPSBcInpcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLypcbi8vIHRha2VzIGEgc2VnbWVudCB3aXRoIGNvb3JkaW5hdGVzIFt4LCB5LCB4LCB5LCAuLi5dIGFuZCBjb252ZXJ0cyB0aGUgY29udHJvbCBwb2ludHMgaW50byBhbmdsZXMgYW5kIGxlbmd0aHMgW3gsIHksIGFuZ2xlLCBsZW5ndGgsIGFuZ2xlLCBsZW5ndGgsIHgsIHksIGFuZ2xlLCBsZW5ndGgsIC4uLl0gc28gdGhhdCBpdCBhbmltYXRlcyBtb3JlIGNsZWFubHkgYW5kIGF2b2lkcyBvZGQgYnJlYWtzL2tpbmtzLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFuaW1hdGUgZnJvbSAxIG8nY2xvY2sgdG8gNiBvJ2Nsb2NrLCBpdCdkIGp1c3QgZ28gZGlyZWN0bHkvbGluZWFybHkgcmF0aGVyIHRoYW4gYXJvdW5kLiBTbyB0aGUgbGVuZ3RoIHdvdWxkIGJlIHZlcnkgc2hvcnQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdHdlZW4uXG5leHBvcnQgZnVuY3Rpb24gY3BDb29yZHNUb0FuZ2xlcyhzZWdtZW50LCBjb3B5KSB7XG5cdHZhciByZXN1bHQgPSBjb3B5ID8gc2VnbWVudC5zbGljZSgwKSA6IHNlZ21lbnQsXG5cdFx0eCwgeSwgaTtcblx0Zm9yIChpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpKz02KSB7XG5cdFx0eCA9IHNlZ21lbnRbaSsyXSAtIHNlZ21lbnRbaV07XG5cdFx0eSA9IHNlZ21lbnRbaSszXSAtIHNlZ21lbnRbaSsxXTtcblx0XHRyZXN1bHRbaSsyXSA9IE1hdGguYXRhbjIoeSwgeCk7XG5cdFx0cmVzdWx0W2krM10gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0eCA9IHNlZ21lbnRbaSs2XSAtIHNlZ21lbnRbaSs0XTtcblx0XHR5ID0gc2VnbWVudFtpKzddIC0gc2VnbWVudFtpKzVdO1xuXHRcdHJlc3VsdFtpKzRdID0gTWF0aC5hdGFuMih5LCB4KTtcblx0XHRyZXN1bHRbaSs1XSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0YWtlcyBhIHNlZ21lbnQgdGhhdCB3YXMgY29udmVydGVkIHdpdGggY3BDb29yZHNUb0FuZ2xlcygpIHRvIGhhdmUgYW5nbGVzIGFuZCBsZW5ndGhzIGluc3RlYWQgb2YgY29vcmRpbmF0ZXMgZm9yIHRoZSBjb250cm9sIHBvaW50cywgYW5kIGNvbnZlcnRzIGl0IEJBQ0sgaW50byBjb29yZGluYXRlcy5cbmV4cG9ydCBmdW5jdGlvbiBjcEFuZ2xlc1RvQ29vcmRzKHNlZ21lbnQsIGNvcHkpIHtcblx0dmFyIHJlc3VsdCA9IGNvcHkgPyBzZWdtZW50LnNsaWNlKDApIDogc2VnbWVudCxcblx0XHRsZW5ndGggPSBzZWdtZW50Lmxlbmd0aCxcblx0XHRybmQgPSAxMDAwLFxuXHRcdGFuZ2xlLCBsLCBpLCBqO1xuXHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKz02KSB7XG5cdFx0YW5nbGUgPSBzZWdtZW50W2krMl07XG5cdFx0bCA9IHNlZ21lbnRbaSszXTsgLy9sZW5ndGhcblx0XHRyZXN1bHRbaSsyXSA9ICgoKHNlZ21lbnRbaV0gKyBNYXRoLmNvcyhhbmdsZSkgKiBsKSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRyZXN1bHRbaSszXSA9ICgoKHNlZ21lbnRbaSsxXSArIE1hdGguc2luKGFuZ2xlKSAqIGwpICogcm5kKSB8IDApIC8gcm5kO1xuXHRcdGFuZ2xlID0gc2VnbWVudFtpKzRdO1xuXHRcdGwgPSBzZWdtZW50W2krNV07IC8vbGVuZ3RoXG5cdFx0cmVzdWx0W2krNF0gPSAoKChzZWdtZW50W2krNl0gLSBNYXRoLmNvcyhhbmdsZSkgKiBsKSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRyZXN1bHRbaSs1XSA9ICgoKHNlZ21lbnRbaSs3XSAtIE1hdGguc2luKGFuZ2xlKSAqIGwpICogcm5kKSB8IDApIC8gcm5kO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8vYWRkcyBhbiBcImlzU21vb3RoXCIgYXJyYXkgdG8gZWFjaCBzZWdtZW50IGFuZCBwb3B1bGF0ZXMgaXQgd2l0aCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNtb290aCAodGhlIGNvbnRyb2wgcG9pbnRzIGhhdmUgYmFzaWNhbGx5IHRoZSBzYW1lIHNsb3BlKS4gRm9yIGFueSBzbW9vdGggY29udHJvbCBwb2ludHMsIGl0IGNvbnZlcnRzIHRoZSBjb29yZGluYXRlcyBpbnRvIGFuZ2xlICh4LCBpbiByYWRpYW5zKSBhbmQgbGVuZ3RoICh5KSBhbmQgcHV0cyB0aGVtIGludG8gdGhlIHNhbWUgaW5kZXggdmFsdWUgaW4gYSBzbW9vdGhEYXRhIGFycmF5LlxuZXhwb3J0IGZ1bmN0aW9uIHBvcHVsYXRlU21vb3RoRGF0YShyYXdQYXRoKSB7XG5cdGxldCBqID0gcmF3UGF0aC5sZW5ndGgsXG5cdFx0c21vb3RoLCBzZWdtZW50LCB4LCB5LCB4MiwgeTIsIGksIGwsIGEsIGEyLCBpc1Ntb290aCwgc21vb3RoRGF0YTtcblx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0c2VnbWVudCA9IHJhd1BhdGhbal07XG5cdFx0aXNTbW9vdGggPSBzZWdtZW50LmlzU21vb3RoID0gc2VnbWVudC5pc1Ntb290aCB8fCBbMCwgMCwgMCwgMF07XG5cdFx0c21vb3RoRGF0YSA9IHNlZ21lbnQuc21vb3RoRGF0YSA9IHNlZ21lbnQuc21vb3RoRGF0YSB8fCBbMCwgMCwgMCwgMF07XG5cdFx0aXNTbW9vdGgubGVuZ3RoID0gNDtcblx0XHRsID0gc2VnbWVudC5sZW5ndGggLSAyO1xuXHRcdGZvciAoaSA9IDY7IGkgPCBsOyBpICs9IDYpIHtcblx0XHRcdHggPSBzZWdtZW50W2ldIC0gc2VnbWVudFtpIC0gMl07XG5cdFx0XHR5ID0gc2VnbWVudFtpICsgMV0gLSBzZWdtZW50W2kgLSAxXTtcblx0XHRcdHgyID0gc2VnbWVudFtpICsgMl0gLSBzZWdtZW50W2ldO1xuXHRcdFx0eTIgPSBzZWdtZW50W2kgKyAzXSAtIHNlZ21lbnRbaSArIDFdO1xuXHRcdFx0YSA9IF9hdGFuMih5LCB4KTtcblx0XHRcdGEyID0gX2F0YW4yKHkyLCB4Mik7XG5cdFx0XHRzbW9vdGggPSAoTWF0aC5hYnMoYSAtIGEyKSA8IDAuMDkpO1xuXHRcdFx0aWYgKHNtb290aCkge1xuXHRcdFx0XHRzbW9vdGhEYXRhW2kgLSAyXSA9IGE7XG5cdFx0XHRcdHNtb290aERhdGFbaSArIDJdID0gYTI7XG5cdFx0XHRcdHNtb290aERhdGFbaSAtIDFdID0gX3NxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0XHRcdHNtb290aERhdGFbaSArIDNdID0gX3NxcnQoeDIgKiB4MiArIHkyICogeTIpO1xuXHRcdFx0fVxuXHRcdFx0aXNTbW9vdGgucHVzaChzbW9vdGgsIHNtb290aCwgMCwgMCwgc21vb3RoLCBzbW9vdGgpO1xuXHRcdH1cblx0XHQvL2lmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgYXJlIGlkZW50aWNhbCwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBzbW9vdGggdHJhbnNpdGlvbi4gV2UgbXVzdCBoYW5kbGUgdGhpcyBhIGJpdCBkaWZmZXJlbnRseSBkdWUgdG8gdGhlaXIgcG9zaXRpb25zIGluIHRoZSBhcnJheS5cblx0XHRpZiAoc2VnbWVudFtsXSA9PT0gc2VnbWVudFswXSAmJiBzZWdtZW50W2wrMV0gPT09IHNlZ21lbnRbMV0pIHtcblx0XHRcdHggPSBzZWdtZW50WzBdIC0gc2VnbWVudFtsLTJdO1xuXHRcdFx0eSA9IHNlZ21lbnRbMV0gLSBzZWdtZW50W2wtMV07XG5cdFx0XHR4MiA9IHNlZ21lbnRbMl0gLSBzZWdtZW50WzBdO1xuXHRcdFx0eTIgPSBzZWdtZW50WzNdIC0gc2VnbWVudFsxXTtcblx0XHRcdGEgPSBfYXRhbjIoeSwgeCk7XG5cdFx0XHRhMiA9IF9hdGFuMih5MiwgeDIpO1xuXHRcdFx0aWYgKE1hdGguYWJzKGEgLSBhMikgPCAwLjA5KSB7XG5cdFx0XHRcdHNtb290aERhdGFbbC0yXSA9IGE7XG5cdFx0XHRcdHNtb290aERhdGFbMl0gPSBhMjtcblx0XHRcdFx0c21vb3RoRGF0YVtsLTFdID0gX3NxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0XHRcdHNtb290aERhdGFbM10gPSBfc3FydCh4MiAqIHgyICsgeTIgKiB5Mik7XG5cdFx0XHRcdGlzU21vb3RoW2wtMl0gPSBpc1Ntb290aFtsLTFdID0gdHJ1ZTsgLy9kb24ndCBjaGFuZ2UgaW5kZXhlcyAyIGFuZCAzIGJlY2F1c2Ugd2UnbGwgdHJpZ2dlciBldmVyeXRoaW5nIGZyb20gdGhlIEVORCwgYW5kIHRoaXMgd2lsbCBvcHRpbWl6ZSBmaWxlIHNpemUgYSBiaXQuXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiByYXdQYXRoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9TY3JlZW4oc3ZnRWxlbWVudCwgcG9pbnQpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7IC8vYnkgZGVmYXVsdCwgdGFrZSB0aGUgZmlyc3Qgc2V0IG9mIGNvb3JkaW5hdGVzIGluIHRoZSBwYXRoIGFzIHRoZSBwb2ludFxuXHRcdGxldCByYXdQYXRoID0gZ2V0UmF3UGF0aChzdmdFbGVtZW50KTtcblx0XHRwb2ludCA9IHN2Z0VsZW1lbnQub3duZXJTVkdFbGVtZW50LmNyZWF0ZVNWR1BvaW50KCk7XG5cdFx0cG9pbnQueCA9IHJhd1BhdGhbMF1bMF07XG5cdFx0cG9pbnQueSA9IHJhd1BhdGhbMF1bMV07XG5cdH1cblx0cmV0dXJuIHBvaW50Lm1hdHJpeFRyYW5zZm9ybShzdmdFbGVtZW50LmdldFNjcmVlbkNUTSgpKTtcbn1cbi8vIHRha2VzIGEgPHBhdGg+IGFuZCBub3JtYWxpemVzIGFsbCBvZiBpdHMgY29vcmRpbmF0ZXMgdG8gdmFsdWVzIGJldHdlZW4gMCBhbmQgMVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICBwYXRoID0gZ3NhcC51dGlscy50b0FycmF5KHBhdGgpO1xuICBpZiAoIXBhdGhbMF0uaGFzQXR0cmlidXRlKFwiZFwiKSkge1xuICAgIHBhdGggPSBnc2FwLnV0aWxzLnRvQXJyYXkocGF0aFswXS5jaGlsZHJlbik7XG4gIH1cbiAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgIHBhdGguZm9yRWFjaChub3JtYWxpemVQYXRoKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICBsZXQgX3N2Z1BhdGhFeHAgPSAvW2FjaGxtcXN0dnpdfCgtP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuICAgICAgX3NjaWVudGlmaWMgPSAvW1xcK1xcLV0/XFxkKlxcLj9cXGQrZVtcXCtcXC1dP1xcZCsvaWcsXG4gICAgICBkID0gcGF0aFswXS5nZXRBdHRyaWJ1dGUoXCJkXCIpLFxuICAgICAgYSA9IGQucmVwbGFjZShfc2NpZW50aWZpYywgbSA9PiB7IGxldCBuID0gK207IHJldHVybiAobiA8IDAuMDAwMSAmJiBuID4gLTAuMDAwMSkgPyAwIDogbjsgfSkubWF0Y2goX3N2Z1BhdGhFeHApLFxuICAgICAgbnVtcyA9IGEuZmlsdGVyKG4gPT4gIWlzTmFOKG4pKS5tYXAobiA9PiArbiksXG4gICAgICBub3JtYWxpemUgPSBnc2FwLnV0aWxzLm5vcm1hbGl6ZShNYXRoLm1pbiguLi5udW1zKSwgTWF0aC5tYXgoLi4ubnVtcykpLFxuICAgICAgZmluYWxzID0gYS5tYXAodmFsID0+IGlzTmFOKHZhbCkgPyB2YWwgOiBub3JtYWxpemUoK3ZhbCkpLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBwcmV2V2FzQ29tbWFuZDtcbiAgZmluYWxzLmZvckVhY2goKHZhbHVlLCBpKSA9PiB7XG4gICAgbGV0IGlzQ29tbWFuZCA9IGlzTmFOKHZhbHVlKVxuICAgIHMgKz0gKGlzQ29tbWFuZCAmJiBpID8gXCIgXCIgOiBwcmV2V2FzQ29tbWFuZCB8fCAhaSA/IFwiXCIgOiBcIixcIikgKyB2YWx1ZTtcbiAgICBwcmV2V2FzQ29tbWFuZCA9IGlzQ29tbWFuZDtcbiAgfSk7XG4gIHBhdGhbMF0uc2V0QXR0cmlidXRlKFwiZFwiLCBzKTtcbn1cbiovIiwiLy8gcGFja2FnZS5qc29uXG52YXIgdmVyc2lvbiA9IFwiMS4zLjRcIjtcblxuLy8gcGFja2FnZXMvY29yZS9zcmMvbWF0aHMudHNcbmZ1bmN0aW9uIGNsYW1wKG1pbiwgaW5wdXQsIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihpbnB1dCwgbWF4KSk7XG59XG5mdW5jdGlvbiBsZXJwKHgsIHksIHQpIHtcbiAgcmV0dXJuICgxIC0gdCkgKiB4ICsgdCAqIHk7XG59XG5mdW5jdGlvbiBkYW1wKHgsIHksIGxhbWJkYSwgZGVsdGFUaW1lKSB7XG4gIHJldHVybiBsZXJwKHgsIHksIDEgLSBNYXRoLmV4cCgtbGFtYmRhICogZGVsdGFUaW1lKSk7XG59XG5mdW5jdGlvbiBtb2R1bG8obiwgZCkge1xuICByZXR1cm4gKG4gJSBkICsgZCkgJSBkO1xufVxuXG4vLyBwYWNrYWdlcy9jb3JlL3NyYy9hbmltYXRlLnRzXG52YXIgQW5pbWF0ZSA9IGNsYXNzIHtcbiAgaXNSdW5uaW5nID0gZmFsc2U7XG4gIHZhbHVlID0gMDtcbiAgZnJvbSA9IDA7XG4gIHRvID0gMDtcbiAgY3VycmVudFRpbWUgPSAwO1xuICAvLyBUaGVzZSBhcmUgaW5zdGFuY2lhdGVkIGluIHRoZSBmcm9tVG8gbWV0aG9kXG4gIGxlcnA7XG4gIGR1cmF0aW9uO1xuICBlYXNpbmc7XG4gIG9uVXBkYXRlO1xuICAvKipcbiAgICogQWR2YW5jZSB0aGUgYW5pbWF0aW9uIGJ5IHRoZSBnaXZlbiBkZWx0YSB0aW1lXG4gICAqXG4gICAqIEBwYXJhbSBkZWx0YVRpbWUgLSBUaGUgdGltZSBpbiBzZWNvbmRzIHRvIGFkdmFuY2UgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgYWR2YW5jZShkZWx0YVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSByZXR1cm47XG4gICAgbGV0IGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmR1cmF0aW9uICYmIHRoaXMuZWFzaW5nKSB7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lICs9IGRlbHRhVGltZTtcbiAgICAgIGNvbnN0IGxpbmVhclByb2dyZXNzID0gY2xhbXAoMCwgdGhpcy5jdXJyZW50VGltZSAvIHRoaXMuZHVyYXRpb24sIDEpO1xuICAgICAgY29tcGxldGVkID0gbGluZWFyUHJvZ3Jlc3MgPj0gMTtcbiAgICAgIGNvbnN0IGVhc2VkUHJvZ3Jlc3MgPSBjb21wbGV0ZWQgPyAxIDogdGhpcy5lYXNpbmcobGluZWFyUHJvZ3Jlc3MpO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZnJvbSArICh0aGlzLnRvIC0gdGhpcy5mcm9tKSAqIGVhc2VkUHJvZ3Jlc3M7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlcnApIHtcbiAgICAgIHRoaXMudmFsdWUgPSBkYW1wKHRoaXMudmFsdWUsIHRoaXMudG8sIHRoaXMubGVycCAqIDYwLCBkZWx0YVRpbWUpO1xuICAgICAgaWYgKE1hdGgucm91bmQodGhpcy52YWx1ZSkgPT09IHRoaXMudG8pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudG87XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnRvO1xuICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfVxuICAgIHRoaXMub25VcGRhdGU/Lih0aGlzLnZhbHVlLCBjb21wbGV0ZWQpO1xuICB9XG4gIC8qKiBTdG9wIHRoZSBhbmltYXRpb24gKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdXAgdGhlIGFuaW1hdGlvbiBmcm9tIGEgc3RhcnRpbmcgdmFsdWUgdG8gYW4gZW5kaW5nIHZhbHVlXG4gICAqIHdpdGggb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgbGVycGluZywgZHVyYXRpb24sIGVhc2luZywgYW5kIG9uVXBkYXRlIGNhbGxiYWNrXG4gICAqXG4gICAqIEBwYXJhbSBmcm9tIC0gVGhlIHN0YXJ0aW5nIHZhbHVlXG4gICAqIEBwYXJhbSB0byAtIFRoZSBlbmRpbmcgdmFsdWVcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgYW5pbWF0aW9uXG4gICAqL1xuICBmcm9tVG8oZnJvbSwgdG8sIHsgbGVycDogbGVycDIsIGR1cmF0aW9uLCBlYXNpbmcsIG9uU3RhcnQsIG9uVXBkYXRlIH0pIHtcbiAgICB0aGlzLmZyb20gPSB0aGlzLnZhbHVlID0gZnJvbTtcbiAgICB0aGlzLnRvID0gdG87XG4gICAgdGhpcy5sZXJwID0gbGVycDI7XG4gICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMuZWFzaW5nID0gZWFzaW5nO1xuICAgIHRoaXMuY3VycmVudFRpbWUgPSAwO1xuICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICBvblN0YXJ0Py4oKTtcbiAgICB0aGlzLm9uVXBkYXRlID0gb25VcGRhdGU7XG4gIH1cbn07XG5cbi8vIHBhY2thZ2VzL2NvcmUvc3JjL2RlYm91bmNlLnRzXG5mdW5jdGlvbiBkZWJvdW5jZShjYWxsYmFjaywgZGVsYXkpIHtcbiAgbGV0IHRpbWVyO1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aW1lciA9IHZvaWQgMDtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcbn1cblxuLy8gcGFja2FnZXMvY29yZS9zcmMvZGltZW5zaW9ucy50c1xudmFyIERpbWVuc2lvbnMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHdyYXBwZXIsIGNvbnRlbnQsIHsgYXV0b1Jlc2l6ZSA9IHRydWUsIGRlYm91bmNlOiBkZWJvdW5jZVZhbHVlID0gMjUwIH0gPSB7fSkge1xuICAgIHRoaXMud3JhcHBlciA9IHdyYXBwZXI7XG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICBpZiAoYXV0b1Jlc2l6ZSkge1xuICAgICAgdGhpcy5kZWJvdW5jZWRSZXNpemUgPSBkZWJvdW5jZSh0aGlzLnJlc2l6ZSwgZGVib3VuY2VWYWx1ZSk7XG4gICAgICBpZiAodGhpcy53cmFwcGVyIGluc3RhbmNlb2YgV2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuZGVib3VuY2VkUmVzaXplLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndyYXBwZXJSZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcih0aGlzLmRlYm91bmNlZFJlc2l6ZSk7XG4gICAgICAgIHRoaXMud3JhcHBlclJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy53cmFwcGVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udGVudFJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMuZGVib3VuY2VkUmVzaXplKTtcbiAgICAgIHRoaXMuY29udGVudFJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5jb250ZW50KTtcbiAgICB9XG4gICAgdGhpcy5yZXNpemUoKTtcbiAgfVxuICB3aWR0aCA9IDA7XG4gIGhlaWdodCA9IDA7XG4gIHNjcm9sbEhlaWdodCA9IDA7XG4gIHNjcm9sbFdpZHRoID0gMDtcbiAgLy8gVGhlc2UgYXJlIGluc3RhbmNpYXRlZCBpbiB0aGUgY29uc3RydWN0b3IgYXMgdGhleSBuZWVkIGluZm9ybWF0aW9uIGZyb20gdGhlIG9wdGlvbnNcbiAgZGVib3VuY2VkUmVzaXplO1xuICB3cmFwcGVyUmVzaXplT2JzZXJ2ZXI7XG4gIGNvbnRlbnRSZXNpemVPYnNlcnZlcjtcbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLndyYXBwZXJSZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xuICAgIHRoaXMuY29udGVudFJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgaWYgKHRoaXMud3JhcHBlciA9PT0gd2luZG93ICYmIHRoaXMuZGVib3VuY2VkUmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmRlYm91bmNlZFJlc2l6ZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXNpemUgPSAoKSA9PiB7XG4gICAgdGhpcy5vbldyYXBwZXJSZXNpemUoKTtcbiAgICB0aGlzLm9uQ29udGVudFJlc2l6ZSgpO1xuICB9O1xuICBvbldyYXBwZXJSZXNpemUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMud3JhcHBlciBpbnN0YW5jZW9mIFdpbmRvdykge1xuICAgICAgdGhpcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLndyYXBwZXIuY2xpZW50V2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQ7XG4gICAgfVxuICB9O1xuICBvbkNvbnRlbnRSZXNpemUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMud3JhcHBlciBpbnN0YW5jZW9mIFdpbmRvdykge1xuICAgICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmNvbnRlbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgdGhpcy5zY3JvbGxXaWR0aCA9IHRoaXMuY29udGVudC5zY3JvbGxXaWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLndyYXBwZXIuc2Nyb2xsSGVpZ2h0O1xuICAgICAgdGhpcy5zY3JvbGxXaWR0aCA9IHRoaXMud3JhcHBlci5zY3JvbGxXaWR0aDtcbiAgICB9XG4gIH07XG4gIGdldCBsaW1pdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogdGhpcy5zY3JvbGxXaWR0aCAtIHRoaXMud2lkdGgsXG4gICAgICB5OiB0aGlzLnNjcm9sbEhlaWdodCAtIHRoaXMuaGVpZ2h0XG4gICAgfTtcbiAgfVxufTtcblxuLy8gcGFja2FnZXMvY29yZS9zcmMvZW1pdHRlci50c1xudmFyIEVtaXR0ZXIgPSBjbGFzcyB7XG4gIGV2ZW50cyA9IHt9O1xuICAvKipcbiAgICogRW1pdCBhbiBldmVudCB3aXRoIHRoZSBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSBldmVudCBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSBhcmdzIERhdGEgdG8gcGFzcyB0byB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICovXG4gIGVtaXQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrc1tpXT8uKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIGEgY2FsbGJhY2sgdG8gdGhlIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudCBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSBjYiBDYWxsYmFjayBmdW5jdGlvblxuICAgKiBAcmV0dXJucyBVbnN1YnNjcmliZSBmdW5jdGlvblxuICAgKi9cbiAgb24oZXZlbnQsIGNiKSB7XG4gICAgdGhpcy5ldmVudHNbZXZlbnRdPy5wdXNoKGNiKSB8fCAodGhpcy5ldmVudHNbZXZlbnRdID0gW2NiXSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IHRoaXMuZXZlbnRzW2V2ZW50XT8uZmlsdGVyKChpKSA9PiBjYiAhPT0gaSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgZXZlbnRcbiAgICogQHBhcmFtIGV2ZW50IEV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudHNbZXZlbnRdID0gdGhpcy5ldmVudHNbZXZlbnRdPy5maWx0ZXIoKGkpID0+IGNhbGxiYWNrICE9PSBpKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBldmVudCBsaXN0ZW5lcnMgYW5kIGNsZWFuIHVwXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRzID0ge307XG4gIH1cbn07XG5cbi8vIHBhY2thZ2VzL2NvcmUvc3JjL3ZpcnR1YWwtc2Nyb2xsLnRzXG52YXIgTElORV9IRUlHSFQgPSAxMDAgLyA2O1xudmFyIGxpc3RlbmVyT3B0aW9ucyA9IHsgcGFzc2l2ZTogZmFsc2UgfTtcbnZhciBWaXJ0dWFsU2Nyb2xsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0geyB3aGVlbE11bHRpcGxpZXI6IDEsIHRvdWNoTXVsdGlwbGllcjogMSB9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLm9uV2hlZWwsIGxpc3RlbmVyT3B0aW9ucyk7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcInRvdWNoc3RhcnRcIixcbiAgICAgIHRoaXMub25Ub3VjaFN0YXJ0LFxuICAgICAgbGlzdGVuZXJPcHRpb25zXG4gICAgKTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwidG91Y2htb3ZlXCIsXG4gICAgICB0aGlzLm9uVG91Y2hNb3ZlLFxuICAgICAgbGlzdGVuZXJPcHRpb25zXG4gICAgKTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMub25Ub3VjaEVuZCwgbGlzdGVuZXJPcHRpb25zKTtcbiAgfVxuICB0b3VjaFN0YXJ0ID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuICBsYXN0RGVsdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG4gIHdpbmRvdyA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfTtcbiAgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudCBhbmQgY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IEV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgLyoqIFJlbW92ZSBhbGwgZXZlbnQgbGlzdGVuZXJzIGFuZCBjbGVhbiB1cCAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZW1pdHRlci5kZXN0cm95KCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZSwgZmFsc2UpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5vbldoZWVsLCBsaXN0ZW5lck9wdGlvbnMpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgXCJ0b3VjaHN0YXJ0XCIsXG4gICAgICB0aGlzLm9uVG91Y2hTdGFydCxcbiAgICAgIGxpc3RlbmVyT3B0aW9uc1xuICAgICk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcInRvdWNobW92ZVwiLFxuICAgICAgdGhpcy5vblRvdWNoTW92ZSxcbiAgICAgIGxpc3RlbmVyT3B0aW9uc1xuICAgICk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcInRvdWNoZW5kXCIsXG4gICAgICB0aGlzLm9uVG91Y2hFbmQsXG4gICAgICBsaXN0ZW5lck9wdGlvbnNcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciAndG91Y2hzdGFydCcgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRvdWNoIGV2ZW50XG4gICAqL1xuICBvblRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGV2ZW50LnRhcmdldFRvdWNoZXMgPyBldmVudC50YXJnZXRUb3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgdGhpcy50b3VjaFN0YXJ0LnggPSBjbGllbnRYO1xuICAgIHRoaXMudG91Y2hTdGFydC55ID0gY2xpZW50WTtcbiAgICB0aGlzLmxhc3REZWx0YSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChcInNjcm9sbFwiLCB7XG4gICAgICBkZWx0YVg6IDAsXG4gICAgICBkZWx0YVk6IDAsXG4gICAgICBldmVudFxuICAgIH0pO1xuICB9O1xuICAvKiogRXZlbnQgaGFuZGxlciBmb3IgJ3RvdWNobW92ZScgZXZlbnQgKi9cbiAgb25Ub3VjaE1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGV2ZW50LnRhcmdldFRvdWNoZXMgPyBldmVudC50YXJnZXRUb3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgY29uc3QgZGVsdGFYID0gLShjbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0LngpICogdGhpcy5vcHRpb25zLnRvdWNoTXVsdGlwbGllcjtcbiAgICBjb25zdCBkZWx0YVkgPSAtKGNsaWVudFkgLSB0aGlzLnRvdWNoU3RhcnQueSkgKiB0aGlzLm9wdGlvbnMudG91Y2hNdWx0aXBsaWVyO1xuICAgIHRoaXMudG91Y2hTdGFydC54ID0gY2xpZW50WDtcbiAgICB0aGlzLnRvdWNoU3RhcnQueSA9IGNsaWVudFk7XG4gICAgdGhpcy5sYXN0RGVsdGEgPSB7XG4gICAgICB4OiBkZWx0YVgsXG4gICAgICB5OiBkZWx0YVlcbiAgICB9O1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KFwic2Nyb2xsXCIsIHtcbiAgICAgIGRlbHRhWCxcbiAgICAgIGRlbHRhWSxcbiAgICAgIGV2ZW50XG4gICAgfSk7XG4gIH07XG4gIG9uVG91Y2hFbmQgPSAoZXZlbnQpID0+IHtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChcInNjcm9sbFwiLCB7XG4gICAgICBkZWx0YVg6IHRoaXMubGFzdERlbHRhLngsXG4gICAgICBkZWx0YVk6IHRoaXMubGFzdERlbHRhLnksXG4gICAgICBldmVudFxuICAgIH0pO1xuICB9O1xuICAvKiogRXZlbnQgaGFuZGxlciBmb3IgJ3doZWVsJyBldmVudCAqL1xuICBvbldoZWVsID0gKGV2ZW50KSA9PiB7XG4gICAgbGV0IHsgZGVsdGFYLCBkZWx0YVksIGRlbHRhTW9kZSB9ID0gZXZlbnQ7XG4gICAgY29uc3QgbXVsdGlwbGllclggPSBkZWx0YU1vZGUgPT09IDEgPyBMSU5FX0hFSUdIVCA6IGRlbHRhTW9kZSA9PT0gMiA/IHRoaXMud2luZG93LndpZHRoIDogMTtcbiAgICBjb25zdCBtdWx0aXBsaWVyWSA9IGRlbHRhTW9kZSA9PT0gMSA/IExJTkVfSEVJR0hUIDogZGVsdGFNb2RlID09PSAyID8gdGhpcy53aW5kb3cuaGVpZ2h0IDogMTtcbiAgICBkZWx0YVggKj0gbXVsdGlwbGllclg7XG4gICAgZGVsdGFZICo9IG11bHRpcGxpZXJZO1xuICAgIGRlbHRhWCAqPSB0aGlzLm9wdGlvbnMud2hlZWxNdWx0aXBsaWVyO1xuICAgIGRlbHRhWSAqPSB0aGlzLm9wdGlvbnMud2hlZWxNdWx0aXBsaWVyO1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KFwic2Nyb2xsXCIsIHsgZGVsdGFYLCBkZWx0YVksIGV2ZW50IH0pO1xuICB9O1xuICBvbldpbmRvd1Jlc2l6ZSA9ICgpID0+IHtcbiAgICB0aGlzLndpbmRvdyA9IHtcbiAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0XG4gICAgfTtcbiAgfTtcbn07XG5cbi8vIHBhY2thZ2VzL2NvcmUvc3JjL2xlbmlzLnRzXG52YXIgZGVmYXVsdEVhc2luZyA9ICh0KSA9PiBNYXRoLm1pbigxLCAxLjAwMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpKTtcbnZhciBMZW5pcyA9IGNsYXNzIHtcbiAgX2lzU2Nyb2xsaW5nID0gZmFsc2U7XG4gIC8vIHRydWUgd2hlbiBzY3JvbGwgaXMgYW5pbWF0aW5nXG4gIF9pc1N0b3BwZWQgPSBmYWxzZTtcbiAgLy8gdHJ1ZSBpZiB1c2VyIHNob3VsZCBub3QgYmUgYWJsZSB0byBzY3JvbGwgLSBlbmFibGUvZGlzYWJsZSBwcm9ncmFtbWF0aWNhbGx5XG4gIF9pc0xvY2tlZCA9IGZhbHNlO1xuICAvLyBzYW1lIGFzIGlzU3RvcHBlZCBidXQgZW5hYmxlZC9kaXNhYmxlZCB3aGVuIHNjcm9sbCByZWFjaGVzIHRhcmdldFxuICBfcHJldmVudE5leHROYXRpdmVTY3JvbGxFdmVudCA9IGZhbHNlO1xuICBfcmVzZXRWZWxvY2l0eVRpbWVvdXQgPSBudWxsO1xuICBfX3JhZklEID0gbnVsbDtcbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIGlzIHRvdWNoaW5nIHRoZSBzY3JlZW5cbiAgICovXG4gIGlzVG91Y2hpbmc7XG4gIC8qKlxuICAgKiBUaGUgdGltZSBpbiBtcyBzaW5jZSB0aGUgbGVuaXMgaW5zdGFuY2Ugd2FzIGNyZWF0ZWRcbiAgICovXG4gIHRpbWUgPSAwO1xuICAvKipcbiAgICogVXNlciBkYXRhIHRoYXQgd2lsbCBiZSBmb3J3YXJkZWQgdGhyb3VnaCB0aGUgc2Nyb2xsIGV2ZW50XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGxlbmlzLnNjcm9sbFRvKDEwMCwge1xuICAgKiAgIHVzZXJEYXRhOiB7XG4gICAqICAgICBmb286ICdiYXInXG4gICAqICAgfVxuICAgKiB9KVxuICAgKi9cbiAgdXNlckRhdGEgPSB7fTtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IHZlbG9jaXR5IG9mIHRoZSBzY3JvbGxcbiAgICovXG4gIGxhc3RWZWxvY2l0eSA9IDA7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2ZWxvY2l0eSBvZiB0aGUgc2Nyb2xsXG4gICAqL1xuICB2ZWxvY2l0eSA9IDA7XG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBzY3JvbGxcbiAgICovXG4gIGRpcmVjdGlvbiA9IDA7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIGxlbmlzIGluc3RhbmNlXG4gICAqL1xuICBvcHRpb25zO1xuICAvKipcbiAgICogVGhlIHRhcmdldCBzY3JvbGwgdmFsdWVcbiAgICovXG4gIHRhcmdldFNjcm9sbDtcbiAgLyoqXG4gICAqIFRoZSBhbmltYXRlZCBzY3JvbGwgdmFsdWVcbiAgICovXG4gIGFuaW1hdGVkU2Nyb2xsO1xuICAvLyBUaGVzZSBhcmUgaW5zdGFuY2lhdGVkIGhlcmUgYXMgdGhleSBkb24ndCBuZWVkIGluZm9ybWF0aW9uIGZyb20gdGhlIG9wdGlvbnNcbiAgYW5pbWF0ZSA9IG5ldyBBbmltYXRlKCk7XG4gIGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAvLyBUaGVzZSBhcmUgaW5zdGFuY2lhdGVkIGluIHRoZSBjb25zdHJ1Y3RvciBhcyB0aGV5IG5lZWQgaW5mb3JtYXRpb24gZnJvbSB0aGUgb3B0aW9uc1xuICBkaW1lbnNpb25zO1xuICAvLyBUaGlzIGlzIG5vdCBwcml2YXRlIGJlY2F1c2UgaXQncyB1c2VkIGluIHRoZSBTbmFwIGNsYXNzXG4gIHZpcnR1YWxTY3JvbGw7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB3cmFwcGVyID0gd2luZG93LFxuICAgIGNvbnRlbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgZXZlbnRzVGFyZ2V0ID0gd3JhcHBlcixcbiAgICBzbW9vdGhXaGVlbCA9IHRydWUsXG4gICAgc3luY1RvdWNoID0gZmFsc2UsXG4gICAgc3luY1RvdWNoTGVycCA9IDAuMDc1LFxuICAgIHRvdWNoSW5lcnRpYU11bHRpcGxpZXIgPSAzNSxcbiAgICBkdXJhdGlvbixcbiAgICAvLyBpbiBzZWNvbmRzXG4gICAgZWFzaW5nLFxuICAgIGxlcnA6IGxlcnAyID0gMC4xLFxuICAgIGluZmluaXRlID0gZmFsc2UsXG4gICAgb3JpZW50YXRpb24gPSBcInZlcnRpY2FsXCIsXG4gICAgLy8gdmVydGljYWwsIGhvcml6b250YWxcbiAgICBnZXN0dXJlT3JpZW50YXRpb24gPSBcInZlcnRpY2FsXCIsXG4gICAgLy8gdmVydGljYWwsIGhvcml6b250YWwsIGJvdGhcbiAgICB0b3VjaE11bHRpcGxpZXIgPSAxLFxuICAgIHdoZWVsTXVsdGlwbGllciA9IDEsXG4gICAgYXV0b1Jlc2l6ZSA9IHRydWUsXG4gICAgcHJldmVudCxcbiAgICB2aXJ0dWFsU2Nyb2xsLFxuICAgIG92ZXJzY3JvbGwgPSB0cnVlLFxuICAgIGF1dG9SYWYgPSBmYWxzZSxcbiAgICBhbmNob3JzID0gZmFsc2UsXG4gICAgYXV0b1RvZ2dsZSA9IGZhbHNlLFxuICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD10cmFuc2l0aW9uLWJlaGF2aW9yXG4gICAgYWxsb3dOZXN0ZWRTY3JvbGwgPSBmYWxzZSxcbiAgICBfX2V4cGVyaW1lbnRhbF9fbmFpdmVEaW1lbnNpb25zID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgd2luZG93LmxlbmlzVmVyc2lvbiA9IHZlcnNpb247XG4gICAgaWYgKCF3cmFwcGVyIHx8IHdyYXBwZXIgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgd3JhcHBlciA9IHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWFzaW5nICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGVhc2luZyA9IGRlZmF1bHRFYXNpbmc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWFzaW5nID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGR1cmF0aW9uICE9PSBcIm51bWJlclwiKSB7XG4gICAgICBkdXJhdGlvbiA9IDE7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIHdyYXBwZXIsXG4gICAgICBjb250ZW50LFxuICAgICAgZXZlbnRzVGFyZ2V0LFxuICAgICAgc21vb3RoV2hlZWwsXG4gICAgICBzeW5jVG91Y2gsXG4gICAgICBzeW5jVG91Y2hMZXJwLFxuICAgICAgdG91Y2hJbmVydGlhTXVsdGlwbGllcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZWFzaW5nLFxuICAgICAgbGVycDogbGVycDIsXG4gICAgICBpbmZpbml0ZSxcbiAgICAgIGdlc3R1cmVPcmllbnRhdGlvbixcbiAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgdG91Y2hNdWx0aXBsaWVyLFxuICAgICAgd2hlZWxNdWx0aXBsaWVyLFxuICAgICAgYXV0b1Jlc2l6ZSxcbiAgICAgIHByZXZlbnQsXG4gICAgICB2aXJ0dWFsU2Nyb2xsLFxuICAgICAgb3ZlcnNjcm9sbCxcbiAgICAgIGF1dG9SYWYsXG4gICAgICBhbmNob3JzLFxuICAgICAgYXV0b1RvZ2dsZSxcbiAgICAgIGFsbG93TmVzdGVkU2Nyb2xsLFxuICAgICAgX19leHBlcmltZW50YWxfX25haXZlRGltZW5zaW9uc1xuICAgIH07XG4gICAgdGhpcy5kaW1lbnNpb25zID0gbmV3IERpbWVuc2lvbnMod3JhcHBlciwgY29udGVudCwgeyBhdXRvUmVzaXplIH0pO1xuICAgIHRoaXMudXBkYXRlQ2xhc3NOYW1lKCk7XG4gICAgdGhpcy50YXJnZXRTY3JvbGwgPSB0aGlzLmFuaW1hdGVkU2Nyb2xsID0gdGhpcy5hY3R1YWxTY3JvbGw7XG4gICAgdGhpcy5vcHRpb25zLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uTmF0aXZlU2Nyb2xsLCBmYWxzZSk7XG4gICAgdGhpcy5vcHRpb25zLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbGVuZFwiLCB0aGlzLm9uU2Nyb2xsRW5kLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmNob3JzICYmIHRoaXMub3B0aW9ucy53cmFwcGVyID09PSB3aW5kb3cpIHtcbiAgICAgIHRoaXMub3B0aW9ucy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgdGhpcy5vbkNsaWNrLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwicG9pbnRlcmRvd25cIixcbiAgICAgIHRoaXMub25Qb2ludGVyRG93bixcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICB0aGlzLnZpcnR1YWxTY3JvbGwgPSBuZXcgVmlydHVhbFNjcm9sbChldmVudHNUYXJnZXQsIHtcbiAgICAgIHRvdWNoTXVsdGlwbGllcixcbiAgICAgIHdoZWVsTXVsdGlwbGllclxuICAgIH0pO1xuICAgIHRoaXMudmlydHVhbFNjcm9sbC5vbihcInNjcm9sbFwiLCB0aGlzLm9uVmlydHVhbFNjcm9sbCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvVG9nZ2xlKSB7XG4gICAgICB0aGlzLnJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHRoaXMub25UcmFuc2l0aW9uRW5kLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9SYWYpIHtcbiAgICAgIHRoaXMuX19yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJhZik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95IHRoZSBsZW5pcyBpbnN0YW5jZSwgcmVtb3ZlIGFsbCBldmVudCBsaXN0ZW5lcnMgYW5kIGNsZWFuIHVwIHRoZSBjbGFzcyBuYW1lXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZW1pdHRlci5kZXN0cm95KCk7XG4gICAgdGhpcy5vcHRpb25zLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwic2Nyb2xsXCIsXG4gICAgICB0aGlzLm9uTmF0aXZlU2Nyb2xsLFxuICAgICAgZmFsc2VcbiAgICApO1xuICAgIHRoaXMub3B0aW9ucy53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgdGhpcy5vblNjcm9sbEVuZCwge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMub3B0aW9ucy53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcInBvaW50ZXJkb3duXCIsXG4gICAgICB0aGlzLm9uUG9pbnRlckRvd24sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmNob3JzICYmIHRoaXMub3B0aW9ucy53cmFwcGVyID09PSB3aW5kb3cpIHtcbiAgICAgIHRoaXMub3B0aW9ucy53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgdGhpcy5vbkNsaWNrLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy52aXJ0dWFsU2Nyb2xsLmRlc3Ryb3koKTtcbiAgICB0aGlzLmRpbWVuc2lvbnMuZGVzdHJveSgpO1xuICAgIHRoaXMuY2xlYW5VcENsYXNzTmFtZSgpO1xuICAgIGlmICh0aGlzLl9fcmFmSUQpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX19yYWZJRCk7XG4gICAgfVxuICB9XG4gIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vZmYoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvblNjcm9sbEVuZCA9IChlKSA9PiB7XG4gICAgaWYgKCEoZSBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50KSkge1xuICAgICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcgPT09IFwic21vb3RoXCIgfHwgdGhpcy5pc1Njcm9sbGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGRpc3BhdGNoU2Nyb2xsZW5kRXZlbnQgPSAoKSA9PiB7XG4gICAgdGhpcy5vcHRpb25zLndyYXBwZXIuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChcInNjcm9sbGVuZFwiLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRoaXMub3B0aW9ucy53cmFwcGVyID09PSB3aW5kb3csXG4gICAgICAgIC8vIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBsZW5pc1Njcm9sbEVuZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH07XG4gIG9uVHJhbnNpdGlvbkVuZCA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5wcm9wZXJ0eU5hbWUuaW5jbHVkZXMoXCJvdmVyZmxvd1wiKSkge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSB0aGlzLmlzSG9yaXpvbnRhbCA/IFwib3ZlcmZsb3cteFwiIDogXCJvdmVyZmxvdy15XCI7XG4gICAgICBjb25zdCBvdmVyZmxvdyA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5yb290RWxlbWVudClbcHJvcGVydHldO1xuICAgICAgaWYgKFtcImhpZGRlblwiLCBcImNsaXBcIl0uaW5jbHVkZXMob3ZlcmZsb3cpKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0U2Nyb2xsKHNjcm9sbCkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy5vcHRpb25zLndyYXBwZXIuc2Nyb2xsVG8oeyBsZWZ0OiBzY3JvbGwsIGJlaGF2aW9yOiBcImluc3RhbnRcIiB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zLndyYXBwZXIuc2Nyb2xsVG8oeyB0b3A6IHNjcm9sbCwgYmVoYXZpb3I6IFwiaW5zdGFudFwiIH0pO1xuICAgIH1cbiAgfVxuICBvbkNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgcGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICAgIGNvbnN0IGFuY2hvciA9IHBhdGguZmluZChcbiAgICAgIChub2RlKSA9PiBub2RlIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgKG5vZGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKT8uc3RhcnRzV2l0aChcIiNcIikgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpPy5zdGFydHNXaXRoKFwiLyNcIikgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpPy5zdGFydHNXaXRoKFwiLi8jXCIpKVxuICAgICk7XG4gICAgaWYgKGFuY2hvcikge1xuICAgICAgY29uc3QgaWQgPSBhbmNob3IuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIGlmIChpZCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdHlwZW9mIHRoaXMub3B0aW9ucy5hbmNob3JzID09PSBcIm9iamVjdFwiICYmIHRoaXMub3B0aW9ucy5hbmNob3JzID8gdGhpcy5vcHRpb25zLmFuY2hvcnMgOiB2b2lkIDA7XG4gICAgICAgIGxldCB0YXJnZXQgPSBgIyR7aWQuc3BsaXQoXCIjXCIpWzFdfWA7XG4gICAgICAgIGlmIChbXCIjXCIsIFwiLyNcIiwgXCIuLyNcIiwgXCIjdG9wXCIsIFwiLyN0b3BcIiwgXCIuLyN0b3BcIl0uaW5jbHVkZXMoaWQpKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcm9sbFRvKHRhcmdldCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBvblBvaW50ZXJEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMSkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgfTtcbiAgb25WaXJ0dWFsU2Nyb2xsID0gKGRhdGEpID0+IHtcbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy52aXJ0dWFsU2Nyb2xsID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5vcHRpb25zLnZpcnR1YWxTY3JvbGwoZGF0YSkgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgZGVsdGFYLCBkZWx0YVksIGV2ZW50IH0gPSBkYXRhO1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KFwidmlydHVhbC1zY3JvbGxcIiwgeyBkZWx0YVgsIGRlbHRhWSwgZXZlbnQgfSk7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIHJldHVybjtcbiAgICBpZiAoZXZlbnQubGVuaXNTdG9wUHJvcGFnYXRpb24pIHJldHVybjtcbiAgICBjb25zdCBpc1RvdWNoID0gZXZlbnQudHlwZS5pbmNsdWRlcyhcInRvdWNoXCIpO1xuICAgIGNvbnN0IGlzV2hlZWwgPSBldmVudC50eXBlLmluY2x1ZGVzKFwid2hlZWxcIik7XG4gICAgdGhpcy5pc1RvdWNoaW5nID0gZXZlbnQudHlwZSA9PT0gXCJ0b3VjaHN0YXJ0XCIgfHwgZXZlbnQudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIjtcbiAgICBjb25zdCBpc0NsaWNrT3JUYXAgPSBkZWx0YVggPT09IDAgJiYgZGVsdGFZID09PSAwO1xuICAgIGNvbnN0IGlzVGFwVG9TdG9wID0gdGhpcy5vcHRpb25zLnN5bmNUb3VjaCAmJiBpc1RvdWNoICYmIGV2ZW50LnR5cGUgPT09IFwidG91Y2hzdGFydFwiICYmIGlzQ2xpY2tPclRhcCAmJiAhdGhpcy5pc1N0b3BwZWQgJiYgIXRoaXMuaXNMb2NrZWQ7XG4gICAgaWYgKGlzVGFwVG9TdG9wKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzVW5rbm93bkdlc3R1cmUgPSB0aGlzLm9wdGlvbnMuZ2VzdHVyZU9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgJiYgZGVsdGFZID09PSAwIHx8IHRoaXMub3B0aW9ucy5nZXN0dXJlT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICYmIGRlbHRhWCA9PT0gMDtcbiAgICBpZiAoaXNDbGlja09yVGFwIHx8IGlzVW5rbm93bkdlc3R1cmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGNvbXBvc2VkUGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICAgIGNvbXBvc2VkUGF0aCA9IGNvbXBvc2VkUGF0aC5zbGljZSgwLCBjb21wb3NlZFBhdGguaW5kZXhPZih0aGlzLnJvb3RFbGVtZW50KSk7XG4gICAgY29uc3QgcHJldmVudCA9IHRoaXMub3B0aW9ucy5wcmV2ZW50O1xuICAgIGlmICghIWNvbXBvc2VkUGF0aC5maW5kKFxuICAgICAgKG5vZGUpID0+IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAodHlwZW9mIHByZXZlbnQgPT09IFwiZnVuY3Rpb25cIiAmJiBwcmV2ZW50Py4obm9kZSkgfHwgbm9kZS5oYXNBdHRyaWJ1dGU/LihcImRhdGEtbGVuaXMtcHJldmVudFwiKSB8fCBpc1RvdWNoICYmIG5vZGUuaGFzQXR0cmlidXRlPy4oXCJkYXRhLWxlbmlzLXByZXZlbnQtdG91Y2hcIikgfHwgaXNXaGVlbCAmJiBub2RlLmhhc0F0dHJpYnV0ZT8uKFwiZGF0YS1sZW5pcy1wcmV2ZW50LXdoZWVsXCIpIHx8IHRoaXMub3B0aW9ucy5hbGxvd05lc3RlZFNjcm9sbCAmJiB0aGlzLmNoZWNrTmVzdGVkU2Nyb2xsKG5vZGUsIHsgZGVsdGFYLCBkZWx0YVkgfSkpXG4gICAgKSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAodGhpcy5pc1N0b3BwZWQgfHwgdGhpcy5pc0xvY2tlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNTbW9vdGggPSB0aGlzLm9wdGlvbnMuc3luY1RvdWNoICYmIGlzVG91Y2ggfHwgdGhpcy5vcHRpb25zLnNtb290aFdoZWVsICYmIGlzV2hlZWw7XG4gICAgaWYgKCFpc1Ntb290aCkge1xuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IFwibmF0aXZlXCI7XG4gICAgICB0aGlzLmFuaW1hdGUuc3RvcCgpO1xuICAgICAgZXZlbnQubGVuaXNTdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZGVsdGEgPSBkZWx0YVk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXN0dXJlT3JpZW50YXRpb24gPT09IFwiYm90aFwiKSB7XG4gICAgICBkZWx0YSA9IE1hdGguYWJzKGRlbHRhWSkgPiBNYXRoLmFicyhkZWx0YVgpID8gZGVsdGFZIDogZGVsdGFYO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdlc3R1cmVPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgIGRlbHRhID0gZGVsdGFYO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVyc2Nyb2xsIHx8IHRoaXMub3B0aW9ucy5pbmZpbml0ZSB8fCB0aGlzLm9wdGlvbnMud3JhcHBlciAhPT0gd2luZG93ICYmICh0aGlzLmFuaW1hdGVkU2Nyb2xsID4gMCAmJiB0aGlzLmFuaW1hdGVkU2Nyb2xsIDwgdGhpcy5saW1pdCB8fCB0aGlzLmFuaW1hdGVkU2Nyb2xsID09PSAwICYmIGRlbHRhWSA+IDAgfHwgdGhpcy5hbmltYXRlZFNjcm9sbCA9PT0gdGhpcy5saW1pdCAmJiBkZWx0YVkgPCAwKSkge1xuICAgICAgZXZlbnQubGVuaXNTdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGlzU3luY1RvdWNoID0gaXNUb3VjaCAmJiB0aGlzLm9wdGlvbnMuc3luY1RvdWNoO1xuICAgIGNvbnN0IGlzVG91Y2hFbmQgPSBpc1RvdWNoICYmIGV2ZW50LnR5cGUgPT09IFwidG91Y2hlbmRcIjtcbiAgICBjb25zdCBoYXNUb3VjaEluZXJ0aWEgPSBpc1RvdWNoRW5kICYmIE1hdGguYWJzKGRlbHRhKSA+IDU7XG4gICAgaWYgKGhhc1RvdWNoSW5lcnRpYSkge1xuICAgICAgZGVsdGEgPSB0aGlzLnZlbG9jaXR5ICogdGhpcy5vcHRpb25zLnRvdWNoSW5lcnRpYU11bHRpcGxpZXI7XG4gICAgfVxuICAgIHRoaXMuc2Nyb2xsVG8odGhpcy50YXJnZXRTY3JvbGwgKyBkZWx0YSwge1xuICAgICAgcHJvZ3JhbW1hdGljOiBmYWxzZSxcbiAgICAgIC4uLmlzU3luY1RvdWNoID8ge1xuICAgICAgICBsZXJwOiBoYXNUb3VjaEluZXJ0aWEgPyB0aGlzLm9wdGlvbnMuc3luY1RvdWNoTGVycCA6IDFcbiAgICAgICAgLy8gaW1tZWRpYXRlOiAhaGFzVG91Y2hJbmVydGlhLFxuICAgICAgfSA6IHtcbiAgICAgICAgbGVycDogdGhpcy5vcHRpb25zLmxlcnAsXG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIGVhc2luZzogdGhpcy5vcHRpb25zLmVhc2luZ1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogRm9yY2UgbGVuaXMgdG8gcmVjYWxjdWxhdGUgdGhlIGRpbWVuc2lvbnNcbiAgICovXG4gIHJlc2l6ZSgpIHtcbiAgICB0aGlzLmRpbWVuc2lvbnMucmVzaXplKCk7XG4gICAgdGhpcy5hbmltYXRlZFNjcm9sbCA9IHRoaXMudGFyZ2V0U2Nyb2xsID0gdGhpcy5hY3R1YWxTY3JvbGw7XG4gICAgdGhpcy5lbWl0KCk7XG4gIH1cbiAgZW1pdCgpIHtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChcInNjcm9sbFwiLCB0aGlzKTtcbiAgfVxuICBvbk5hdGl2ZVNjcm9sbCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5fcmVzZXRWZWxvY2l0eVRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZXNldFZlbG9jaXR5VGltZW91dCk7XG4gICAgICB0aGlzLl9yZXNldFZlbG9jaXR5VGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wcmV2ZW50TmV4dE5hdGl2ZVNjcm9sbEV2ZW50KSB7XG4gICAgICB0aGlzLl9wcmV2ZW50TmV4dE5hdGl2ZVNjcm9sbEV2ZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nID09PSBmYWxzZSB8fCB0aGlzLmlzU2Nyb2xsaW5nID09PSBcIm5hdGl2ZVwiKSB7XG4gICAgICBjb25zdCBsYXN0U2Nyb2xsID0gdGhpcy5hbmltYXRlZFNjcm9sbDtcbiAgICAgIHRoaXMuYW5pbWF0ZWRTY3JvbGwgPSB0aGlzLnRhcmdldFNjcm9sbCA9IHRoaXMuYWN0dWFsU2Nyb2xsO1xuICAgICAgdGhpcy5sYXN0VmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5O1xuICAgICAgdGhpcy52ZWxvY2l0eSA9IHRoaXMuYW5pbWF0ZWRTY3JvbGwgLSBsYXN0U2Nyb2xsO1xuICAgICAgdGhpcy5kaXJlY3Rpb24gPSBNYXRoLnNpZ24oXG4gICAgICAgIHRoaXMuYW5pbWF0ZWRTY3JvbGwgLSBsYXN0U2Nyb2xsXG4gICAgICApO1xuICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gXCJuYXRpdmVcIjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdCgpO1xuICAgICAgaWYgKHRoaXMudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgdGhpcy5fcmVzZXRWZWxvY2l0eVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmxhc3RWZWxvY2l0eSA9IHRoaXMudmVsb2NpdHk7XG4gICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZW1pdCgpO1xuICAgICAgICB9LCA0MDApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pc0xvY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmFuaW1hdGVkU2Nyb2xsID0gdGhpcy50YXJnZXRTY3JvbGwgPSB0aGlzLmFjdHVhbFNjcm9sbDtcbiAgICB0aGlzLmxhc3RWZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkgPSAwO1xuICAgIHRoaXMuYW5pbWF0ZS5zdG9wKCk7XG4gIH1cbiAgLyoqXG4gICAqIFN0YXJ0IGxlbmlzIHNjcm9sbCBhZnRlciBpdCBoYXMgYmVlbiBzdG9wcGVkXG4gICAqL1xuICBzdGFydCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSByZXR1cm47XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFN0b3AgbGVuaXMgc2Nyb2xsXG4gICAqL1xuICBzdG9wKCkge1xuICAgIGlmICh0aGlzLmlzU3RvcHBlZCkgcmV0dXJuO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgdGhpcy5lbWl0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3RBbmltYXRpb25GcmFtZSBmb3IgbGVuaXNcbiAgICpcbiAgICogQHBhcmFtIHRpbWUgVGhlIHRpbWUgaW4gbXMgZnJvbSBhbiBleHRlcm5hbCBjbG9jayBsaWtlIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIG9yIFRlbXB1c1xuICAgKi9cbiAgcmFmID0gKHRpbWUpID0+IHtcbiAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gKHRoaXMudGltZSB8fCB0aW1lKTtcbiAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgIHRoaXMuYW5pbWF0ZS5hZHZhbmNlKGRlbHRhVGltZSAqIDFlLTMpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1JhZikge1xuICAgICAgdGhpcy5fX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gYSB0YXJnZXQgdmFsdWVcbiAgICpcbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHZhbHVlIHRvIHNjcm9sbCB0b1xuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIHNjcm9sbFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBsZW5pcy5zY3JvbGxUbygxMDAsIHtcbiAgICogICBvZmZzZXQ6IDEwMCxcbiAgICogICBkdXJhdGlvbjogMSxcbiAgICogICBlYXNpbmc6ICh0KSA9PiAxIC0gTWF0aC5jb3MoKHQgKiBNYXRoLlBJKSAvIDIpLFxuICAgKiAgIGxlcnA6IDAuMSxcbiAgICogICBvblN0YXJ0OiAoKSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnb25TdGFydCcpXG4gICAqICAgfSxcbiAgICogICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnb25Db21wbGV0ZScpXG4gICAqICAgfSxcbiAgICogfSlcbiAgICovXG4gIHNjcm9sbFRvKHRhcmdldCwge1xuICAgIG9mZnNldCA9IDAsXG4gICAgaW1tZWRpYXRlID0gZmFsc2UsXG4gICAgbG9jayA9IGZhbHNlLFxuICAgIGR1cmF0aW9uID0gdGhpcy5vcHRpb25zLmR1cmF0aW9uLFxuICAgIGVhc2luZyA9IHRoaXMub3B0aW9ucy5lYXNpbmcsXG4gICAgbGVycDogbGVycDIgPSB0aGlzLm9wdGlvbnMubGVycCxcbiAgICBvblN0YXJ0LFxuICAgIG9uQ29tcGxldGUsXG4gICAgZm9yY2UgPSBmYWxzZSxcbiAgICAvLyBzY3JvbGwgZXZlbiBpZiBzdG9wcGVkXG4gICAgcHJvZ3JhbW1hdGljID0gdHJ1ZSxcbiAgICAvLyBjYWxsZWQgZnJvbSBvdXRzaWRlIG9mIHRoZSBjbGFzc1xuICAgIHVzZXJEYXRhXG4gIH0gPSB7fSkge1xuICAgIGlmICgodGhpcy5pc1N0b3BwZWQgfHwgdGhpcy5pc0xvY2tlZCkgJiYgIWZvcmNlKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIgJiYgW1widG9wXCIsIFwibGVmdFwiLCBcInN0YXJ0XCJdLmluY2x1ZGVzKHRhcmdldCkpIHtcbiAgICAgIHRhcmdldCA9IDA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiICYmIFtcImJvdHRvbVwiLCBcInJpZ2h0XCIsIFwiZW5kXCJdLmluY2x1ZGVzKHRhcmdldCkpIHtcbiAgICAgIHRhcmdldCA9IHRoaXMubGltaXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBub2RlO1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGFyZ2V0Py5ub2RlVHlwZSkge1xuICAgICAgICBub2RlID0gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53cmFwcGVyICE9PSB3aW5kb3cpIHtcbiAgICAgICAgICBjb25zdCB3cmFwcGVyUmVjdCA9IHRoaXMucm9vdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgb2Zmc2V0IC09IHRoaXMuaXNIb3Jpem9udGFsID8gd3JhcHBlclJlY3QubGVmdCA6IHdyYXBwZXJSZWN0LnRvcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdGFyZ2V0ID0gKHRoaXMuaXNIb3Jpem9udGFsID8gcmVjdC5sZWZ0IDogcmVjdC50b3ApICsgdGhpcy5hbmltYXRlZFNjcm9sbDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwibnVtYmVyXCIpIHJldHVybjtcbiAgICB0YXJnZXQgKz0gb2Zmc2V0O1xuICAgIHRhcmdldCA9IE1hdGgucm91bmQodGFyZ2V0KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmluZmluaXRlKSB7XG4gICAgICBpZiAocHJvZ3JhbW1hdGljKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0U2Nyb2xsID0gdGhpcy5hbmltYXRlZFNjcm9sbCA9IHRoaXMuc2Nyb2xsO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRhcmdldCAtIHRoaXMuYW5pbWF0ZWRTY3JvbGw7XG4gICAgICAgIGlmIChkaXN0YW5jZSA+IHRoaXMubGltaXQgLyAyKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IC0gdGhpcy5saW1pdDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA8IC10aGlzLmxpbWl0IC8gMikge1xuICAgICAgICAgIHRhcmdldCA9IHRhcmdldCArIHRoaXMubGltaXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0ID0gY2xhbXAoMCwgdGFyZ2V0LCB0aGlzLmxpbWl0KTtcbiAgICB9XG4gICAgaWYgKHRhcmdldCA9PT0gdGhpcy50YXJnZXRTY3JvbGwpIHtcbiAgICAgIG9uU3RhcnQ/Lih0aGlzKTtcbiAgICAgIG9uQ29tcGxldGU/Lih0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy51c2VyRGF0YSA9IHVzZXJEYXRhID8/IHt9O1xuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIHRoaXMuYW5pbWF0ZWRTY3JvbGwgPSB0aGlzLnRhcmdldFNjcm9sbCA9IHRhcmdldDtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsKHRoaXMuc2Nyb2xsKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIHRoaXMucHJldmVudE5leHROYXRpdmVTY3JvbGxFdmVudCgpO1xuICAgICAgdGhpcy5lbWl0KCk7XG4gICAgICBvbkNvbXBsZXRlPy4odGhpcyk7XG4gICAgICB0aGlzLnVzZXJEYXRhID0ge307XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoU2Nyb2xsZW5kRXZlbnQoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb2dyYW1tYXRpYykge1xuICAgICAgdGhpcy50YXJnZXRTY3JvbGwgPSB0YXJnZXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVhc2luZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBlYXNpbmcgPSBkZWZhdWx0RWFzaW5nO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVhc2luZyA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkdXJhdGlvbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgZHVyYXRpb24gPSAxO1xuICAgIH1cbiAgICB0aGlzLmFuaW1hdGUuZnJvbVRvKHRoaXMuYW5pbWF0ZWRTY3JvbGwsIHRhcmdldCwge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBlYXNpbmcsXG4gICAgICBsZXJwOiBsZXJwMixcbiAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgaWYgKGxvY2spIHRoaXMuaXNMb2NrZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gXCJzbW9vdGhcIjtcbiAgICAgICAgb25TdGFydD8uKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiAodmFsdWUsIGNvbXBsZXRlZCkgPT4ge1xuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gXCJzbW9vdGhcIjtcbiAgICAgICAgdGhpcy5sYXN0VmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5O1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gdmFsdWUgLSB0aGlzLmFuaW1hdGVkU2Nyb2xsO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IE1hdGguc2lnbih0aGlzLnZlbG9jaXR5KTtcbiAgICAgICAgdGhpcy5hbmltYXRlZFNjcm9sbCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnNldFNjcm9sbCh0aGlzLnNjcm9sbCk7XG4gICAgICAgIGlmIChwcm9ncmFtbWF0aWMpIHtcbiAgICAgICAgICB0aGlzLnRhcmdldFNjcm9sbCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29tcGxldGVkKSB0aGlzLmVtaXQoKTtcbiAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICB0aGlzLmVtaXQoKTtcbiAgICAgICAgICBvbkNvbXBsZXRlPy4odGhpcyk7XG4gICAgICAgICAgdGhpcy51c2VyRGF0YSA9IHt9O1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoU2Nyb2xsZW5kRXZlbnQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnByZXZlbnROZXh0TmF0aXZlU2Nyb2xsRXZlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHByZXZlbnROZXh0TmF0aXZlU2Nyb2xsRXZlbnQoKSB7XG4gICAgdGhpcy5fcHJldmVudE5leHROYXRpdmVTY3JvbGxFdmVudCA9IHRydWU7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuX3ByZXZlbnROZXh0TmF0aXZlU2Nyb2xsRXZlbnQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBjaGVja05lc3RlZFNjcm9sbChub2RlLCB7IGRlbHRhWCwgZGVsdGFZIH0pIHtcbiAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBjYWNoZSA9IG5vZGUuX2xlbmlzID8/PSB7fTtcbiAgICBsZXQgaGFzT3ZlcmZsb3dYLCBoYXNPdmVyZmxvd1ksIGlzU2Nyb2xsYWJsZVgsIGlzU2Nyb2xsYWJsZVksIHNjcm9sbFdpZHRoLCBzY3JvbGxIZWlnaHQsIGNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQ7XG4gICAgY29uc3QgZ2VzdHVyZU9yaWVudGF0aW9uID0gdGhpcy5vcHRpb25zLmdlc3R1cmVPcmllbnRhdGlvbjtcbiAgICBpZiAodGltZSAtIChjYWNoZS50aW1lID8/IDApID4gMmUzKSB7XG4gICAgICBjYWNoZS50aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgIGNhY2hlLmNvbXB1dGVkU3R5bGUgPSBjb21wdXRlZFN0eWxlO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dYU3RyaW5nID0gY29tcHV0ZWRTdHlsZS5vdmVyZmxvd1g7XG4gICAgICBjb25zdCBvdmVyZmxvd1lTdHJpbmcgPSBjb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcbiAgICAgIGhhc092ZXJmbG93WCA9IFtcImF1dG9cIiwgXCJvdmVybGF5XCIsIFwic2Nyb2xsXCJdLmluY2x1ZGVzKG92ZXJmbG93WFN0cmluZyk7XG4gICAgICBoYXNPdmVyZmxvd1kgPSBbXCJhdXRvXCIsIFwib3ZlcmxheVwiLCBcInNjcm9sbFwiXS5pbmNsdWRlcyhvdmVyZmxvd1lTdHJpbmcpO1xuICAgICAgY2FjaGUuaGFzT3ZlcmZsb3dYID0gaGFzT3ZlcmZsb3dYO1xuICAgICAgY2FjaGUuaGFzT3ZlcmZsb3dZID0gaGFzT3ZlcmZsb3dZO1xuICAgICAgaWYgKCFoYXNPdmVyZmxvd1ggJiYgIWhhc092ZXJmbG93WSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKGdlc3R1cmVPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiICYmICFoYXNPdmVyZmxvd1kpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChnZXN0dXJlT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICYmICFoYXNPdmVyZmxvd1gpIHJldHVybiBmYWxzZTtcbiAgICAgIHNjcm9sbFdpZHRoID0gbm9kZS5zY3JvbGxXaWR0aDtcbiAgICAgIHNjcm9sbEhlaWdodCA9IG5vZGUuc2Nyb2xsSGVpZ2h0O1xuICAgICAgY2xpZW50V2lkdGggPSBub2RlLmNsaWVudFdpZHRoO1xuICAgICAgY2xpZW50SGVpZ2h0ID0gbm9kZS5jbGllbnRIZWlnaHQ7XG4gICAgICBpc1Njcm9sbGFibGVYID0gc2Nyb2xsV2lkdGggPiBjbGllbnRXaWR0aDtcbiAgICAgIGlzU2Nyb2xsYWJsZVkgPSBzY3JvbGxIZWlnaHQgPiBjbGllbnRIZWlnaHQ7XG4gICAgICBjYWNoZS5pc1Njcm9sbGFibGVYID0gaXNTY3JvbGxhYmxlWDtcbiAgICAgIGNhY2hlLmlzU2Nyb2xsYWJsZVkgPSBpc1Njcm9sbGFibGVZO1xuICAgICAgY2FjaGUuc2Nyb2xsV2lkdGggPSBzY3JvbGxXaWR0aDtcbiAgICAgIGNhY2hlLnNjcm9sbEhlaWdodCA9IHNjcm9sbEhlaWdodDtcbiAgICAgIGNhY2hlLmNsaWVudFdpZHRoID0gY2xpZW50V2lkdGg7XG4gICAgICBjYWNoZS5jbGllbnRIZWlnaHQgPSBjbGllbnRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzU2Nyb2xsYWJsZVggPSBjYWNoZS5pc1Njcm9sbGFibGVYO1xuICAgICAgaXNTY3JvbGxhYmxlWSA9IGNhY2hlLmlzU2Nyb2xsYWJsZVk7XG4gICAgICBoYXNPdmVyZmxvd1ggPSBjYWNoZS5oYXNPdmVyZmxvd1g7XG4gICAgICBoYXNPdmVyZmxvd1kgPSBjYWNoZS5oYXNPdmVyZmxvd1k7XG4gICAgICBzY3JvbGxXaWR0aCA9IGNhY2hlLnNjcm9sbFdpZHRoO1xuICAgICAgc2Nyb2xsSGVpZ2h0ID0gY2FjaGUuc2Nyb2xsSGVpZ2h0O1xuICAgICAgY2xpZW50V2lkdGggPSBjYWNoZS5jbGllbnRXaWR0aDtcbiAgICAgIGNsaWVudEhlaWdodCA9IGNhY2hlLmNsaWVudEhlaWdodDtcbiAgICB9XG4gICAgaWYgKCFoYXNPdmVyZmxvd1ggJiYgIWhhc092ZXJmbG93WSB8fCAhaXNTY3JvbGxhYmxlWCAmJiAhaXNTY3JvbGxhYmxlWSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZ2VzdHVyZU9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgJiYgKCFoYXNPdmVyZmxvd1kgfHwgIWlzU2Nyb2xsYWJsZVkpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChnZXN0dXJlT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICYmICghaGFzT3ZlcmZsb3dYIHx8ICFpc1Njcm9sbGFibGVYKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgb3JpZW50YXRpb247XG4gICAgaWYgKGdlc3R1cmVPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgIG9yaWVudGF0aW9uID0gXCJ4XCI7XG4gICAgfSBlbHNlIGlmIChnZXN0dXJlT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgb3JpZW50YXRpb24gPSBcInlcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXNTY3JvbGxpbmdYID0gZGVsdGFYICE9PSAwO1xuICAgICAgY29uc3QgaXNTY3JvbGxpbmdZID0gZGVsdGFZICE9PSAwO1xuICAgICAgaWYgKGlzU2Nyb2xsaW5nWCAmJiBoYXNPdmVyZmxvd1ggJiYgaXNTY3JvbGxhYmxlWCkge1xuICAgICAgICBvcmllbnRhdGlvbiA9IFwieFwiO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2Nyb2xsaW5nWSAmJiBoYXNPdmVyZmxvd1kgJiYgaXNTY3JvbGxhYmxlWSkge1xuICAgICAgICBvcmllbnRhdGlvbiA9IFwieVwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW9yaWVudGF0aW9uKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHNjcm9sbCwgbWF4U2Nyb2xsLCBkZWx0YSwgaGFzT3ZlcmZsb3csIGlzU2Nyb2xsYWJsZTtcbiAgICBpZiAob3JpZW50YXRpb24gPT09IFwieFwiKSB7XG4gICAgICBzY3JvbGwgPSBub2RlLnNjcm9sbExlZnQ7XG4gICAgICBtYXhTY3JvbGwgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoO1xuICAgICAgZGVsdGEgPSBkZWx0YVg7XG4gICAgICBoYXNPdmVyZmxvdyA9IGhhc092ZXJmbG93WDtcbiAgICAgIGlzU2Nyb2xsYWJsZSA9IGlzU2Nyb2xsYWJsZVg7XG4gICAgfSBlbHNlIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ5XCIpIHtcbiAgICAgIHNjcm9sbCA9IG5vZGUuc2Nyb2xsVG9wO1xuICAgICAgbWF4U2Nyb2xsID0gc2Nyb2xsSGVpZ2h0IC0gY2xpZW50SGVpZ2h0O1xuICAgICAgZGVsdGEgPSBkZWx0YVk7XG4gICAgICBoYXNPdmVyZmxvdyA9IGhhc092ZXJmbG93WTtcbiAgICAgIGlzU2Nyb2xsYWJsZSA9IGlzU2Nyb2xsYWJsZVk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbFNjcm9sbCA9IGRlbHRhID4gMCA/IHNjcm9sbCA8IG1heFNjcm9sbCA6IHNjcm9sbCA+IDA7XG4gICAgcmV0dXJuIHdpbGxTY3JvbGwgJiYgaGFzT3ZlcmZsb3cgJiYgaXNTY3JvbGxhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcm9vdCBlbGVtZW50IG9uIHdoaWNoIGxlbmlzIGlzIGluc3RhbmNlZFxuICAgKi9cbiAgZ2V0IHJvb3RFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JhcHBlciA9PT0gd2luZG93ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogdGhpcy5vcHRpb25zLndyYXBwZXI7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBsaW1pdCB3aGljaCBpcyB0aGUgbWF4aW11bSBzY3JvbGwgdmFsdWVcbiAgICovXG4gIGdldCBsaW1pdCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLl9fZXhwZXJpbWVudGFsX19uYWl2ZURpbWVuc2lvbnMpIHtcbiAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290RWxlbWVudC5zY3JvbGxXaWR0aCAtIHRoaXMucm9vdEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290RWxlbWVudC5zY3JvbGxIZWlnaHQgLSB0aGlzLnJvb3RFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZGltZW5zaW9ucy5saW1pdFt0aGlzLmlzSG9yaXpvbnRhbCA/IFwieFwiIDogXCJ5XCJdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhlIHNjcm9sbCBpcyBob3Jpem9udGFsXG4gICAqL1xuICBnZXQgaXNIb3Jpem9udGFsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgYWN0dWFsIHNjcm9sbCB2YWx1ZVxuICAgKi9cbiAgZ2V0IGFjdHVhbFNjcm9sbCgpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5vcHRpb25zLndyYXBwZXI7XG4gICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsID8gd3JhcHBlci5zY3JvbGxYID8/IHdyYXBwZXIuc2Nyb2xsTGVmdCA6IHdyYXBwZXIuc2Nyb2xsWSA/PyB3cmFwcGVyLnNjcm9sbFRvcDtcbiAgfVxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc2Nyb2xsIHZhbHVlXG4gICAqL1xuICBnZXQgc2Nyb2xsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaW5maW5pdGUgPyBtb2R1bG8odGhpcy5hbmltYXRlZFNjcm9sbCwgdGhpcy5saW1pdCkgOiB0aGlzLmFuaW1hdGVkU2Nyb2xsO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcHJvZ3Jlc3Mgb2YgdGhlIHNjcm9sbCByZWxhdGl2ZSB0byB0aGUgbGltaXRcbiAgICovXG4gIGdldCBwcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5saW1pdCA9PT0gMCA/IDEgOiB0aGlzLnNjcm9sbCAvIHRoaXMubGltaXQ7XG4gIH1cbiAgLyoqXG4gICAqIEN1cnJlbnQgc2Nyb2xsIHN0YXRlXG4gICAqL1xuICBnZXQgaXNTY3JvbGxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2Nyb2xsaW5nO1xuICB9XG4gIHNldCBpc1Njcm9sbGluZyh2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc1Njcm9sbGluZyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2lzU2Nyb2xsaW5nID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZUNsYXNzTmFtZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgbGVuaXMgaXMgc3RvcHBlZFxuICAgKi9cbiAgZ2V0IGlzU3RvcHBlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdG9wcGVkO1xuICB9XG4gIHNldCBpc1N0b3BwZWQodmFsdWUpIHtcbiAgICBpZiAodGhpcy5faXNTdG9wcGVkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5faXNTdG9wcGVkID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZUNsYXNzTmFtZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgbGVuaXMgaXMgbG9ja2VkXG4gICAqL1xuICBnZXQgaXNMb2NrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9ja2VkO1xuICB9XG4gIHNldCBpc0xvY2tlZCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0xvY2tlZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2lzTG9ja2VkID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZUNsYXNzTmFtZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgbGVuaXMgaXMgc21vb3RoIHNjcm9sbGluZ1xuICAgKi9cbiAgZ2V0IGlzU21vb3RoKCkge1xuICAgIHJldHVybiB0aGlzLmlzU2Nyb2xsaW5nID09PSBcInNtb290aFwiO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgY2xhc3MgbmFtZSBhcHBsaWVkIHRvIHRoZSB3cmFwcGVyIGVsZW1lbnRcbiAgICovXG4gIGdldCBjbGFzc05hbWUoKSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwibGVuaXNcIjtcbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Ub2dnbGUpIGNsYXNzTmFtZSArPSBcIiBsZW5pcy1hdXRvVG9nZ2xlXCI7XG4gICAgaWYgKHRoaXMuaXNTdG9wcGVkKSBjbGFzc05hbWUgKz0gXCIgbGVuaXMtc3RvcHBlZFwiO1xuICAgIGlmICh0aGlzLmlzTG9ja2VkKSBjbGFzc05hbWUgKz0gXCIgbGVuaXMtbG9ja2VkXCI7XG4gICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcpIGNsYXNzTmFtZSArPSBcIiBsZW5pcy1zY3JvbGxpbmdcIjtcbiAgICBpZiAodGhpcy5pc1Njcm9sbGluZyA9PT0gXCJzbW9vdGhcIikgY2xhc3NOYW1lICs9IFwiIGxlbmlzLXNtb290aFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbiAgdXBkYXRlQ2xhc3NOYW1lKCkge1xuICAgIHRoaXMuY2xlYW5VcENsYXNzTmFtZSgpO1xuICAgIHRoaXMucm9vdEVsZW1lbnQuY2xhc3NOYW1lID0gYCR7dGhpcy5yb290RWxlbWVudC5jbGFzc05hbWV9ICR7dGhpcy5jbGFzc05hbWV9YC50cmltKCk7XG4gIH1cbiAgY2xlYW5VcENsYXNzTmFtZSgpIHtcbiAgICB0aGlzLnJvb3RFbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMucm9vdEVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoL2xlbmlzKC1cXHcrKT8vZywgXCJcIikudHJpbSgpO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgTGVuaXMgYXMgZGVmYXVsdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbmlzLm1qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xuXG4vKiogQHR5cGVkZWYge2FueX0gVE9ETyAqL1xuXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZShcIi4vbm9ybWFsaXplLXVybFwiKTtcbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiO1xudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqIEByZXR1cm5zIHsoZnVuY3Rpb24oKTogdm9pZCl8Kn1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWUpIHtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gbW9kdWxlSWRcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gKCAvKiogQHR5cGUge0hUTUxTY3JpcHRFbGVtZW50fSAqL2RvY3VtZW50LmN1cnJlbnRTY3JpcHQpLnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcbiAgICAgIHZhciBsYXN0U2NyaXB0VGFnID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlTWFwXG4gICAqIEByZXR1cm5zIHtudWxsIHwgc3RyaW5nW119XG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKFwiLmpzXCIsIFwiLmNzc1wiKV07XG4gICAgfVxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZShcIi5qc1wiLCBcIi5jc3NcIildO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uIChtYXBSdWxlKSB7XG4gICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChmaWxlbmFtZSwgXCJcXFxcLmpzJFwiKSwgXCJnXCIpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsXVxuICovXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoXCI/XCIpWzBdO1xuICB9XG4gIGlmICghaXNVcmxSZXF1ZXN0KCAvKiogQHR5cGUge3N0cmluZ30gKi91cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoXCIuY3NzXCIpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAqIEBwYXJhbSB7VE9ET30gc3JjXG4gKiBAcmV0dXJucyB7VE9ET31cbiAqL1xuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYpO1xuICBzcmMuc29tZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NyY11cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHVybCA9IGdldFJlbG9hZFVybChlbC5ocmVmLCBzcmMpO1xuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVybCkge1xuICAgICAgdXBkYXRlQ3NzKGVsLCB1cmwpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcblxuICAvLyBJdCBpcyBub3QgaHR0cCBvciBodHRwc1xuICBpZiAoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RPRE99IG1vZHVsZUlkXG4gKiBAcGFyYW0ge1RPRE99IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgb3B0aW9ucykge1xuICBpZiAobm9Eb2N1bWVudCkge1xuICAgIGNvbnNvbGUubG9nKFwibm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTXCIpO1xuICAgIHJldHVybiBub29wO1xuICB9XG4gIHZhciBnZXRTY3JpcHRTcmMgPSBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKTtcbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsIHNyYy5qb2luKFwiIFwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKHVwZGF0ZSwgNTApO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRoQ29tcG9uZW50c1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlIFwiLi5cIjpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIi5cIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIC8qKiBAdHlwZSB7c3RyaW5nW119ICovW10pLmpvaW4oXCIvXCIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybFN0cmluZykge1xuICB1cmxTdHJpbmcgPSB1cmxTdHJpbmcudHJpbSgpO1xuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoXCIvL1wiKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoXCIvL1wiKVswXSArIFwiLy9cIiA6IFwiXCI7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgXCJpXCIpLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCBcIlwiKTtcbiAgY29tcG9uZW50c1swXSA9IFwiXCI7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL3V0aWxzL2xvZy5qc1wiO1xudmFyIFdlYlNvY2tldENsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqL1xuICBmdW5jdGlvbiBXZWJTb2NrZXRDbGllbnQodXJsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYlNvY2tldENsaWVudCk7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7XG4gICAgdGhpcy5jbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2xvc2UgPSBmO1xuICAgIH1cblxuICAgIC8vIGNhbGwgZiB3aXRoIHRoZSBtZXNzYWdlIHN0cmluZyBhcyB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZihlLmRhdGEpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbmV4cG9ydCB7IFdlYlNvY2tldENsaWVudCBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkgeyByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7IHZhbHVlOiB0LCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVtyXSA9IHQsIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG4vKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5LCBfX3dlYnBhY2tfaGFzaF9fICovXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIndlYnBhY2svbW9kdWxlXCIgLz5cbmltcG9ydCB3ZWJwYWNrSG90TG9nIGZyb20gXCJ3ZWJwYWNrL2hvdC9sb2cuanNcIjtcbmltcG9ydCBob3RFbWl0dGVyIGZyb20gXCJ3ZWJwYWNrL2hvdC9lbWl0dGVyLmpzXCI7XG5pbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UHJvYmxlbSwgY3JlYXRlT3ZlcmxheSB9IGZyb20gXCIuL292ZXJsYXkuanNcIjtcbmltcG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjtcbmltcG9ydCBzZW5kTWVzc2FnZSBmcm9tIFwiLi91dGlscy9zZW5kTWVzc2FnZS5qc1wiO1xuaW1wb3J0IHsgaXNQcm9ncmVzc1N1cHBvcnRlZCwgZGVmaW5lUHJvZ3Jlc3NFbGVtZW50IH0gZnJvbSBcIi4vcHJvZ3Jlc3MuanNcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPdmVybGF5T3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgKGVycm9yOiBFcnJvcikgPT4gYm9vbGVhbn0gW3dhcm5pbmdzXVxuICogQHByb3BlcnR5IHtib29sZWFuIHwgKGVycm9yOiBFcnJvcikgPT4gYm9vbGVhbn0gW2Vycm9yc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IGJvb2xlYW59IFtydW50aW1lRXJyb3JzXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBob3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbGl2ZVJlbG9hZFxuICogQHByb3BlcnR5IHtib29sZWFufSBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgT3ZlcmxheU9wdGlvbnN9IG92ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9nZ2luZ11cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhdHVzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVW5sb2FkaW5nXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVudEhhc2hcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJldmlvdXNIYXNoXVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFuIHwgeyB3YXJuaW5ncz86IGJvb2xlYW4gfCBzdHJpbmc7IGVycm9ycz86IGJvb2xlYW4gfCBzdHJpbmc7IHJ1bnRpbWVFcnJvcnM/OiBib29sZWFuIHwgc3RyaW5nOyB9fSBvdmVybGF5T3B0aW9uc1xuICovXG52YXIgZGVjb2RlT3ZlcmxheU9wdGlvbnMgPSBmdW5jdGlvbiBkZWNvZGVPdmVybGF5T3B0aW9ucyhvdmVybGF5T3B0aW9ucykge1xuICBpZiAoX3R5cGVvZihvdmVybGF5T3B0aW9ucykgPT09IFwib2JqZWN0XCIpIHtcbiAgICBbXCJ3YXJuaW5nc1wiLCBcImVycm9yc1wiLCBcInJ1bnRpbWVFcnJvcnNcIl0uZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3ZlcmxheU9wdGlvbnNbcHJvcGVydHldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmcgPSBkZWNvZGVVUklDb21wb25lbnQob3ZlcmxheU9wdGlvbnNbcHJvcGVydHldKTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICAgb3ZlcmxheU9wdGlvbnNbcHJvcGVydHldID0gbmV3IEZ1bmN0aW9uKFwibWVzc2FnZVwiLCBcInZhciBjYWxsYmFjayA9IFwiLmNvbmNhdChvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmcsIFwiXFxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSlcIikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlIHtTdGF0dXN9XG4gKi9cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICBjdXJyZW50SGFzaDogX193ZWJwYWNrX2hhc2hfX1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSA9IGZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSk7XG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVF1ZXJ5XG4gKiBAcmV0dXJucyB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBib29sZWFuIH19XG4gKi9cbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHtcbiAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9fSAqL1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmICh0eXBlb2YgcmVzb3VyY2VRdWVyeSA9PT0gXCJzdHJpbmdcIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSBcIlwiKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc2xpY2UoMSkuc3BsaXQoXCImXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHNlYXJjaFBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICByZXN1bHRbcGFpclswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdFNvdXJjZSA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTtcbiAgICB2YXIgc2NyaXB0U291cmNlVVJMO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLlxuICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9jZWVkIHRvIHNlZSBpZiB3ZSBjYW4gcmVjb3ZlciB1c2luZyBgcmVzb3VyY2VRdWVyeWBcbiAgICB9XG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgcmVzdWx0ID0gc2NyaXB0U291cmNlVVJMO1xuICAgICAgcmVzdWx0LmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9IHBhcnNlVVJMKF9fcmVzb3VyY2VRdWVyeSk7XG52YXIgZW5hYmxlZEZlYXR1cmVzID0ge1xuICBcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcIjogZmFsc2UsXG4gIFwiTGl2ZSBSZWxvYWRpbmdcIjogZmFsc2UsXG4gIFByb2dyZXNzOiBmYWxzZSxcbiAgT3ZlcmxheTogZmFsc2Vcbn07XG5cbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cbnZhciBvcHRpb25zID0ge1xuICBob3Q6IGZhbHNlLFxuICBsaXZlUmVsb2FkOiBmYWxzZSxcbiAgcHJvZ3Jlc3M6IGZhbHNlLFxuICBvdmVybGF5OiBmYWxzZVxufTtcbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICBlbmFibGVkRmVhdHVyZXNbXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50XCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIGVuYWJsZWRGZWF0dXJlc1tcIkxpdmUgUmVsb2FkaW5nXCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnByb2dyZXNzID09PSBcInRydWVcIikge1xuICBvcHRpb25zLnByb2dyZXNzID0gdHJ1ZTtcbiAgZW5hYmxlZEZlYXR1cmVzLlByb2dyZXNzID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5Lm92ZXJsYXkpIHtcbiAgdHJ5IHtcbiAgICBvcHRpb25zLm92ZXJsYXkgPSBKU09OLnBhcnNlKHBhcnNlZFJlc291cmNlUXVlcnkub3ZlcmxheSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3IoXCJFcnJvciBwYXJzaW5nIG92ZXJsYXkgb3B0aW9ucyBmcm9tIHJlc291cmNlIHF1ZXJ5OlwiLCBlKTtcbiAgfVxuXG4gIC8vIEZpbGwgaW4gZGVmYXVsdCBcInRydWVcIiBwYXJhbXMgZm9yIHBhcnRpYWxseS1zcGVjaWZpZWQgb2JqZWN0cy5cbiAgaWYgKF90eXBlb2Yob3B0aW9ucy5vdmVybGF5KSA9PT0gXCJvYmplY3RcIikge1xuICAgIG9wdGlvbnMub3ZlcmxheSA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgZXJyb3JzOiB0cnVlLFxuICAgICAgd2FybmluZ3M6IHRydWUsXG4gICAgICBydW50aW1lRXJyb3JzOiB0cnVlXG4gICAgfSwgb3B0aW9ucy5vdmVybGF5KTtcbiAgICBkZWNvZGVPdmVybGF5T3B0aW9ucyhvcHRpb25zLm92ZXJsYXkpO1xuICB9XG4gIGVuYWJsZWRGZWF0dXJlcy5PdmVybGF5ID0gb3B0aW9ucy5vdmVybGF5ICE9PSBmYWxzZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmcpIHtcbiAgb3B0aW9ucy5sb2dnaW5nID0gcGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nO1xufVxuaWYgKHR5cGVvZiBwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBvcHRpb25zLnJlY29ubmVjdCA9IE51bWJlcihwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsXG4gKi9cbnZhciBzZXRBbGxMb2dMZXZlbCA9IGZ1bmN0aW9uIHNldEFsbExvZ0xldmVsKGxldmVsKSB7XG4gIC8vIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIEhNUiBsb2dnZXIgb3BlcmF0ZSBzZXBhcmF0ZWx5IGZyb20gZGV2IHNlcnZlciBsb2dnZXJcbiAgd2VicGFja0hvdExvZy5zZXRMb2dMZXZlbChsZXZlbCA9PT0gXCJ2ZXJib3NlXCIgfHwgbGV2ZWwgPT09IFwibG9nXCIgPyBcImluZm9cIiA6IGxldmVsKTtcbiAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xufTtcbmlmIChvcHRpb25zLmxvZ2dpbmcpIHtcbiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTtcbn1cbnZhciBsb2dFbmFibGVkRmVhdHVyZXMgPSBmdW5jdGlvbiBsb2dFbmFibGVkRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgdmFyIGxpc3RFbmFibGVkRmVhdHVyZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlcyk7XG4gIGlmICghZmVhdHVyZXMgfHwgbGlzdEVuYWJsZWRGZWF0dXJlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxvZ1N0cmluZyA9IFwiU2VydmVyIHN0YXJ0ZWQ6XCI7XG5cbiAgLy8gU2VydmVyIHN0YXJ0ZWQ6IEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZCwgTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZCwgT3ZlcmxheSBkaXNhYmxlZC5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0RW5hYmxlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGxpc3RFbmFibGVkRmVhdHVyZXNbaV07XG4gICAgbG9nU3RyaW5nICs9IFwiIFwiLmNvbmNhdChrZXksIFwiIFwiKS5jb25jYXQoZmVhdHVyZXNba2V5XSA/IFwiZW5hYmxlZFwiIDogXCJkaXNhYmxlZFwiLCBcIixcIik7XG4gIH1cbiAgLy8gcmVwbGFjZSBsYXN0IGNvbW1hIHdpdGggYSBwZXJpb2RcbiAgbG9nU3RyaW5nID0gbG9nU3RyaW5nLnNsaWNlKDAsIC0xKS5jb25jYXQoXCIuXCIpO1xuICBsb2cuaW5mbyhsb2dTdHJpbmcpO1xufTtcbmxvZ0VuYWJsZWRGZWF0dXJlcyhlbmFibGVkRmVhdHVyZXMpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xudmFyIG92ZXJsYXkgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gY3JlYXRlT3ZlcmxheShfdHlwZW9mKG9wdGlvbnMub3ZlcmxheSkgPT09IFwib2JqZWN0XCIgPyB7XG4gIHRydXN0ZWRUeXBlc1BvbGljeU5hbWU6IG9wdGlvbnMub3ZlcmxheS50cnVzdGVkVHlwZXNQb2xpY3lOYW1lLFxuICBjYXRjaFJ1bnRpbWVFcnJvcjogb3B0aW9ucy5vdmVybGF5LnJ1bnRpbWVFcnJvcnNcbn0gOiB7XG4gIHRydXN0ZWRUeXBlc1BvbGljeU5hbWU6IGZhbHNlLFxuICBjYXRjaFJ1bnRpbWVFcnJvcjogb3B0aW9ucy5vdmVybGF5XG59KSA6IHtcbiAgc2VuZDogZnVuY3Rpb24gc2VuZCgpIHt9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtTdGF0dXN9IGN1cnJlbnRTdGF0dXNcbiAqL1xudmFyIHJlbG9hZEFwcCA9IGZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBjdXJyZW50U3RhdHVzKSB7XG4gIHZhciBob3QgPSBfcmVmLmhvdCxcbiAgICBsaXZlUmVsb2FkID0gX3JlZi5saXZlUmVsb2FkO1xuICBpZiAoY3VycmVudFN0YXR1cy5pc1VubG9hZGluZykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY3VycmVudEhhc2ggPSBjdXJyZW50U3RhdHVzLmN1cnJlbnRIYXNoLFxuICAgIHByZXZpb3VzSGFzaCA9IGN1cnJlbnRTdGF0dXMucHJldmlvdXNIYXNoO1xuICB2YXIgaXNJbml0aWFsID0gY3VycmVudEhhc2guaW5kZXhPZigvKiogQHR5cGUge3N0cmluZ30gKi9wcmV2aW91c0hhc2gpID49IDA7XG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtXaW5kb3d9IHJvb3RXaW5kb3dcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsSWRcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG4gIHZhciBzZWFyY2ggPSBzZWxmLmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWxsb3dUb0hvdCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWhvdD1mYWxzZVwiKSA9PT0gLTE7XG4gIHZhciBhbGxvd1RvTGl2ZVJlbG9hZCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWxpdmUtcmVsb2FkPWZhbHNlXCIpID09PSAtMTtcbiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7XG4gICAgbG9nLmluZm8oXCJBcHAgaG90IHVwZGF0ZS4uLlwiKTtcbiAgICBob3RFbWl0dGVyLmVtaXQoXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIGN1cnJlbnRTdGF0dXMuY3VycmVudEhhc2gpO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLndpbmRvdykge1xuICAgICAgLy8gYnJvYWRjYXN0IHVwZGF0ZSB0byB3aW5kb3dcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIuY29uY2F0KGN1cnJlbnRTdGF0dXMuY3VycmVudEhhc2gpLCBcIipcIik7XG4gICAgfVxuICB9XG4gIC8vIGFsbG93IHJlZnJlc2hpbmcgdGhlIHBhZ2Ugb25seSBpZiBsaXZlUmVsb2FkIGlzbid0IGRpc2FibGVkXG4gIGVsc2UgaWYgKGxpdmVSZWxvYWQgJiYgYWxsb3dUb0xpdmVSZWxvYWQpIHtcbiAgICB2YXIgcm9vdFdpbmRvdyA9IHNlbGY7XG5cbiAgICAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcbiAgICB2YXIgaW50ZXJ2YWxJZCA9IHNlbGYuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHJvb3RXaW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IFwiYWJvdXQ6XCIpIHtcbiAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHtcbiAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbnZhciBhbnNpUmVnZXggPSBuZXcgUmVnRXhwKFtcIltcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNylcIiwgXCIoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW5xLXV5PT48fl0pKVwiXS5qb2luKFwifFwiKSwgXCJnXCIpO1xuXG4vKipcbiAqXG4gKiBTdHJpcCBbQU5TSSBlc2NhcGUgY29kZXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUpIGZyb20gYSBzdHJpbmcuXG4gKiBBZGFwdGVkIGZyb20gY29kZSBvcmlnaW5hbGx5IHJlbGVhc2VkIGJ5IFNpbmRyZSBTb3JodXNcbiAqIExpY2Vuc2VkIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIHN0cmlwQW5zaSA9IGZ1bmN0aW9uIHN0cmlwQW5zaShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQoX3R5cGVvZihzdHJpbmcpLCBcImBcIikpO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgsIFwiXCIpO1xufTtcbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgfSxcbiAgbGl2ZVJlbG9hZDogZnVuY3Rpb24gbGl2ZVJlbG9hZCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTtcblxuICAgIC8vIEZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLlxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHtcbiAgICBzdGF0dXMucHJldmlvdXNIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoO1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICBsb2dnaW5nOiBzZXRBbGxMb2dMZXZlbCxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlO1xuICAgIGRlY29kZU92ZXJsYXlPcHRpb25zKG9wdGlvbnMub3ZlcmxheSk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICovXG4gIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5yZWNvbm5lY3QgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSkge1xuICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGFcbiAgICovXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuICAgIGlmIChpc1Byb2dyZXNzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm9ncmVzcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwid2RzLXByb2dyZXNzXCIpO1xuICAgICAgICBpZiAoIXByb2dyZXNzKSB7XG4gICAgICAgICAgZGVmaW5lUHJvZ3Jlc3NFbGVtZW50KCk7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwid2RzLXByb2dyZXNzXCIpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcInByb2dyZXNzXCIsIGRhdGEucGVyY2VudCk7XG4gICAgICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgb3B0aW9ucy5wcm9ncmVzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKFwiUHJvZ3Jlc3NcIiwgZGF0YSk7XG4gIH0sXG4gIFwic3RpbGwtb2tcIjogZnVuY3Rpb24gc3RpbGxPaygpIHtcbiAgICBsb2cuaW5mbyhcIk5vdGhpbmcgY2hhbmdlZC5cIik7XG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJESVNNSVNTXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJzdGF0aWMtY2hhbmdlZFwiOiBmdW5jdGlvbiBzdGF0aWNDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gd2FybmluZ3NcbiAgICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICAgKi9cbiAgd2FybmluZ3M6IGZ1bmN0aW9uIHdhcm5pbmdzKF93YXJuaW5ncywgcGFyYW1zKSB7XG4gICAgbG9nLndhcm4oXCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuXCIpO1xuICAgIHZhciBwcmludGFibGVXYXJuaW5ncyA9IF93YXJuaW5ncy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKFwid2FybmluZ1wiLCBlcnJvciksXG4gICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZVdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihwcmludGFibGVXYXJuaW5nc1tpXSk7XG4gICAgfVxuICAgIHZhciBvdmVybGF5V2FybmluZ3NTZXR0aW5nID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzO1xuICAgIGlmIChvdmVybGF5V2FybmluZ3NTZXR0aW5nKSB7XG4gICAgICB2YXIgd2FybmluZ3NUb0Rpc3BsYXkgPSB0eXBlb2Ygb3ZlcmxheVdhcm5pbmdzU2V0dGluZyA9PT0gXCJmdW5jdGlvblwiID8gX3dhcm5pbmdzLmZpbHRlcihvdmVybGF5V2FybmluZ3NTZXR0aW5nKSA6IF93YXJuaW5ncztcbiAgICAgIGlmICh3YXJuaW5nc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiLFxuICAgICAgICAgIG1lc3NhZ2VzOiBfd2FybmluZ3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnByZXZlbnRSZWxvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yW119IGVycm9yc1xuICAgKi9cbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcihcIkVycm9ycyB3aGlsZSBjb21waWxpbmcuIFJlbG9hZCBwcmV2ZW50ZWQuXCIpO1xuICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbTIgPSBmb3JtYXRQcm9ibGVtKFwiZXJyb3JcIiwgZXJyb3IpLFxuICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbTIuaGVhZGVyLFxuICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0yLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIkVycm9yc1wiLCBwcmludGFibGVFcnJvcnMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cuZXJyb3IocHJpbnRhYmxlRXJyb3JzW2ldKTtcbiAgICB9XG4gICAgdmFyIG92ZXJsYXlFcnJvcnNTZXR0aW5ncyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7XG4gICAgaWYgKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykge1xuICAgICAgdmFyIGVycm9yc1RvRGlzcGxheSA9IHR5cGVvZiBvdmVybGF5RXJyb3JzU2V0dGluZ3MgPT09IFwiZnVuY3Rpb25cIiA/IF9lcnJvcnMuZmlsdGVyKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykgOiBfZXJyb3JzO1xuICAgICAgaWYgKGVycm9yc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlczogX2Vycm9yc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmluZm8oXCJEaXNjb25uZWN0ZWQhXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3sgcHJvdG9jb2w/OiBzdHJpbmcsIGF1dGg/OiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCBwb3J0Pzogc3RyaW5nLCBwYXRobmFtZT86IHN0cmluZywgc2VhcmNoPzogc3RyaW5nLCBoYXNoPzogc3RyaW5nLCBzbGFzaGVzPzogYm9vbGVhbiB9fSBvYmpVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBmb3JtYXRVUkwgPSBmdW5jdGlvbiBmb3JtYXRVUkwob2JqVVJMKSB7XG4gIHZhciBwcm90b2NvbCA9IG9ialVSTC5wcm90b2NvbCB8fCBcIlwiO1xuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gXCI6XCIpIHtcbiAgICBwcm90b2NvbCArPSBcIjpcIjtcbiAgfVxuICB2YXIgYXV0aCA9IG9ialVSTC5hdXRoIHx8IFwiXCI7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgXCI6XCIpO1xuICAgIGF1dGggKz0gXCJAXCI7XG4gIH1cbiAgdmFyIGhvc3QgPSBcIlwiO1xuICBpZiAob2JqVVJMLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAob2JqVVJMLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpID09PSAtMSA/IG9ialVSTC5ob3N0bmFtZSA6IFwiW1wiLmNvbmNhdChvYmpVUkwuaG9zdG5hbWUsIFwiXVwiKSk7XG4gICAgaWYgKG9ialVSTC5wb3J0KSB7XG4gICAgICBob3N0ICs9IFwiOlwiLmNvbmNhdChvYmpVUkwucG9ydCk7XG4gICAgfVxuICB9XG4gIHZhciBwYXRobmFtZSA9IG9ialVSTC5wYXRobmFtZSB8fCBcIlwiO1xuICBpZiAob2JqVVJMLnNsYXNoZXMpIHtcbiAgICBob3N0ID0gXCIvL1wiLmNvbmNhdChob3N0IHx8IFwiXCIpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLmNvbmNhdChwYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9IFwiXCI7XG4gIH1cbiAgdmFyIHNlYXJjaCA9IG9ialVSTC5zZWFyY2ggfHwgXCJcIjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSBcIj9cIikge1xuICAgIHNlYXJjaCA9IFwiP1wiLmNvbmNhdChzZWFyY2gpO1xuICB9XG4gIHZhciBoYXNoID0gb2JqVVJMLmhhc2ggfHwgXCJcIjtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09IFwiI1wiKSB7XG4gICAgaGFzaCA9IFwiI1wiLmNvbmNhdChoYXNoKTtcbiAgfVxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZyxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZShcIiNcIiwgXCIlMjNcIik7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGhvc3QpLmNvbmNhdChwYXRobmFtZSkuY29uY2F0KHNlYXJjaCkuY29uY2F0KGhhc2gpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudmFyIGNyZWF0ZVNvY2tldFVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHtcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVVJMLmhvc3RuYW1lO1xuXG4gIC8vIE5vZGUuanMgbW9kdWxlIHBhcnNlcyBpdCBhcyBgOjpgXG4gIC8vIGBuZXcgVVJMKHVybFN0cmluZywgW2Jhc2VVUkxTdHJpbmddKWAgcGFyc2VzIGl0IGFzICdbOjpdJ1xuICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gXCIwLjAuMC4wXCIgfHwgaG9zdG5hbWUgPT09IFwiOjpcIiB8fCBob3N0bmFtZSA9PT0gXCJbOjpdXCI7XG5cbiAgLy8gd2h5IGRvIHdlIG5lZWQgdGhpcyBjaGVjaz9cbiAgLy8gaG9zdG5hbWUgbi9hIGZvciBmaWxlIHByb3RvY29sIChleGFtcGxlLCB3aGVuIHVzaW5nIGVsZWN0cm9uLCBpb25pYylcbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8zODRcbiAgaWYgKGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuICB2YXIgc29ja2V0VVJMUHJvdG9jb2wgPSBwYXJzZWRVUkwucHJvdG9jb2wgfHwgc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcblxuICAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy5cbiAgaWYgKHNvY2tldFVSTFByb3RvY29sID09PSBcImF1dG86XCIgfHwgaG9zdG5hbWUgJiYgaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gXCJodHRwczpcIikge1xuICAgIHNvY2tldFVSTFByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgfVxuICBzb2NrZXRVUkxQcm90b2NvbCA9IHNvY2tldFVSTFByb3RvY29sLnJlcGxhY2UoL14oPzpodHRwfC4rLWV4dGVuc2lvbnxmaWxlKS9pLCBcIndzXCIpO1xuICB2YXIgc29ja2V0VVJMQXV0aCA9IFwiXCI7XG5cbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBkb2Vzbid0IGhhdmUgYGF1dGhgIHByb3BlcnR5XG4gIC8vIFBhcnNlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGluIGNhc2Ugd2UgbmVlZCB0aGVtXG4gIGlmIChwYXJzZWRVUkwudXNlcm5hbWUpIHtcbiAgICBzb2NrZXRVUkxBdXRoID0gcGFyc2VkVVJMLnVzZXJuYW1lO1xuXG4gICAgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSxcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS5cbiAgICBpZiAocGFyc2VkVVJMLnBhc3N3b3JkKSB7XG4gICAgICAvLyBSZXN1bHQ6IDx1c2VybmFtZT46PHBhc3N3b3JkPlxuICAgICAgc29ja2V0VVJMQXV0aCA9IHNvY2tldFVSTEF1dGguY29uY2F0KFwiOlwiLCBwYXJzZWRVUkwucGFzc3dvcmQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW5cbiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLlxuICAvLyBOZWVkIHRvIHJlbW92ZSB0aG9zZSBhcyB1cmwuZm9ybWF0IGJsaW5kbHkgYWRkcyBpdHMgb3duIHNldCBvZiBicmFja2V0c1xuICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmdcbiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdFxuICAvL1xuICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksXG4gIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZFxuICB2YXIgc29ja2V0VVJMSG9zdG5hbWUgPSAoaG9zdG5hbWUgfHwgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSB8fCBcImxvY2FsaG9zdFwiKS5yZXBsYWNlKC9eXFxbKC4qKVxcXSQvLCBcIiQxXCIpO1xuICB2YXIgc29ja2V0VVJMUG9ydCA9IHBhcnNlZFVSTC5wb3J0O1xuICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gXCIwXCIpIHtcbiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0O1xuICB9XG5cbiAgLy8gSWYgcGF0aCBpcyBwcm92aWRlZCBpdCdsbCBiZSBwYXNzZWQgaW4gdmlhIHRoZSByZXNvdXJjZVF1ZXJ5IGFzIGFcbiAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgLy8gY2xpZW50IHRvIG9wZW4gdGhlIHNvY2tldCB0byB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgdmFyIHNvY2tldFVSTFBhdGhuYW1lID0gXCIvd3NcIjtcbiAgaWYgKHBhcnNlZFVSTC5wYXRobmFtZSAmJiAhcGFyc2VkVVJMLmZyb21DdXJyZW50U2NyaXB0KSB7XG4gICAgc29ja2V0VVJMUGF0aG5hbWUgPSBwYXJzZWRVUkwucGF0aG5hbWU7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFVSTCh7XG4gICAgcHJvdG9jb2w6IHNvY2tldFVSTFByb3RvY29sLFxuICAgIGF1dGg6IHNvY2tldFVSTEF1dGgsXG4gICAgaG9zdG5hbWU6IHNvY2tldFVSTEhvc3RuYW1lLFxuICAgIHBvcnQ6IHNvY2tldFVSTFBvcnQsXG4gICAgcGF0aG5hbWU6IHNvY2tldFVSTFBhdGhuYW1lLFxuICAgIHNsYXNoZXM6IHRydWVcbiAgfSk7XG59O1xudmFyIHNvY2tldFVSTCA9IGNyZWF0ZVNvY2tldFVSTChwYXJzZWRSZXNvdXJjZVF1ZXJ5KTtcbnNvY2tldChzb2NrZXRVUkwsIG9uU29ja2V0TWVzc2FnZSwgb3B0aW9ucy5yZWNvbm5lY3QpO1xuZXhwb3J0IHsgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSwgcGFyc2VVUkwsIGNyZWF0ZVNvY2tldFVSTCB9OyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFN5bmNCYWlsSG9vazogZnVuY3Rpb24oKSB7IHJldHVybiAvKiBiaW5kaW5nICovIFN5bmNCYWlsSG9vazsgfVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG5mdW5jdGlvbiBTeW5jQmFpbEhvb2soKSB7XG4gIHJldHVybiB7XG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbCgpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAmJiBcInN5bWJvbFwiID09IHR5cGVvZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIG8uY29uc3RydWN0b3IgPT09ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIG8gIT09ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheShyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpO1xuICAgIHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7XG4gICAgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikge1xuICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgJiYgbnVsbCAhPSByWyh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yXSB8fCBudWxsICE9IHJbXCJAQGl0ZXJhdG9yXCJdKSByZXR1cm4gQXJyYXkuZnJvbShyKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkocik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHtcbiAgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikge1xuICBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHtcbiAgICB2YXIgbyA9IHJbdF07XG4gICAgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbnZhciBMb2dUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVycm9yOiAoLyoqIEB0eXBlIHtcImVycm9yXCJ9ICovXCJlcnJvclwiKSxcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgd2FybjogKC8qKiBAdHlwZSB7XCJ3YXJuXCJ9ICovXCJ3YXJuXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOiAoLyoqIEB0eXBlIHtcImluZm9cIn0gKi9cImluZm9cIiksXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGxvZzogKC8qKiBAdHlwZSB7XCJsb2dcIn0gKi9cImxvZ1wiKSxcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgZGVidWc6ICgvKiogQHR5cGUge1wiZGVidWdcIn0gKi9cImRlYnVnXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuXG4gIHRyYWNlOiAoLyoqIEB0eXBlIHtcInRyYWNlXCJ9ICovXCJ0cmFjZVwiKSxcbiAgLy8gbm8gYXJndW1lbnRzXG5cbiAgZ3JvdXA6ICgvKiogQHR5cGUge1wiZ3JvdXBcIn0gKi9cImdyb3VwXCIpLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwQ29sbGFwc2VkOiAoLyoqIEB0eXBlIHtcImdyb3VwQ29sbGFwc2VkXCJ9ICovXCJncm91cENvbGxhcHNlZFwiKSxcbiAgLy8gW2xhYmVsXVxuICBncm91cEVuZDogKC8qKiBAdHlwZSB7XCJncm91cEVuZFwifSAqL1wiZ3JvdXBFbmRcIiksXG4gIC8vIFtsYWJlbF1cblxuICBwcm9maWxlOiAoLyoqIEB0eXBlIHtcInByb2ZpbGVcIn0gKi9cInByb2ZpbGVcIiksXG4gIC8vIFtwcm9maWxlTmFtZV1cbiAgcHJvZmlsZUVuZDogKC8qKiBAdHlwZSB7XCJwcm9maWxlRW5kXCJ9ICovXCJwcm9maWxlRW5kXCIpLFxuICAvLyBbcHJvZmlsZU5hbWVdXG5cbiAgdGltZTogKC8qKiBAdHlwZSB7XCJ0aW1lXCJ9ICovXCJ0aW1lXCIpLFxuICAvLyBuYW1lLCB0aW1lIGFzIFtzZWNvbmRzLCBuYW5vc2Vjb25kc11cblxuICBjbGVhcjogKC8qKiBAdHlwZSB7XCJjbGVhclwifSAqL1wiY2xlYXJcIiksXG4gIC8vIG5vIGFyZ3VtZW50c1xuICBzdGF0dXM6ICgvKiogQHR5cGUge1wic3RhdHVzXCJ9ICovXCJzdGF0dXNcIikgLy8gbWVzc2FnZSwgYXJndW1lbnRzXG59KTtcbm1vZHVsZS5leHBvcnRzLkxvZ1R5cGUgPSBMb2dUeXBlO1xuXG4vKiogQHR5cGVkZWYge3R5cGVvZiBMb2dUeXBlW2tleW9mIHR5cGVvZiBMb2dUeXBlXX0gTG9nVHlwZUVudW0gKi9cblxudmFyIExPR19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHJhdyBsb2cgbWV0aG9kXCIpO1xudmFyIFRJTUVSU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHRpbWVzXCIpO1xudmFyIFRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgYWdncmVnYXRlZCB0aW1lc1wiKTtcbnZhciBXZWJwYWNrTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7KHR5cGU6IExvZ1R5cGVFbnVtLCBhcmdzPzogRVhQRUNURURfQU5ZW10pID0+IHZvaWR9IGxvZyBsb2cgZnVuY3Rpb25cbiAgICogQHBhcmFtIHsobmFtZTogc3RyaW5nIHwgKCgpID0+IHN0cmluZykpID0+IFdlYnBhY2tMb2dnZXJ9IGdldENoaWxkTG9nZ2VyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjaGlsZCBsb2dnZXJcbiAgICovXG4gIGZ1bmN0aW9uIFdlYnBhY2tMb2dnZXIobG9nLCBnZXRDaGlsZExvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrTG9nZ2VyKTtcbiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nO1xuICAgIHRoaXMuZ2V0Q2hpbGRMb2dnZXIgPSBnZXRDaGlsZExvZ2dlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gey4uLkVYUEVDVEVEX0FOWX0gYXJncyBhcmdzXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFdlYnBhY2tMb2dnZXIsIFt7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLndhcm4sIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJpbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZm8oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmluZm8sIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZGVidWcsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RVhQRUNURURfQU5ZfSBhc3NlcnRpb24gYXNzZXJ0aW9uXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImFzc2VydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uKSB7XG4gICAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmVycm9yLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudHJhY2UsIFtcIlRyYWNlXCJdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuY2xlYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJzdGF0dXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhdHVzKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5zdGF0dXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJncm91cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgICBhcmdzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXAsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJncm91cENvbGxhcHNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cENvbGxhcHNlZCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBDb2xsYXBzZWQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cEVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cEVuZCgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cEVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYWJlbCBsYWJlbFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZShsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGUsIFtsYWJlbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFiZWwgbGFiZWxcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGVFbmQobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlRW5kLCBbbGFiZWxdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgbGFiZWxcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgW251bWJlciwgbnVtYmVyXT59ICovXG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLnNldChsYWJlbCwgcHJvY2Vzcy5ocnRpbWUoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYWJlbCBsYWJlbFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInRpbWVMb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUxvZyhsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lTG9nKClcIikpO1xuICAgICAgfVxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIGxhYmVsXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVFbmQoKVwiKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBbbnVtYmVyLCBudW1iZXJdPn0gKi9cbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIGxhYmVsXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVBZ2dyZWdhdGUoKVwiKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBbbnVtYmVyLCBudW1iZXJdPn0gKi9cbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgW251bWJlciwgbnVtYmVyXT59ICovXG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRpbWVbMV0gKyBjdXJyZW50WzFdID4gMWU5KSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdICsgMTtcbiAgICAgICAgICB0aW1lWzFdID0gdGltZVsxXSAtIDFlOSArIGN1cnJlbnRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdO1xuICAgICAgICAgIHRpbWVbMV0gKz0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLnNldChsYWJlbCwgdGltZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYWJlbCBsYWJlbFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInRpbWVBZ2dyZWdhdGVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZUVuZChsYWJlbCkge1xuICAgICAgaWYgKHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB2YXIgdGltZSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9XSk7XG59KCk7XG5tb2R1bGUuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAmJiByWyh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkocikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXkocikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTtcbiAgICB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpO1xuICAgIHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KHIpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIG51bGwgIT0gclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIpO1xufVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkge1xuICAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7XG4gIGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdO1xuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgJiYgby5jb25zdHJ1Y3RvciA9PT0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgJiYgbyAhPT0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nVHlwZSA9IF9yZXF1aXJlLkxvZ1R5cGU7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlckl0ZW1UeXBlc30gRmlsdGVySXRlbVR5cGVzICovXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uLy4uL2RlY2xhcmF0aW9ucy9XZWJwYWNrT3B0aW9uc1wiKS5GaWx0ZXJUeXBlc30gRmlsdGVyVHlwZXMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7KGl0ZW06IHN0cmluZykgPT4gYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cbi8qKiBAdHlwZWRlZiB7KHZhbHVlOiBzdHJpbmcsIHR5cGU6IExvZ1R5cGVFbnVtLCBhcmdzPzogRVhQRUNURURfQU5ZW10pID0+IHZvaWR9IExvZ2dpbmdGdW5jdGlvbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IExvZ2dlckNvbnNvbGVcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gY2xlYXJcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gdHJhY2VcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkfSBpbmZvXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZH0gbG9nXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZH0gd2FyblxuICogQHByb3BlcnR5IHsoLi4uYXJnczogRVhQRUNURURfQU5ZW10pID0+IHZvaWR9IGVycm9yXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IGRlYnVnXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IGdyb3VwXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IGdyb3VwQ29sbGFwc2VkXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IGdyb3VwRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IHN0YXR1c1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogRVhQRUNURURfQU5ZW10pID0+IHZvaWQ9fSBwcm9maWxlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IHByb2ZpbGVFbmRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gbG9nVGltZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTG9nZ2VyT3B0aW9uc1xuICogQHByb3BlcnR5IHtmYWxzZXx0cnVlfFwibm9uZVwifFwiZXJyb3JcInxcIndhcm5cInxcImluZm9cInxcImxvZ1wifFwidmVyYm9zZVwifSBsZXZlbCBsb2dsZXZlbFxuICogQHByb3BlcnR5IHtGaWx0ZXJUeXBlc3xib29sZWFufSBkZWJ1ZyBmaWx0ZXIgZm9yIGRlYnVnIGxvZ2dpbmdcbiAqIEBwcm9wZXJ0eSB7TG9nZ2VyQ29uc29sZX0gY29uc29sZSB0aGUgY29uc29sZSB0byBsb2cgdG9cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RmlsdGVySXRlbVR5cGVzfSBpdGVtIGFuIGlucHV0IGl0ZW1cbiAqIEByZXR1cm5zIHtGaWx0ZXJGdW5jdGlvbiB8IHVuZGVmaW5lZH0gZmlsdGVyIGZ1bmN0aW9uXG4gKi9cbnZhciBmaWx0ZXJUb0Z1bmN0aW9uID0gZnVuY3Rpb24gZmlsdGVyVG9GdW5jdGlvbihpdGVtKSB7XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKFwiW1xcXFxcXFxcL11cIi5jb25jYXQoaXRlbS5yZXBsYWNlKC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cbiAgaWYgKGl0ZW0gJiYgX3R5cGVvZihpdGVtKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG5cbi8qKlxuICogQHBhcmFtIHtMb2dnZXJPcHRpb25zfSBvcHRpb25zIG9wdGlvbnMgb2JqZWN0XG4gKiBAcmV0dXJucyB7TG9nZ2luZ0Z1bmN0aW9ufSBsb2dnaW5nIGZ1bmN0aW9uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gXCJpbmZvXCIgOiBfcmVmJGxldmVsLFxuICAgIF9yZWYkZGVidWcgPSBfcmVmLmRlYnVnLFxuICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgIGNvbnNvbGUgPSBfcmVmLmNvbnNvbGU7XG4gIHZhciBkZWJ1Z0ZpbHRlcnMgPSAvKiogQHR5cGUge0ZpbHRlckZ1bmN0aW9uW119ICovXG5cbiAgdHlwZW9mIGRlYnVnID09PSBcImJvb2xlYW5cIiA/IFtmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlYnVnO1xuICB9XSA6IC8qKiBAdHlwZSB7RmlsdGVySXRlbVR5cGVzW119ICovW10uY29uY2F0KGRlYnVnKS5tYXAoZmlsdGVyVG9GdW5jdGlvbik7XG4gIHZhciBsb2dsZXZlbCA9IExvZ0xldmVsW1wiXCIuY29uY2F0KGxldmVsKV0gfHwgMDtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7RVhQRUNURURfQU5ZW109fSBhcmdzIGFyZ3VtZW50cyBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdmFyIGxvZ2dlciA9IGZ1bmN0aW9uIGxvZ2dlcihuYW1lLCB0eXBlLCBhcmdzKSB7XG4gICAgdmFyIGxhYmVsZWRBcmdzID0gZnVuY3Rpb24gbGFiZWxlZEFyZ3MoKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuIFtcIltcIi5jb25jYXQobmFtZSwgXCJdIFwiKS5jb25jYXQoYXJnc1swXSldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncy5zbGljZSgxKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXVwiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW107XG4gICAgfTtcbiAgICB2YXIgZGVidWcgPSBkZWJ1Z0ZpbHRlcnMuc29tZShmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGYobmFtZSk7XG4gICAgfSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIExvZ1R5cGUuZGVidWc6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmRlYnVnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5sb2c6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLndhcm46XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC53YXJuKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5lcnJvcjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmVycm9yKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cENvbGxhcHNlZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwudmVyYm9zZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cENvbGxhcHNlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXA6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmdyb3VwLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cEVuZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS50aW1lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAgIHZhciBfYXJncyA9IF9zbGljZWRUb0FycmF5KC8qKiBAdHlwZSB7W3N0cmluZywgbnVtYmVyLCBudW1iZXJdfSAqL1xuICAgICAgICAgICAgYXJncywgMyksXG4gICAgICAgICAgICBsYWJlbCA9IF9hcmdzWzBdLFxuICAgICAgICAgICAgc3RhcnQgPSBfYXJnc1sxXSxcbiAgICAgICAgICAgIGVuZCA9IF9hcmdzWzJdO1xuICAgICAgICAgIHZhciBtcyA9IHN0YXJ0ICogMTAwMCArIGVuZCAvIDEwMDAwMDA7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiW1wiLmNvbmNhdChuYW1lLCBcIl0gXCIpLmNvbmNhdChsYWJlbCwgXCI6IFwiKS5jb25jYXQobXMsIFwiIG1zXCIpO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGU6XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGUuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlRW5kOlxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZUVuZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5wcm9maWxlRW5kLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmNsZWFyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuc3RhdHVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFyZ3MgJiYgYXJncy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgTG9nVHlwZSBcIi5jb25jYXQodHlwZSkpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxvZ2dlcjtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG5cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIHJldHVybiBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uIChuKSB7XG4gICAgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgIHZhciB0ID0gYXJndW1lbnRzW2VdO1xuICAgICAgZm9yICh2YXIgciBpbiB0KSAoe30pLmhhc093blByb3BlcnR5LmNhbGwodCwgcikgJiYgKG5bcl0gPSB0W3JdKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH0sIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB0YXBhYmxlICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL3RhcGFibGUuanNcIiksXG4gIFN5bmNCYWlsSG9vayA9IF9yZXF1aXJlLlN5bmNCYWlsSG9vaztcbnZhciBfcmVxdWlyZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICBMb2dnZXIgPSBfcmVxdWlyZTIuTG9nZ2VyO1xudmFyIGNyZWF0ZUNvbnNvbGVMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NyZWF0ZUNvbnNvbGVMb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIik7XG5cbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyA9IHtcbiAgbGV2ZWw6IFwiaW5mb1wiLFxuICBkZWJ1ZzogZmFsc2UsXG4gIGNvbnNvbGU6IGNvbnNvbGVcbn07XG52YXIgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gKiBAcmV0dXJucyB7TG9nZ2VyfSBhIGxvZ2dlclxuICovXG5tb2R1bGUuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChtb2R1bGUuZXhwb3J0cy5ob29rcy5sb2cuY2FsbChuYW1lLCB0eXBlLCBhcmdzKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50RGVmYXVsdExvZ2dlcihuYW1lLCB0eXBlLCBhcmdzKTtcbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHMuZ2V0TG9nZ2VyKFwiXCIuY29uY2F0KG5hbWUsIFwiL1wiKS5jb25jYXQoY2hpbGROYW1lKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9uc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbm1vZHVsZS5leHBvcnRzLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBfZXh0ZW5kcyhjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMsIG9wdGlvbnMpO1xuICBjdXJyZW50RGVmYXVsdExvZ2dlciA9IGNyZWF0ZUNvbnNvbGVMb2dnZXIoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zKTtcbn07XG5tb2R1bGUuZXhwb3J0cy5ob29rcyA9IHtcbiAgbG9nOiBuZXcgU3luY0JhaWxIb29rKFtcIm9yaWdpblwiLCBcInR5cGVcIiwgXCJhcmdzXCJdKVxufTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWRzIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWRzIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIF9fd2VicGFja19pX18gaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tfX3dlYnBhY2tfaV9fXSA9IF9fd2VicGFja19leHBvcnRzX19bX193ZWJwYWNrX2lfX107XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuXG5pbXBvcnQgYW5zaUhUTUwgZnJvbSBcImFuc2ktaHRtbC1jb21tdW5pdHlcIjtcblxuLyoqXG4gKiBAdHlwZSB7KGlucHV0OiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpID0+IHN0cmluZ31cbiAqL1xudmFyIGdldENvZGVQb2ludCA9IFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgPyBmdW5jdGlvbiAoaW5wdXQsIHBvc2l0aW9uKSB7XG4gIHJldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbik7XG59IDogZnVuY3Rpb24gKGlucHV0LCBwb3NpdGlvbikge1xuICByZXR1cm4gKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIC0gMHhkODAwKSAqIDB4NDAwICsgaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpIC0gMHhkYzAwICsgMHgxMDAwMDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hY3JvVGV4dFxuICogQHBhcmFtIHtSZWdFeHB9IG1hY3JvUmVnRXhwXG4gKiBAcGFyYW0geyhpbnB1dDogc3RyaW5nKSA9PiBzdHJpbmd9IG1hY3JvUmVwbGFjZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciByZXBsYWNlVXNpbmdSZWdFeHAgPSBmdW5jdGlvbiByZXBsYWNlVXNpbmdSZWdFeHAobWFjcm9UZXh0LCBtYWNyb1JlZ0V4cCwgbWFjcm9SZXBsYWNlcikge1xuICBtYWNyb1JlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICB2YXIgcmVwbGFjZU1hdGNoID0gbWFjcm9SZWdFeHAuZXhlYyhtYWNyb1RleHQpO1xuICB2YXIgcmVwbGFjZVJlc3VsdDtcbiAgaWYgKHJlcGxhY2VNYXRjaCkge1xuICAgIHJlcGxhY2VSZXN1bHQgPSBcIlwiO1xuICAgIHZhciByZXBsYWNlTGFzdEluZGV4ID0gMDtcbiAgICBkbyB7XG4gICAgICBpZiAocmVwbGFjZUxhc3RJbmRleCAhPT0gcmVwbGFjZU1hdGNoLmluZGV4KSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHQgKz0gbWFjcm9UZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4LCByZXBsYWNlTWF0Y2guaW5kZXgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlcGxhY2VJbnB1dCA9IHJlcGxhY2VNYXRjaFswXTtcbiAgICAgIHJlcGxhY2VSZXN1bHQgKz0gbWFjcm9SZXBsYWNlcihyZXBsYWNlSW5wdXQpO1xuICAgICAgcmVwbGFjZUxhc3RJbmRleCA9IHJlcGxhY2VNYXRjaC5pbmRleCArIHJlcGxhY2VJbnB1dC5sZW5ndGg7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICB9IHdoaWxlIChyZXBsYWNlTWF0Y2ggPSBtYWNyb1JlZ0V4cC5leGVjKG1hY3JvVGV4dCkpO1xuICAgIGlmIChyZXBsYWNlTGFzdEluZGV4ICE9PSBtYWNyb1RleHQubGVuZ3RoKSB7XG4gICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvVGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcGxhY2VSZXN1bHQgPSBtYWNyb1RleHQ7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2VSZXN1bHQ7XG59O1xudmFyIHJlZmVyZW5jZXMgPSB7XG4gIFwiPFwiOiBcIiZsdDtcIixcbiAgXCI+XCI6IFwiJmd0O1wiLFxuICAnXCInOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImYXBvcztcIixcbiAgXCImXCI6IFwiJmFtcDtcIlxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCB0ZXh0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGUodGV4dCkge1xuICBpZiAoIXRleHQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICByZXR1cm4gcmVwbGFjZVVzaW5nUmVnRXhwKHRleHQsIC9bPD4nXCImXS9nLCBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVmZXJlbmNlc1tpbnB1dF07XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHZhciBjb2RlID0gaW5wdXQubGVuZ3RoID4gMSA/IGdldENvZGVQb2ludChpbnB1dCwgMCkgOiBpbnB1dC5jaGFyQ29kZUF0KDApO1xuICAgICAgcmVzdWx0ID0gXCImI1wiLmNvbmNhdChjb2RlLCBcIjtcIik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXRlRGVmaW5pdGlvbnNcbiAqIEBwcm9wZXJ0eSB7e1tldmVudDogc3RyaW5nXTogeyB0YXJnZXQ6IHN0cmluZzsgYWN0aW9ucz86IEFycmF5PHN0cmluZz4gfX19IFtvbl1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7e1tzdGF0ZTogc3RyaW5nXTogU3RhdGVEZWZpbml0aW9uc319IHN0YXRlc1xuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQ7XG4gKiBAcHJvcGVydHkge3N0cmluZ30gaW5pdGlhbFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW1wbGVtZW50YXRpb25cbiAqIEBwcm9wZXJ0eSB7e1thY3Rpb25OYW1lOiBzdHJpbmddOiAoY3R4OiBvYmplY3QsIGV2ZW50OiBhbnkpID0+IG9iamVjdH19IGFjdGlvbnNcbiAqL1xuXG4vKipcbiAqIEEgc2ltcGxpZmllZCBgY3JlYXRlTWFjaGluZWAgZnJvbSBgQHhzdGF0ZS9mc21gIHdpdGggdGhlIGZvbGxvd2luZyBkaWZmZXJlbmNlczpcbiAqXG4gKiAgLSB0aGUgcmV0dXJuZWQgbWFjaGluZSBpcyB0ZWNobmljYWxseSBhIFwic2VydmljZVwiLiBObyBgaW50ZXJwcmV0KG1hY2hpbmUpLnN0YXJ0KClgIGlzIG5lZWRlZC5cbiAqICAtIHRoZSBzdGF0ZSBkZWZpbml0aW9uIG9ubHkgc3VwcG9ydCBgb25gIGFuZCB0YXJnZXQgbXVzdCBiZSBkZWNsYXJlZCB3aXRoIHsgdGFyZ2V0OiAnbmV4dFN0YXRlJywgYWN0aW9uczogW10gfSBleHBsaWNpdGx5LlxuICogIC0gZXZlbnQgcGFzc2VkIHRvIGBzZW5kYCBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGB0eXBlYCBwcm9wZXJ0eS5cbiAqICAtIGFjdGlvbnMgaW1wbGVtZW50YXRpb24gd2lsbCBiZSBbYXNzaWduIGFjdGlvbl0oaHR0cHM6Ly94c3RhdGUuanMub3JnL2RvY3MvZ3VpZGVzL2NvbnRleHQuaHRtbCNhc3NpZ24tYWN0aW9uKSBpZiB5b3UgcmV0dXJuIGFueSB2YWx1ZS5cbiAqICBEbyBub3QgcmV0dXJuIGFueXRoaW5nIGlmIHlvdSBqdXN0IHdhbnQgdG8gaW52b2tlIHNpZGUgZWZmZWN0LlxuICpcbiAqIFRoZSBnb2FsIG9mIHRoaXMgY3VzdG9tIGZ1bmN0aW9uIGlzIHRvIGF2b2lkIGluc3RhbGxpbmcgdGhlIGVudGlyZSBgJ3hzdGF0ZS9mc20nYCBwYWNrYWdlLCB3aGlsZSBlbmFibGluZyBtb2RlbGluZyB1c2luZ1xuICogc3RhdGUgbWFjaGluZS4gWW91IGNhbiBjb3B5IHRoZSBmaXJzdCBwYXJhbWV0ZXIgaW50byB0aGUgZWRpdG9yIGF0IGh0dHBzOi8vc3RhdGVseS5haS92aXogdG8gdmlzdWFsaXplIHRoZSBzdGF0ZSBtYWNoaW5lLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtJbXBsZW1lbnRhdGlvbn0gaW1wbGVtZW50YXRpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFjaGluZShfcmVmLCBfcmVmMikge1xuICB2YXIgc3RhdGVzID0gX3JlZi5zdGF0ZXMsXG4gICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICBpbml0aWFsID0gX3JlZi5pbml0aWFsO1xuICB2YXIgYWN0aW9ucyA9IF9yZWYyLmFjdGlvbnM7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBpbml0aWFsO1xuICB2YXIgY3VycmVudENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4ge1xuICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoZXZlbnQpIHtcbiAgICAgIHZhciBjdXJyZW50U3RhdGVPbiA9IHN0YXRlc1tjdXJyZW50U3RhdGVdLm9uO1xuICAgICAgdmFyIHRyYW5zaXRpb25Db25maWcgPSBjdXJyZW50U3RhdGVPbiAmJiBjdXJyZW50U3RhdGVPbltldmVudC50eXBlXTtcbiAgICAgIGlmICh0cmFuc2l0aW9uQ29uZmlnKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IHRyYW5zaXRpb25Db25maWcudGFyZ2V0O1xuICAgICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb25JbXBsID0gYWN0aW9uc1thY3ROYW1lXTtcbiAgICAgICAgICAgIHZhciBuZXh0Q29udGV4dFZhbHVlID0gYWN0aW9uSW1wbCAmJiBhY3Rpb25JbXBsKGN1cnJlbnRDb250ZXh0LCBldmVudCk7XG4gICAgICAgICAgICBpZiAobmV4dENvbnRleHRWYWx1ZSkge1xuICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3VycmVudENvbnRleHQpLCBuZXh0Q29udGV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaG93T3ZlcmxheURhdGFcbiAqIEBwcm9wZXJ0eSB7J3dhcm5pbmcnIHwgJ2Vycm9yJ30gbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICogQHByb3BlcnR5IHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5TWFjaGluZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7KGRhdGE6IFNob3dPdmVybGF5RGF0YSkgPT4gdm9pZH0gc2hvd092ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gaGlkZU92ZXJsYXlcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5TWFjaGluZSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlNYWNoaW5lKG9wdGlvbnMpIHtcbiAgdmFyIGhpZGVPdmVybGF5ID0gb3B0aW9ucy5oaWRlT3ZlcmxheSxcbiAgICBzaG93T3ZlcmxheSA9IG9wdGlvbnMuc2hvd092ZXJsYXk7XG4gIHJldHVybiBjcmVhdGVNYWNoaW5lKHtcbiAgICBpbml0aWFsOiBcImhpZGRlblwiLFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGxldmVsOiBcImVycm9yXCIsXG4gICAgICBtZXNzYWdlczogW10sXG4gICAgICBtZXNzYWdlU291cmNlOiBcImJ1aWxkXCJcbiAgICB9LFxuICAgIHN0YXRlczoge1xuICAgICAgaGlkZGVuOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgQlVJTERfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5QnVpbGRFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUlVOVElNRV9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlSdW50aW1lRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcInNldE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNwbGF5QnVpbGRFcnJvcjoge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIERJU01JU1M6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImRpc21pc3NNZXNzYWdlc1wiLCBcImhpZGVPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJhcHBlbmRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGlzcGxheVJ1bnRpbWVFcnJvcjoge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIERJU01JU1M6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImRpc21pc3NNZXNzYWdlc1wiLCBcImhpZGVPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSVU5USU1FX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheVJ1bnRpbWVFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiYXBwZW5kTWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgQlVJTERfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5QnVpbGRFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGFjdGlvbnM6IHtcbiAgICAgIGRpc21pc3NNZXNzYWdlczogZnVuY3Rpb24gZGlzbWlzc01lc3NhZ2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICBsZXZlbDogXCJlcnJvclwiLFxuICAgICAgICAgIG1lc3NhZ2VTb3VyY2U6IFwiYnVpbGRcIlxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGFwcGVuZE1lc3NhZ2VzOiBmdW5jdGlvbiBhcHBlbmRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBjb250ZXh0Lm1lc3NhZ2VzLmNvbmNhdChldmVudC5tZXNzYWdlcyksXG4gICAgICAgICAgbGV2ZWw6IGV2ZW50LmxldmVsIHx8IGNvbnRleHQubGV2ZWwsXG4gICAgICAgICAgbWVzc2FnZVNvdXJjZTogZXZlbnQudHlwZSA9PT0gXCJSVU5USU1FX0VSUk9SXCIgPyBcInJ1bnRpbWVcIiA6IFwiYnVpbGRcIlxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHNldE1lc3NhZ2VzOiBmdW5jdGlvbiBzZXRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBldmVudC5tZXNzYWdlcyxcbiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbCxcbiAgICAgICAgICBtZXNzYWdlU291cmNlOiBldmVudC50eXBlID09PSBcIlJVTlRJTUVfRVJST1JcIiA/IFwicnVudGltZVwiIDogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgaGlkZU92ZXJsYXk6IGhpZGVPdmVybGF5LFxuICAgICAgc2hvd092ZXJsYXk6IHNob3dPdmVybGF5XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cbnZhciBwYXJzZUVycm9yVG9TdGFja3MgPSBmdW5jdGlvbiBwYXJzZUVycm9yVG9TdGFja3MoZXJyb3IpIHtcbiAgaWYgKCFlcnJvciB8fCAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VFcnJvclRvU3RhY2tzIGV4cGVjdHMgRXJyb3Igb2JqZWN0XCIpO1xuICB9XG4gIGlmICh0eXBlb2YgZXJyb3Iuc3RhY2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZXJyb3Iuc3RhY2suc3BsaXQoXCJcXG5cIikuZmlsdGVyKGZ1bmN0aW9uIChzdGFjaykge1xuICAgICAgcmV0dXJuIHN0YWNrICE9PSBcIkVycm9yOiBcIi5jb25jYXQoZXJyb3IubWVzc2FnZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIEVycm9yQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3JFdmVudH0gZXJyb3JcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtFcnJvckNhbGxiYWNrfSBjYWxsYmFja1xuICovXG52YXIgbGlzdGVuVG9SdW50aW1lRXJyb3IgPSBmdW5jdGlvbiBsaXN0ZW5Ub1J1bnRpbWVFcnJvcihjYWxsYmFjaykge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gIH07XG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBVbmhhbmRsZWRSZWplY3Rpb25DYWxsYmFja1xuICogQHBhcmFtIHtQcm9taXNlUmVqZWN0aW9uRXZlbnR9IHJlamVjdGlvbkV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VW5oYW5kbGVkUmVqZWN0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbnZhciBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGNhbGxiYWNrKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIiwgY2FsbGJhY2spO1xuICB9O1xufTtcblxuLy8gU3R5bGVzIGFyZSBpbnNwaXJlZCBieSBgcmVhY3QtZXJyb3Itb3ZlcmxheWBcblxudmFyIG1zZ1N0eWxlcyA9IHtcbiAgZXJyb3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyMDYsIDE3LCAzOCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmY2NmY2ZcIlxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjUxLCAyNDUsIDE4MCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmYmY1YjRcIlxuICB9XG59O1xudmFyIGlmcmFtZVN0eWxlID0ge1xuICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHdpZHRoOiBcIjEwMHZ3XCIsXG4gIGhlaWdodDogXCIxMDB2aFwiLFxuICBib3JkZXI6IFwibm9uZVwiLFxuICBcInotaW5kZXhcIjogOTk5OTk5OTk5OVxufTtcbnZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDB2d1wiLFxuICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgZm9udFNpemU6IFwibGFyZ2VcIixcbiAgcGFkZGluZzogXCIycmVtIDJyZW0gNHJlbSAycmVtXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMS4yXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gIGNvbG9yOiBcIndoaXRlXCJcbn07XG52YXIgaGVhZGVyU3R5bGUgPSB7XG4gIGNvbG9yOiBcIiNlODNiNDZcIixcbiAgZm9udFNpemU6IFwiMmVtXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCIsXG4gIG1hcmdpbjogXCIwIDJyZW0gMnJlbSAwXCIsXG4gIGZsZXg6IFwiMCAwIGF1dG9cIixcbiAgbWF4SGVpZ2h0OiBcIjUwJVwiLFxuICBvdmVyZmxvdzogXCJhdXRvXCJcbn07XG52YXIgZGlzbWlzc0J1dHRvblN0eWxlID0ge1xuICBjb2xvcjogXCIjZmZmZmZmXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMXJlbVwiLFxuICBmb250U2l6ZTogXCIxLjVyZW1cIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG4gIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHJpZ2h0OiAwLFxuICB0b3A6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICBib3JkZXI6IFwibm9uZVwiXG59O1xudmFyIG1zZ1R5cGVTdHlsZSA9IHtcbiAgY29sb3I6IFwiI2U4M2I0NlwiLFxuICBmb250U2l6ZTogXCIxLjJlbVwiLFxuICBtYXJnaW5Cb3R0b206IFwiMXJlbVwiLFxuICBmb250RmFtaWx5OiBcInNhbnMtc2VyaWZcIlxufTtcbnZhciBtc2dUZXh0U3R5bGUgPSB7XG4gIGxpbmVIZWlnaHQ6IFwiMS41XCIsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgZm9udEZhbWlseTogXCJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZVwiXG59O1xuXG4vLyBBTlNJIEhUTUxcblxudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nW10gfX0gaXRlbVxuICogQHJldHVybnMge3sgaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB9fVxuICovXG52YXIgZm9ybWF0UHJvYmxlbSA9IGZ1bmN0aW9uIGZvcm1hdFByb2JsZW0odHlwZSwgaXRlbSkge1xuICB2YXIgaGVhZGVyID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBcIldBUk5JTkdcIiA6IFwiRVJST1JcIjtcbiAgdmFyIGJvZHkgPSBcIlwiO1xuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBib2R5ICs9IGl0ZW07XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpbGUgPSBpdGVtLmZpbGUgfHwgXCJcIjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICB2YXIgbW9kdWxlTmFtZSA9IGl0ZW0ubW9kdWxlTmFtZSA/IGl0ZW0ubW9kdWxlTmFtZS5pbmRleE9mKFwiIVwiKSAhPT0gLTEgPyBcIlwiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUucmVwbGFjZSgvXihcXHN8XFxTKSohLywgXCJcIiksIFwiIChcIikuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSwgXCIpXCIpIDogXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lKSA6IFwiXCI7XG4gICAgdmFyIGxvYyA9IGl0ZW0ubG9jO1xuICAgIGhlYWRlciArPSBcIlwiLmNvbmNhdChtb2R1bGVOYW1lIHx8IGZpbGUgPyBcIiBpbiBcIi5jb25jYXQobW9kdWxlTmFtZSA/IFwiXCIuY29uY2F0KG1vZHVsZU5hbWUpLmNvbmNhdChmaWxlID8gXCIgKFwiLmNvbmNhdChmaWxlLCBcIilcIikgOiBcIlwiKSA6IGZpbGUpLmNvbmNhdChsb2MgPyBcIiBcIi5jb25jYXQobG9jKSA6IFwiXCIpIDogXCJcIik7XG4gICAgYm9keSArPSBpdGVtLm1lc3NhZ2UgfHwgXCJcIjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShpdGVtLnN0YWNrKSkge1xuICAgIGl0ZW0uc3RhY2suZm9yRWFjaChmdW5jdGlvbiAoc3RhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYm9keSArPSBcIlxcclxcblwiLmNvbmNhdChzdGFjayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXI6IGhlYWRlcixcbiAgICBib2R5OiBib2R5XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENyZWF0ZU92ZXJsYXlPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IHZvaWR9IFtjYXRjaFJ1bnRpbWVFcnJvcl1cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5ID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheShvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbiAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gIHZhciBjb250YWluZXJFbGVtZW50O1xuICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgdmFyIGhlYWRlckVsZW1lbnQ7XG4gIC8qKiBAdHlwZSB7QXJyYXk8KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkPn0gKi9cbiAgdmFyIG9uTG9hZFF1ZXVlID0gW107XG4gIC8qKiBAdHlwZSB7VHJ1c3RlZFR5cGVQb2xpY3kgfCB1bmRlZmluZWR9ICovXG4gIHZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5U3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlW3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICAvLyBFbmFibGUgVHJ1c3RlZCBUeXBlcyBpZiB0aGV5IGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xuICAgICAgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgXCJ3ZWJwYWNrLWRldi1zZXJ2ZXIjb3ZlcmxheVwiLCB7XG4gICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXlcIjtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICBhcHBseVN0eWxlKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQsIGlmcmFtZVN0eWxlKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29udGFpbmVyRWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29udGVudEVsZW1lbnQuaWQgPSBcIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheS1kaXZcIjtcbiAgICAgIGFwcGx5U3R5bGUoY29udGVudEVsZW1lbnQsIGNvbnRhaW5lclN0eWxlKTtcbiAgICAgIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaGVhZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkNvbXBpbGVkIHdpdGggcHJvYmxlbXM6XCI7XG4gICAgICBhcHBseVN0eWxlKGhlYWRlckVsZW1lbnQsIGhlYWRlclN0eWxlKTtcbiAgICAgIHZhciBjbG9zZUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYXBwbHlTdHlsZShjbG9zZUJ1dHRvbkVsZW1lbnQsIGRpc21pc3NCdXR0b25TdHlsZSk7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCLDl1wiO1xuICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFyaWFMYWJlbCA9IFwiRGlzbWlzc1wiO1xuICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBvdmVybGF5U2VydmljZS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkRJU01JU1NcIlxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbkVsZW1lbnQpO1xuICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWxlbWVudCk7XG5cbiAgICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5ib2R5LmFwcGVuZENoaWxkKGNvbnRlbnRFbGVtZW50KTtcbiAgICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgICBvbkxvYWQoLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9jb250ZW50RWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIG9uTG9hZFF1ZXVlID0gW107XG5cbiAgICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IG51bGw7XG4gICAgfTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlFeGlzdHMoY2FsbGJhY2ssIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgY29udGFpbmVyRWxlbWVudC5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKFwiXCIpIDogXCJcIjtcbiAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgaWYgKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpO1xuICB9XG5cbiAgLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBpZiAoIWlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8vIENvbXBpbGF0aW9uIHdpdGggZXJyb3JzIChlLmcuIHN5bnRheCBlcnJvciBvciBtaXNzaW5nIG1vZHVsZXMpLlxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmcgIHwgeyBtb2R1bGVJZGVudGlmaWVyPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfT59IG1lc3NhZ2VzXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKiBAcGFyYW0geydidWlsZCcgfCAncnVudGltZSd9IG1lc3NhZ2VTb3VyY2VcbiAgICovXG4gIGZ1bmN0aW9uIHNob3codHlwZSwgbWVzc2FnZXMsIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUsIG1lc3NhZ2VTb3VyY2UpIHtcbiAgICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGhlYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gbWVzc2FnZVNvdXJjZSA9PT0gXCJydW50aW1lXCIgPyBcIlVuY2F1Z2h0IHJ1bnRpbWUgZXJyb3JzOlwiIDogXCJDb21waWxlZCB3aXRoIHByb2JsZW1zOlwiO1xuICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zZ1N0eWxlID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBtc2dTdHlsZXMud2FybmluZyA6IG1zZ1N0eWxlcy5lcnJvcjtcbiAgICAgICAgYXBwbHlTdHlsZShlbnRyeUVsZW1lbnQsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbXNnU3R5bGUpLCB7fSwge1xuICAgICAgICAgIHBhZGRpbmc6IFwiMXJlbSAxcmVtIDEuNXJlbSAxcmVtXCJcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgdHlwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcbiAgICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgICBhcHBseVN0eWxlKHR5cGVFbGVtZW50LCBtc2dUeXBlU3R5bGUpO1xuICAgICAgICBpZiAobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwge1xuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIGVsZW1lbnQuZGF0YXNldCBub3Qgc3VwcG9ydGVkIGluIElFXG4gICAgICAgICAgdHlwZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jYW4tb3BlblwiLCB0cnVlKTtcbiAgICAgICAgICB0eXBlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZmV0Y2goXCIvd2VicGFjay1kZXYtc2VydmVyL29wZW4tZWRpdG9yP2ZpbGVOYW1lPVwiLmNvbmNhdChtZXNzYWdlLm1vZHVsZUlkZW50aWZpZXIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cbiAgICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgICB2YXIgbWVzc2FnZVRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYXBwbHlTdHlsZShtZXNzYWdlVGV4dE5vZGUsIG1zZ1RleHRTdHlsZSk7XG4gICAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKHRleHQpIDogdGV4dDtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VUZXh0Tm9kZSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cbiAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbnRyeUVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7XG4gIH1cbiAgdmFyIG92ZXJsYXlTZXJ2aWNlID0gY3JlYXRlT3ZlcmxheU1hY2hpbmUoe1xuICAgIHNob3dPdmVybGF5OiBmdW5jdGlvbiBzaG93T3ZlcmxheShfcmVmMykge1xuICAgICAgdmFyIF9yZWYzJGxldmVsID0gX3JlZjMubGV2ZWwsXG4gICAgICAgIGxldmVsID0gX3JlZjMkbGV2ZWwgPT09IHZvaWQgMCA/IFwiZXJyb3JcIiA6IF9yZWYzJGxldmVsLFxuICAgICAgICBtZXNzYWdlcyA9IF9yZWYzLm1lc3NhZ2VzLFxuICAgICAgICBtZXNzYWdlU291cmNlID0gX3JlZjMubWVzc2FnZVNvdXJjZTtcbiAgICAgIHJldHVybiBzaG93KGxldmVsLCBtZXNzYWdlcywgb3B0aW9ucy50cnVzdGVkVHlwZXNQb2xpY3lOYW1lLCBtZXNzYWdlU291cmNlKTtcbiAgICB9LFxuICAgIGhpZGVPdmVybGF5OiBoaWRlXG4gIH0pO1xuICBpZiAob3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcikge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IGVycm9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZhbGxiYWNrTWVzc2FnZVxuICAgICAqL1xuICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yLCBmYWxsYmFja01lc3NhZ2UpIHtcbiAgICAgIHZhciBlcnJvck9iamVjdCA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvciB8fCBmYWxsYmFja01lc3NhZ2UpO1xuICAgICAgdmFyIHNob3VsZERpc3BsYXkgPSB0eXBlb2Ygb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcihlcnJvck9iamVjdCkgOiB0cnVlO1xuICAgICAgaWYgKHNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgb3ZlcmxheVNlcnZpY2Uuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJSVU5USU1FX0VSUk9SXCIsXG4gICAgICAgICAgbWVzc2FnZXM6IFt7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvck9iamVjdC5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2s6IHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvck9iamVjdClcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxpc3RlblRvUnVudGltZUVycm9yKGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7XG4gICAgICAvLyBlcnJvciBwcm9wZXJ0eSBtYXkgYmUgZW1wdHkgaW4gb2xkZXIgYnJvd3NlciBsaWtlIElFXG4gICAgICB2YXIgZXJyb3IgPSBlcnJvckV2ZW50LmVycm9yLFxuICAgICAgICBtZXNzYWdlID0gZXJyb3JFdmVudC5tZXNzYWdlO1xuICAgICAgaWYgKCFlcnJvciAmJiAhbWVzc2FnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGVycm9yIHN0YWNrIGluZGljYXRlcyBhIFJlYWN0IGVycm9yIGJvdW5kYXJ5IGNhdWdodCB0aGUgZXJyb3IsIGRvIG5vdCBzaG93IG92ZXJsYXkuXG4gICAgICBpZiAoZXJyb3IgJiYgZXJyb3Iuc3RhY2sgJiYgZXJyb3Iuc3RhY2suaW5jbHVkZXMoXCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tEZXZcIikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1lc3NhZ2UpO1xuICAgIH0pO1xuICAgIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGZ1bmN0aW9uIChwcm9taXNlUmVqZWN0aW9uRXZlbnQpIHtcbiAgICAgIHZhciByZWFzb24gPSBwcm9taXNlUmVqZWN0aW9uRXZlbnQucmVhc29uO1xuICAgICAgaGFuZGxlRXJyb3IocmVhc29uLCBcIlVua25vd24gcHJvbWlzZSByZWplY3Rpb24gcmVhc29uXCIpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdmVybGF5U2VydmljZTtcbn07XG5leHBvcnQgeyBmb3JtYXRQcm9ibGVtLCBjcmVhdGVPdmVybGF5IH07IiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIodCkgeyB2YXIgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgTWFwID8gbmV3IE1hcCgpIDogdm9pZCAwOyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIodCkgeyBpZiAobnVsbCA9PT0gdCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24odCkpIHJldHVybiB0OyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IGlmICh2b2lkIDAgIT09IHIpIHsgaWYgKHIuaGFzKHQpKSByZXR1cm4gci5nZXQodCk7IHIuc2V0KHQsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KHQsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSByZXR1cm4gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiAhMSwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCB0KTsgfSwgX3dyYXBOYXRpdmVTdXBlcih0KTsgfVxuZnVuY3Rpb24gX2NvbnN0cnVjdCh0LCBlLCByKSB7IGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB2YXIgbyA9IFtudWxsXTsgby5wdXNoLmFwcGx5KG8sIGUpOyB2YXIgcCA9IG5ldyAodC5iaW5kLmFwcGx5KHQsIG8pKSgpOyByZXR1cm4gciAmJiBfc2V0UHJvdG90eXBlT2YocCwgci5wcm90b3R5cGUpLCBwOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKHQpIHsgdHJ5IHsgcmV0dXJuIC0xICE9PSBGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpOyB9IGNhdGNoIChuKSB7IHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQ7IH0gfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7IHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTsgfSwgX2dldFByb3RvdHlwZU9mKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kSW5pdFNwZWMoZSwgYSkgeyBfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbihlLCBhKSwgYS5hZGQoZSk7IH1cbmZ1bmN0aW9uIF9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uKGUsIHQpIHsgaWYgKHQuaGFzKGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgdGhlIHNhbWUgcHJpdmF0ZSBlbGVtZW50cyB0d2ljZSBvbiBhbiBvYmplY3RcIik7IH1cbmZ1bmN0aW9uIF9hc3NlcnRDbGFzc0JyYW5kKGUsIHQsIG4pIHsgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgPT09IHQgOiBlLmhhcyh0KSkgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdCA6IG47IHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGVsZW1lbnQgaXMgbm90IHByZXNlbnQgb24gdGhpcyBvYmplY3RcIik7IH1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb2dyZXNzU3VwcG9ydGVkKCkge1xuICByZXR1cm4gXCJjdXN0b21FbGVtZW50c1wiIGluIHNlbGYgJiYgISFIVE1MRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVByb2dyZXNzRWxlbWVudCgpIHtcbiAgdmFyIF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3M7XG4gIGlmIChjdXN0b21FbGVtZW50cy5nZXQoXCJ3ZHMtcHJvZ3Jlc3NcIikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3NfYnJhbmQgPSAvKiNfX1BVUkVfXyovbmV3IFdlYWtTZXQoKTtcbiAgdmFyIFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0hUTUxFbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gV2VicGFja0RldlNlcnZlclByb2dyZXNzKCkge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyk7XG4gICAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgV2VicGFja0RldlNlcnZlclByb2dyZXNzKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyhfdGhpcywgX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCk7XG4gICAgICBfdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgICBtb2RlOiBcIm9wZW5cIlxuICAgICAgfSk7XG4gICAgICBfdGhpcy5tYXhEYXNoT2Zmc2V0ID0gLTIxOS45OTA3ODM2OTE0MDYyNTtcbiAgICAgIF90aGlzLmFuaW1hdGlvblRpbWVyID0gbnVsbDtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzKFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcywgX0hUTUxFbGVtZW50KTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcywgW3tcbiAgICAgIGtleTogXCJjb25uZWN0ZWRDYWxsYmFja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfcmVzZXQpLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwicHJvZ3Jlc3NcIikge1xuICAgICAgICAgIF9hc3NlcnRDbGFzc0JyYW5kKF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3NfYnJhbmQsIHRoaXMsIF91cGRhdGUpLmNhbGwodGhpcywgTnVtYmVyKG5ld1ZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfcmVzZXQpLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJvYnNlcnZlZEF0dHJpYnV0ZXNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gW1wicHJvZ3Jlc3NcIiwgXCJ0eXBlXCJdO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfSgvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihIVE1MRWxlbWVudCkpO1xuICBfV2VicGFja0RldlNlcnZlclByb2dyZXNzID0gV2VicGFja0RldlNlcnZlclByb2dyZXNzO1xuICBmdW5jdGlvbiBfcmVzZXQoKSB7XG4gICAgdmFyIF90aGlzJGdldEF0dHJpYnV0ZSwgX051bWJlcjtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5hbmltYXRpb25UaW1lcik7XG4gICAgdGhpcy5hbmltYXRpb25UaW1lciA9IG51bGw7XG4gICAgdmFyIHR5cGVBdHRyID0gKF90aGlzJGdldEF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT09IG51bGwgfHwgX3RoaXMkZ2V0QXR0cmlidXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRnZXRBdHRyaWJ1dGUudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlQXR0ciA9PT0gXCJjaXJjdWxhclwiID8gXCJjaXJjdWxhclwiIDogXCJsaW5lYXJcIjtcbiAgICB2YXIgaW5uZXJIVE1MID0gdGhpcy50eXBlID09PSBcImNpcmN1bGFyXCIgPyBfY2lyY3VsYXJUZW1wbGF0ZS5jYWxsKF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MpIDogX2xpbmVhclRlbXBsYXRlLmNhbGwoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyk7XG4gICAgdGhpcy5zaGFkb3dSb290LmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICB0aGlzLmluaXRpYWxQcm9ncmVzcyA9IChfTnVtYmVyID0gTnVtYmVyKHRoaXMuZ2V0QXR0cmlidXRlKFwicHJvZ3Jlc3NcIikpKSAhPT0gbnVsbCAmJiBfTnVtYmVyICE9PSB2b2lkIDAgPyBfTnVtYmVyIDogMDtcbiAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfdXBkYXRlKS5jYWxsKHRoaXMsIHRoaXMuaW5pdGlhbFByb2dyZXNzKTtcbiAgfVxuICBmdW5jdGlvbiBfY2lyY3VsYXJUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICAgIDxzdHlsZT5cXG4gICAgICAgIDpob3N0IHtcXG4gICAgICAgICAgICB3aWR0aDogMjAwcHg7XFxuICAgICAgICAgICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgICAgICAgICAgcmlnaHQ6IDUlO1xcbiAgICAgICAgICAgIHRvcDogNSU7XFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuMjVzIGVhc2UtaW4tb3V0O1xcbiAgICAgICAgICAgIHotaW5kZXg6IDIxNDc0ODM2NDU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBjaXJjbGUge1xcbiAgICAgICAgICAgIGZpbGw6ICMyODJkMzU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBwYXRoIHtcXG4gICAgICAgICAgICBmaWxsOiByZ2JhKDAsIDAsIDAsIDApO1xcbiAgICAgICAgICAgIHN0cm9rZTogcmdiKDE4NiwgMjIzLCAxNzIpO1xcbiAgICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6IDIxOS45OTA3ODM2OTE0MDYyNTtcXG4gICAgICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTIxOS45OTA3ODM2OTE0MDYyNTtcXG4gICAgICAgICAgICBzdHJva2Utd2lkdGg6IDEwO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKSB0cmFuc2xhdGUoMHB4LCAtODBweCk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB0ZXh0IHtcXG4gICAgICAgICAgICBmb250LWZhbWlseTogJ09wZW4gU2FucycsIHNhbnMtc2VyaWY7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICAgICAgICAgIGZpbGw6ICNmZmZmZmY7XFxuICAgICAgICAgICAgZG9taW5hbnQtYmFzZWxpbmU6IG1pZGRsZTtcXG4gICAgICAgICAgICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdHNwYW4jcGVyY2VudC1zdXBlciB7XFxuICAgICAgICAgICAgZmlsbDogI2JkYzNjNztcXG4gICAgICAgICAgICBmb250LXNpemU6IDAuNDVlbTtcXG4gICAgICAgICAgICBiYXNlbGluZS1zaGlmdDogMTAlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgQGtleWZyYW1lcyBmYWRlIHtcXG4gICAgICAgICAgICAwJSB7IG9wYWNpdHk6IDE7IHRyYW5zZm9ybTogc2NhbGUoMSk7IH1cXG4gICAgICAgICAgICAxMDAlIHsgb3BhY2l0eTogMDsgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmRpc2FwcGVhciB7XFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBmYWRlIDAuM3M7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAwLjVzO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmhpZGRlbiB7XFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgIH1cXG4gICAgICAgIDwvc3R5bGU+XFxuICAgICAgICA8c3ZnIGlkPVxcXCJwcm9ncmVzc1xcXCIgY2xhc3M9XFxcImhpZGRlbiBub3NlbGVjdFxcXCIgdmlld0JveD1cXFwiMCAwIDgwIDgwXFxcIj5cXG4gICAgICAgIDxjaXJjbGUgY3g9XFxcIjUwJVxcXCIgY3k9XFxcIjUwJVxcXCIgcj1cXFwiMzVcXFwiPjwvY2lyY2xlPlxcbiAgICAgICAgPHBhdGggZD1cXFwiTTUsNDBhMzUsMzUgMCAxLDAgNzAsMGEzNSwzNSAwIDEsMCAtNzAsMFxcXCI+PC9wYXRoPlxcbiAgICAgICAgPHRleHQgeD1cXFwiNTAlXFxcIiB5PVxcXCI1MSVcXFwiPlxcbiAgICAgICAgICAgIDx0c3BhbiBpZD1cXFwicGVyY2VudC12YWx1ZVxcXCI+MDwvdHNwYW4+XFxuICAgICAgICAgICAgPHRzcGFuIGlkPVxcXCJwZXJjZW50LXN1cGVyXFxcIj4lPC90c3Bhbj5cXG4gICAgICAgIDwvdGV4dD5cXG4gICAgICAgIDwvc3ZnPlxcbiAgICAgIFwiO1xuICB9XG4gIGZ1bmN0aW9uIF9saW5lYXJUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICAgIDxzdHlsZT5cXG4gICAgICAgIDpob3N0IHtcXG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMHZ3O1xcbiAgICAgICAgICAgIHotaW5kZXg6IDIxNDc0ODM2NDU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAjYmFyIHtcXG4gICAgICAgICAgICB3aWR0aDogMCU7XFxuICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4NiwgMjIzLCAxNzIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgQGtleWZyYW1lcyBmYWRlIHtcXG4gICAgICAgICAgICAwJSB7IG9wYWNpdHk6IDE7IH1cXG4gICAgICAgICAgICAxMDAlIHsgb3BhY2l0eTogMDsgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmRpc2FwcGVhciB7XFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBmYWRlIDAuM3M7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAwLjVzO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmhpZGRlbiB7XFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgIH1cXG4gICAgICAgIDwvc3R5bGU+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJwcm9ncmVzc1xcXCI+PC9kaXY+XFxuICAgICAgICBcIjtcbiAgfVxuICBmdW5jdGlvbiBfdXBkYXRlKHBlcmNlbnQpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiI3Byb2dyZXNzXCIpO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IFwiY2lyY3VsYXJcIikge1xuICAgICAgdmFyIHBhdGggPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcInBhdGhcIik7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNwZXJjZW50LXZhbHVlXCIpO1xuICAgICAgdmFyIG9mZnNldCA9ICgxMDAgLSBwZXJjZW50KSAvIDEwMCAqIHRoaXMubWF4RGFzaE9mZnNldDtcbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IG9mZnNldDtcbiAgICAgIHZhbHVlLnRleHRDb250ZW50ID0gcGVyY2VudDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KHBlcmNlbnQsIFwiJVwiKTtcbiAgICB9XG4gICAgaWYgKHBlcmNlbnQgPj0gMTAwKSB7XG4gICAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfaGlkZSkuY2FsbCh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKHBlcmNlbnQgPiAwKSB7XG4gICAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfc2hvdykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gX3Nob3coKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNwcm9ncmVzc1wiKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH1cbiAgZnVuY3Rpb24gX2hpZGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNwcm9ncmVzc1wiKTtcbiAgICBpZiAodGhpcy50eXBlID09PSBcImNpcmN1bGFyXCIpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FwcGVhclwiKTtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgX3RoaXMyLCBfdXBkYXRlKS5jYWxsKF90aGlzMiwgMCk7XG4gICAgICB9LCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSBcImxpbmVhclwiKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhcHBlYXJcIik7XG4gICAgICB0aGlzLmFuaW1hdGlvblRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FwcGVhclwiKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gXCIwJVwiO1xuICAgICAgICBfdGhpczIuYW5pbWF0aW9uVGltZXIgPSBudWxsO1xuICAgICAgfSwgODAwKTtcbiAgICB9XG4gIH1cbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwid2RzLXByb2dyZXNzXCIsIFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyk7XG59IiwiLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovXG5cbmltcG9ydCBXZWJTb2NrZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuXG4vLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZFxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG52YXIgQ2xpZW50ID1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0IDogX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gOiBXZWJTb2NrZXRDbGllbnQ7XG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgcmV0cmllcyA9IDA7XG52YXIgbWF4UmV0cmllcyA9IDEwO1xuXG4vLyBJbml0aWFsaXplZCBjbGllbnQgaXMgZXhwb3J0ZWQgc28gZXh0ZXJuYWwgY29uc3VtZXJzIGNhbiB1dGlsaXplIHRoZSBzYW1lIGluc3RhbmNlXG4vLyBJdCBpcyBtdXRhYmxlIHRvIGVuZm9yY2Ugc2luZ2xldG9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xuZXhwb3J0IHZhciBjbGllbnQgPSBudWxsO1xudmFyIHRpbWVvdXQ7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHt7IFtoYW5kbGVyOiBzdHJpbmddOiAoZGF0YT86IGFueSwgcGFyYW1zPzogYW55KSA9PiBhbnkgfX0gaGFuZGxlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG52YXIgc29ja2V0ID0gZnVuY3Rpb24gaW5pdFNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbWF4UmV0cmllcyA9IHJlY29ubmVjdDtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHtcbiAgICAgIGhhbmRsZXJzLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlY29ubmVjdC5cbiAgICBjbGllbnQgPSBudWxsO1xuXG4gICAgLy8gQWZ0ZXIgMTAgcmV0cmllcyBzdG9wIHRyeWluZywgdG8gcHJldmVudCBsb2dzcGFtLlxuICAgIGlmIChyZXRyaWVzIDwgbWF4UmV0cmllcykge1xuICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC5cbiAgICAgIC8vIFJlc3BlY3RmdWxseSBjb3BpZWQgZnJvbSB0aGUgcGFja2FnZSBgZ290YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgcmV0cmllcyArPSAxO1xuICAgICAgbG9nLmluZm8oXCJUcnlpbmcgdG8gcmVjb25uZWN0Li4uXCIpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhXG4gICAqL1xuICBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICBpZiAoaGFuZGxlcnNbbWVzc2FnZS50eXBlXSkge1xuICAgICAgaGFuZGxlcnNbbWVzc2FnZS50eXBlXShtZXNzYWdlLmRhdGEsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHNvY2tldDsiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9tb2R1bGVzL2xvZ2dlci9pbmRleC5qc1wiO1xudmFyIG5hbWUgPSBcIndlYnBhY2stZGV2LXNlcnZlclwiO1xuLy8gZGVmYXVsdCBsZXZlbCBpcyBzZXQgb24gdGhlIGNsaWVudCBzaWRlLCBzbyBpdCBkb2VzIG5vdCBuZWVkXG4vLyB0byBiZSBzZXQgYnkgdGhlIENMSSBvciBBUElcbnZhciBkZWZhdWx0TGV2ZWwgPSBcImluZm9cIjtcblxuLy8gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9uc1xuLyoqXG4gKiBAcGFyYW0ge2ZhbHNlIHwgdHJ1ZSB8IFwibm9uZVwiIHwgXCJlcnJvclwiIHwgXCJ3YXJuXCIgfCBcImluZm9cIiB8IFwibG9nXCIgfCBcInZlcmJvc2VcIn0gbGV2ZWxcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBsb2dnZXIuY29uZmlndXJlRGVmYXVsdExvZ2dlcih7XG4gICAgbGV2ZWw6IGxldmVsXG4gIH0pO1xufVxuc2V0TG9nTGV2ZWwoZGVmYXVsdExldmVsKTtcbnZhciBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKG5hbWUpO1xuZXhwb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCB9OyIsIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi9cblxuLy8gU2VuZCBtZXNzYWdlcyB0byB0aGUgb3V0c2lkZSwgc28gcGx1Z2lucyBjYW4gY29uc3VtZSBpdC5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7YW55fSBbZGF0YV1cbiAqL1xuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCBcIipcIik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHNlbmRNc2c7IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8qIGdsb2JhbHMgX193ZWJwYWNrX2hhc2hfXyAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcblx0LyoqIEB0eXBlIHt1bmRlZmluZWR8c3RyaW5nfSAqL1xuXHR2YXIgbGFzdEhhc2g7XG5cdHZhciB1cFRvRGF0ZSA9IGZ1bmN0aW9uIHVwVG9EYXRlKCkge1xuXHRcdHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGxhc3RIYXNoKS5pbmRleE9mKF9fd2VicGFja19oYXNoX18pID49IDA7XG5cdH07XG5cdHZhciBsb2cgPSByZXF1aXJlKFwiLi9sb2dcIik7XG5cdHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuXHRcdG1vZHVsZS5ob3Rcblx0XHRcdC5jaGVjayh0cnVlKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdGlmICghdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGZpbmQgdXBkYXRlLiBcIiArXG5cdFx0XHRcdFx0XHRcdCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG5cdFx0XHRcdFx0XHRcdFx0PyBcIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJQbGVhc2UgcmVsb2FkIG1hbnVhbGx5IVwiKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIChQcm9iYWJseSBiZWNhdXNlIG9mIHJlc3RhcnRpbmcgdGhlIHdlYnBhY2stZGV2LXNlcnZlcilcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCF1cFRvRGF0ZSgpKSB7XG5cdFx0XHRcdFx0Y2hlY2soKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlcXVpcmUoXCIuL2xvZy1hcHBseS1yZXN1bHRcIikodXBkYXRlZE1vZHVsZXMsIHVwZGF0ZWRNb2R1bGVzKTtcblxuXHRcdFx0XHRpZiAodXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBBcHAgaXMgdXAgdG8gZGF0ZS5cIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHR2YXIgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcblx0XHRcdFx0aWYgKFtcImFib3J0XCIsIFwiZmFpbFwiXS5pbmRleE9mKHN0YXR1cykgPj0gMCkge1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSBDYW5ub3QgYXBwbHkgdXBkYXRlLiBcIiArXG5cdFx0XHRcdFx0XHRcdCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG5cdFx0XHRcdFx0XHRcdFx0PyBcIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJQbGVhc2UgcmVsb2FkIG1hbnVhbGx5IVwiKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIFwiICsgbG9nLmZvcm1hdEVycm9yKGVycikpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBVcGRhdGUgZmFpbGVkOiBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH07XG5cdHZhciBob3RFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblx0aG90RW1pdHRlci5vbihcIndlYnBhY2tIb3RVcGRhdGVcIiwgZnVuY3Rpb24gKGN1cnJlbnRIYXNoKSB7XG5cdFx0bGFzdEhhc2ggPSBjdXJyZW50SGFzaDtcblx0XHRpZiAoIXVwVG9EYXRlKCkgJiYgbW9kdWxlLmhvdC5zdGF0dXMoKSA9PT0gXCJpZGxlXCIpIHtcblx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBDaGVja2luZyBmb3IgdXBkYXRlcyBvbiB0aGUgc2VydmVyLi4uXCIpO1xuXHRcdFx0Y2hlY2soKTtcblx0XHR9XG5cdH0pO1xuXHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gV2FpdGluZyBmb3IgdXBkYXRlIHNpZ25hbCBmcm9tIFdEUy4uLlwiKTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihcIltITVJdIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgZGlzYWJsZWQuXCIpO1xufVxuIiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbi8qKlxuICogQHBhcmFtIHsoc3RyaW5nIHwgbnVtYmVyKVtdfSB1cGRhdGVkTW9kdWxlcyB1cGRhdGVkIG1vZHVsZXNcbiAqIEBwYXJhbSB7KHN0cmluZyB8IG51bWJlcilbXSB8IG51bGx9IHJlbmV3ZWRNb2R1bGVzIHJlbmV3ZWQgbW9kdWxlc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcywgcmVuZXdlZE1vZHVsZXMpIHtcblx0dmFyIHVuYWNjZXB0ZWRNb2R1bGVzID0gdXBkYXRlZE1vZHVsZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdHJldHVybiByZW5ld2VkTW9kdWxlcyAmJiByZW5ld2VkTW9kdWxlcy5pbmRleE9mKG1vZHVsZUlkKSA8IDA7XG5cdH0pO1xuXHR2YXIgbG9nID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuXG5cdGlmICh1bmFjY2VwdGVkTW9kdWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0bG9nKFxuXHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcIltITVJdIFRoZSBmb2xsb3dpbmcgbW9kdWxlcyBjb3VsZG4ndCBiZSBob3QgdXBkYXRlZDogKFRoZXkgd291bGQgbmVlZCBhIGZ1bGwgcmVsb2FkISlcIlxuXHRcdCk7XG5cdFx0dW5hY2NlcHRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICghcmVuZXdlZE1vZHVsZXMgfHwgcmVuZXdlZE1vZHVsZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIE5vdGhpbmcgaG90IHVwZGF0ZWQuXCIpO1xuXHR9IGVsc2Uge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBVcGRhdGVkIG1vZHVsZXM6XCIpO1xuXHRcdHJlbmV3ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRpZiAodHlwZW9mIG1vZHVsZUlkID09PSBcInN0cmluZ1wiICYmIG1vZHVsZUlkLmluZGV4T2YoXCIhXCIpICE9PSAtMSkge1xuXHRcdFx0XHR2YXIgcGFydHMgPSBtb2R1bGVJZC5zcGxpdChcIiFcIik7XG5cdFx0XHRcdGxvZy5ncm91cENvbGxhcHNlZChcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIHBhcnRzLnBvcCgpKTtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0XHRsb2cuZ3JvdXBFbmQoXCJpbmZvXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBudW1iZXJJZHMgPSByZW5ld2VkTW9kdWxlcy5ldmVyeShmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdHJldHVybiB0eXBlb2YgbW9kdWxlSWQgPT09IFwibnVtYmVyXCI7XG5cdFx0fSk7XG5cdFx0aWYgKG51bWJlcklkcylcblx0XHRcdGxvZyhcblx0XHRcdFx0XCJpbmZvXCIsXG5cdFx0XHRcdCdbSE1SXSBDb25zaWRlciB1c2luZyB0aGUgb3B0aW1pemF0aW9uLm1vZHVsZUlkczogXCJuYW1lZFwiIGZvciBtb2R1bGUgbmFtZXMuJ1xuXHRcdFx0KTtcblx0fVxufTtcbiIsIi8qKiBAdHlwZWRlZiB7XCJpbmZvXCIgfCBcIndhcm5pbmdcIiB8IFwiZXJyb3JcIn0gTG9nTGV2ZWwgKi9cblxuLyoqIEB0eXBlIHtMb2dMZXZlbH0gKi9cbnZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSwgaWYgc2hvdWxkIGxvZ1xuICovXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcblx0dmFyIHNob3VsZExvZyA9XG5cdFx0KGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbi8qKlxuICogQHBhcmFtIHsobXNnPzogc3RyaW5nKSA9PiB2b2lkfSBsb2dGbiBsb2cgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHsobGV2ZWw6IExvZ0xldmVsLCBtc2c/OiBzdHJpbmcpID0+IHZvaWR9IGZ1bmN0aW9uIHRoYXQgbG9ncyB3aGVuIGxvZyBsZXZlbCBpcyBzdWZmaWNpZW50XG4gKi9cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0xvZ0xldmVsfSBsZXZlbCBsb2cgbGV2ZWxcbiAqIEBwYXJhbSB7c3RyaW5nfEVycm9yfSBtc2cgbWVzc2FnZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKi9cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGxvZ0xldmVsID0gbGV2ZWw7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBlcnJvclxuICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIGVycm9yXG4gKi9cbm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHR2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuXHR2YXIgc3RhY2sgPSBlcnIuc3RhY2s7XG5cdGlmICghc3RhY2spIHtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fSBlbHNlIGlmIChzdGFjay5pbmRleE9mKG1lc3NhZ2UpIDwgMCkge1xuXHRcdHJldHVybiBtZXNzYWdlICsgXCJcXG5cIiArIHN0YWNrO1xuXHR9XG5cdHJldHVybiBzdGFjaztcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsb2NhbHNKc29uU3RyaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAxNzU0MzIzMjEwMjczXG4gICAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiXCJ9KTtcbiAgICAgICAgLy8gb25seSBpbnZhbGlkYXRlIHdoZW4gbG9jYWxzIGNoYW5nZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICE9PSBsb2NhbHNKc29uU3RyaW5nXG4gICAgICAgICkge1xuICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICBkYXRhLnZhbHVlID0gbG9jYWxzSnNvblN0cmluZztcbiAgICAgICAgICBjc3NSZWxvYWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uaS5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHsgaGFuZGxlcihleGVjT3B0aW9ucyk7IH0pO1xuXHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJtYWluLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZmFlMjcyMzEzOWQ4NjM2M2ZmMmVcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJyb29tMTg3OlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzID0gMDtcbnZhciBibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkLCBmZXRjaFByaW9yaXR5KSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkLCBmZXRjaFByaW9yaXR5KSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkO1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IF9tYWluLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly8gaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbihmdW5jdGlvbiAoKSB7fSk7XG59XG5cbmZ1bmN0aW9uIHVuYmxvY2soKSB7XG5cdGlmICgtLWJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0XHRcdHZhciBsaXN0ID0gYmxvY2tpbmdQcm9taXNlc1dhaXRpbmc7XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGxpc3RbaV0oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdC8qIGZhbGx0aHJvdWdoICovXG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMrKztcblx0XHRcdHByb21pc2UudGhlbih1bmJsb2NrLCB1bmJsb2NrKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nLnB1c2goZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVzb2x2ZShmbigpKTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0cmV0dXJuIHNldFN0YXR1cyhcImNoZWNrXCIpXG5cdFx0LnRoZW4oX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKS50aGVuKFxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInByZXBhcmVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdGtleVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHRcdFx0fSwgW10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1cyAoc3RhdGU6IFwiICtcblx0XHRcdFx0XHRjdXJyZW50U3RhdHVzICtcblx0XHRcdFx0XHRcIilcIlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvXmJsb2I6LywgXCJcIikucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbnZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCBvbGRUYWcsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRsaW5rVGFnLm5vbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uYztcblx0fVxuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIGV2ZW50LnR5cGU7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIGVycm9yVHlwZSArIFwiOiBcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLm5hbWUgPSBcIkNodW5rTG9hZEVycm9yXCI7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRpZiAobGlua1RhZy5wYXJlbnROb2RlKSBsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXG5cdGlmIChvbGRUYWcpIHtcblx0XHRvbGRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGlua1RhZywgb2xkVGFnLm5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHR9XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG51bGwsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdHZhciBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn1cblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkIiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0ID0gdXBkYXRlZE1vZHVsZXNMaXN0O1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZXJvb20xODdcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHR2YXIgcmVzdWx0ID0gbmV3TW9kdWxlRmFjdG9yeVxuXHRcdFx0XHQ/IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZClcblx0XHRcdFx0OiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjEpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIxLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIxKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHQhY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcz9wcm90b2NvbD13cyUzQSZob3N0bmFtZT0wLjAuMC4wJnBvcnQ9ODA4MCZwYXRobmFtZT0lMkZ3cyZsb2dnaW5nPWluZm8mb3ZlcmxheT10cnVlJnJlY29ubmVjdD0xMCZob3Q9dHJ1ZSZsaXZlLXJlbG9hZD10cnVlXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanNcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9hcHAvaW5kZXguanNcIik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3N0eWxlcy9pbmRleC5zY3NzXCIpO1xuIiwiIl0sIm5hbWVzIjpbIkNyZWF0ZSIsIkNvbXBvbmVudHMiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnRzIiwic2VsZWN0b3JzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiZ3NhcCIsIkN1c3RvbUVhc2UiLCJzY3JvbGwiLCJTcGxpdFRleHQiLCJQYWdlIiwiaWQiLCJvdmVybGF5Iiwic2xpZGVPbmUiLCJzbGlkZVR3byIsImxvYWRlciIsImltYWdlcyIsImltYWdlSGVybyIsIm1haW5UaXRsZXMiLCJtaXNjIiwicGFnZSIsImJvZHkiLCJiZyIsIm5hdkJhciIsImFsdEltZyIsInJlZ2lzdGVyUGx1Z2luIiwibFNjcm9sbCIsInNob3ciLCJpc0ZpcnN0VmlzaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRsIiwidGltZWxpbmUiLCJoYXNIZXJvSW1nIiwiaGFzSGVyb0ltYWdlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwcmV2ZW50U2Nyb2xsaW5nIiwiem9vbUFuaW1hdGlvbiIsImFuaW1hdGVBc3NldHMiLCJoaWRlIiwiYW5pbU91dCIsInRvIiwiY2xpcFBhdGgiLCJkdXJhdGlvbiIsImVhc2UiLCJhZGQiLCJzaG93RnVsbEFuaW0iLCJwYWdlTmFtZSIsImRhdGFzZXQiLCJpc0Vycm9yUGFnZSIsInNtYWxsSGVyb0ltZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRpc3BsYXkiLCJzaG93SW1hZ2VzIiwib25Db21wbGV0ZSIsInJlbW92ZSIsInN0eWxlIiwidG9wIiwib3BhY2l0eSIsInNjYWxlIiwiaW1nSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibG9hZGVySW1ncyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoZWlnaHQiLCJmb3JFYWNoIiwiaW1nIiwiaSIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJzZXQiLCJjb25zb2xlIiwid2FybiIsImZvbnRzIiwicmVhZHkiLCJ0aGVuIiwiaGVyb1RpdGxlcyIsIk5vZGVMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZnJvbSIsImFsbExpbmVzIiwiZWwiLCJzcGxpdCIsInR5cGUiLCJsaW5lQ2xhc3MiLCJtYXNrIiwiYXV0b1NwbGl0IiwicHVzaCIsImxpbmVzIiwidGV4dCIsImZyb21UbyIsInkiLCJzdGFnZ2VyIiwiY2FsbCIsImVuYWJsZVNjcm9sbGluZyIsInN0b3AiLCJkb2N1bWVudEVsZW1lbnQiLCJvdmVyZmxvdyIsInN0YXJ0IiwiUHJlbG9hZGVyIiwiaGVyb0ltZyIsImhlcm9Db250ZW50IiwiaGVyb0JnIiwibW0iLCJtYXRjaE1lZGlhIiwic2Nyb2xsQW5pbSIsInNpemUiLCJnZXRIZXJvSW1hZ2VTaXplIiwic3RhcnRQb3MiLCJoZXJvQ29udGVudEFuaW0iLCJoZXJvSW1nQW5pbSIsImdldEF0dHJpYnV0ZSIsInBvcyIsInNjcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwic2NydWIiLCJtYXJrZXJzIiwiTmF2aWdhdGlvbiIsIm1lbnUiLCJuYXZMaW5rcyIsIm5hdkxpbmtUZXh0IiwibmF2TGlua0hvdmVyIiwiaXNBbmltYXRpbmciLCJpc09wZW4iLCJmaWx0ZXJJZCIsImZlVHVyYnVsZW5jZSIsInByaW1pdGl2ZVZhbHVlcyIsInR1cmJ1bGVuY2UiLCJjcmVhdGVMaW5rVGltZUxpbmUiLCJhZGRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbG9zZU1lbnUiLCJvcGVuTWVudSIsImxpbmsiLCJsaW5rSG92ZXIiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJsaW5rVGwiLCJwYXVzZWQiLCJvblN0YXJ0IiwiZmlsdGVyIiwib25VcGRhdGUiLCJzZXRBdHRyaWJ1dGUiLCJvbk1vdXNlRW50ZXJGbiIsInJlc3RhcnQiLCJvbk1vdXNlTGVhdmVGbiIsInByb2dyZXNzIiwia2lsbCIsInN0YXJ0QXQiLCJsb2ciLCJTY3JvbGxUcmlnZ2VyIiwiU3RhdHMiLCJzdGF0cyIsInNldFVwU2Nyb2xsVHJpZ2dlciIsIm9uRW50ZXIiLCJjb3VudCIsImludGVydmFsIiwibiIsInN0YXRzTnVtIiwicGFyc2VJbnQiLCJzdGFydFZhbCIsImVuZFZhbCIsImZsb29yIiwiY291bnRlciIsInNldEludGVydmFsIiwidGV4dENvbnRlbnQiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiY2xlYXJJbnRlcnZhbCIsIlN1YnNjcmlwdGlvbkZvcm0iLCJmb3JtIiwic3VibWl0QnRuIiwiaW5wdXQiLCJ0b2FzdCIsInRvYXN0VGV4dCIsImlucHV0TGluZSIsImlucHV0TWVzc2FnZSIsImNsb3NlVG9hc3RJY29uIiwidG9hc3RJY29uIiwiaXNUb2FzdE9wZW4iLCJ0b2FzdFRpbWVvdXRJZCIsImluaXQiLCJ1cGRhdGVUb2FzdCIsIm1lc3NhZ2UiLCJhbmltYXRlVG9hc3QiLCJ1cGRhdGVJbnB1dEZpZWxkIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsb3NlVG9hc3QiLCJlIiwiZW1haWwiLCJ2YWx1ZSIsInRyaW0iLCJ2YWxpZEVtYWlsIiwidGVzdCIsImJvdFRyYXAiLCJnZXRFbGVtZW50QnlJZCIsInJlcyIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJqc29uIiwib2siLCJlcnJvciIsImVyciIsIlRleHRTcGxpdCIsInRleHRPblNjcm9sbCIsInNwbGl0VGV4dCIsIm9uU3BsaXQiLCJzZWxmIiwic2Nyb2xsQW5pbWF0ZVRleHQiLCJWaWRlb1BsYXllciIsInZpZGVvQmciLCJjbG9zZUJ0biIsInZpZGVvIiwidmlkZW9PdmVybGF5IiwiaXNPdmVybGF5T3BlbiIsImJ0biIsInBsYXlWaWRlbyIsImNsb3NlUGxheWVyIiwidmlkZW9JRCIsImhhc0F0dHJpYnV0ZSIsInBsYXkiLCJsb2FkIiwicGF1c2UiLCJjdXJyZW50VGltZSIsIlRvb2x0aXAiLCJ0b29sdGlwIiwidG9vbHRpcEl0ZW0iLCJ0b29sdGlwSXRlbXMiLCJpc0xpc3QiLCJpdGVtcyIsIml0ZW0iLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsIkFib3V0IiwiSG9tZSIsIkdhbGxlcnkiLCJDb250YWN0IiwiSGVybyIsIkFwcCIsImxlbmlzU2Nyb2xsIiwiYm9vdHN0cmFwIiwiY3JlYXRlTmF2aWdhdGlvbiIsIm9uIiwidXBkYXRlIiwidGlja2VyIiwidGltZSIsInJhZiIsImxhZ1Ntb290aGluZyIsImNyZWF0ZVZpZGVvUGxheWVyIiwidmlkZW9QbGF5ZXIiLCJjcmVhdGVTdGF0cyIsImNyZWF0ZUhlcm8iLCJoZXJvIiwiYWRkU3BsaXRUZXh0IiwidGV4dFNwbGl0IiwiY3JlYXRlUHJlbG9hZGVyIiwicHJlbG9hZGVyIiwiY3JlYXRlVG9vbHRpcCIsIm5hdmlnYXRpb24iLCJjcmVhdGVDb250ZW50IiwiY29udGVudCIsInRlbXBsYXRlIiwiY3JlYXRlU3Vic2NyaXB0aW9uRm9ybSIsInN1YnNjcmlwdGlvbkZvcm0iLCJpbml0UGFnZXMiLCJwYWdlQ2xhc3NlcyIsImhvbWUiLCJhYm91dCIsImdhbGxlcnkiLCJjb250YWN0IiwiUGFnZUNsYXNzIiwidW5kZWZpbmVkIiwib25Qb3BTdGF0ZSIsIm9uQ2hhbmdlIiwidXJsIiwid2luZG93IiwibG9jYXRpb24iLCJwYXRobmFtZSIsImFuaW1hdGlvbnMiLCJyZXEiLCJhbGwiLCJzdGF0dXMiLCJodG1sIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJpbm5lckhUTUwiLCJ0aXRsZSIsIm5ld1RpdGxlVGV4dCIsImlubmVyVGV4dCIsImNyZWF0ZU5ld1BhZ2UiLCJkaXZDb250ZW50IiwibG9hZGVySGVybyIsImxvYWRlckltZyIsIm5ld0xpc3QiLCJuZXdJbWciLCJnZXRDb21wdXRlZFN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwicmVwbGFjZSIsImJpbmQiLCJhZGRMaW5rTGlzdGVuZXJzIiwibGlua3MiLCJsIiwib25jbGljayIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJocmVmIiwidHJhbnNpdGlvblR5cGUiLCJwYWdlVHJpZ2dlciIsIkxlbmlzIiwiYmlvVHJpZ2dlciIsImNsb3NlIiwiYmlvT3ZlcmxheSIsImJpb0NvbnRhaW5lciIsInBhZ2VTY3JvbGwiLCJwcmV2aW91c1VybCIsImJpb0ltYWdlIiwiYmlvVGV4dCIsImJpb1JvbGUiLCJtb2RhbFNjcm9sbCIsInJlc2l6ZSIsInNldEFuaW1hdGlvblBvc2l0aW9ucyIsImFuaW1hdGVDb250ZW50IiwicmVtb3ZlQ29udGVudCIsIm9wZW5Nb2RhbCIsImNsb3NlTW9kYWwiLCJ0YXJnZXQiLCJ0ZXh0UmV2ZWFsIiwiTnVtYmVyIiwiYW5pbWF0ZUJvZHlUZXh0IiwicmVwbGFjZVN0YXRlIiwid3JhcHBlciIsImF1dG9SYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbGVtZW50IiwiZ2FsbGVyeUl0ZW1zIiwic2xpZGVTaG93IiwicHJldiIsIm5leHQiLCJzbGlkZVNob3dDb250YWluZXIiLCJzbGlkZVNob3dDb3VudGVyIiwibWluaU1hcCIsIm1pbmlNYXBJdGVtcyIsIm1pbmlNYXBJbmRpY2F0b3IiLCJwbGF5QnRucyIsImN1cnJlbnRJbmRleCIsIm1lZGlhIiwiaGFzTWVkaWFCZWVuU2V0IiwiYWxsb3dTbGlkZU5hdmlnYXRpb24iLCJvcGVuU2xpZGVTaG93IiwibWVkaWFFbGVtZW50IiwibWVkaWFJZCIsImdhbGxlcnlJZCIsImZpbmRJbmRleCIsImRpc3BsYXlJbmRleCIsImNsZWFyIiwidXBkYXRlTWluaW1hcEluZGljYXRvciIsInNob3dNZWRpYSIsImVuYWJsZVNsaWRlTmF2aWdhdGlvbiIsImNsb3NlU2xpZGVTaG93IiwiZGlzYWJsZVNsaWRlTmF2aWdhdGlvbiIsInNsaWRlU2hvd01lZGlhIiwiYW5pbWF0ZUltYWdlcyIsIm5ld1VybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImRlbGV0ZSIsImdvVG9NZWRpYSIsImluZGV4IiwiaXNBY3RpdmUiLCJjaGFuZ2VNZWRpYSIsImRpcmVjdGlvbiIsIm9sZEluZGV4IiwibWVkaWFDdXJyZW50RWxlbSIsIm1lZGlhVHlwZSIsImdhbGxlcnlJdGVtIiwiY3JlYXRlQW5kU2V0TWVkaWFFbGVtZW50Iiwic3dhcE1lZGlhRWxlbWVudCIsIm1lZGlhRWxlbSIsIm5ld0VsZW0iLCJjcmVhdGVOZXdNZWRpYUl0ZW0iLCJzZXRNZWRpYUF0dHJpYnV0ZXMiLCJhcHBlbmRDaGlsZCIsIlN0cmluZyIsInBhZFN0YXJ0Iiwib2xkRWxlbSIsImZpcnN0Q2hpbGQiLCJzZXR1cFNjcm9sbE5hdmlnYXRpb24iLCJ0aWNraW5nIiwiZGVsdGFZIiwic2V0dXBTd2lwZU5hdmlnYXRpb24iLCJ0b3VjaFN0YXJ0WCIsInRvdWNoRW5kWCIsInRocmVzaG9sZCIsImNvbnRhaW5lciIsImNoYW5nZWRUb3VjaGVzIiwic2NyZWVuWCIsImhhbmRsZVN3aXBlIiwiZGVsdGEiLCJhYnMiLCJlbGVtIiwicG9zdGVySW1nIiwic3JjIiwic291cmNlIiwiZ2FsbGVyeVNyYyIsImFsdCIsImluc3RhbnQiLCJtaW5pTWFwUmVjdCIsIml0ZW1SZWN0IiwidGFyZ2V0WCIsIm9mZnNldExlZnQiLCJpbmRpY2F0b3JYcG9zIiwiY2hlY2tVUkxGb3JTbGlkZVNob3ciLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJzZWFyY2giLCJnZXQiLCJ1c2VTdHJvbGxUcmlnZ2VyIiwiY2xpcFBhdGhQb2x5IiwiaGFuZGxlUmVzaXplIiwiaGFuZGxlS2V5RG93biIsImtleSIsImRlYm91bmNlIiwiZm4iLCJkZWxheSIsInRpbWVvdXQiLCJob21lQm9keSIsInZpZGVvQmxvY2siLCJwb2xhcm9pZCIsInJvb21LZXlTZWN0aW9uIiwicm9vbUtleUhlYWRlciIsInJvb21LZXlUaXRsZSIsInJvb21LZXkiLCJwcm9ncmVzc0JhciIsInByb2dyZXNzSGlnaGxpZ2h0IiwicHJvZ3Jlc3NJbmRpY2VzIiwic3RlcHMiLCJhcnRpc3ROYW1lcyIsInN0ZXBDb250YWluZXIiLCJwaW5uZWRIZWlnaHQiLCJpc1Byb2dyZXNzQmFyVmlzaWJsZSIsImN1cnJlbnRBY3RpdmVJbmRleCIsInNldFVwU2Nyb2xsQW5pbWF0aW9ucyIsImFuaW1hdGVJbmRleEhpZ2hsaWdodGVyIiwibmV3SW5kZXgiLCJ5UG9zQ2FsYyIsInlQb3MiLCJoaWRlUHJvZ3Jlc3NCYXIiLCJzaG93UHJvZ3Jlc3NCYXIiLCJwb2xhcm9pZFBhcmFsbGF4Iiwicm9vbUtleUFuaW1hdGlvbnMiLCJhcnRpc3RTZWN0aW9uQW5pbWF0aW9ucyIsInRvdGFsU3RlcHNIZWlnaHQiLCJyZWR1Y2UiLCJ0b3RhbCIsInN0ZXAiLCJhZGp1c3RlZFBpbkR1cmF0aW9uIiwic2Nyb2xsT3B0aW9ucyIsImVuZCIsInBpbiIsInBpblNwYWNpbmciLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwid2lkdGgiLCJzdGVwVGwiLCJvbkxlYXZlQmFjayIsInJvdGF0ZSIsInRvZ2dsZUFjdGlvbnMiLCJuYW1lIiwiZ2V0VmFsIiwic3RhcnRYcG9zIiwib2JqIiwiSFRNTEVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiYW5zaUhUTUwiLCJfcmVnQU5TSSIsIl9kZWZDb2xvcnMiLCJyZXNldCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJsaWdodGdyZXkiLCJkYXJrZ3JleSIsIl9zdHlsZXMiLCJfb3BlblRhZ3MiLCJfY2xvc2VUYWdzIiwiYW5zaUNvZGVzIiwicmV0IiwibWF0Y2giLCJzZXEiLCJvdCIsImluZGV4T2YiLCJwb3AiLCJjdCIsImpvaW4iLCJzZXRDb2xvcnMiLCJjb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImhleCIsImhhc093blByb3BlcnR5Iiwic29tZSIsImgiLCJkZWZIZXhDb2xvciIsInNsaWNlIiwiX3NldFRhZ3MiLCJ0YWdzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJvcGVuIiwiY29kZSIsImNvbG9yIiwib3JpQ29sb3IiLCJ0b1N0cmluZyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIlJlZmxlY3RPd25LZXlzIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJQcm9jZXNzRW1pdFdhcm5pbmciLCJ3YXJuaW5nIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsIm9uY2UiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJlbnVtZXJhYmxlIiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJnZXRNYXhMaXN0ZW5lcnMiLCJlbWl0IiwiYXJndW1lbnRzIiwiZG9FcnJvciIsImV2ZW50cyIsImVyIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsIm0iLCJleGlzdGluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJlbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlV3JhcHBlciIsImZpcmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJldmVudE5hbWVzIiwiYXJyIiwiY29weSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJyZXNvbHZlciIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyIiwiZmxhZ3MiLCJ3cmFwTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2dldFByb3BlcnR5IiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsImdldFVuaXQiLCJfaXNTdHJpbmciLCJfaXNVbmRlZmluZWQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIl9yZWxFeHAiLCJfZm9yRWFjaE5hbWUiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfcGx1Z2lucyIsIkdTQ2FjaGUiLCJQcm9wVHdlZW4iLCJfY29uZmlnIiwiX3RpY2tlciIsIl9yb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX2dldFNldHRlciIsIl9nZXRDYWNoZSIsIl9jb2xvckV4cCIsIl9wYXJzZVJlbGF0aXZlIiwiX3NldERlZmF1bHRzIiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfdGVtcERpdlN0eWxlciIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfcmV2ZXJ0aW5nIiwiX3dpbmRvd0V4aXN0cyIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiUEkiLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2JpZ051bSIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJhdXRvQWxwaGEiLCJhbHBoYSIsIl9yZW5kZXJDU1NQcm9wIiwicmF0aW8iLCJkYXRhIiwidCIsInAiLCJyb3VuZCIsInMiLCJjIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwiX3RoaXMiLCJ0Zm0iLCJhIiwiX2dldCIsInpPcmlnaW4iLCJ0cmFuc2Zvcm0iLCJwcm9wcyIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImlzU3RhcnQiLCJ1bmNhY2hlIiwiX2dldFN0eWxlU2F2ZXIiLCJwcm9wZXJ0aWVzIiwic2F2ZXIiLCJyZXZlcnQiLCJzYXZlIiwiY29yZSIsImdldENhY2hlIiwibm9kZVR5cGUiLCJfc3VwcG9ydHMzRCIsIl9jcmVhdGVFbGVtZW50IiwibnMiLCJjcmVhdGVFbGVtZW50TlMiLCJfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSIsInNraXBQcmVmaXhGYWxsYmFjayIsImNzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIl9pbml0Q29yZSIsImNzc1RleHQiLCJyZXZlcnRpbmciLCJfZ2V0UmVwYXJlbnRlZENsb25lQkJveCIsIm93bmVyIiwib3duZXJTVkdFbGVtZW50IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJiYm94IiwiZ2V0QkJveCIsInJlbW92ZUNoaWxkIiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsIl9nZXRCQm94IiwiYm91bmRzIiwiY2xvbmVkIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwicGFyZW50Tm9kZSIsIl9yZW1vdmVQcm9wZXJ0eSIsImZpcnN0MkNoYXJzIiwicmVtb3ZlQXR0cmlidXRlIiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJwbHVnaW4iLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJwdCIsIl9wdCIsIl9wcm9wcyIsIl9ub25Db252ZXJ0aWJsZVVuaXRzIiwiZGVnIiwicmFkIiwidHVybiIsIl9ub25TdGFuZGFyZExheW91dHMiLCJncmlkIiwiZmxleCIsIl9jb252ZXJ0VG9Vbml0IiwidW5pdCIsImN1clZhbHVlIiwicGFyc2VGbG9hdCIsImN1clVuaXQiLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsImFtb3VudCIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsInYiLCJfcGFyc2VUcmFuc2Zvcm0iLCJvcmlnaW4iLCJfZmlyc3RUd29Pbmx5IiwiX3NwZWNpYWxQcm9wcyIsIl90d2VlbkNvbXBsZXhDU1NTdHJpbmciLCJwcm9wIiwibWF0Y2hJbmRleCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJlbmRWYWx1ZXMiLCJzdWJzdHJpbmciLCJleGVjIiwibGFzdEluZGV4IiwidW5pdHMiLCJfbmV4dCIsInIiLCJfa2V5d29yZFRvUGVyY2VudCIsImJvdHRvbSIsInJpZ2h0IiwiY2VudGVyIiwiX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsInR3ZWVuIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIm1hcCIsIl9nZXRNYXRyaXgiLCJmb3JjZTJEIiwibWF0cml4IiwibmV4dFNpYmxpbmciLCJ0ZW1wIiwiYWRkZWRUb0RPTSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImQiLCJmIiwib2Zmc2V0UGFyZW50IiwiaW5zZXJ0QmVmb3JlIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJ4T3JpZ2luT2xkIiwieE9yaWdpbiIsInlPcmlnaW5PbGQiLCJ5T3JpZ2luIiwieE9mZnNldE9sZCIsInhPZmZzZXQiLCJ5T2Zmc2V0T2xkIiwieU9mZnNldCIsInR4IiwidHkiLCJvcmlnaW5TcGxpdCIsImRldGVybWluYW50IiwiaW52ZXJ0ZWRTY2FsZVgiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImNvcyIsInNpbiIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsInNxcnQiLCJmb3JjZUNTUyIsInhQZXJjZW50Iiwib2Zmc2V0V2lkdGgiLCJ5UGVyY2VudCIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZm9yY2UzRCIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsIl9yZWYyIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsImNoYW5nZSIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsInN0YXJ0Q2FjaGUiLCJleGNsdWRlIiwiZW5kQ2FjaGUiLCJzaWRlIiwidmFycyIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsInRhcmdldHMiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsInJlbmRlciIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJ1dGlscyIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsInBvc2l0aW9uQW5kU2NhbGUiLCJvdGhlcnMiLCJkZWZhdWx0Iiwic3RyaW5nVG9SYXdQYXRoIiwicmF3UGF0aFRvU3RyaW5nIiwidHJhbnNmb3JtUmF3UGF0aCIsIl9jb3JlSW5pdHRlZCIsIl9nZXRHU0FQIiwicmVnaXN0ZXJFYXNlIiwiX2JvbnVzVmFsaWRhdGVkIiwiX25lZWRzUGFyc2luZ0V4cCIsIl9maW5kTWluaW11bSIsInZhbHVlcyIsIl9ub3JtYWxpemUiLCJvcmlnaW5ZIiwibWF4Iiwic3giLCJzeSIsIl9iZXppZXJUb1BvaW50cyIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsIng0IiwieTQiLCJwb2ludHMiLCJ4MTIiLCJ5MTIiLCJ4MjMiLCJ5MjMiLCJ4MzQiLCJ5MzQiLCJ4MTIzIiwieTEyMyIsIngyMzQiLCJ5MjM0IiwieDEyMzQiLCJ5MTIzNCIsImR4IiwiZHkiLCJkMiIsImQzIiwic3BsaWNlIiwiY29uZmlnIiwic2V0RGF0YSIsIl9wcm90byIsImNsb3Nlc3QiLCJsb29rdXAiLCJwcmVjaXNpb24iLCJmYXN0IiwiYTEiLCJhMiIsImluYyIsImoiLCJwb2ludCIsInByZXZQb2ludCIsInNlZ21lbnQiLCJjeCIsImN5IiwibngiLCJjdXN0b20iLCJnZXRTVkdEYXRhIiwicGFyc2VFYXNlIiwidG9BcnJheSIsInBhdGgiLCJzbG9wZSIsInByZXZYIiwicHJldlkiLCJpbnZlcnQiLCJ2ZXJzaW9uIiwiaGVhZGxlc3MiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2NsYW1wIiwiX2RvY0VsIiwiX2JvZHkiLCJfaXNUb3VjaCIsIl9wb2ludGVyVHlwZSIsIl9yb290IiwiX25vcm1hbGl6ZXIiLCJfZXZlbnRUeXBlcyIsIl9jb250ZXh0IiwiX3N0YXJ0dXAiLCJfb2JzZXJ2ZXJzIiwiX3Njcm9sbGVycyIsIl9wcm94aWVzIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2JyaWRnZSIsIl9pbnRlZ3JhdGUiLCJicmlkZ2UiLCJzY3JvbGxlcnMiLCJwcm94aWVzIiwiX2dldFByb3h5UHJvcCIsIl9pc1ZpZXdwb3J0IiwiZnVuYyIsInBhc3NpdmUiLCJjYXB0dXJlIiwiX3JlbW92ZUxpc3RlbmVyIiwiX3Njcm9sbExlZnQiLCJfc2Nyb2xsVG9wIiwiX29uU2Nyb2xsIiwiaXNQcmVzc2VkIiwiX3Njcm9sbENhY2hlRnVuYyIsImRvTm90Q2FjaGUiLCJjYWNoaW5nRnVuYyIsInNjcm9sbFJlc3RvcmF0aW9uIiwiaXNOb3JtYWxpemluZyIsImlPUyIsImNhY2hlSUQiLCJvZmZzZXQiLCJfaG9yaXpvbnRhbCIsInAyIiwib3MiLCJvczIiLCJzYyIsInNjcm9sbFRvIiwiX3ZlcnRpY2FsIiwicGFnZVhPZmZzZXQiLCJvcCIsInBhZ2VZT2Zmc2V0IiwiX2dldFRhcmdldCIsIl9jdHgiLCJzZWxlY3RvciIsIm51bGxUYXJnZXRXYXJuIiwiX2lzV2l0aGluIiwiX2dldFNjcm9sbEZ1bmMiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0UHJvcGVydHkiLCJfZ2V0VmVsb2NpdHlQcm9wIiwibWluVGltZVJlZnJlc2giLCJ1c2VEZWx0YSIsInYxIiwidjIiLCJkcm9wVG9aZXJvVGltZSIsImZvcmNlIiwiZ2V0VmVsb2NpdHkiLCJsYXRlc3RWYWx1ZSIsInRPbGQiLCJ2T2xkIiwiX2dldEV2ZW50IiwiX2dzYXBBbGxvdyIsIl9nZXRBYnNvbHV0ZU1heCIsIl9zZXRTY3JvbGxUcmlnZ2VyIiwiZ2xvYmFscyIsImNsYW1wIiwiT2JzZXJ2ZXIiLCJpc1RvdWNoIiwibWF0Y2hlcyIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImV2ZW50VHlwZXMiLCJ0b2xlcmFuY2UiLCJkcmFnTWluaW11bSIsImxpbmVIZWlnaHQiLCJvblN0b3AiLCJvblN0b3BEZWxheSIsImlnbm9yZSIsIndoZWVsU3BlZWQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsIm9uRHJhZyIsIm9uUHJlc3MiLCJvblJlbGVhc2UiLCJvblJpZ2h0Iiwib25MZWZ0Iiwib25VcCIsIm9uRG93biIsIm9uQ2hhbmdlWCIsIm9uQ2hhbmdlWSIsIm9uVG9nZ2xlWCIsIm9uVG9nZ2xlWSIsIm9uSG92ZXIiLCJvbkhvdmVyRW5kIiwib25Nb3ZlIiwiaWdub3JlQ2hlY2siLCJpc05vcm1hbGl6ZXIiLCJvbkdlc3R1cmVTdGFydCIsIm9uR2VzdHVyZUVuZCIsIm9uV2hlZWwiLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsIm9uQ2xpY2siLCJzY3JvbGxTcGVlZCIsImFsbG93Q2xpY2tzIiwibG9ja0F4aXMiLCJvbkxvY2tBeGlzIiwib25TdG9wRGVsYXllZENhbGwiLCJkcmFnZ2VkIiwibW92ZWQiLCJ3aGVlbGVkIiwibG9ja2VkIiwiYXhpcyIsInByZXZEZWx0YVgiLCJwcmV2RGVsdGFZIiwic2Nyb2xsRnVuY1giLCJzY3JvbGxGdW5jWSIsInNjcm9sbFgiLCJzY3JvbGxZIiwibGltaXRUb1RvdWNoIiwiaXNWaWV3cG9ydCIsIm93bmVyRG9jIiwib3duZXJEb2N1bWVudCIsImRlbHRhWCIsIm9uQ2xpY2tUaW1lIiwiY2xpY2tDYXB0dXJlIiwiX2lnbm9yZUNoZWNrIiwiaXNQb2ludGVyT3JUb3VjaCIsInBvaW50ZXJUeXBlIiwib25TdG9wRnVuYyIsIl92eCIsIl92eSIsImNoYW5nZWRYIiwiY2hhbmdlZFkiLCJvbkRlbHRhIiwib25Ub3VjaE9yUG9pbnRlckRlbHRhIiwiX29uRHJhZyIsImlzRHJhZ2dpbmciLCJzdGFydFgiLCJzdGFydFkiLCJfb25QcmVzcyIsImJ1dHRvbiIsIl9vblJlbGVhc2UiLCJpc1RyYWNraW5nRHJhZyIsIndhc0RyYWdnaW5nIiwiaXNEcmFnTm90Q2xpY2siLCJldmVudERhdGEiLCJkZWxheWVkQ2FsbCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJjbGljayIsImNyZWF0ZUV2ZW50Iiwic3ludGhldGljRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblkiLCJkaXNwYXRjaEV2ZW50IiwiaXNHZXN0dXJpbmciLCJfb25HZXN0dXJlU3RhcnQiLCJ0b3VjaGVzIiwiX29uR2VzdHVyZUVuZCIsIm9uU2Nyb2xsIiwiX29uV2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiX29uTW92ZSIsIl9vbkhvdmVyIiwiX29uSG92ZXJFbmQiLCJfb25DbGljayIsIl9kYyIsImVuYWJsZSIsImlzRW5hYmxlZCIsImRpc2FibGUiLCJvIiwiZ2V0QWxsIiwiZ2V0QnlJZCIsIl9yZXNpemVEZWxheSIsIl90b0FycmF5IiwiX3RpbWUyIiwiX3N5bmNJbnRlcnZhbCIsIl9yZWZyZXNoaW5nIiwiX3BvaW50ZXJJc0Rvd24iLCJfaSIsIl9wcmV2V2lkdGgiLCJfcHJldkhlaWdodCIsIl9hdXRvUmVmcmVzaCIsIl9zb3J0IiwiX3N1cHByZXNzT3ZlcndyaXRlcyIsIl9pZ25vcmVSZXNpemUiLCJfaWdub3JlTW9iaWxlUmVzaXplIiwiX2Jhc2VTY3JlZW5IZWlnaHQiLCJfYmFzZVNjcmVlbldpZHRoIiwiX2ZpeElPU0J1ZyIsIl9zY3JvbGxSZXN0b3JhdGlvbiIsIl9kaXYxMDB2aCIsIl8xMDB2aCIsIl9pc1JldmVydGVkIiwiX2NsYW1waW5nTWF4IiwiX2xpbWl0Q2FsbGJhY2tzIiwiX3RpbWUxIiwiX2xhc3RTY3JvbGxUaW1lIiwiX2VuYWJsZWQiLCJfcGFyc2VDbGFtcCIsIl9rZWVwQ2xhbXAiLCJfcmFmQnVnRml4IiwiX3BvaW50ZXJEb3duSGFuZGxlciIsIl9wb2ludGVyVXBIYW5kbGVyIiwiX3Bhc3NUaHJvdWdoIiwiX2dldFZpZXdwb3J0RGltZW5zaW9uIiwiZGltZW5zaW9uUHJvcGVydHkiLCJfZ2V0Qm91bmRzRnVuYyIsIl93aW5PZmZzZXRzIiwiaW5uZXJXaWR0aCIsIl9nZXRCb3VuZHMiLCJfZ2V0U2l6ZUZ1bmMiLCJzY3JvbGxlciIsIl9nZXRPZmZzZXRzRnVuYyIsIl9tYXhTY3JvbGwiLCJfaXRlcmF0ZUF1dG9SZWZyZXNoIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNPYmplY3QiLCJfZW5kQW5pbWF0aW9uIiwiYW5pbWF0aW9uIiwicmV2ZXJzZWQiLCJfY2FsbGJhY2siLCJlbmFibGVkIiwidG90YWxUaW1lIiwiY2FsbGJhY2tBbmltYXRpb24iLCJfYWJzIiwiX2xlZnQiLCJfdG9wIiwiX3JpZ2h0IiwiX2JvdHRvbSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfUmlnaHQiLCJfTGVmdCIsIl9Ub3AiLCJfQm90dG9tIiwiX3BhZGRpbmciLCJfbWFyZ2luIiwiX1dpZHRoIiwiX0hlaWdodCIsIl9weCIsIl9nZXRDb21wdXRlZFN0eWxlIiwiX21ha2VQb3NpdGlvbmFibGUiLCJkZWZhdWx0cyIsIndpdGhvdXRUcmFuc2Zvcm1zIiwiX2dldFNpemUiLCJfcmVmMyIsIl9nZXRMYWJlbFJhdGlvQXJyYXkiLCJsYWJlbHMiLCJfZ2V0Q2xvc2VzdExhYmVsIiwic25hcCIsIl9zbmFwRGlyZWN0aW9uYWwiLCJzbmFwSW5jcmVtZW50T3JBcnJheSIsInNvcnQiLCJzbmFwcGVkIiwiX2dldExhYmVsQXREaXJlY3Rpb24iLCJzdCIsIl9tdWx0aUxpc3RlbmVyIiwidHlwZXMiLCJjYWxsYmFjayIsIm5vblBhc3NpdmUiLCJfd2hlZWxMaXN0ZW5lciIsInNjcm9sbEZ1bmMiLCJ3aGVlbEhhbmRsZXIiLCJfbWFya2VyRGVmYXVsdHMiLCJzdGFydENvbG9yIiwiZW5kQ29sb3IiLCJpbmRlbnQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJfZGVmYXVsdHMiLCJhbnRpY2lwYXRlUGluIiwiX2tleXdvcmRzIiwiX29mZnNldFRvUHgiLCJlcUluZGV4IiwiX2NyZWF0ZU1hcmtlciIsIl9yZWY0IiwibWF0Y2hXaWR0aEVsIiwiY29udGFpbmVyQW5pbWF0aW9uIiwidXNlRml4ZWRQb3NpdGlvbiIsImlzU2Nyb2xsZXIiLCJjc3MiLCJfaXNTdGFydCIsImNoaWxkcmVuIiwiX29mZnNldCIsIl9wb3NpdGlvbk1hcmtlciIsIm1hcmtlciIsImZsaXBwZWQiLCJvcHBvc2l0ZVNpZGUiLCJfaXNGbGlwcGVkIiwiX3RyaWdnZXJzIiwiX2lkcyIsIl9yYWZJRCIsIl9zeW5jIiwiX3VwZGF0ZUFsbCIsImNsaWVudFdpZHRoIiwiX2Rpc3BhdGNoIiwiX3NldEJhc2VEaW1lbnNpb25zIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIl9lbXB0eUFycmF5IiwiX3NvZnRSZWZyZXNoIiwiX3JlZnJlc2hBbGwiLCJfc2F2ZWRTdHlsZXMiLCJfcmV2ZXJ0UmVjb3JkZWQiLCJxdWVyeSIsIl9yZXZlcnRBbGwiLCJfY2xlYXJTY3JvbGxNZW1vcnkiLCJfcmVmcmVzaGluZ0FsbCIsInJlYyIsIl9yZWZyZXNoSUQiLCJfcXVldWVSZWZyZXNoSUQiLCJfcXVldWVSZWZyZXNoQWxsIiwiX3JlZnJlc2gxMDB2aCIsIl9oaWRlQWxsTWFya2VycyIsInNraXBSZXZlcnQiLCJpc1JlZnJlc2hpbmciLCJyZWZyZXNoSW5pdHMiLCJzY3JvbGxCZWhhdmlvciIsInJlZnJlc2giLCJfc3ViUGluT2Zmc2V0Iiwib3JpZ2luYWwiLCJhZGp1c3RQaW5TcGFjaW5nIiwiX2RpciIsImVuZENsYW1wIiwiX2VuZENsYW1wIiwic3RhcnRDbGFtcCIsIl9zdGFydENsYW1wIiwic2V0UG9zaXRpb25zIiwib25SZWZyZXNoIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwiX3ByaW1hcnkiLCJpc1VwZGF0aW5nIiwicmVjb3JkVmVsb2NpdHkiLCJfcHJvcE5hbWVzVG9Db3B5IiwiX3N0YXRlUHJvcHMiLCJfc3dhcFBpbk91dCIsInNwYWNlciIsIl9zZXRTdGF0ZSIsInNwYWNlcklzTmF0aXZlIiwic3BhY2VyU3RhdGUiLCJzd2FwcGVkSW4iLCJfc3dhcFBpbkluIiwic3BhY2VyU3R5bGUiLCJwaW5TdHlsZSIsImZsZXhCYXNpcyIsImJveFNpemluZyIsIl9nZXRTdGF0ZSIsIl9jb3B5U3RhdGUiLCJvdmVycmlkZSIsIm9taXRPZmZzZXRzIiwiX3BhcnNlUG9zaXRpb24iLCJzY3JvbGxlclNpemUiLCJtYXJrZXJTY3JvbGxlciIsInNjcm9sbGVyQm91bmRzIiwiYm9yZGVyV2lkdGgiLCJzY3JvbGxlck1heCIsImNsYW1wWmVyb1Byb3AiLCJwMSIsInNlZWsiLCJvZmZzZXRzIiwibG9jYWxPZmZzZXQiLCJnbG9iYWxPZmZzZXQiLCJtYXBSYW5nZSIsIl9jYVNjcm9sbERpc3QiLCJfcHJlZml4RXhwIiwiX3JlcGFyZW50IiwiX3N0T3JpZyIsIl9pbnRlcnJ1cHRpb25UcmFja2VyIiwiZ2V0VmFsdWVGdW5jIiwiaW5pdGlhbFZhbHVlIiwib25JbnRlcnJ1cHQiLCJsYXN0MSIsImxhc3QyIiwiY3VycmVudCIsIl9zaGlmdE1hcmtlciIsIl9nZXRUd2VlbkNyZWF0b3IiLCJnZXRTY3JvbGwiLCJnZXRUd2VlbiIsImNoYW5nZTEiLCJjaGFuZ2UyIiwibW9kaWZpZXJzIiwiY2hlY2tGb3JJbnRlcnJ1cHRpb24iLCJpbmhlcml0IiwiX3ZhcnMiLCJ0b2dnbGVDbGFzcyIsIm9uVG9nZ2xlIiwiaW52YWxpZGF0ZU9uUmVmcmVzaCIsIm9uU2NydWJDb21wbGV0ZSIsIm9uU25hcENvbXBsZXRlIiwicGluUmVwYXJlbnQiLCJwaW5TcGFjZXIiLCJmYXN0U2Nyb2xsRW5kIiwicHJldmVudE92ZXJsYXBzIiwiaXNUb2dnbGUiLCJzY3JvbGxlckNhY2hlIiwicGluVHlwZSIsImNhbGxiYWNrcyIsIm9uTGVhdmUiLCJvbkVudGVyQmFjayIsIm9uUmVmcmVzaEluaXQiLCJnZXRTY3JvbGxlclNpemUiLCJnZXRTY3JvbGxlck9mZnNldHMiLCJsYXN0U25hcCIsImxhc3RSZWZyZXNoIiwicHJldlByb2dyZXNzIiwidHdlZW5UbyIsInBpbkNhY2hlIiwic25hcEZ1bmMiLCJzY3JvbGwxIiwic2Nyb2xsMiIsIm1hcmtlclN0YXJ0IiwibWFya2VyRW5kIiwibWFya2VyU3RhcnRUcmlnZ2VyIiwibWFya2VyRW5kVHJpZ2dlciIsIm1hcmtlclZhcnMiLCJleGVjdXRpbmdPblJlZnJlc2giLCJwaW5PcmlnaW5hbFN0YXRlIiwicGluQWN0aXZlU3RhdGUiLCJwaW5TdGF0ZSIsInBpbkdldHRlciIsInBpblNldHRlciIsInBpblN0YXJ0IiwicGluQ2hhbmdlIiwic3BhY2luZ1N0YXJ0IiwibWFya2VyU3RhcnRTZXR0ZXIiLCJwaW5Nb3ZlcyIsIm1hcmtlckVuZFNldHRlciIsInNuYXAxIiwic25hcDIiLCJzY3J1YlR3ZWVuIiwic2NydWJTbW9vdGgiLCJzbmFwRHVyQ2xhbXAiLCJzbmFwRGVsYXllZENhbGwiLCJwcmV2U2Nyb2xsIiwicHJldkFuaW1Qcm9ncmVzcyIsImNhTWFya2VyU2V0dGVyIiwiY3VzdG9tUmV2ZXJ0UmV0dXJuIiwicmVmcmVzaFByaW9yaXR5IiwidHdlZW5TY3JvbGwiLCJzY3J1YkR1cmF0aW9uIiwidG90YWxQcm9ncmVzcyIsImxhenkiLCJfaW5pdHRlZCIsImlzUmV2ZXJ0ZWQiLCJpbW1lZGlhdGVSZW5kZXIiLCJzbmFwVG8iLCJkaXJlY3Rpb25hbCIsInJlZnJlc2hlZFJlY2VudGx5IiwidmVsb2NpdHkiLCJuYXR1cmFsRW5kIiwiaW5lcnRpYSIsImVuZFNjcm9sbCIsIl9zbmFwIiwiX29uSW50ZXJydXB0IiwiX29uQ29tcGxldGUiLCJyZXNldFRvIiwiX3RUaW1lIiwiX3REdXIiLCJzdFJldmVydCIsImNsYXNzTmFtZSIsIm5hdGl2ZUVsZW1lbnQiLCJxdWlja1NldHRlciIsIm9sZE9uVXBkYXRlIiwib2xkUGFyYW1zIiwib25VcGRhdGVQYXJhbXMiLCJldmVudENhbGxiYWNrIiwicHJldmlvdXMiLCJwcmV2UmVmcmVzaGluZyIsInNvZnQiLCJwaW5PZmZzZXQiLCJpbnZhbGlkYXRlIiwiZ2V0Q2hpbGRyZW4iLCJpc0ZpcnN0UmVmcmVzaCIsIm90aGVyUGluT2Zmc2V0IiwicGFyc2VkRW5kIiwicGFyc2VkRW5kVHJpZ2dlciIsImVuZFRyaWdnZXIiLCJwYXJzZWRTdGFydCIsInBpbm5lZENvbnRhaW5lciIsInRyaWdnZXJJbmRleCIsImlzVmVydGljYWwiLCJjdXJUcmlnZ2VyIiwiY3VyUGluIiwib3Bwb3NpdGVTY3JvbGwiLCJpbml0dGVkIiwicmV2ZXJ0ZWRQaW5zIiwiZm9yY2VkT3ZlcmZsb3ciLCJtYXJrZXJTdGFydE9mZnNldCIsIm1hcmtlckVuZE9mZnNldCIsIl9waW5QdXNoIiwibm9ybWFsaXplIiwiY2VpbCIsIl9waW5PZmZzZXQiLCJlbmRBbmltYXRpb24iLCJsYWJlbFRvU2Nyb2xsIiwibGFiZWwiLCJnZXRUcmFpbGluZyIsInJldmVyc2UiLCJmb3JjZUZha2UiLCJjbGlwcGVkIiwid2FzQWN0aXZlIiwidG9nZ2xlU3RhdGUiLCJhY3Rpb24iLCJzdGF0ZUNoYW5nZWQiLCJ0b2dnbGVkIiwiaXNBdE1heCIsImlzVGFraW5nQWN0aW9uIiwiX2RwIiwiX3N0YXJ0IiwibmV3U3RhcnQiLCJuZXdFbmQiLCJrZWVwQ2xhbXAiLCJfY2hhbmdlIiwiYWxsb3dBbmltYXRpb24iLCJvbktpbGwiLCJ1cGRhdGVGdW5jIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwidXNlckFnZW50IiwiYm9keUhhc1N0eWxlIiwiYm9keVN0eWxlIiwiYm9yZGVyIiwiYm9yZGVyVG9wU3R5bGUiLCJBbmltYXRpb25Qcm90byIsIkFuaW1hdGlvbiIsImhpZGRlbiIsImxpbWl0Q2FsbGJhY2tzIiwibXMiLCJzeW5jSW50ZXJ2YWwiLCJpZ25vcmVNb2JpbGVSZXNpemUiLCJhdXRvUmVmcmVzaEV2ZW50cyIsInNjcm9sbGVyUHJveHkiLCJjbGVhck1hdGNoTWVkaWEiLCJpc0luVmlld3BvcnQiLCJwb3NpdGlvbkluVmlld3BvcnQiLCJyZWZlcmVuY2VQb2ludCIsImtpbGxBbGwiLCJhbGxvd0xpc3RlbmVycyIsInNhdmVTdHlsZXMiLCJzYWZlIiwiY2xlYXJTY3JvbGxNZW1vcnkiLCJtYXhTY3JvbGwiLCJnZXRTY3JvbGxGdW5jIiwiaXNTY3JvbGxpbmciLCJzbmFwRGlyZWN0aW9uYWwiLCJiYXRjaCIsInZhcnNDb3B5IiwiYmF0Y2hNYXgiLCJwcm94eUNhbGxiYWNrIiwidHJpZ2dlcnMiLCJfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIiLCJfYWxsb3dOYXRpdmVQYW5uaW5nIiwidG91Y2hBY3Rpb24iLCJfb3ZlcmZsb3ciLCJhdXRvIiwiX25lc3RlZFNjcm9sbCIsIl9yZWY1Iiwibm9kZSIsIl9pc1Njcm9sbFQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxXaWR0aCIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIl9pc1Njcm9sbCIsInN0b3BQcm9wYWdhdGlvbiIsIl9pbnB1dE9ic2VydmVyIiwiaW5wdXRzIiwibmVzdGVkIiwiX2NhcHR1cmVJbnB1dHMiLCJfaW5wdXRFeHAiLCJfaW5wdXRJc0ZvY3VzZWQiLCJpc0lucHV0IiwiX2dldFNjcm9sbE5vcm1hbGl6ZXIiLCJfdmFyczIiLCJub3JtYWxpemVTY3JvbGxYIiwibW9tZW50dW0iLCJhbGxvd05lc3RlZFNjcm9sbCIsIm1heFkiLCJzbW9vdGhlciIsIlNjcm9sbFNtb290aGVyIiwic21vb3RoZXJJbnN0YW5jZSIsImluaXRpYWxTY2FsZSIsInZpc3VhbFZpZXdwb3J0Iiwib3V0ZXJXaWR0aCIsIndoZWVsUmVmcmVzaCIsInJlc29sdmVNb21lbnR1bUR1cmF0aW9uIiwibGFzdFJlZnJlc2hJRCIsInNraXBUb3VjaE1vdmUiLCJpbnB1dE9ic2VydmVyIiwicmVzdW1lVG91Y2hNb3ZlIiwic2Nyb2xsQ2xhbXBYIiwic2Nyb2xsQ2xhbXBZIiwidXBkYXRlQ2xhbXBzIiwicmVtb3ZlQ29udGVudE9mZnNldCIsImlnbm9yZURyYWciLCJzdGFydFNjcm9sbFgiLCJzdGFydFNjcm9sbFkiLCJvblJlc2l6ZSIsInByZXZTY2FsZSIsImR1ciIsImN1cnJlbnRTY3JvbGwiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJfdHMiLCJ4QXJyYXkiLCJ5QXJyYXkiLCJ5Q2xhbXBlZCIsIl9zb3J0WSIsIm9ic2VydmUiLCJub3JtYWxpemVTY3JvbGwiLCJub3JtYWxpemVyIiwic3MiLCJyZWYiLCJfZm9udHMiLCJfaW5pdElmTmVjZXNzYXJ5IiwiX2NoYXJTZWdtZW50ZXIiLCJTZWdtZW50ZXIiLCJfZWxlbWVudHMiLCJfc3BhY2VzUmVnRXgiLCJfZW1vamlTYWZlUmVnRXgiLCJSZWdFeHAiLCJfZW1wdHlCb3VuZHMiLCJfc3RyZXRjaFRvRml0U3BlY2lhbENoYXJzIiwiY29sbGVjdGlvbiIsInNwZWNpYWxDaGFyc1JlZ0V4IiwiY2hhcnNGb3VuZCIsIlNldCIsInNsb3RzIiwid29yZCIsImNoYXIiLCJjb21iaW5lZCIsInN0YXJ0c1dpdGgiLCJfZGlzYWxsb3dJbmxpbmUiLCJfaW5zZXJ0Tm9kZUJlZm9yZSIsIm5ld0NoaWxkIiwiZXhpc3RpbmdDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX2dldFdyYXBwZXIiLCJ0YWciLCJhcmlhIiwicHJvcEluZGV4IiwiaW5jcmVtZW50Q2xhc3MiLCJfZ2V0TGluZVdyYXBwZXIiLCJub2RlcyIsImxpbmVXcmFwcGVyIiwidGV4dEFsaWduIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwibmV3TGluZSIsIl9zcGxpdFdvcmRzQW5kQ2hhcnNSZWN1cnNpdmVseSIsIndvcmRXcmFwcGVyIiwiY2hhcldyYXBwZXIiLCJwcmVwRm9yQ2hhcnNPbmx5IiwiZGVlcFNsaWNlIiwiY2hhclNwbGl0UmVnRXgiLCJpc05lc3RlZCIsIl9hIiwiY2hpbGROb2RlcyIsIndvcmREZWxpbWl0ZXIiLCJyZWR1Y2VXaGl0ZVNwYWNlIiwicHJlcGFyZVRleHQiLCJlbGVtZW50Qm91bmRzIiwibGFzdEJvdW5kcyIsImlzUHJlZm9ybWF0dGVkIiwid2hpdGVTcGFjZSIsImlnbm9yZWRQcmV2aW91c1NpYmxpbmciLCJ3b3Jkc0NvbGxlY3Rpb24iLCJ3b3JkRGVsaW1Jc05vdFNwYWNlIiwid29yZERlbGltU3RyaW5nIiwid29yZERlbGltU3BsaXR0ZXIiLCJjdXJOb2RlIiwid29yZHMiLCJjdXJXb3JkRWwiLCJzdGFydHNXaXRoU3BhY2UiLCJlbmRzV2l0aFNwYWNlIiwiY3VyV29yZENoYXJzIiwiY2xvbmVkTm9kZSIsImN1clN1Yk5vZGUiLCJ0ZW1wU3ViTm9kZSIsImN1clRleHRDb250ZW50Iiwid29yZFRleHQiLCJsYXN0V29yZFRleHQiLCJrIiwiZGVsaW1pdGVyIiwicmVwbGFjZVdpdGgiLCJwcmV2aW91c1NpYmxpbmciLCJfU3BsaXRUZXh0IiwiaXNTcGxpdCIsImNoYXJzIiwibWFza3MiLCJfc3BsaXQiLCJvcmlnIiwidGltZXJJZCIsImNoZWNrV2lkdGhzIiwiX2RhdGEiLCJvYnMiLCJSZXNpemVPYnNlcnZlciIsInNtYXJ0V3JhcCIsInNwZWNpYWxDaGFycyIsInNwbGl0TGluZXMiLCJzcGxpdENoYXJhY3RlcnMiLCJzcGxpdFdvcmRzIiwib25seVNwbGl0Q2hhcmFjdGVycyIsImZpbmFsQ2hhclNwbGl0UmVnRXgiLCJhbmltVGltZSIsIm9uU3BsaXRSZXN1bHQiLCJhcmlhTCIsImFyaWFIIiwiY3VyV29yZCIsInNtYXJ0V3JhcFNwYW4iLCJ3cmFwTGluZSIsInRvUmVtb3ZlIiwibGluZVN0YXJ0SW5kZXgiLCJhbGxCb3VuZHMiLCJub2RlTmFtZSIsIm1hc2tFbCIsImFuaW0iLCJfYiIsImRpc2Nvbm5lY3QiLCJvblJldmVydCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX19wcm90b19fIiwiYXV0b1NsZWVwIiwib3ZlcndyaXRlIiwiX3RpbnlOdW0iLCJfMlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0IiwiX2NvcyIsIl9zaW4iLCJfaXNOb3RGYWxzZSIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFsVGltZWxpbmUiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfY29yZVJlYWR5IiwiX2luc3RhbGwiLCJzY29wZSIsIl9tZXJnZSIsIl93YXJuIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwiX2VtcHR5RnVuYyIsIl9zdGFydEF0UmV2ZXJ0Q29uZmlnIiwic3VwcHJlc3NFdmVudHMiLCJfcmV2ZXJ0Q29uZmlnTm9LaWxsIiwiX3JldmVydENvbmZpZyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9lZmZlY3RzIiwiX25leHRHQ0ZyYW1lIiwiX2hhcm5lc3NQbHVnaW5zIiwiX2NhbGxiYWNrTmFtZXMiLCJfaGFybmVzcyIsImhhcm5lc3NQbHVnaW4iLCJoYXJuZXNzIiwibmFtZXMiLCJfcm91bmRQcmVjaXNlIiwib3BlcmF0b3IiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwiX2xhenlSZW5kZXIiLCJfbGF6eSIsIl9pc1JldmVydFdvcnRoeSIsIl9zdGFydEF0IiwiX2xhenlTYWZlUmVuZGVyIiwiX251bWVyaWNJZlBvc3NpYmxlIiwiX3NldEtleWZyYW1lRGVmYXVsdHMiLCJleGNsdWRlRHVyYXRpb24iLCJiYXNlIiwidG9NZXJnZSIsIl9tZXJnZURlZXAiLCJfY29weUV4Y2x1ZGluZyIsImV4Y2x1ZGluZyIsIl9pbmhlcml0RGVmYXVsdHMiLCJrZXlmcmFtZXMiLCJfYXJyYXlzTWF0Y2giLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX2RpcnR5IiwiX3JlY2FjaGVBbmNlc3RvcnMiLCJ0b3RhbER1cmF0aW9uIiwiX3Jld2luZFN0YXJ0QXQiLCJhdXRvUmV2ZXJ0IiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJ3aG9sZSIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl9wb3N0QWRkQ2hlY2tzIiwicmF3VGltZSIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9kZWxheSIsInRpbWVTY2FsZSIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImZyYW1lIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9sb2NrIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicHJldlJhdGlvIiwicmVwZWF0RGVsYXkiLCJpdGVyYXRpb24iLCJwcmV2SXRlcmF0aW9uIiwiX3lveW8iLCJyZXBlYXRSZWZyZXNoIiwiX2Zyb20iLCJfb25VcGRhdGUiLCJfcHJvbSIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJwcmV2VGltZSIsIl9maXJzdCIsIl9sYXN0IiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwicmVwZWF0IiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiaXNQZXJjZW50IiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwiaXJWYXJzIiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwic2h1ZmZsZSIsInJhbmRvbSIsImRpc3RyaWJ1dGUiLCJlYWNoIiwiX3BhcnNlRWFzZSIsImlzRGVjaW1hbCIsInJhdGlvcyIsInJhdGlvWCIsInJhdGlvWSIsImVkZ2VzIiwiZGlzdGFuY2VzIiwib3JpZ2luWCIsIndyYXBBdCIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJyYWRpdXMiLCJpczJEIiwiaW5jcmVtZW50Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInVuaXRpemUiLCJfd3JhcEFycmF5Iiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJudW1zIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwibWFzdGVyIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiX2FkZFByb3BUd2VlbiIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwiZGlzdGFuY2UiLCJleGVjdXRlTGF6eUZpcnN0IiwicHJldkNvbnRleHQiLCJjYWxsYmFja1Njb3BlIiwiX2ludGVycnVwdCIsIl9xdWlja1R3ZWVuIiwiX3JlZ2lzdGVyUGx1Z2luUXVldWUiLCJfY3JlYXRlUGx1Z2luIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsIm1hcm9vbiIsInRlYWwiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJwaW5rIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJnIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJfaHNsRXhwIiwiX3RpY2tlckFjdGl2ZSIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2lkIiwiX3JlcSIsIl9yYWYiLCJfc2VsZiIsIl9kZWx0YSIsIl90aWNrIiwiZWxhcHNlZCIsIm1hbnVhbCIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiYWRqdXN0ZWRMYWciLCJJbmZpbml0eSIsIl9mcHMiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInZhbCIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3ZhbHVlSW5QYXJlbnRoZXNlcyIsIl9jb25maWdFYXNlRnJvbVN0cmluZyIsIl9DRSIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsInlveW9FYXNlIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsIl9pbnNlcnRFYXNlIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImxvd2VyY2FzZU5hbWUiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDMiLCJhc2luIiwiX2NvbmZpZ0JhY2siLCJvdmVyc2hvb3QiLCJwb3dlciIsIkxpbmVhciIsImVhc2VOb25lIiwibm9uZSIsIm4xIiwibjIiLCJuMyIsIlN0ZXBwZWRFYXNlIiwiaW1tZWRpYXRlU3RhcnQiLCJ5b3lvIiwic3RhcnRUaW1lIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIl9wcyIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsImluY2x1ZGVEZWxheSIsImF0VGltZSIsInJlc3VtZSIsIm9uRnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJzdGFnZ2VyVG8iLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGVQYXJhbXMiLCJzdGFnZ2VyRnJvbSIsInN0YWdnZXJGcm9tVG8iLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicmV3aW5kaW5nIiwiZG9lc1dyYXAiLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJfdGFyZ2V0cyIsIl9vblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwiX3NldHRlclBsYWluIiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9mb3JjZUFsbFByb3BUd2VlbnMiLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9wcm9jZXNzVmFycyIsIl9wYXJzZUZ1bmNPclN0cmluZyIsInB0TG9va3VwIiwicHJpb3JpdHkiLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJjbGVhblZhcnMiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwiX3B0Q2FjaGUiLCJfb3AiLCJfb25Jbml0IiwiX3VwZGF0ZVByb3BUd2VlbnMiLCJzdGFydElzUmVsYXRpdmUiLCJza2lwUmVjdXJzaW9uIiwicHRDYWNoZSIsInJvb3RQVCIsIl9hZGRBbGlhc2VzVG9WYXJzIiwicHJvcGVydHlBbGlhc2VzIiwiX3BhcnNlS2V5ZnJhbWUiLCJhbGxQcm9wcyIsImVhc2VFYWNoIiwiX3N0YWdnZXJUd2VlblByb3BzIiwiX3N0YWdnZXJQcm9wc1RvU2tpcCIsIl9BbmltYXRpb24yIiwic2tpcEluaGVyaXQiLCJfdGhpczMiLCJfdGhpczMkdmFycyIsImN1clRhcmdldCIsInN0YWdnZXJGdW5jIiwic3RhZ2dlclZhcnNUb01lcmdlIiwia2YiLCJfcHJvdG8zIiwiaXNOZWdhdGl2ZSIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwiX3NldHRlcldpdGhNb2RpZmllciIsIm1TZXQiLCJtdCIsInB0MiIsImZpcnN0IiwibGFzdCIsInJlbmRlcmVyIiwiX3Byb3RvNCIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfbGFzdE1lZGlhVGltZSIsIl9jb250ZXh0SUQiLCJfb25NZWRpYUNoYW5nZSIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwiYW55TWF0Y2giLCJvbk1hdGNoIiwiQ29udGV4dCIsIl9yIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImdldFR3ZWVucyIsIl90aGlzNCIsIk1hdGNoTWVkaWEiLCJjb250ZXh0cyIsIl9wcm90bzYiLCJjb25kIiwibXEiLCJhY3RpdmUiLCJfbGVuMiIsIl9rZXkyIiwiZ2V0dGVyIiwic2V0dGVycyIsInF1aWNrVG8iLCJfc2V0RGVmYXVsdHMyIiwiaXNUd2VlbmluZyIsInJlZ2lzdGVyRWZmZWN0IiwiZWZmZWN0IiwicGx1Z2lucyIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsImluc3RhbGwiLCJlZmZlY3RzIiwiZ2xvYmFsVGltZWxpbmUiLCJ0b0FkZCIsIl9nZXRQbHVnaW5Qcm9wVHdlZW4iLCJfYWRkTW9kaWZpZXJzIiwiX2J1aWxkTW9kaWZpZXJQbHVnaW4iLCJQb3dlcjAiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJRdWFkIiwiQ3ViaWMiLCJRdWFydCIsIlF1aW50IiwiU3Ryb25nIiwiRWxhc3RpYyIsIkJhY2siLCJCb3VuY2UiLCJTaW5lIiwiRXhwbyIsIkNpcmMiLCJnc2FwV2l0aENTUyIsIlR3ZWVuTWF4V2l0aENTUyIsIl9zdmdQYXRoRXhwIiwiX251bWJlcnNFeHAiLCJfc2NpZW50aWZpYyIsIl9zZWxlY3RvckV4cCIsIl9sYXJnZU51bSIsIl90ZW1wIiwiX3RlbXAyIiwiX3JvdW5kaW5nTnVtIiwiX3dyYXBQcm9ncmVzcyIsIl9zcGxpdFNlZ21lbnQiLCJyYXdQYXRoIiwic2VnSW5kZXgiLCJzdWJkaXZpZGVTZWdtZW50IiwiX2dldFNhbXBsZUluZGV4Iiwic2FtcGxlcyIsIl9yZXZlcnNlUmF3UGF0aCIsInNraXBPdXRlciIsInJldmVyc2VTZWdtZW50IiwiX2NvcHlNZXRhRGF0YSIsInRvdGFsTGVuZ3RoIiwibWluTGVuZ3RoIiwicmVzb2x1dGlvbiIsInRvdGFsUG9pbnRzIiwiX2FwcGVuZE9yTWVyZ2UiLCJwcmV2U2VnIiwiX2Jlc3REaXN0YW5jZSIsImdldFJhd1BhdGgiLCJfZ3NQYXRoIiwiY29weVJhd1BhdGgiLCJfY3JlYXRlUGF0aCIsImF0dHIiLCJhdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlTlMiLCJub2RlVmFsdWUiLCJfdHlwZUF0dHJzIiwiY2lyY2xlIiwiZWxsaXBzZSIsImxpbmUiLCJfYXR0clRvT2JqIiwiYXR0cnMiLCJjb252ZXJ0VG9QYXRoIiwic3dhcCIsImNpcmMiLCJyeSIsInJjaXJjIiwicnljaXJjIiwieDUiLCJ4NiIsInk1IiwieTYiLCJyeCIsIl9nc1Jhd1BhdGgiLCJnZXRSb3RhdGlvbkF0UHJvZ3Jlc3MiLCJnZXRQcm9ncmVzc0RhdGEiLCJnZXRSb3RhdGlvbkF0QmV6aWVyVCIsInNsaWNlUmF3UGF0aCIsImxvb3BzIiwiY2FjaGVSYXdQYXRoTWVhc3VyZW1lbnRzIiwiZVNlZyIsInNTZWciLCJlU2VnSW5kZXgiLCJzU2VnSW5kZXgiLCJlaSIsInNpIiwic2FtZVNlZ21lbnQiLCJzYW1lQmV6aWVyIiwid3JhcHNCZWhpbmQiLCJzU2hpZnQiLCJlU2hpZnQiLCJ0b3RhbFNlZ21lbnRzIiwibWVhc3VyZVNlZ21lbnQiLCJiZXppZXJRdHkiLCJzYW1wbGVzSW5kZXgiLCJwcmV2TGVuZ3RoIiwieGQiLCJ4ZDEiLCJ5ZCIsInlkMSIsImludiIsImxlbmd0aEluZGV4Iiwic2VnTGVuZ3RoIiwicGF0aExlbmd0aCIsImF4IiwiYXkiLCJjcDF4IiwiY3AxeSIsImNwMngiLCJjcDJ5IiwiYngiLCJieSIsIngxYSIsInkxYSIsIngyYSIsInkyYSIsImRlY29yYXRlZSIsInB1c2hUb05leHRJZkF0RW5kIiwiZ2V0UG9zaXRpb25PblBhdGgiLCJpbmNsdWRlQW5nbGUiLCJhcmNUb1NlZ21lbnQiLCJsYXN0WCIsImxhc3RZIiwibGFyZ2VBcmNGbGFnIiwic3dlZXBGbGFnIiwiYW5nbGVSYWQiLCJjb3NBbmdsZSIsInNpbkFuZ2xlIiwiVFdPUEkiLCJkeDIiLCJkeTIiLCJ4MV9zcSIsInkxX3NxIiwicmFkaWlDaGVjayIsInJ4X3NxIiwicnlfc3EiLCJzcSIsImNvZWYiLCJjeDEiLCJjeTEiLCJzeDIiLCJzeTIiLCJ1eCIsInV5IiwidngiLCJ2eSIsImFuZ2xlU3RhcnQiLCJhY29zIiwiYW5nbGVFeHRlbnQiLCJzZWdtZW50cyIsImFuZ2xlSW5jcmVtZW50IiwiY29udHJvbExlbmd0aCIsIm1hIiwibWIiLCJtYyIsIm1kIiwicmVsYXRpdmVYIiwicmVsYXRpdmVZIiwidHdvVGhpcmRzIiwiZXJyb3JNZXNzYWdlIiwiY29tbWFuZCIsImlzUmVsYXRpdmUiLCJkaWZYIiwiZGlmWSIsImJlemllcnMiLCJwcmV2Q29tbWFuZCIsImZsYWcxIiwiZmxhZzIiLCJleCIsImV5IiwiY2xvc2VkIiwiYmV6aWVyVG9Qb2ludHMiLCJmbGF0UG9pbnRzVG9TZWdtZW50IiwiY3VydmluZXNzIiwicG9pbnRzVG9TZWdtZW50IiwibmV4dFgiLCJuZXh0WSIsImR4MSIsImR5MSIsInIxIiwicjIiLCJyMyIsIm14MSIsIm14MiIsIm14bSIsIm15MSIsIm15MiIsIm15bSIsInBvaW50VG9TZWdEaXN0Iiwic2ltcGxpZnlTdGVwIiwic2ltcGxpZmllZCIsIm1heFNxRGlzdCIsImZpcnN0WCIsImZpcnN0WSIsInNpbXBsaWZ5UG9pbnRzIiwiZ2V0Q2xvc2VzdFByb2dyZXNzT25CZXppZXIiLCJpdGVyYXRpb25zIiwicHkiLCJzbGljZXMiLCJ4MCIsInkwIiwiYmVzdCIsImdldENsb3Nlc3REYXRhIiwiYmVzdERpc3RhbmNlIiwic3ViZGl2aWRlU2VnbWVudE5lYXIiLCJiZXN0VCIsImJlc3RTZWdtZW50SW5kZXgiLCJzbCIsIm5vcm1hbGl6ZVVybCIsInJlcXVpcmUiLCJzcmNCeU1vZHVsZUlkIiwibm9Eb2N1bWVudCIsImZ1bmN0aW9uQ2FsbCIsIm5vb3AiLCJnZXRDdXJyZW50U2NyaXB0VXJsIiwibW9kdWxlSWQiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsInVwZGF0ZUNzcyIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwidmlzaXRlZCIsIm5ld0VsIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2FkZWQiLCJyZWxvYWRBbGwiLCJvcHRpb25zIiwiZ2V0U2NyaXB0U3JjIiwicmVsb2FkZWQiLCJsb2NhbHMiLCJwYXRoQ29tcG9uZW50cyIsInVybFN0cmluZyIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiV2ViU29ja2V0Q2xpZW50IiwiY2xpZW50IiwiV2ViU29ja2V0Iiwib25lcnJvciIsIm9uT3BlbiIsIm9ub3BlbiIsIm9uQ2xvc2UiLCJvbmNsb3NlIiwib25NZXNzYWdlIiwib25tZXNzYWdlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2VicGFja0hvdExvZyIsImhvdEVtaXR0ZXIiLCJzb2NrZXQiLCJmb3JtYXRQcm9ibGVtIiwiY3JlYXRlT3ZlcmxheSIsInNldExvZ0xldmVsIiwic2VuZE1lc3NhZ2UiLCJpc1Byb2dyZXNzU3VwcG9ydGVkIiwiZGVmaW5lUHJvZ3Jlc3NFbGVtZW50IiwiZGVjb2RlT3ZlcmxheU9wdGlvbnMiLCJvdmVybGF5T3B0aW9ucyIsIm92ZXJsYXlGaWx0ZXJGdW5jdGlvblN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzVW5sb2FkaW5nIiwiY3VycmVudEhhc2giLCJfX3dlYnBhY2tfaGFzaF9fIiwiZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwicGFyc2VVUkwiLCJyZXNvdXJjZVF1ZXJ5IiwicGFpciIsInNjcmlwdFNvdXJjZSIsInNjcmlwdFNvdXJjZVVSTCIsImZyb21DdXJyZW50U2NyaXB0IiwicGFyc2VkUmVzb3VyY2VRdWVyeSIsIl9fcmVzb3VyY2VRdWVyeSIsImVuYWJsZWRGZWF0dXJlcyIsIlByb2dyZXNzIiwiT3ZlcmxheSIsImhvdCIsImxpdmVSZWxvYWQiLCJwYXJzZSIsImVycm9ycyIsIndhcm5pbmdzIiwicnVudGltZUVycm9ycyIsImxvZ2dpbmciLCJyZWNvbm5lY3QiLCJzZXRBbGxMb2dMZXZlbCIsImxldmVsIiwibG9nRW5hYmxlZEZlYXR1cmVzIiwiZmVhdHVyZXMiLCJsaXN0RW5hYmxlZEZlYXR1cmVzIiwibG9nU3RyaW5nIiwiaW5mbyIsInRydXN0ZWRUeXBlc1BvbGljeU5hbWUiLCJjYXRjaFJ1bnRpbWVFcnJvciIsInNlbmQiLCJyZWxvYWRBcHAiLCJjdXJyZW50U3RhdHVzIiwicHJldmlvdXNIYXNoIiwiaXNJbml0aWFsIiwiYXBwbHlSZWxvYWQiLCJyb290V2luZG93IiwiaW50ZXJ2YWxJZCIsInJlbG9hZCIsImFsbG93VG9Ib3QiLCJhbGxvd1RvTGl2ZVJlbG9hZCIsInBvc3RNZXNzYWdlIiwiYW5zaVJlZ2V4Iiwic3RyaXBBbnNpIiwic3RyaW5nIiwib25Tb2NrZXRNZXNzYWdlIiwiaW52YWxpZCIsImhhc2giLCJfaGFzaCIsInByb2dyZXNzVXBkYXRlIiwicGVyY2VudCIsIm1zZyIsInN0aWxsT2siLCJzdGF0aWNDaGFuZ2VkIiwiZmlsZSIsIl93YXJuaW5ncyIsInByaW50YWJsZVdhcm5pbmdzIiwiX2Zvcm1hdFByb2JsZW0iLCJoZWFkZXIiLCJvdmVybGF5V2FybmluZ3NTZXR0aW5nIiwid2FybmluZ3NUb0Rpc3BsYXkiLCJtZXNzYWdlcyIsInByZXZlbnRSZWxvYWRpbmciLCJfZXJyb3JzIiwicHJpbnRhYmxlRXJyb3JzIiwiX2Zvcm1hdFByb2JsZW0yIiwib3ZlcmxheUVycm9yc1NldHRpbmdzIiwiZXJyb3JzVG9EaXNwbGF5IiwiX2Vycm9yIiwiZm9ybWF0VVJMIiwib2JqVVJMIiwiYXV0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImhvc3RuYW1lIiwicG9ydCIsInNsYXNoZXMiLCJjcmVhdGVTb2NrZXRVUkwiLCJwYXJzZWRVUkwiLCJpc0luQWRkckFueSIsInNvY2tldFVSTFByb3RvY29sIiwic29ja2V0VVJMQXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzb2NrZXRVUkxIb3N0bmFtZSIsInNvY2tldFVSTFBvcnQiLCJzb2NrZXRVUkxQYXRobmFtZSIsInNvY2tldFVSTCIsIl9fd2VicGFja19tb2R1bGVzX18iLCIuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvdGFwYWJsZS5qcyIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJTeW5jQmFpbEhvb2siLCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qcyIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJfYXJyYXlMaWtlVG9BcnJheSIsIkxvZ1R5cGUiLCJmcmVlemUiLCJkZWJ1ZyIsInRyYWNlIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicHJvZmlsZSIsInByb2ZpbGVFbmQiLCJMT0dfU1lNQk9MIiwiVElNRVJTX1NZTUJPTCIsIlRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCIsIldlYnBhY2tMb2dnZXIiLCJnZXRDaGlsZExvZ2dlciIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiX2xlbjUiLCJfa2V5NSIsImFzc2VydCIsImFzc2VydGlvbiIsIl9sZW42IiwiX2tleTYiLCJfbGVuNyIsIl9rZXk3IiwiX2xlbjgiLCJfa2V5OCIsIl9sZW45IiwiX2tleTkiLCJNYXAiLCJwcm9jZXNzIiwiaHJ0aW1lIiwidGltZUxvZyIsInRpbWVFbmQiLCJ0aW1lQWdncmVnYXRlIiwidGltZUFnZ3JlZ2F0ZUVuZCIsIkxvZ2dlciIsIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsImRvbmUiLCJyZXR1cm4iLCJfcmVxdWlyZSIsImZpbHRlclRvRnVuY3Rpb24iLCJyZWdFeHAiLCJpZGVudCIsIkxvZ0xldmVsIiwiZmFsc2UiLCJ0cnVlIiwidmVyYm9zZSIsIl9yZWYkbGV2ZWwiLCJfcmVmJGRlYnVnIiwiZGVidWdGaWx0ZXJzIiwibG9nbGV2ZWwiLCJsb2dnZXIiLCJsYWJlbGVkQXJncyIsIl9hcmdzIiwibG9nVGltZSIsIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiX3JlcXVpcmUyIiwiY3JlYXRlQ29uc29sZUxvZ2dlciIsImN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyIsImN1cnJlbnREZWZhdWx0TG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiaG9va3MiLCJjaGlsZE5hbWUiLCJjb25maWd1cmVEZWZhdWx0TG9nZ2VyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiY2FjaGVkTW9kdWxlIiwiZGVmaW5pdGlvbiIsInRvU3RyaW5nVGFnIiwid2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fIiwiX193ZWJwYWNrX2lfXyIsIl9fZXNNb2R1bGUiLCJnZXRDb2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsImNoYXJDb2RlQXQiLCJyZXBsYWNlVXNpbmdSZWdFeHAiLCJtYWNyb1RleHQiLCJtYWNyb1JlZ0V4cCIsIm1hY3JvUmVwbGFjZXIiLCJyZXBsYWNlTWF0Y2giLCJyZXBsYWNlUmVzdWx0IiwicmVwbGFjZUxhc3RJbmRleCIsInJlcGxhY2VJbnB1dCIsInJlZmVyZW5jZXMiLCJlbmNvZGUiLCJjcmVhdGVNYWNoaW5lIiwic3RhdGVzIiwiaW5pdGlhbCIsImFjdGlvbnMiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50Q29udGV4dCIsImN1cnJlbnRTdGF0ZU9uIiwidHJhbnNpdGlvbkNvbmZpZyIsImFjdE5hbWUiLCJhY3Rpb25JbXBsIiwibmV4dENvbnRleHRWYWx1ZSIsImNyZWF0ZU92ZXJsYXlNYWNoaW5lIiwiaGlkZU92ZXJsYXkiLCJzaG93T3ZlcmxheSIsIm1lc3NhZ2VTb3VyY2UiLCJCVUlMRF9FUlJPUiIsIlJVTlRJTUVfRVJST1IiLCJkaXNwbGF5QnVpbGRFcnJvciIsIkRJU01JU1MiLCJkaXNwbGF5UnVudGltZUVycm9yIiwiZGlzbWlzc01lc3NhZ2VzIiwiYXBwZW5kTWVzc2FnZXMiLCJzZXRNZXNzYWdlcyIsInBhcnNlRXJyb3JUb1N0YWNrcyIsInN0YWNrIiwibGlzdGVuVG9SdW50aW1lRXJyb3IiLCJjbGVhbnVwIiwibGlzdGVuVG9VbmhhbmRsZWRSZWplY3Rpb24iLCJtc2dTdHlsZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpZnJhbWVTdHlsZSIsImNvbnRhaW5lclN0eWxlIiwicGFkZGluZyIsImhlYWRlclN0eWxlIiwiZm9udEZhbWlseSIsIm1hcmdpbiIsIm1heEhlaWdodCIsImRpc21pc3NCdXR0b25TdHlsZSIsImN1cnNvciIsIm1zZ1R5cGVTdHlsZSIsIm1hcmdpbkJvdHRvbSIsIm1zZ1RleHRTdHlsZSIsIm1vZHVsZU5hbWUiLCJsb2MiLCJpZnJhbWVDb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyRWxlbWVudCIsImhlYWRlckVsZW1lbnQiLCJvbkxvYWRRdWV1ZSIsIm92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kiLCJhcHBseVN0eWxlIiwiY3JlYXRlQ29udGFpbmVyIiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsIm9ubG9hZCIsImNvbnRlbnRFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiY2xvc2VCdXR0b25FbGVtZW50IiwiYXJpYUxhYmVsIiwib3ZlcmxheVNlcnZpY2UiLCJvbkxvYWQiLCJlbnN1cmVPdmVybGF5RXhpc3RzIiwiZW50cnlFbGVtZW50IiwibXNnU3R5bGUiLCJ0eXBlRWxlbWVudCIsIm1vZHVsZUlkZW50aWZpZXIiLCJtZXNzYWdlVGV4dE5vZGUiLCJfcmVmMyRsZXZlbCIsImhhbmRsZUVycm9yIiwiZmFsbGJhY2tNZXNzYWdlIiwiZXJyb3JPYmplY3QiLCJzaG91bGREaXNwbGF5IiwiZXJyb3JFdmVudCIsImluY2x1ZGVzIiwicHJvbWlzZVJlamVjdGlvbkV2ZW50IiwicmVhc29uIiwiX2NhbGxTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsImNvbnN0cnVjdCIsIl9pbmhlcml0cyIsIl9zZXRQcm90b3R5cGVPZiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfaXNOYXRpdmVGdW5jdGlvbiIsImhhcyIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwiX2Fzc2VydENsYXNzQnJhbmQiLCJhdHRhY2hTaGFkb3ciLCJfV2VicGFja0RldlNlcnZlclByb2dyZXNzIiwiY3VzdG9tRWxlbWVudHMiLCJfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kIiwiV2Vha1NldCIsIldlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyIsIl9IVE1MRWxlbWVudCIsIm1vZGUiLCJtYXhEYXNoT2Zmc2V0IiwiYW5pbWF0aW9uVGltZXIiLCJjb25uZWN0ZWRDYWxsYmFjayIsIl9yZXNldCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJfdXBkYXRlIiwiX3RoaXMkZ2V0QXR0cmlidXRlIiwiX051bWJlciIsInR5cGVBdHRyIiwiX2NpcmN1bGFyVGVtcGxhdGUiLCJfbGluZWFyVGVtcGxhdGUiLCJzaGFkb3dSb290IiwiaW5pdGlhbFByb2dyZXNzIiwic3Ryb2tlRGFzaG9mZnNldCIsIl9oaWRlIiwiX3Nob3ciLCJkZWZpbmUiLCJDbGllbnQiLCJfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyIsInJldHJpZXMiLCJtYXhSZXRyaWVzIiwiaW5pdFNvY2tldCIsImhhbmRsZXJzIiwicmV0cnlJbk1zIiwiZGVmYXVsdExldmVsIiwic2VuZE1zZyIsIldvcmtlckdsb2JhbFNjb3BlIiwibGFzdEhhc2giLCJ1cFRvRGF0ZSIsImNoZWNrIiwidXBkYXRlZE1vZHVsZXMiLCJjYXRjaCIsImZvcm1hdEVycm9yIiwicmVuZXdlZE1vZHVsZXMiLCJ1bmFjY2VwdGVkTW9kdWxlcyIsInBhcnRzIiwibnVtYmVySWRzIiwiZXZlcnkiLCJsb2dMZXZlbCIsImR1bW15Iiwic2hvdWxkTG9nIiwibG9nR3JvdXAiLCJsb2dGbiJdLCJzb3VyY2VSb290IjoiIn0=